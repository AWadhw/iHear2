
N-Channel-Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800aff4  0800aff4  0001aff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b324  0800b324  00020480  2**0
                  CONTENTS
  4 .ARM          00000008  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b32c  0800b32c  00020480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  0800b334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000480  0800b7b4  00020480  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  0800b7b4  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011604  00000000  00000000  00020572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003168  00000000  00000000  00031b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bdb  00000000  00000000  00035c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019423  00000000  00000000  0003684b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b90  00000000  00000000  0004fc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d61f  00000000  00000000  000657fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048c8  00000000  00000000  000f2e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f76e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000480 	.word	0x20000480
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afdc 	.word	0x0800afdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000484 	.word	0x20000484
 80001dc:	0800afdc 	.word	0x0800afdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005dc:	b40f      	push	{r0, r1, r2, r3}
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <myprintf+0x44>)
 80005f4:	f009 fa6a 	bl	8009acc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <myprintf+0x44>)
 80005fa:	f7ff fdf1 	bl	80001e0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060a:	4905      	ldr	r1, [pc, #20]	; (8000620 <myprintf+0x44>)
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <myprintf+0x48>)
 800060e:	f003 fcd8 	bl	8003fc2 <HAL_UART_Transmit>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr
 8000620:	200007f0 	.word	0x200007f0
 8000624:	200005a8 	.word	0x200005a8

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fdc4 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f924 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 fa54 	bl	8000ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 800063c:	f000 fa32 	bl	8000aa4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000640:	f000 fa06 	bl	8000a50 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 8000644:	f000 f9a0 	bl	8000988 <MX_I2S2_Init>
  MX_CRC_Init();
 8000648:	f000 f982 	bl	8000950 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 800064c:	f007 f962 	bl	8007914 <MX_PDM2PCM_Init>
  MX_SPI5_Init();
 8000650:	f000 f9c8 	bl	80009e4 <MX_SPI5_Init>
  MX_FATFS_Init();
 8000654:	f004 f82a 	bl	80046ac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, &dataIn_PDM[0], 64); //size in bytes so we divide by 2
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	4976      	ldr	r1, [pc, #472]	; (8000834 <main+0x20c>)
 800065c:	4876      	ldr	r0, [pc, #472]	; (8000838 <main+0x210>)
 800065e:	f001 fdd9 	bl	8002214 <HAL_I2S_Receive_DMA>
  /*BELOW ADDED FOR SD_CARD*/
  myprintf("\r\n~ SD card demo by Azaan~\r\n\r\n");
 8000662:	4876      	ldr	r0, [pc, #472]	; (800083c <main+0x214>)
 8000664:	f7ff ffba 	bl	80005dc <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f000 fe18 	bl	80012a0 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000670:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000674:	2201      	movs	r2, #1
 8000676:	4972      	ldr	r1, [pc, #456]	; (8000840 <main+0x218>)
 8000678:	4618      	mov	r0, r3
 800067a:	f006 fa9d 	bl	8006bb8 <f_mount>
 800067e:	4603      	mov	r3, r0
 8000680:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000684:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000688:	2b00      	cmp	r3, #0
 800068a:	d006      	beq.n	800069a <main+0x72>
  	myprintf("f_mount error (%i)\r\n", fres);
 800068c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000690:	4619      	mov	r1, r3
 8000692:	486c      	ldr	r0, [pc, #432]	; (8000844 <main+0x21c>)
 8000694:	f7ff ffa2 	bl	80005dc <myprintf>
  	while(1);
 8000698:	e7fe      	b.n	8000698 <main+0x70>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 800069a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800069e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a2:	4619      	mov	r1, r3
 80006a4:	4866      	ldr	r0, [pc, #408]	; (8000840 <main+0x218>)
 80006a6:	f006 ffe7 	bl	8007678 <f_getfree>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 80006b0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d006      	beq.n	80006c6 <main+0x9e>
  	myprintf("f_getfree error (%i)\r\n", fres);
 80006b8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006bc:	4619      	mov	r1, r3
 80006be:	4862      	ldr	r0, [pc, #392]	; (8000848 <main+0x220>)
 80006c0:	f7ff ff8c 	bl	80005dc <myprintf>
  	while(1);
 80006c4:	e7fe      	b.n	80006c4 <main+0x9c>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006c6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006ca:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	3b02      	subs	r3, #2
 80006d4:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80006d8:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	8952      	ldrh	r2, [r2, #10]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    free_sectors = free_clusters * getFreeFs->csize;
 80006e8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006ec:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	895b      	ldrh	r3, [r3, #10]
 80006f4:	461a      	mov	r2, r3
 80006f6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006fa:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000708:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800070c:	0859      	lsrs	r1, r3, #1
 800070e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	461a      	mov	r2, r3
 8000716:	484d      	ldr	r0, [pc, #308]	; (800084c <main+0x224>)
 8000718:	f7ff ff60 	bl	80005dc <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 800071c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000720:	2201      	movs	r2, #1
 8000722:	494b      	ldr	r1, [pc, #300]	; (8000850 <main+0x228>)
 8000724:	4618      	mov	r0, r3
 8000726:	f006 fa8d 	bl	8006c44 <f_open>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000730:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <main+0x118>
  	myprintf("f_open error (%i)\r\n");
 8000738:	4846      	ldr	r0, [pc, #280]	; (8000854 <main+0x22c>)
 800073a:	f7ff ff4f 	bl	80005dc <myprintf>
  	while(1);
 800073e:	e7fe      	b.n	800073e <main+0x116>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000740:	4845      	ldr	r0, [pc, #276]	; (8000858 <main+0x230>)
 8000742:	f7ff ff4b 	bl	80005dc <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000746:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	211e      	movs	r1, #30
 8000750:	4618      	mov	r0, r3
 8000752:	f007 f846 	bl	80077e2 <f_gets>
 8000756:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
    if(rres != 0) {
 800075a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <main+0x148>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4619      	mov	r1, r3
 8000768:	483c      	ldr	r0, [pc, #240]	; (800085c <main+0x234>)
 800076a:	f7ff ff37 	bl	80005dc <myprintf>
 800076e:	e005      	b.n	800077c <main+0x154>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8000770:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000774:	4619      	mov	r1, r3
 8000776:	483a      	ldr	r0, [pc, #232]	; (8000860 <main+0x238>)
 8000778:	f7ff ff30 	bl	80005dc <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800077c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000780:	4618      	mov	r0, r3
 8000782:	f006 ff4f 	bl	8007624 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800078a:	221a      	movs	r2, #26
 800078c:	4935      	ldr	r1, [pc, #212]	; (8000864 <main+0x23c>)
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fa58 	bl	8006c44 <f_open>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 800079a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d103      	bne.n	80007aa <main+0x182>
  	myprintf("I was able to open 'write.txt' for writing\r\n");
 80007a2:	4831      	ldr	r0, [pc, #196]	; (8000868 <main+0x240>)
 80007a4:	f7ff ff1a 	bl	80005dc <myprintf>
 80007a8:	e005      	b.n	80007b6 <main+0x18e>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 80007aa:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007ae:	4619      	mov	r1, r3
 80007b0:	4828      	ldr	r0, [pc, #160]	; (8000854 <main+0x22c>)
 80007b2:	f7ff ff13 	bl	80005dc <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <main+0x244>)
 80007bc:	461c      	mov	r4, r3
 80007be:	4615      	mov	r5, r2
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	682b      	ldr	r3, [r5, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	8022      	strh	r2, [r4, #0]
 80007ca:	3402      	adds	r4, #2
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	f107 0108 	add.w	r1, r7, #8
 80007d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80007da:	2213      	movs	r2, #19
 80007dc:	f006 fd2f 	bl	800723e <f_write>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 80007e6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d109      	bne.n	8000802 <main+0x1da>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007ee:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80007f2:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <main+0x248>)
 80007fc:	f7ff feee 	bl	80005dc <myprintf>
 8000800:	e002      	b.n	8000808 <main+0x1e0>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x24c>)
 8000804:	f7ff feea 	bl	80005dc <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800080c:	4618      	mov	r0, r3
 800080e:	f006 ff09 	bl	8007624 <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000812:	2200      	movs	r2, #0
 8000814:	490a      	ldr	r1, [pc, #40]	; (8000840 <main+0x218>)
 8000816:	2000      	movs	r0, #0
 8000818:	f006 f9ce 	bl	8006bb8 <f_mount>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World \n");
 800081c:	4816      	ldr	r0, [pc, #88]	; (8000878 <main+0x250>)
 800081e:	f009 f8df 	bl	80099e0 <puts>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000822:	2120      	movs	r1, #32
 8000824:	4815      	ldr	r0, [pc, #84]	; (800087c <main+0x254>)
 8000826:	f001 fb9a 	bl	8001f5e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f000 fd37 	bl	80012a0 <HAL_Delay>
	  printf("Hello World \n");
 8000832:	e7f3      	b.n	800081c <main+0x1f4>
 8000834:	200005ec 	.word	0x200005ec
 8000838:	200004a8 	.word	0x200004a8
 800083c:	0800aff4 	.word	0x0800aff4
 8000840:	0800b014 	.word	0x0800b014
 8000844:	0800b018 	.word	0x0800b018
 8000848:	0800b030 	.word	0x0800b030
 800084c:	0800b048 	.word	0x0800b048
 8000850:	0800b090 	.word	0x0800b090
 8000854:	0800b09c 	.word	0x0800b09c
 8000858:	0800b0b0 	.word	0x0800b0b0
 800085c:	0800b0e0 	.word	0x0800b0e0
 8000860:	0800b10c 	.word	0x0800b10c
 8000864:	0800b120 	.word	0x0800b120
 8000868:	0800b12c 	.word	0x0800b12c
 800086c:	0800b15c 	.word	0x0800b15c
 8000870:	0800b170 	.word	0x0800b170
 8000874:	0800b194 	.word	0x0800b194
 8000878:	0800b1ac 	.word	0x0800b1ac
 800087c:	40020000 	.word	0x40020000

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f009 f9c0 	bl	8009c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <SystemClock_Config+0xc8>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a26      	ldr	r2, [pc, #152]	; (8000948 <SystemClock_Config+0xc8>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <SystemClock_Config+0xcc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a20      	ldr	r2, [pc, #128]	; (800094c <SystemClock_Config+0xcc>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008f4:	2360      	movs	r3, #96	; 0x60
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f8f5 	bl	8002af4 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000910:	f000 f9a2 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2103      	movs	r1, #3
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fb57 	bl	8002fe4 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800093c:	f000 f98c 	bl	8000c58 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3750      	adds	r7, #80	; 0x50
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_CRC_Init+0x30>)
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <MX_CRC_Init+0x34>)
 8000958:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_CRC_Init+0x30>)
 800095c:	f000 fdd5 	bl	800150a <HAL_CRC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000966:	f000 f977 	bl	8000c58 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <MX_CRC_Init+0x30>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <MX_CRC_Init+0x30>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200004a0 	.word	0x200004a0
 8000984:	40023000 	.word	0x40023000

08000988 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_I2S2_Init+0x54>)
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <MX_I2S2_Init+0x58>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2S2_Init+0x54>)
 8000994:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000998:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_I2S2_Init+0x54>)
 800099c:	2210      	movs	r2, #16
 800099e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_I2S2_Init+0x54>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_I2S2_Init+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_I2S2_Init+0x54>)
 80009ae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009b2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_I2S2_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_I2S2_Init+0x54>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_I2S2_Init+0x54>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_I2S2_Init+0x54>)
 80009c8:	f001 fae4 	bl	8001f94 <HAL_I2S_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80009d2:	f000 f941 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200004a8 	.word	0x200004a8
 80009e0:	40003800 	.word	0x40003800

080009e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <MX_SPI5_Init+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a18:	2230      	movs	r2, #48	; 0x30
 8000a1a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a30:	220a      	movs	r2, #10
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a36:	f002 fe45 	bl	80036c4 <HAL_SPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a40:	f000 f90a 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000550 	.word	0x20000550
 8000a4c:	40015000 	.word	0x40015000

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART2_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a88:	f003 fa4e 	bl	8003f28 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f8e1 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200005a8 	.word	0x200005a8
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_DMA_Init+0x3c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <MX_DMA_Init+0x3c>)
 8000ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_DMA_Init+0x3c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200e      	movs	r0, #14
 8000acc:	f000 fce7 	bl	800149e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ad0:	200e      	movs	r0, #14
 8000ad2:	f000 fd00 	bl	80014d6 <HAL_NVIC_EnableIRQ>

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a36      	ldr	r2, [pc, #216]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_GPIO_Init+0xfc>)
 8000b70:	f001 f9dc 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2102      	movs	r1, #2
 8000b78:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0x100>)
 8000b7a:	f001 f9d7 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_GPIO_Init+0x104>)
 8000b96:	f001 f845 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0xfc>)
 8000bb2:	f001 f837 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0x100>)
 8000bce:	f001 f829 	bl	8001c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40020800 	.word	0x40020800

08000bec <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e009      	b.n	8000c12 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fcc0 	bl	800058c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbf1      	blt.n	8000bfe <_write+0x12>
	}
	return len;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	//sample_i2s = dataIn_PDM[0];
	PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_I2S_RxCpltCallback+0x24>)
 8000c2e:	4907      	ldr	r1, [pc, #28]	; (8000c4c <HAL_I2S_RxCpltCallback+0x28>)
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <HAL_I2S_RxCpltCallback+0x2c>)
 8000c32:	f008 fd65 	bl	8009700 <PDM_Filter>
	//MX_PDM2PCM_Process(&data_i2s[0], &processedData[0]);
	myData = processedData[0];
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_I2S_RxCpltCallback+0x28>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2S_RxCpltCallback+0x30>)
 8000c3c:	801a      	strh	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000940 	.word	0x20000940
 8000c4c:	200006f0 	.word	0x200006f0
 8000c50:	200005ec 	.word	0x200005ec
 8000c54:	200006ec 	.word	0x200006ec

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fbf0 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_CRC_MspInit+0x3c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023000 	.word	0x40023000
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b090      	sub	sp, #64	; 0x40
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <HAL_I2S_MspInit+0x15c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	f040 808f 	bne.w	8000e4c <HAL_I2S_MspInit+0x154>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8000d32:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000d36:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 fb6d 	bl	8003424 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8000d50:	f7ff ff82 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a37      	ldr	r2, [pc, #220]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_I2S_MspInit+0x160>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da8:	2308      	movs	r3, #8
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db8:	2305      	movs	r3, #5
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4826      	ldr	r0, [pc, #152]	; (8000e5c <HAL_I2S_MspInit+0x164>)
 8000dc4:	f000 ff2e 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000dc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de2:	4619      	mov	r1, r3
 8000de4:	481e      	ldr	r0, [pc, #120]	; (8000e60 <HAL_I2S_MspInit+0x168>)
 8000de6:	f000 ff1d 	bl	8001c24 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_I2S_MspInit+0x170>)
 8000dee:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e08:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e10:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e18:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e28:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e32:	f000 fb87 	bl	8001544 <HAL_DMA_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8000e3c:	f7ff ff0c 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_I2S_MspInit+0x16c>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3740      	adds	r7, #64	; 0x40
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40003800 	.word	0x40003800
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020400 	.word	0x40020400
 8000e64:	200004f0 	.word	0x200004f0
 8000e68:	40026058 	.word	0x40026058

08000e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <HAL_SPI_MspInit+0xc0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d14a      	bne.n	8000f24 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    PA12     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000efe:	f000 fe91 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f14:	2306      	movs	r3, #6
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <HAL_SPI_MspInit+0xcc>)
 8000f20:	f000 fe80 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40015000 	.word	0x40015000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <HAL_UART_MspInit+0x84>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12b      	bne.n	8000fb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f96:	230c      	movs	r3, #12
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000fb2:	f000 fe37 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f922 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Stream3_IRQHandler+0x10>)
 8001026:	f000 fb93 	bl	8001750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200004f0 	.word	0x200004f0

08001034 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e00a      	b.n	800105c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001046:	f3af 8000 	nop.w
 800104a:	4601      	mov	r1, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	b2ca      	uxtb	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf0      	blt.n	8001046 <_read+0x12>
  }

  return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_close>:
  }
  return len;
}

int _close(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	605a      	str	r2, [r3, #4]
  return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_isatty>:

int _isatty(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f008 fdd2 	bl	8009cb0 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20020000 	.word	0x20020000
 8001138:	00000400 	.word	0x00000400
 800113c:	200008f0 	.word	0x200008f0
 8001140:	20000ae0 	.word	0x20000ae0

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001184:	4c0b      	ldr	r4, [pc, #44]	; (80011b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001192:	f7ff ffd7 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f008 fd91 	bl	8009cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fa45 	bl	8000628 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 80011ac:	0800b334 	.word	0x0800b334
  ldr r2, =_sbss
 80011b0:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 80011b4:	20000ae0 	.word	0x20000ae0

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f94f 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fd38 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f967 	bl	80014f2 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800123c:	f000 f92f 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000400 	.word	0x20000400
 8001258:	20000408 	.word	0x20000408
 800125c:	20000404 	.word	0x20000404

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000408 	.word	0x20000408
 8001284:	200008f4 	.word	0x200008f4

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200008f4 	.word	0x200008f4

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000408 	.word	0x20000408

080012e8 <__NVIC_SetPriorityGrouping>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00e      	b.n	800153a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d105      	bne.n	8001532 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fbc1 	bl	8000cb4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff fe9a 	bl	8001288 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e099      	b.n	8001694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001580:	e00f      	b.n	80015a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001582:	f7ff fe81 	bl	8001288 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b05      	cmp	r3, #5
 800158e:	d908      	bls.n	80015a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2220      	movs	r2, #32
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e078      	b.n	8001694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_DMA_Init+0x158>)
 80015bc:	4013      	ands	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d107      	bne.n	800160c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4313      	orrs	r3, r2
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f023 0307 	bic.w	r3, r3, #7
 8001622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	4313      	orrs	r3, r2
 800162c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2b04      	cmp	r3, #4
 8001634:	d117      	bne.n	8001666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fa6f 	bl	8001b2c <DMA_CheckFifoParam>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001662:	2301      	movs	r3, #1
 8001664:	e016      	b.n	8001694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fa26 	bl	8001ac0 <DMA_CalcBaseAndBitshift>
 8001674:	4603      	mov	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	223f      	movs	r2, #63	; 0x3f
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f010803f 	.word	0xf010803f

080016a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_DMA_Start_IT+0x26>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e040      	b.n	8001748 <HAL_DMA_Start_IT+0xa8>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12f      	bne.n	800173a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2202      	movs	r2, #2
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f9b8 	bl	8001a64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	223f      	movs	r2, #63	; 0x3f
 80016fa:	409a      	lsls	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0216 	orr.w	r2, r2, #22
 800170e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0208 	orr.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e005      	b.n	8001746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001742:	2302      	movs	r3, #2
 8001744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001746:	7dfb      	ldrb	r3, [r7, #23]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800175c:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <HAL_DMA_IRQHandler+0x248>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a8e      	ldr	r2, [pc, #568]	; (800199c <HAL_DMA_IRQHandler+0x24c>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2208      	movs	r2, #8
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01a      	beq.n	80017bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0204 	bic.w	r2, r2, #4
 80017a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	2208      	movs	r2, #8
 80017aa:	409a      	lsls	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	2201      	movs	r2, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d012      	beq.n	80017f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2201      	movs	r2, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	f043 0202 	orr.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	2204      	movs	r2, #4
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d012      	beq.n	8001828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00b      	beq.n	8001828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2204      	movs	r2, #4
 8001816:	409a      	lsls	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	f043 0204 	orr.w	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	2210      	movs	r2, #16
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d043      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03c      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	2210      	movs	r2, #16
 800184c:	409a      	lsls	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d018      	beq.n	8001892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d108      	bne.n	8001880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
 800187e:	e01f      	b.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01b      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
 8001890:	e016      	b.n	80018c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2220      	movs	r2, #32
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 808f 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8087 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e6:	2220      	movs	r2, #32
 80018e8:	409a      	lsls	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d136      	bne.n	8001968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0216 	bic.w	r2, r2, #22
 8001908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <HAL_DMA_IRQHandler+0x1da>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0208 	bic.w	r2, r2, #8
 8001938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	223f      	movs	r2, #63	; 0x3f
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195a:	2b00      	cmp	r3, #0
 800195c:	d07e      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
        }
        return;
 8001966:	e079      	b.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01d      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	2b00      	cmp	r3, #0
 800198a:	d031      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
 8001994:	e02c      	b.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
 8001996:	bf00      	nop
 8001998:	20000400 	.word	0x20000400
 800199c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4798      	blx	r3
 80019b0:	e01e      	b.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10f      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0210 	bic.w	r2, r2, #16
 80019ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d032      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d022      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2205      	movs	r2, #5
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d307      	bcc.n	8001a38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f2      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x2cc>
 8001a36:	e000      	b.n	8001a3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
 8001a5a:	e000      	b.n	8001a5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a5c:	bf00      	nop
    }
  }
}
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	d108      	bne.n	8001aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aa2:	e007      	b.n	8001ab4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3b10      	subs	r3, #16
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <DMA_CalcBaseAndBitshift+0x64>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <DMA_CalcBaseAndBitshift+0x68>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d909      	bls.n	8001b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	; 0x58
 8001b00:	e007      	b.n	8001b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	aaaaaaab 	.word	0xaaaaaaab
 8001b28:	0800b250 	.word	0x0800b250

08001b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d11f      	bne.n	8001b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d856      	bhi.n	8001bfa <DMA_CheckFifoParam+0xce>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <DMA_CheckFifoParam+0x28>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b77 	.word	0x08001b77
 8001b5c:	08001b65 	.word	0x08001b65
 8001b60:	08001bfb 	.word	0x08001bfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d046      	beq.n	8001bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b74:	e043      	b.n	8001bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b7e:	d140      	bne.n	8001c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b84:	e03d      	b.n	8001c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8e:	d121      	bne.n	8001bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d837      	bhi.n	8001c06 <DMA_CheckFifoParam+0xda>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <DMA_CheckFifoParam+0x70>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bb3 	.word	0x08001bb3
 8001ba4:	08001bad 	.word	0x08001bad
 8001ba8:	08001bc5 	.word	0x08001bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb0:	e030      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d025      	beq.n	8001c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc2:	e022      	b.n	8001c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bcc:	d11f      	bne.n	8001c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bd2:	e01c      	b.n	8001c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d903      	bls.n	8001be2 <DMA_CheckFifoParam+0xb6>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d003      	beq.n	8001be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001be0:	e018      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      break;
 8001be6:	e015      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf8:	e00b      	b.n	8001c12 <DMA_CheckFifoParam+0xe6>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e00a      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e008      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
 8001c04:	e006      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
 8001c08:	e004      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e002      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c0e:	bf00      	nop
 8001c10:	e000      	b.n	8001c14 <DMA_CheckFifoParam+0xe8>
      break;
 8001c12:	bf00      	nop
    }
  } 
  
  return status; 
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e159      	b.n	8001ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8148 	bne.w	8001eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d005      	beq.n	8001c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d130      	bne.n	8001cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d017      	beq.n	8001d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a2 	beq.w	8001eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x202>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <HAL_GPIO_Init+0x2f4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x1fe>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_GPIO_Init+0x2f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x1fa>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_GPIO_Init+0x2fc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x1f6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <HAL_GPIO_Init+0x300>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x1f2>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f aea2 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	787b      	ldrb	r3, [r7, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f48:	e003      	b.n	8001f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4a:	887b      	ldrh	r3, [r7, #2]
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	041a      	lsls	r2, r3, #16
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	400b      	ands	r3, r1
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e128      	b.n	80021f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a90      	ldr	r2, [pc, #576]	; (8002200 <HAL_I2S_Init+0x26c>)
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7fe fe99 	bl	8000cf8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fdc:	f023 030f 	bic.w	r3, r3, #15
 8001fe0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d060      	beq.n	80020b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e001      	b.n	8002004 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b20      	cmp	r3, #32
 800200a:	d802      	bhi.n	8002012 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002012:	2001      	movs	r0, #1
 8002014:	f001 faf6 	bl	8003604 <HAL_RCCEx_GetPeriphCLKFreq>
 8002018:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002022:	d125      	bne.n	8002070 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	fbb2 f2f3 	udiv	r2, r2, r3
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	3305      	adds	r3, #5
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e01f      	b.n	800208e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	fbb2 f2f3 	udiv	r2, r2, r3
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	3305      	adds	r3, #5
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e00e      	b.n	800208e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fbb2 f2f3 	udiv	r2, r2, r3
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	461a      	mov	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	3305      	adds	r3, #5
 800208c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <HAL_I2S_Init+0x270>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	08db      	lsrs	r3, r3, #3
 8002098:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e003      	b.n	80020bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d902      	bls.n	80020c8 <HAL_I2S_Init+0x134>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	2bff      	cmp	r3, #255	; 0xff
 80020c6:	d907      	bls.n	80020d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e08f      	b.n	80021f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	ea42 0103 	orr.w	r1, r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020f6:	f023 030f 	bic.w	r3, r3, #15
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6851      	ldr	r1, [r2, #4]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6892      	ldr	r2, [r2, #8]
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68d2      	ldr	r2, [r2, #12]
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6992      	ldr	r2, [r2, #24]
 800210e:	430a      	orrs	r2, r1
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d161      	bne.n	80021e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a38      	ldr	r2, [pc, #224]	; (8002208 <HAL_I2S_Init+0x274>)
 8002128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <HAL_I2S_Init+0x278>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_I2S_Init+0x1a4>
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_I2S_Init+0x27c>)
 8002136:	e001      	b.n	800213c <HAL_I2S_Init+0x1a8>
 8002138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4932      	ldr	r1, [pc, #200]	; (800220c <HAL_I2S_Init+0x278>)
 8002144:	428a      	cmp	r2, r1
 8002146:	d101      	bne.n	800214c <HAL_I2S_Init+0x1b8>
 8002148:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_I2S_Init+0x27c>)
 800214a:	e001      	b.n	8002150 <HAL_I2S_Init+0x1bc>
 800214c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002150:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002154:	f023 030f 	bic.w	r3, r3, #15
 8002158:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_I2S_Init+0x278>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_I2S_Init+0x1d4>
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_I2S_Init+0x27c>)
 8002166:	e001      	b.n	800216c <HAL_I2S_Init+0x1d8>
 8002168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216c:	2202      	movs	r2, #2
 800216e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_I2S_Init+0x278>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_I2S_Init+0x1ea>
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_I2S_Init+0x27c>)
 800217c:	e001      	b.n	8002182 <HAL_I2S_Init+0x1ee>
 800217e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218e:	d003      	beq.n	8002198 <HAL_I2S_Init+0x204>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d103      	bne.n	80021a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e001      	b.n	80021a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_I2S_Init+0x278>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_I2S_Init+0x24c>
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_I2S_Init+0x27c>)
 80021de:	e001      	b.n	80021e4 <HAL_I2S_Init+0x250>
 80021e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e4:	897a      	ldrh	r2, [r7, #10]
 80021e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800252d 	.word	0x0800252d
 8002204:	cccccccd 	.word	0xcccccccd
 8002208:	08002641 	.word	0x08002641
 800220c:	40003800 	.word	0x40003800
 8002210:	40003400 	.word	0x40003400

08002214 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_I2S_Receive_DMA+0x1a>
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0a1      	b.n	8002376 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_I2S_Receive_DMA+0x2e>
 800223e:	2302      	movs	r3, #2
 8002240:	e099      	b.n	8002376 <HAL_I2S_Receive_DMA+0x162>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	e089      	b.n	8002376 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2204      	movs	r2, #4
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d002      	beq.n	800228e <HAL_I2S_Receive_DMA+0x7a>
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10a      	bne.n	80022a4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	865a      	strh	r2, [r3, #50]	; 0x32
 80022a2:	e005      	b.n	80022b0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	88fa      	ldrh	r2, [r7, #6]
 80022a8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	4a32      	ldr	r2, [pc, #200]	; (8002380 <HAL_I2S_Receive_DMA+0x16c>)
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_I2S_Receive_DMA+0x170>)
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_I2S_Receive_DMA+0x174>)
 80022c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d6:	d10a      	bne.n	80022ee <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	4619      	mov	r1, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002304:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002306:	f7ff f9cb 	bl	80016a0 <HAL_DMA_Start_IT>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00f      	beq.n	8002330 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0208 	orr.w	r2, r3, #8
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e022      	b.n	8002376 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800234c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	0800240b 	.word	0x0800240b
 8002384:	080023c9 	.word	0x080023c9
 8002388:	08002427 	.word	0x08002427

0800238c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7fe fc11 	bl	8000c24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff ffc1 	bl	80023a0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0203 	bic.w	r2, r2, #3
 8002442:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f043 0208 	orr.w	r2, r3, #8
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ffa5 	bl	80023b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	881a      	ldrh	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	1c9a      	adds	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10e      	bne.n	80024c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff63 	bl	800238c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	b292      	uxth	r2, r2
 80024e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	1c9a      	adds	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10e      	bne.n	8002524 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002514:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fb80 	bl	8000c24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b04      	cmp	r3, #4
 8002546:	d13a      	bne.n	80025be <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d109      	bne.n	8002566 <I2S_IRQHandler+0x3a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d102      	bne.n	8002566 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffb4 	bl	80024ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d126      	bne.n	80025be <I2S_IRQHandler+0x92>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b20      	cmp	r3, #32
 800257c:	d11f      	bne.n	80025be <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800258c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0202 	orr.w	r2, r3, #2
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fefb 	bl	80023b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d136      	bne.n	8002638 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d109      	bne.n	80025e8 <I2S_IRQHandler+0xbc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b80      	cmp	r3, #128	; 0x80
 80025e0:	d102      	bne.n	80025e8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff45 	bl	8002472 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d122      	bne.n	8002638 <I2S_IRQHandler+0x10c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d11b      	bne.n	8002638 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800260e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff febe 	bl	80023b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a92      	ldr	r2, [pc, #584]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800265a:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800265c:	e001      	b.n	8002662 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800265e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a8b      	ldr	r2, [pc, #556]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d101      	bne.n	800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002678:	4b8a      	ldr	r3, [pc, #552]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800267a:	e001      	b.n	8002680 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800267c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268c:	d004      	beq.n	8002698 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8099 	bne.w	80027ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f925 	bl	80028fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f9c8 	bl	8002a5c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d13a      	bne.n	800274c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d035      	beq.n	800274c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6e      	ldr	r2, [pc, #440]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80026ea:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026ec:	e001      	b.n	80026f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80026ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4969      	ldr	r1, [pc, #420]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026fa:	428b      	cmp	r3, r1
 80026fc:	d101      	bne.n	8002702 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80026fe:	4b69      	ldr	r3, [pc, #420]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002700:	e001      	b.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002706:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800270a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800271a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fe34 	bl	80023b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	f040 80c3 	bne.w	80028de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80bd 	beq.w	80028de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002772:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002780:	e001      	b.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4944      	ldr	r1, [pc, #272]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800278e:	428b      	cmp	r3, r1
 8002790:	d101      	bne.n	8002796 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002794:	e001      	b.n	800279a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800279e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f043 0204 	orr.w	r2, r3, #4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fdf6 	bl	80023b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027c8:	e089      	b.n	80028de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d107      	bne.n	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f8be 	bl	8002960 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f8fd 	bl	80029f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d12f      	bne.n	8002868 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d02a      	beq.n	8002868 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002820:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800282e:	e001      	b.n	8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4919      	ldr	r1, [pc, #100]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800283c:	428b      	cmp	r3, r1
 800283e:	d101      	bne.n	8002844 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002842:	e001      	b.n	8002848 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002848:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800284c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fda6 	bl	80023b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d136      	bne.n	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d031      	beq.n	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002888:	e001      	b.n	800288e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800288a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4902      	ldr	r1, [pc, #8]	; (80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002896:	428b      	cmp	r3, r1
 8002898:	d106      	bne.n	80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800289a:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800289c:	e006      	b.n	80028ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800289e:	bf00      	nop
 80028a0:	40003800 	.word	0x40003800
 80028a4:	40003400 	.word	0x40003400
 80028a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fd6c 	bl	80023b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028dc:	e000      	b.n	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028de:	bf00      	nop
}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c99      	adds	r1, r3, #2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6251      	str	r1, [r2, #36]	; 0x24
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d113      	bne.n	8002956 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800293c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ffc9 	bl	80028e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c99      	adds	r1, r3, #2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6251      	str	r1, [r2, #36]	; 0x24
 8002972:	8819      	ldrh	r1, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <I2SEx_TxISR_I2SExt+0x90>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <I2SEx_TxISR_I2SExt+0x22>
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <I2SEx_TxISR_I2SExt+0x94>)
 8002980:	e001      	b.n	8002986 <I2SEx_TxISR_I2SExt+0x26>
 8002982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002986:	460a      	mov	r2, r1
 8002988:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d121      	bne.n	80029e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <I2SEx_TxISR_I2SExt+0x90>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <I2SEx_TxISR_I2SExt+0x50>
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <I2SEx_TxISR_I2SExt+0x94>)
 80029ae:	e001      	b.n	80029b4 <I2SEx_TxISR_I2SExt+0x54>
 80029b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	490d      	ldr	r1, [pc, #52]	; (80029f0 <I2SEx_TxISR_I2SExt+0x90>)
 80029bc:	428b      	cmp	r3, r1
 80029be:	d101      	bne.n	80029c4 <I2SEx_TxISR_I2SExt+0x64>
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <I2SEx_TxISR_I2SExt+0x94>)
 80029c2:	e001      	b.n	80029c8 <I2SEx_TxISR_I2SExt+0x68>
 80029c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff81 	bl	80028e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40003800 	.word	0x40003800
 80029f4:	40003400 	.word	0x40003400

080029f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68d8      	ldr	r0, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	1c99      	adds	r1, r3, #2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a10:	b282      	uxth	r2, r0
 8002a12:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d113      	bne.n	8002a54 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a3a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ff4a 	bl	80028e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <I2SEx_RxISR_I2SExt+0x90>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <I2SEx_RxISR_I2SExt+0x16>
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <I2SEx_RxISR_I2SExt+0x94>)
 8002a70:	e001      	b.n	8002a76 <I2SEx_RxISR_I2SExt+0x1a>
 8002a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a76:	68d8      	ldr	r0, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	1c99      	adds	r1, r3, #2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a82:	b282      	uxth	r2, r0
 8002a84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d121      	bne.n	8002ae2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <I2SEx_RxISR_I2SExt+0x90>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <I2SEx_RxISR_I2SExt+0x50>
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <I2SEx_RxISR_I2SExt+0x94>)
 8002aaa:	e001      	b.n	8002ab0 <I2SEx_RxISR_I2SExt+0x54>
 8002aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	490d      	ldr	r1, [pc, #52]	; (8002aec <I2SEx_RxISR_I2SExt+0x90>)
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	d101      	bne.n	8002ac0 <I2SEx_RxISR_I2SExt+0x64>
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <I2SEx_RxISR_I2SExt+0x94>)
 8002abe:	e001      	b.n	8002ac4 <I2SEx_RxISR_I2SExt+0x68>
 8002ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ac8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff03 	bl	80028e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40003800 	.word	0x40003800
 8002af0:	40003400 	.word	0x40003400

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e267      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d075      	beq.n	8002bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b12:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d00c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d112      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	4b7e      	ldr	r3, [pc, #504]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05b      	beq.n	8002bfc <HAL_RCC_OscConfig+0x108>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d157      	bne.n	8002bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e242      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d106      	bne.n	8002b68 <HAL_RCC_OscConfig+0x74>
 8002b5a:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x98>
 8002b72:	4b70      	ldr	r3, [pc, #448]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6f      	ldr	r2, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b6d      	ldr	r3, [pc, #436]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6c      	ldr	r2, [pc, #432]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb0>
 8002b8c:	4b69      	ldr	r3, [pc, #420]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a68      	ldr	r2, [pc, #416]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fb6c 	bl	8001288 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fb68 	bl	8001288 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e207      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xc0>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fb58 	bl	8001288 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fb54 	bl	8001288 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1f3      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b51      	ldr	r3, [pc, #324]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0xe8>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x152>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1c7      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e03a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_OscConfig+0x244>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fb0d 	bl	8001288 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe fb09 	bl	8001288 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1a8      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4925      	ldr	r1, [pc, #148]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCC_OscConfig+0x244>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe faec 	bl	8001288 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fae8 	bl	8001288 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e187      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d036      	beq.n	8002d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_RCC_OscConfig+0x248>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe facc 	bl	8001288 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fac8 	bl	8001288 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e167      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x200>
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_OscConfig+0x248>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fab5 	bl	8001288 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	e00e      	b.n	8002d40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d22:	f7fe fab1 	bl	8001288 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d907      	bls.n	8002d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e150      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
 8002d34:	40023800 	.word	0x40023800
 8002d38:	42470000 	.word	0x42470000
 8002d3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ea      	bne.n	8002d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8097 	beq.w	8002e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b81      	ldr	r3, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a7c      	ldr	r2, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b7a      	ldr	r3, [pc, #488]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fa71 	bl	8001288 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe fa6d 	bl	8001288 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e10c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ea>
 8002dd0:	4b64      	ldr	r3, [pc, #400]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a63      	ldr	r2, [pc, #396]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x30c>
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f023 0304 	bic.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fa32 	bl	8001288 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe fa2e 	bl	8001288 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0cb      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ee      	beq.n	8002e28 <HAL_RCC_OscConfig+0x334>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fa1c 	bl	8001288 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fe fa18 	bl	8001288 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0b5      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ee      	bne.n	8002e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a1 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e92:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d05c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d141      	bne.n	8002f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe f9ec 	bl	8001288 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f9e8 	bl	8001288 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e087      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	3b01      	subs	r3, #1
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	491b      	ldr	r1, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe f9c1 	bl	8001288 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe f9bd 	bl	8001288 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e05c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x416>
 8002f28:	e054      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe f9aa 	bl	8001288 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe f9a6 	bl	8001288 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e045      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x444>
 8002f56:	e03d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e038      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d028      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d121      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d11a      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0cc      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b68      	ldr	r3, [pc, #416]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d90c      	bls.n	8003020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b8      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003038:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003042:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	494d      	ldr	r1, [pc, #308]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d044      	beq.n	8003104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d119      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e067      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 0203 	bic.w	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4934      	ldr	r1, [pc, #208]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fe f8d8 	bl	8001288 <HAL_GetTick>
 80030d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030dc:	f7fe f8d4 	bl	8001288 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e04f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 020c 	and.w	r2, r3, #12
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	429a      	cmp	r2, r3
 8003102:	d1eb      	bne.n	80030dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d20c      	bcs.n	800312c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e032      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4916      	ldr	r1, [pc, #88]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	490e      	ldr	r1, [pc, #56]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316a:	f000 f821 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800316e:	4602      	mov	r2, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	490a      	ldr	r1, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe f838 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	0800b238 	.word	0x0800b238
 80031a8:	20000400 	.word	0x20000400
 80031ac:	20000404 	.word	0x20000404

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b094      	sub	sp, #80	; 0x50
 80031b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	647b      	str	r3, [r7, #68]	; 0x44
 80031bc:	2300      	movs	r3, #0
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c0:	2300      	movs	r3, #0
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c8:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d00d      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x40>
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	f200 80e1 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x1ec>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x34>
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x3a>
 80031e2:	e0db      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031e8:	e0db      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ea:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ee:	e0d8      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fa:	4b6d      	ldr	r3, [pc, #436]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d063      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	2200      	movs	r2, #0
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003210:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003222:	4622      	mov	r2, r4
 8003224:	462b      	mov	r3, r5
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	0159      	lsls	r1, r3, #5
 8003230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003234:	0150      	lsls	r0, r2, #5
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4621      	mov	r1, r4
 800323c:	1a51      	subs	r1, r2, r1
 800323e:	6139      	str	r1, [r7, #16]
 8003240:	4629      	mov	r1, r5
 8003242:	eb63 0301 	sbc.w	r3, r3, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003254:	4659      	mov	r1, fp
 8003256:	018b      	lsls	r3, r1, #6
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800325e:	4651      	mov	r1, sl
 8003260:	018a      	lsls	r2, r1, #6
 8003262:	4651      	mov	r1, sl
 8003264:	ebb2 0801 	subs.w	r8, r2, r1
 8003268:	4659      	mov	r1, fp
 800326a:	eb63 0901 	sbc.w	r9, r3, r1
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800327e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003282:	4690      	mov	r8, r2
 8003284:	4699      	mov	r9, r3
 8003286:	4623      	mov	r3, r4
 8003288:	eb18 0303 	adds.w	r3, r8, r3
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	462b      	mov	r3, r5
 8003290:	eb49 0303 	adc.w	r3, r9, r3
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a2:	4629      	mov	r1, r5
 80032a4:	024b      	lsls	r3, r1, #9
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ac:	4621      	mov	r1, r4
 80032ae:	024a      	lsls	r2, r1, #9
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c0:	f7fc ffe6 	bl	8000290 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032cc:	e058      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	2200      	movs	r2, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	4611      	mov	r1, r2
 80032da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0159      	lsls	r1, r3, #5
 80032f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fa:	0150      	lsls	r0, r2, #5
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4641      	mov	r1, r8
 8003302:	ebb2 0a01 	subs.w	sl, r2, r1
 8003306:	4649      	mov	r1, r9
 8003308:	eb63 0b01 	sbc.w	fp, r3, r1
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800331c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003320:	ebb2 040a 	subs.w	r4, r2, sl
 8003324:	eb63 050b 	sbc.w	r5, r3, fp
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	00eb      	lsls	r3, r5, #3
 8003332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003336:	00e2      	lsls	r2, r4, #3
 8003338:	4614      	mov	r4, r2
 800333a:	461d      	mov	r5, r3
 800333c:	4643      	mov	r3, r8
 800333e:	18e3      	adds	r3, r4, r3
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	464b      	mov	r3, r9
 8003344:	eb45 0303 	adc.w	r3, r5, r3
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003356:	4629      	mov	r1, r5
 8003358:	028b      	lsls	r3, r1, #10
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003360:	4621      	mov	r1, r4
 8003362:	028a      	lsls	r2, r1, #10
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	2200      	movs	r2, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	61fa      	str	r2, [r7, #28]
 8003370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003374:	f7fc ff8c 	bl	8000290 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3750      	adds	r7, #80	; 0x50
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000400 	.word	0x20000400

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	0800b248 	.word	0x0800b248

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	0800b248 	.word	0x0800b248

08003424 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003448:	2b00      	cmp	r3, #0
 800344a:	d038      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003452:	f7fd ff19 	bl	8001288 <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003458:	e008      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800345a:	f7fd ff15 	bl	8001288 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0bd      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800346c:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	071b      	lsls	r3, r3, #28
 800348a:	495a      	ldr	r1, [pc, #360]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003492:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003498:	f7fd fef6 	bl	8001288 <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034a0:	f7fd fef2 	bl	8001288 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e09a      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b2:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8083 	beq.w	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fd fec8 	bl	8001288 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034fc:	f7fd fec4 	bl	8001288 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e06c      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800350e:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d028      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003548:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d114      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003560:	f7fd fe92 	bl	8001288 <HAL_GetTick>
 8003564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fd fe8e 	bl	8001288 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e034      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ee      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003596:	d10d      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	4911      	ldr	r1, [pc, #68]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
 80035b2:	e005      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035be:	6093      	str	r3, [r2, #8]
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	4909      	ldr	r1, [pc, #36]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7d1a      	ldrb	r2, [r3, #20]
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80035e4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	42470068 	.word	0x42470068
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000
 80035fc:	42470e40 	.word	0x42470e40
 8003600:	424711e0 	.word	0x424711e0

08003604 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d140      	bne.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d131      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800363a:	617b      	str	r3, [r7, #20]
          break;
 800363c:	e031      	b.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d109      	bne.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003656:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368c:	0f1b      	lsrs	r3, r3, #28
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
          break;
 800369a:	e002      	b.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
          break;
 80036a0:	bf00      	nop
        }
      }
      break;
 80036a2:	bf00      	nop
    }
  }
  return frequency;
 80036a4:	697b      	ldr	r3, [r7, #20]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	00bb8000 	.word	0x00bb8000
 80036bc:	007a1200 	.word	0x007a1200
 80036c0:	00f42400 	.word	0x00f42400

080036c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07b      	b.n	80037ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d009      	beq.n	80036fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
 80036ee:	e005      	b.n	80036fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fba8 	bl	8000e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	ea42 0103 	orr.w	r1, r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0104 	and.w	r1, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f003 0210 	and.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b088      	sub	sp, #32
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_SPI_Transmit+0x22>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e126      	b.n	8003a46 <HAL_SPI_Transmit+0x270>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003800:	f7fd fd42 	bl	8001288 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d002      	beq.n	800381c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
    goto error;
 800381a:	e10b      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Transmit+0x52>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800382c:	e102      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2203      	movs	r2, #3
 8003832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003874:	d10f      	bne.n	8003896 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d007      	beq.n	80038b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	d14b      	bne.n	8003956 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Transmit+0xf6>
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d13e      	bne.n	800394a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f0:	e02b      	b.n	800394a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d112      	bne.n	8003926 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	86da      	strh	r2, [r3, #54]	; 0x36
 8003924:	e011      	b.n	800394a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003926:	f7fd fcaf 	bl	8001288 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d803      	bhi.n	800393e <HAL_SPI_Transmit+0x168>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393c:	d102      	bne.n	8003944 <HAL_SPI_Transmit+0x16e>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003948:	e074      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ce      	bne.n	80038f2 <HAL_SPI_Transmit+0x11c>
 8003954:	e04c      	b.n	80039f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x18e>
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d140      	bne.n	80039e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	7812      	ldrb	r2, [r2, #0]
 8003970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800398a:	e02c      	b.n	80039e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d113      	bne.n	80039c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c0:	e011      	b.n	80039e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c2:	f7fd fc61 	bl	8001288 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d803      	bhi.n	80039da <HAL_SPI_Transmit+0x204>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Transmit+0x20a>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039e4:	e026      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1cd      	bne.n	800398c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fa55 	bl	8003ea4 <SPI_EndRxTxTransaction>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e000      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b08c      	sub	sp, #48	; 0x30
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x26>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e18a      	b.n	8003d8a <HAL_SPI_TransmitReceive+0x33c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7c:	f7fd fc04 	bl	8001288 <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d00f      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x70>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa4:	d107      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x68>
 8003aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d003      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003abc:	e15b      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x82>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x82>
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ad6:	e14e      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d003      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	887a      	ldrh	r2, [r7, #2]
 8003b0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d007      	beq.n	8003b40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b48:	d178      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x10a>
 8003b52:	8b7b      	ldrh	r3, [r7, #26]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d166      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b7c:	e053      	b.n	8003c26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x176>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x176>
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d113      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d119      	bne.n	8003c06 <HAL_SPI_TransmitReceive+0x1b8>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d014      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	b292      	uxth	r2, r2
 8003be8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	1c9a      	adds	r2, r3, #2
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c02:	2301      	movs	r3, #1
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c06:	f7fd fb3f 	bl	8001288 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d807      	bhi.n	8003c26 <HAL_SPI_TransmitReceive+0x1d8>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c1c:	d003      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c24:	e0a7      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1a6      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x130>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1a1      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x130>
 8003c3a:	e07c      	b.n	8003d36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_SPI_TransmitReceive+0x1fc>
 8003c44:	8b7b      	ldrh	r3, [r7, #26]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d16b      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c70:	e057      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d11c      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x26c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d017      	beq.n	8003cba <HAL_SPI_TransmitReceive+0x26c>
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d114      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d119      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x2ae>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cfc:	f7fd fac4 	bl	8001288 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d803      	bhi.n	8003d14 <HAL_SPI_TransmitReceive+0x2c6>
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d12:	d102      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x2cc>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d20:	e029      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1a2      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x224>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d19d      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f8b2 	bl	8003ea4 <SPI_EndRxTxTransaction>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d52:	e010      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	e000      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3730      	adds	r7, #48	; 0x30
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003da4:	f7fd fa70 	bl	8001288 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003db4:	f7fd fa68 	bl	8001288 <HAL_GetTick>
 8003db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	015b      	lsls	r3, r3, #5
 8003dc0:	0d1b      	lsrs	r3, r3, #20
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dca:	e054      	b.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd2:	d050      	beq.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd4:	f7fd fa58 	bl	8001288 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d902      	bls.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13d      	bne.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d111      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d004      	beq.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d107      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e30:	d10f      	bne.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e017      	b.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d19b      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000400 	.word	0x20000400

08003ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <SPI_EndRxTxTransaction+0x7c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <SPI_EndRxTxTransaction+0x80>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	0d5b      	lsrs	r3, r3, #21
 8003ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ece:	d112      	bne.n	8003ef6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff ff5a 	bl	8003d94 <SPI_WaitFlagStateUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e00f      	b.n	8003f16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d0f2      	beq.n	8003ef6 <SPI_EndRxTxTransaction+0x52>
 8003f10:	e000      	b.n	8003f14 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f12:	bf00      	nop
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000400 	.word	0x20000400
 8003f24:	165e9f81 	.word	0x165e9f81

08003f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e03f      	b.n	8003fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fc fff4 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f929 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08a      	sub	sp, #40	; 0x28
 8003fc6:	af02      	add	r7, sp, #8
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d17c      	bne.n	80040dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_Transmit+0x2c>
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e075      	b.n	80040de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_UART_Transmit+0x3e>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e06e      	b.n	80040de <HAL_UART_Transmit+0x11c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2221      	movs	r2, #33	; 0x21
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004016:	f7fd f937 	bl	8001288 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d108      	bne.n	8004044 <HAL_UART_Transmit+0x82>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e003      	b.n	800404c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004054:	e02a      	b.n	80040ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f840 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e036      	b.n	80040de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3302      	adds	r3, #2
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e007      	b.n	800409e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1cf      	bne.n	8004056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2140      	movs	r1, #64	; 0x40
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f810 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e006      	b.n	80040de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b090      	sub	sp, #64	; 0x40
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	e050      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040fe:	d04c      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x30>
 8004106:	f7fd f8bf 	bl	8001288 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004112:	429a      	cmp	r2, r3
 8004114:	d241      	bcs.n	800419a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004136:	637a      	str	r2, [r7, #52]	; 0x34
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800413c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e5      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416a:	623a      	str	r2, [r7, #32]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	69f9      	ldr	r1, [r7, #28]
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	61bb      	str	r3, [r7, #24]
   return(result);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d09f      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3740      	adds	r7, #64	; 0x40
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b0c0      	sub	sp, #256	; 0x100
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	68d9      	ldr	r1, [r3, #12]
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	ea40 0301 	orr.w	r3, r0, r1
 80041ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800421c:	f021 010c 	bic.w	r1, r1, #12
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800422a:	430b      	orrs	r3, r1
 800422c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	6999      	ldr	r1, [r3, #24]
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	ea40 0301 	orr.w	r3, r0, r1
 800424a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b8f      	ldr	r3, [pc, #572]	; (8004490 <UART_SetConfig+0x2cc>)
 8004254:	429a      	cmp	r2, r3
 8004256:	d005      	beq.n	8004264 <UART_SetConfig+0xa0>
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b8d      	ldr	r3, [pc, #564]	; (8004494 <UART_SetConfig+0x2d0>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d104      	bne.n	800426e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7ff f8ca 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004268:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800426c:	e003      	b.n	8004276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800426e:	f7ff f8b1 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8004272:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	f040 810c 	bne.w	800449c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800428e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	1891      	adds	r1, r2, r2
 800429c:	65b9      	str	r1, [r7, #88]	; 0x58
 800429e:	415b      	adcs	r3, r3
 80042a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042a6:	4621      	mov	r1, r4
 80042a8:	eb12 0801 	adds.w	r8, r2, r1
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb43 0901 	adc.w	r9, r3, r1
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c6:	4690      	mov	r8, r2
 80042c8:	4699      	mov	r9, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	eb18 0303 	adds.w	r3, r8, r3
 80042d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042d4:	462b      	mov	r3, r5
 80042d6:	eb49 0303 	adc.w	r3, r9, r3
 80042da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042f2:	460b      	mov	r3, r1
 80042f4:	18db      	adds	r3, r3, r3
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
 80042f8:	4613      	mov	r3, r2
 80042fa:	eb42 0303 	adc.w	r3, r2, r3
 80042fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004308:	f7fb ffc2 	bl	8000290 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b61      	ldr	r3, [pc, #388]	; (8004498 <UART_SetConfig+0x2d4>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011c      	lsls	r4, r3, #4
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004324:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	64b9      	str	r1, [r7, #72]	; 0x48
 8004334:	415b      	adcs	r3, r3
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800433c:	4641      	mov	r1, r8
 800433e:	eb12 0a01 	adds.w	sl, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0b01 	adc.w	fp, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800435c:	4692      	mov	sl, r2
 800435e:	469b      	mov	fp, r3
 8004360:	4643      	mov	r3, r8
 8004362:	eb1a 0303 	adds.w	r3, sl, r3
 8004366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800436a:	464b      	mov	r3, r9
 800436c:	eb4b 0303 	adc.w	r3, fp, r3
 8004370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004388:	460b      	mov	r3, r1
 800438a:	18db      	adds	r3, r3, r3
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
 800438e:	4613      	mov	r3, r2
 8004390:	eb42 0303 	adc.w	r3, r2, r3
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
 8004396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800439a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800439e:	f7fb ff77 	bl	8000290 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <UART_SetConfig+0x2d4>)
 80043aa:	fba3 2301 	umull	r2, r3, r3, r1
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2264      	movs	r2, #100	; 0x64
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	1acb      	subs	r3, r1, r3
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <UART_SetConfig+0x2d4>)
 80043c0:	fba3 2302 	umull	r2, r3, r3, r2
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043cc:	441c      	add	r4, r3
 80043ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043e0:	4642      	mov	r2, r8
 80043e2:	464b      	mov	r3, r9
 80043e4:	1891      	adds	r1, r2, r2
 80043e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043e8:	415b      	adcs	r3, r3
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043f0:	4641      	mov	r1, r8
 80043f2:	1851      	adds	r1, r2, r1
 80043f4:	6339      	str	r1, [r7, #48]	; 0x30
 80043f6:	4649      	mov	r1, r9
 80043f8:	414b      	adcs	r3, r1
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004408:	4659      	mov	r1, fp
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4651      	mov	r1, sl
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4642      	mov	r2, r8
 800441e:	189b      	adds	r3, r3, r2
 8004420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004424:	464b      	mov	r3, r9
 8004426:	460a      	mov	r2, r1
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800443c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004444:	460b      	mov	r3, r1
 8004446:	18db      	adds	r3, r3, r3
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
 800444a:	4613      	mov	r3, r2
 800444c:	eb42 0303 	adc.w	r3, r2, r3
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800445a:	f7fb ff19 	bl	8000290 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <UART_SetConfig+0x2d4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	; 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <UART_SetConfig+0x2d4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 0207 	and.w	r2, r3, #7
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4422      	add	r2, r4
 800448a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800448c:	e106      	b.n	800469c <UART_SetConfig+0x4d8>
 800448e:	bf00      	nop
 8004490:	40011000 	.word	0x40011000
 8004494:	40011400 	.word	0x40011400
 8004498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800449c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ae:	4642      	mov	r2, r8
 80044b0:	464b      	mov	r3, r9
 80044b2:	1891      	adds	r1, r2, r2
 80044b4:	6239      	str	r1, [r7, #32]
 80044b6:	415b      	adcs	r3, r3
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044be:	4641      	mov	r1, r8
 80044c0:	1854      	adds	r4, r2, r1
 80044c2:	4649      	mov	r1, r9
 80044c4:	eb43 0501 	adc.w	r5, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	00eb      	lsls	r3, r5, #3
 80044d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d6:	00e2      	lsls	r2, r4, #3
 80044d8:	4614      	mov	r4, r2
 80044da:	461d      	mov	r5, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	18e3      	adds	r3, r4, r3
 80044e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044e4:	464b      	mov	r3, r9
 80044e6:	eb45 0303 	adc.w	r3, r5, r3
 80044ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800450a:	4629      	mov	r1, r5
 800450c:	008b      	lsls	r3, r1, #2
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004514:	4621      	mov	r1, r4
 8004516:	008a      	lsls	r2, r1, #2
 8004518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800451c:	f7fb feb8 	bl	8000290 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b60      	ldr	r3, [pc, #384]	; (80046a8 <UART_SetConfig+0x4e4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800453c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	61b9      	str	r1, [r7, #24]
 8004548:	415b      	adcs	r3, r3
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004550:	4641      	mov	r1, r8
 8004552:	1851      	adds	r1, r2, r1
 8004554:	6139      	str	r1, [r7, #16]
 8004556:	4649      	mov	r1, r9
 8004558:	414b      	adcs	r3, r1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004568:	4659      	mov	r1, fp
 800456a:	00cb      	lsls	r3, r1, #3
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004572:	4651      	mov	r1, sl
 8004574:	00ca      	lsls	r2, r1, #3
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	4603      	mov	r3, r0
 800457c:	4642      	mov	r2, r8
 800457e:	189b      	adds	r3, r3, r2
 8004580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004584:	464b      	mov	r3, r9
 8004586:	460a      	mov	r2, r1
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	67bb      	str	r3, [r7, #120]	; 0x78
 800459a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045a8:	4649      	mov	r1, r9
 80045aa:	008b      	lsls	r3, r1, #2
 80045ac:	4641      	mov	r1, r8
 80045ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b2:	4641      	mov	r1, r8
 80045b4:	008a      	lsls	r2, r1, #2
 80045b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ba:	f7fb fe69 	bl	8000290 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2264      	movs	r2, #100	; 0x64
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	1acb      	subs	r3, r1, r3
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	3332      	adds	r3, #50	; 0x32
 80045d8:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <UART_SetConfig+0x4e4>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e4:	441c      	add	r4, r3
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ea:	2200      	movs	r2, #0
 80045ec:	673b      	str	r3, [r7, #112]	; 0x70
 80045ee:	677a      	str	r2, [r7, #116]	; 0x74
 80045f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	415b      	adcs	r3, r3
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	66bb      	str	r3, [r7, #104]	; 0x68
 8004636:	464b      	mov	r3, r9
 8004638:	460a      	mov	r2, r1
 800463a:	eb42 0303 	adc.w	r3, r2, r3
 800463e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	663b      	str	r3, [r7, #96]	; 0x60
 800464a:	667a      	str	r2, [r7, #100]	; 0x64
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004658:	4649      	mov	r1, r9
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004662:	4641      	mov	r1, r8
 8004664:	008a      	lsls	r2, r1, #2
 8004666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800466a:	f7fb fe11 	bl	8000290 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <UART_SetConfig+0x4e4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <UART_SetConfig+0x4e4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4422      	add	r2, r4
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046a2:	46bd      	mov	sp, r7
 80046a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a8:	51eb851f 	.word	0x51eb851f

080046ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80046b0:	4904      	ldr	r1, [pc, #16]	; (80046c4 <MX_FATFS_Init+0x18>)
 80046b2:	4805      	ldr	r0, [pc, #20]	; (80046c8 <MX_FATFS_Init+0x1c>)
 80046b4:	f003 f91e 	bl	80078f4 <FATFS_LinkDriver>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <MX_FATFS_Init+0x20>)
 80046be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046c0:	bf00      	nop
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	200008fc 	.word	0x200008fc
 80046c8:	2000040c 	.word	0x2000040c
 80046cc:	200008f8 	.word	0x200008f8

080046d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80046d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f9d3 	bl	8004a98 <USER_SPI_initialize>
 80046f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fab1 	bl	8004c70 <USER_SPI_status>
 800470e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8004728:	7bf8      	ldrb	r0, [r7, #15]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	f000 fab4 	bl	8004c9c <USER_SPI_read>
 8004734:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800474e:	7bf8      	ldrb	r0, [r7, #15]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	f000 fb07 	bl	8004d68 <USER_SPI_write>
 800475a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	603a      	str	r2, [r7, #0]
 800476e:	71fb      	strb	r3, [r7, #7]
 8004770:	460b      	mov	r3, r1
 8004772:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004774:	79b9      	ldrb	r1, [r7, #6]
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb70 	bl	8004e60 <USER_SPI_ioctl>
 8004780:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004794:	f7fc fd78 	bl	8001288 <HAL_GetTick>
 8004798:	4603      	mov	r3, r0
 800479a:	4a04      	ldr	r2, [pc, #16]	; (80047ac <SPI_Timer_On+0x20>)
 800479c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <SPI_Timer_On+0x24>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000904 	.word	0x20000904
 80047b0:	20000908 	.word	0x20000908

080047b4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80047b8:	f7fc fd66 	bl	8001288 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <SPI_Timer_Status+0x24>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <SPI_Timer_Status+0x28>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	bf34      	ite	cc
 80047cc:	2301      	movcc	r3, #1
 80047ce:	2300      	movcs	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000904 	.word	0x20000904
 80047dc:	20000908 	.word	0x20000908

080047e0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80047ea:	f107 020f 	add.w	r2, r7, #15
 80047ee:	1df9      	adds	r1, r7, #7
 80047f0:	2332      	movs	r3, #50	; 0x32
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2301      	movs	r3, #1
 80047f6:	4804      	ldr	r0, [pc, #16]	; (8004808 <xchg_spi+0x28>)
 80047f8:	f7ff f929 	bl	8003a4e <HAL_SPI_TransmitReceive>
    return rxDat;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000550 	.word	0x20000550

0800480c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00a      	b.n	8004832 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	18d4      	adds	r4, r2, r3
 8004822:	20ff      	movs	r0, #255	; 0xff
 8004824:	f7ff ffdc 	bl	80047e0 <xchg_spi>
 8004828:	4603      	mov	r3, r0
 800482a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d3f0      	bcc.n	800481c <rcvr_spi_multi+0x10>
	}
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bd90      	pop	{r4, r7, pc}

08004844 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b29a      	uxth	r2, r3
 8004852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4803      	ldr	r0, [pc, #12]	; (8004868 <xmit_spi_multi+0x24>)
 800485a:	f7fe ffbc 	bl	80037d6 <HAL_SPI_Transmit>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000550 	.word	0x20000550

0800486c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004874:	f7fc fd08 	bl	8001288 <HAL_GetTick>
 8004878:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800487e:	20ff      	movs	r0, #255	; 0xff
 8004880:	f7ff ffae 	bl	80047e0 <xchg_spi>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2bff      	cmp	r3, #255	; 0xff
 800488c:	d007      	beq.n	800489e <wait_ready+0x32>
 800488e:	f7fc fcfb 	bl	8001288 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	429a      	cmp	r2, r3
 800489c:	d8ef      	bhi.n	800487e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2bff      	cmp	r3, #255	; 0xff
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80048b8:	2201      	movs	r2, #1
 80048ba:	2102      	movs	r1, #2
 80048bc:	4803      	ldr	r0, [pc, #12]	; (80048cc <despiselect+0x18>)
 80048be:	f7fd fb35 	bl	8001f2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80048c2:	20ff      	movs	r0, #255	; 0xff
 80048c4:	f7ff ff8c 	bl	80047e0 <xchg_spi>

}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40020400 	.word	0x40020400

080048d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80048d4:	2200      	movs	r2, #0
 80048d6:	2102      	movs	r1, #2
 80048d8:	4809      	ldr	r0, [pc, #36]	; (8004900 <spiselect+0x30>)
 80048da:	f7fd fb27 	bl	8001f2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80048de:	20ff      	movs	r0, #255	; 0xff
 80048e0:	f7ff ff7e 	bl	80047e0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80048e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048e8:	f7ff ffc0 	bl	800486c <wait_ready>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <spiselect+0x26>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e002      	b.n	80048fc <spiselect+0x2c>

	despiselect();
 80048f6:	f7ff ffdd 	bl	80048b4 <despiselect>
	return 0;	/* Timeout */
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40020400 	.word	0x40020400

08004904 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800490e:	20c8      	movs	r0, #200	; 0xc8
 8004910:	f7ff ff3c 	bl	800478c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004914:	20ff      	movs	r0, #255	; 0xff
 8004916:	f7ff ff63 	bl	80047e0 <xchg_spi>
 800491a:	4603      	mov	r3, r0
 800491c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2bff      	cmp	r3, #255	; 0xff
 8004922:	d104      	bne.n	800492e <rcvr_datablock+0x2a>
 8004924:	f7ff ff46 	bl	80047b4 <SPI_Timer_Status>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f2      	bne.n	8004914 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2bfe      	cmp	r3, #254	; 0xfe
 8004932:	d001      	beq.n	8004938 <rcvr_datablock+0x34>
 8004934:	2300      	movs	r3, #0
 8004936:	e00a      	b.n	800494e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ff66 	bl	800480c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004940:	20ff      	movs	r0, #255	; 0xff
 8004942:	f7ff ff4d 	bl	80047e0 <xchg_spi>
 8004946:	20ff      	movs	r0, #255	; 0xff
 8004948:	f7ff ff4a 	bl	80047e0 <xchg_spi>

	return 1;						/* Function succeeded */
 800494c:	2301      	movs	r3, #1
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004966:	f7ff ff81 	bl	800486c <wait_ready>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xmit_datablock+0x1e>
 8004970:	2300      	movs	r3, #0
 8004972:	e01e      	b.n	80049b2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff32 	bl	80047e0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	2bfd      	cmp	r3, #253	; 0xfd
 8004980:	d016      	beq.n	80049b0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff5c 	bl	8004844 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800498c:	20ff      	movs	r0, #255	; 0xff
 800498e:	f7ff ff27 	bl	80047e0 <xchg_spi>
 8004992:	20ff      	movs	r0, #255	; 0xff
 8004994:	f7ff ff24 	bl	80047e0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004998:	20ff      	movs	r0, #255	; 0xff
 800499a:	f7ff ff21 	bl	80047e0 <xchg_spi>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d001      	beq.n	80049b0 <xmit_datablock+0x5a>
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <xmit_datablock+0x5c>
	}
	return 1;
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	4603      	mov	r3, r0
 80049c2:	6039      	str	r1, [r7, #0]
 80049c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da0e      	bge.n	80049ec <send_cmd+0x32>
		cmd &= 0x7F;
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80049d6:	2100      	movs	r1, #0
 80049d8:	2037      	movs	r0, #55	; 0x37
 80049da:	f7ff ffee 	bl	80049ba <send_cmd>
 80049de:	4603      	mov	r3, r0
 80049e0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d901      	bls.n	80049ec <send_cmd+0x32>
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	e051      	b.n	8004a90 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d008      	beq.n	8004a04 <send_cmd+0x4a>
		despiselect();
 80049f2:	f7ff ff5f 	bl	80048b4 <despiselect>
		if (!spiselect()) return 0xFF;
 80049f6:	f7ff ff6b 	bl	80048d0 <spiselect>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <send_cmd+0x4a>
 8004a00:	23ff      	movs	r3, #255	; 0xff
 8004a02:	e045      	b.n	8004a90 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fee7 	bl	80047e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fee1 	bl	80047e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fedb 	bl	80047e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fed5 	bl	80047e0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fed0 	bl	80047e0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <send_cmd+0x94>
 8004a4a:	2395      	movs	r3, #149	; 0x95
 8004a4c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d101      	bne.n	8004a58 <send_cmd+0x9e>
 8004a54:	2387      	movs	r3, #135	; 0x87
 8004a56:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fec0 	bl	80047e0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d102      	bne.n	8004a6c <send_cmd+0xb2>
 8004a66:	20ff      	movs	r0, #255	; 0xff
 8004a68:	f7ff feba 	bl	80047e0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004a6c:	230a      	movs	r3, #10
 8004a6e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004a70:	20ff      	movs	r0, #255	; 0xff
 8004a72:	f7ff feb5 	bl	80047e0 <xchg_spi>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da05      	bge.n	8004a8e <send_cmd+0xd4>
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <USER_SPI_initialize+0x14>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0d6      	b.n	8004c5a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004aac:	4b6d      	ldr	r3, [pc, #436]	; (8004c64 <USER_SPI_initialize+0x1cc>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <USER_SPI_initialize+0x2a>
 8004aba:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <USER_SPI_initialize+0x1cc>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e0cb      	b.n	8004c5a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004ac2:	4b69      	ldr	r3, [pc, #420]	; (8004c68 <USER_SPI_initialize+0x1d0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004acc:	4b66      	ldr	r3, [pc, #408]	; (8004c68 <USER_SPI_initialize+0x1d0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004ad4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004ad6:	230a      	movs	r3, #10
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	e005      	b.n	8004ae8 <USER_SPI_initialize+0x50>
 8004adc:	20ff      	movs	r0, #255	; 0xff
 8004ade:	f7ff fe7f 	bl	80047e0 <xchg_spi>
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f6      	bne.n	8004adc <USER_SPI_initialize+0x44>

	ty = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004af2:	2100      	movs	r1, #0
 8004af4:	2000      	movs	r0, #0
 8004af6:	f7ff ff60 	bl	80049ba <send_cmd>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	f040 808b 	bne.w	8004c18 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b06:	f7ff fe41 	bl	800478c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004b0a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b0e:	2008      	movs	r0, #8
 8004b10:	f7ff ff53 	bl	80049ba <send_cmd>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d151      	bne.n	8004bbe <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e00d      	b.n	8004b3c <USER_SPI_initialize+0xa4>
 8004b20:	7bfc      	ldrb	r4, [r7, #15]
 8004b22:	20ff      	movs	r0, #255	; 0xff
 8004b24:	f7ff fe5c 	bl	80047e0 <xchg_spi>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f104 0310 	add.w	r3, r4, #16
 8004b30:	443b      	add	r3, r7
 8004b32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d9ee      	bls.n	8004b20 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004b42:	7abb      	ldrb	r3, [r7, #10]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d167      	bne.n	8004c18 <USER_SPI_initialize+0x180>
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	2baa      	cmp	r3, #170	; 0xaa
 8004b4c:	d164      	bne.n	8004c18 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004b4e:	bf00      	nop
 8004b50:	f7ff fe30 	bl	80047b4 <SPI_Timer_Status>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <USER_SPI_initialize+0xd2>
 8004b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b5e:	20a9      	movs	r0, #169	; 0xa9
 8004b60:	f7ff ff2b 	bl	80049ba <send_cmd>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f2      	bne.n	8004b50 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004b6a:	f7ff fe23 	bl	80047b4 <SPI_Timer_Status>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d051      	beq.n	8004c18 <USER_SPI_initialize+0x180>
 8004b74:	2100      	movs	r1, #0
 8004b76:	203a      	movs	r0, #58	; 0x3a
 8004b78:	f7ff ff1f 	bl	80049ba <send_cmd>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d14a      	bne.n	8004c18 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
 8004b86:	e00d      	b.n	8004ba4 <USER_SPI_initialize+0x10c>
 8004b88:	7bfc      	ldrb	r4, [r7, #15]
 8004b8a:	20ff      	movs	r0, #255	; 0xff
 8004b8c:	f7ff fe28 	bl	80047e0 <xchg_spi>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	f104 0310 	add.w	r3, r4, #16
 8004b98:	443b      	add	r3, r7
 8004b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d9ee      	bls.n	8004b88 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004baa:	7a3b      	ldrb	r3, [r7, #8]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <USER_SPI_initialize+0x120>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	e000      	b.n	8004bba <USER_SPI_initialize+0x122>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	737b      	strb	r3, [r7, #13]
 8004bbc:	e02c      	b.n	8004c18 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	20a9      	movs	r0, #169	; 0xa9
 8004bc2:	f7ff fefa 	bl	80049ba <send_cmd>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d804      	bhi.n	8004bd6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004bcc:	2302      	movs	r3, #2
 8004bce:	737b      	strb	r3, [r7, #13]
 8004bd0:	23a9      	movs	r3, #169	; 0xa9
 8004bd2:	73bb      	strb	r3, [r7, #14]
 8004bd4:	e003      	b.n	8004bde <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	737b      	strb	r3, [r7, #13]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004bde:	bf00      	nop
 8004be0:	f7ff fde8 	bl	80047b4 <SPI_Timer_Status>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <USER_SPI_initialize+0x162>
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fee3 	bl	80049ba <send_cmd>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f2      	bne.n	8004be0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004bfa:	f7ff fddb 	bl	80047b4 <SPI_Timer_Status>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <USER_SPI_initialize+0x17c>
 8004c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c08:	2010      	movs	r0, #16
 8004c0a:	f7ff fed6 	bl	80049ba <send_cmd>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <USER_SPI_initialize+0x180>
				ty = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004c18:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <USER_SPI_initialize+0x1d4>)
 8004c1a:	7b7b      	ldrb	r3, [r7, #13]
 8004c1c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004c1e:	f7ff fe49 	bl	80048b4 <despiselect>

	if (ty) {			/* OK */
 8004c22:	7b7b      	ldrb	r3, [r7, #13]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d012      	beq.n	8004c4e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <USER_SPI_initialize+0x1d0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <USER_SPI_initialize+0x1d0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0210 	orr.w	r2, r2, #16
 8004c3a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <USER_SPI_initialize+0x1cc>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <USER_SPI_initialize+0x1cc>)
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e002      	b.n	8004c54 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <USER_SPI_initialize+0x1cc>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004c54:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <USER_SPI_initialize+0x1cc>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000420 	.word	0x20000420
 8004c68:	20000550 	.word	0x20000550
 8004c6c:	20000900 	.word	0x20000900

08004c70 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <USER_SPI_status+0x14>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e002      	b.n	8004c8a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <USER_SPI_status+0x28>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000420 	.word	0x20000420

08004c9c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <USER_SPI_read+0x1c>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <USER_SPI_read+0x20>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e04d      	b.n	8004d58 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <USER_SPI_read+0xc4>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <USER_SPI_read+0x32>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e044      	b.n	8004d58 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004cce:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <USER_SPI_read+0xc8>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <USER_SPI_read+0x44>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	025b      	lsls	r3, r3, #9
 8004cde:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d111      	bne.n	8004d0a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	2011      	movs	r0, #17
 8004cea:	f7ff fe66 	bl	80049ba <send_cmd>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d129      	bne.n	8004d48 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cf8:	68b8      	ldr	r0, [r7, #8]
 8004cfa:	f7ff fe03 	bl	8004904 <rcvr_datablock>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d021      	beq.n	8004d48 <USER_SPI_read+0xac>
			count = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	e01e      	b.n	8004d48 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	2012      	movs	r0, #18
 8004d0e:	f7ff fe54 	bl	80049ba <send_cmd>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d117      	bne.n	8004d48 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d1c:	68b8      	ldr	r0, [r7, #8]
 8004d1e:	f7ff fdf1 	bl	8004904 <rcvr_datablock>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <USER_SPI_read+0xa2>
				buff += 512;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d2e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ed      	bne.n	8004d18 <USER_SPI_read+0x7c>
 8004d3c:	e000      	b.n	8004d40 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004d3e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004d40:	2100      	movs	r1, #0
 8004d42:	200c      	movs	r0, #12
 8004d44:	f7ff fe39 	bl	80049ba <send_cmd>
		}
	}
	despiselect();
 8004d48:	f7ff fdb4 	bl	80048b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf14      	ite	ne
 8004d52:	2301      	movne	r3, #1
 8004d54:	2300      	moveq	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000420 	.word	0x20000420
 8004d64:	20000900 	.word	0x20000900

08004d68 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <USER_SPI_write+0x1c>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <USER_SPI_write+0x20>
 8004d84:	2304      	movs	r3, #4
 8004d86:	e063      	b.n	8004e50 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004d88:	4b33      	ldr	r3, [pc, #204]	; (8004e58 <USER_SPI_write+0xf0>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <USER_SPI_write+0x32>
 8004d96:	2303      	movs	r3, #3
 8004d98:	e05a      	b.n	8004e50 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <USER_SPI_write+0xf0>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <USER_SPI_write+0x44>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e051      	b.n	8004e50 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <USER_SPI_write+0xf4>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <USER_SPI_write+0x56>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	025b      	lsls	r3, r3, #9
 8004dbc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d110      	bne.n	8004de6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	2018      	movs	r0, #24
 8004dc8:	f7ff fdf7 	bl	80049ba <send_cmd>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d136      	bne.n	8004e40 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004dd2:	21fe      	movs	r1, #254	; 0xfe
 8004dd4:	68b8      	ldr	r0, [r7, #8]
 8004dd6:	f7ff fdbe 	bl	8004956 <xmit_datablock>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02f      	beq.n	8004e40 <USER_SPI_write+0xd8>
			count = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	e02c      	b.n	8004e40 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <USER_SPI_write+0xf4>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f003 0306 	and.w	r3, r3, #6
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <USER_SPI_write+0x92>
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	2097      	movs	r0, #151	; 0x97
 8004df6:	f7ff fde0 	bl	80049ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	2019      	movs	r0, #25
 8004dfe:	f7ff fddc 	bl	80049ba <send_cmd>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11b      	bne.n	8004e40 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004e08:	21fc      	movs	r1, #252	; 0xfc
 8004e0a:	68b8      	ldr	r0, [r7, #8]
 8004e0c:	f7ff fda3 	bl	8004956 <xmit_datablock>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <USER_SPI_write+0xc4>
				buff += 512;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ee      	bne.n	8004e08 <USER_SPI_write+0xa0>
 8004e2a:	e000      	b.n	8004e2e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004e2c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004e2e:	21fd      	movs	r1, #253	; 0xfd
 8004e30:	2000      	movs	r0, #0
 8004e32:	f7ff fd90 	bl	8004956 <xmit_datablock>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <USER_SPI_write+0xd8>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004e40:	f7ff fd38 	bl	80048b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000420 	.word	0x20000420
 8004e5c:	20000900 	.word	0x20000900

08004e60 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	603a      	str	r2, [r7, #0]
 8004e6a:	71fb      	strb	r3, [r7, #7]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <USER_SPI_ioctl+0x1a>
 8004e76:	2304      	movs	r3, #4
 8004e78:	e15a      	b.n	8005130 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004e7a:	4baf      	ldr	r3, [pc, #700]	; (8005138 <USER_SPI_ioctl+0x2d8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <USER_SPI_ioctl+0x2c>
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e151      	b.n	8005130 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004e92:	79bb      	ldrb	r3, [r7, #6]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	f200 8136 	bhi.w	8005106 <USER_SPI_ioctl+0x2a6>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <USER_SPI_ioctl+0x40>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004eb5 	.word	0x08004eb5
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08005107 	.word	0x08005107
 8004eac:	08004f75 	.word	0x08004f75
 8004eb0:	0800506b 	.word	0x0800506b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004eb4:	f7ff fd0c 	bl	80048d0 <spiselect>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8127 	beq.w	800510e <USER_SPI_ioctl+0x2ae>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004ec6:	e122      	b.n	800510e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004ec8:	2100      	movs	r1, #0
 8004eca:	2009      	movs	r0, #9
 8004ecc:	f7ff fd75 	bl	80049ba <send_cmd>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 811d 	bne.w	8005112 <USER_SPI_ioctl+0x2b2>
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	2110      	movs	r1, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fd10 	bl	8004904 <rcvr_datablock>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8113 	beq.w	8005112 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004eec:	7b3b      	ldrb	r3, [r7, #12]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d111      	bne.n	8004f1a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004ef6:	7d7b      	ldrb	r3, [r7, #21]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	7d3b      	ldrb	r3, [r7, #20]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	4413      	add	r3, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	029a      	lsls	r2, r3, #10
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e028      	b.n	8004f6c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004f1a:	7c7b      	ldrb	r3, [r7, #17]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	7dbb      	ldrb	r3, [r7, #22]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	4413      	add	r3, r2
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	7d7b      	ldrb	r3, [r7, #21]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4413      	add	r3, r2
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004f42:	7d3b      	ldrb	r3, [r7, #20]
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	7cbb      	ldrb	r3, [r7, #18]
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f58:	4413      	add	r3, r2
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004f5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f62:	3b09      	subs	r3, #9
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	409a      	lsls	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004f72:	e0ce      	b.n	8005112 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004f74:	4b71      	ldr	r3, [pc, #452]	; (800513c <USER_SPI_ioctl+0x2dc>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d031      	beq.n	8004fe4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004f80:	2100      	movs	r1, #0
 8004f82:	208d      	movs	r0, #141	; 0x8d
 8004f84:	f7ff fd19 	bl	80049ba <send_cmd>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 80c3 	bne.w	8005116 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004f90:	20ff      	movs	r0, #255	; 0xff
 8004f92:	f7ff fc25 	bl	80047e0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004f96:	f107 030c 	add.w	r3, r7, #12
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fcb1 	bl	8004904 <rcvr_datablock>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80b6 	beq.w	8005116 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004faa:	2330      	movs	r3, #48	; 0x30
 8004fac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004fb0:	e007      	b.n	8004fc2 <USER_SPI_ioctl+0x162>
 8004fb2:	20ff      	movs	r0, #255	; 0xff
 8004fb4:	f7ff fc14 	bl	80047e0 <xchg_spi>
 8004fb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004fc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f3      	bne.n	8004fb2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004fca:	7dbb      	ldrb	r3, [r7, #22]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2310      	movs	r3, #16
 8004fd4:	fa03 f202 	lsl.w	r2, r3, r2
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004fe2:	e098      	b.n	8005116 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2009      	movs	r0, #9
 8004fe8:	f7ff fce7 	bl	80049ba <send_cmd>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 8091 	bne.w	8005116 <USER_SPI_ioctl+0x2b6>
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	2110      	movs	r1, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fc82 	bl	8004904 <rcvr_datablock>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8087 	beq.w	8005116 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005008:	4b4c      	ldr	r3, [pc, #304]	; (800513c <USER_SPI_ioctl+0x2dc>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d012      	beq.n	800503a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005014:	7dbb      	ldrb	r3, [r7, #22]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800501c:	7dfa      	ldrb	r2, [r7, #23]
 800501e:	09d2      	lsrs	r2, r2, #7
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	4413      	add	r3, r2
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	7e7b      	ldrb	r3, [r7, #25]
 8005028:	099b      	lsrs	r3, r3, #6
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	461a      	mov	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e013      	b.n	8005062 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800503a:	7dbb      	ldrb	r3, [r7, #22]
 800503c:	109b      	asrs	r3, r3, #2
 800503e:	b29b      	uxth	r3, r3
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	3301      	adds	r3, #1
 8005046:	7dfa      	ldrb	r2, [r7, #23]
 8005048:	00d2      	lsls	r2, r2, #3
 800504a:	f002 0218 	and.w	r2, r2, #24
 800504e:	7df9      	ldrb	r1, [r7, #23]
 8005050:	0949      	lsrs	r1, r1, #5
 8005052:	b2c9      	uxtb	r1, r1
 8005054:	440a      	add	r2, r1
 8005056:	3201      	adds	r2, #1
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	461a      	mov	r2, r3
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005068:	e055      	b.n	8005116 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <USER_SPI_ioctl+0x2dc>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	2b00      	cmp	r3, #0
 8005074:	d051      	beq.n	800511a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005076:	f107 020c 	add.w	r2, r7, #12
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	210b      	movs	r1, #11
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff feee 	bl	8004e60 <USER_SPI_ioctl>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d149      	bne.n	800511e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800508a:	7b3b      	ldrb	r3, [r7, #12]
 800508c:	099b      	lsrs	r3, r3, #6
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <USER_SPI_ioctl+0x23e>
 8005094:	7dbb      	ldrb	r3, [r7, #22]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d041      	beq.n	8005122 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80050ae:	4b23      	ldr	r3, [pc, #140]	; (800513c <USER_SPI_ioctl+0x2dc>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	025b      	lsls	r3, r3, #9
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	025b      	lsls	r3, r3, #9
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80050c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c8:	2020      	movs	r0, #32
 80050ca:	f7ff fc76 	bl	80049ba <send_cmd>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d128      	bne.n	8005126 <USER_SPI_ioctl+0x2c6>
 80050d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050d6:	2021      	movs	r0, #33	; 0x21
 80050d8:	f7ff fc6f 	bl	80049ba <send_cmd>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d121      	bne.n	8005126 <USER_SPI_ioctl+0x2c6>
 80050e2:	2100      	movs	r1, #0
 80050e4:	2026      	movs	r0, #38	; 0x26
 80050e6:	f7ff fc68 	bl	80049ba <send_cmd>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d11a      	bne.n	8005126 <USER_SPI_ioctl+0x2c6>
 80050f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80050f4:	f7ff fbba 	bl	800486c <wait_ready>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d013      	beq.n	8005126 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005104:	e00f      	b.n	8005126 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005106:	2304      	movs	r3, #4
 8005108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800510c:	e00c      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		break;
 800510e:	bf00      	nop
 8005110:	e00a      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		break;
 8005112:	bf00      	nop
 8005114:	e008      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		break;
 8005116:	bf00      	nop
 8005118:	e006      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800511a:	bf00      	nop
 800511c:	e004      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800511e:	bf00      	nop
 8005120:	e002      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <USER_SPI_ioctl+0x2c8>
		break;
 8005126:	bf00      	nop
	}

	despiselect();
 8005128:	f7ff fbc4 	bl	80048b4 <despiselect>

	return res;
 800512c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005130:	4618      	mov	r0, r3
 8005132:	3730      	adds	r7, #48	; 0x30
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000420 	.word	0x20000420
 800513c:	20000900 	.word	0x20000900

08005140 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	4a08      	ldr	r2, [pc, #32]	; (8005170 <disk_status+0x30>)
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	79fa      	ldrb	r2, [r7, #7]
 8005158:	4905      	ldr	r1, [pc, #20]	; (8005170 <disk_status+0x30>)
 800515a:	440a      	add	r2, r1
 800515c:	7a12      	ldrb	r2, [r2, #8]
 800515e:	4610      	mov	r0, r2
 8005160:	4798      	blx	r3
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000934 	.word	0x20000934

08005174 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	4a0d      	ldr	r2, [pc, #52]	; (80051bc <disk_initialize+0x48>)
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d111      	bne.n	80051b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <disk_initialize+0x48>)
 8005190:	2101      	movs	r1, #1
 8005192:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <disk_initialize+0x48>)
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	79fa      	ldrb	r2, [r7, #7]
 80051a2:	4906      	ldr	r1, [pc, #24]	; (80051bc <disk_initialize+0x48>)
 80051a4:	440a      	add	r2, r1
 80051a6:	7a12      	ldrb	r2, [r2, #8]
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000934 	.word	0x20000934

080051c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <disk_read+0x3c>)
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	689c      	ldr	r4, [r3, #8]
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <disk_read+0x3c>)
 80051e0:	4413      	add	r3, r2
 80051e2:	7a18      	ldrb	r0, [r3, #8]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	47a0      	blx	r4
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd90      	pop	{r4, r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000934 	.word	0x20000934

08005200 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <disk_write+0x3c>)
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68dc      	ldr	r4, [r3, #12]
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	4a07      	ldr	r2, [pc, #28]	; (800523c <disk_write+0x3c>)
 8005220:	4413      	add	r3, r2
 8005222:	7a18      	ldrb	r0, [r3, #8]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	47a0      	blx	r4
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd90      	pop	{r4, r7, pc}
 800523a:	bf00      	nop
 800523c:	20000934 	.word	0x20000934

08005240 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	603a      	str	r2, [r7, #0]
 800524a:	71fb      	strb	r3, [r7, #7]
 800524c:	460b      	mov	r3, r1
 800524e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <disk_ioctl+0x38>)
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	79fa      	ldrb	r2, [r7, #7]
 800525e:	4906      	ldr	r1, [pc, #24]	; (8005278 <disk_ioctl+0x38>)
 8005260:	440a      	add	r2, r1
 8005262:	7a10      	ldrb	r0, [r2, #8]
 8005264:	79b9      	ldrb	r1, [r7, #6]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	4798      	blx	r3
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
  return res;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000934 	.word	0x20000934

0800527c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3301      	adds	r3, #1
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	b21a      	sxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b21b      	sxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b21b      	sxth	r3, r3
 800529c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800529e:	89fb      	ldrh	r3, [r7, #14]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3303      	adds	r3, #3
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	3202      	adds	r2, #2
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	3201      	adds	r2, #1
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	887a      	ldrh	r2, [r7, #2]
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	0a1b      	lsrs	r3, r3, #8
 8005342:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	1c53      	adds	r3, r2, #1
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	1c59      	adds	r1, r3, #1
 80053a4:	6179      	str	r1, [r7, #20]
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f1      	bne.n	800539a <mem_cpy+0x1a>
	}
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	617a      	str	r2, [r7, #20]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f3      	bne.n	80053d2 <mem_set+0x10>
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80053f8:	b480      	push	{r7}
 80053fa:	b089      	sub	sp, #36	; 0x24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	61fa      	str	r2, [r7, #28]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	4619      	mov	r1, r3
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	61ba      	str	r2, [r7, #24]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	1acb      	subs	r3, r1, r3
 8005424:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3b01      	subs	r3, #1
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <mem_cmp+0x40>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0eb      	beq.n	8005410 <mem_cmp+0x18>

	return r;
 8005438:	697b      	ldr	r3, [r7, #20]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005450:	e002      	b.n	8005458 <chk_chr+0x12>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3301      	adds	r3, #1
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <chk_chr+0x26>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	4293      	cmp	r3, r2
 800546a:	d1f2      	bne.n	8005452 <chk_chr+0xc>
	return *str;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	781b      	ldrb	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e029      	b.n	80054e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005490:	4a27      	ldr	r2, [pc, #156]	; (8005530 <chk_lock+0xb4>)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	4413      	add	r3, r2
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01d      	beq.n	80054da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800549e:	4a24      	ldr	r2, [pc, #144]	; (8005530 <chk_lock+0xb4>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4413      	add	r3, r2
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d116      	bne.n	80054de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <chk_lock+0xb4>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4413      	add	r3, r2
 80054b8:	3304      	adds	r3, #4
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d10c      	bne.n	80054de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054c4:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <chk_lock+0xb4>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4413      	add	r3, r2
 80054cc:	3308      	adds	r3, #8
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d102      	bne.n	80054de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054d8:	e007      	b.n	80054ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d9d2      	bls.n	8005490 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d109      	bne.n	8005504 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <chk_lock+0x80>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d101      	bne.n	8005500 <chk_lock+0x84>
 80054fc:	2300      	movs	r3, #0
 80054fe:	e010      	b.n	8005522 <chk_lock+0xa6>
 8005500:	2312      	movs	r3, #18
 8005502:	e00e      	b.n	8005522 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <chk_lock+0xa0>
 800550a:	4a09      	ldr	r2, [pc, #36]	; (8005530 <chk_lock+0xb4>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	4413      	add	r3, r2
 8005512:	330c      	adds	r3, #12
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	d101      	bne.n	8005520 <chk_lock+0xa4>
 800551c:	2310      	movs	r3, #16
 800551e:	e000      	b.n	8005522 <chk_lock+0xa6>
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000914 	.word	0x20000914

08005534 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	e002      	b.n	8005546 <enq_lock+0x12>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3301      	adds	r3, #1
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d806      	bhi.n	800555a <enq_lock+0x26>
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <enq_lock+0x40>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	4413      	add	r3, r2
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f2      	bne.n	8005540 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b02      	cmp	r3, #2
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000914 	.word	0x20000914

08005578 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e01f      	b.n	80055c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005588:	4a41      	ldr	r2, [pc, #260]	; (8005690 <inc_lock+0x118>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	4413      	add	r3, r2
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d113      	bne.n	80055c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800559a:	4a3d      	ldr	r2, [pc, #244]	; (8005690 <inc_lock+0x118>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	4413      	add	r3, r2
 80055a2:	3304      	adds	r3, #4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d109      	bne.n	80055c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80055ae:	4a38      	ldr	r2, [pc, #224]	; (8005690 <inc_lock+0x118>)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	4413      	add	r3, r2
 80055b6:	3308      	adds	r3, #8
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80055be:	429a      	cmp	r2, r3
 80055c0:	d006      	beq.n	80055d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3301      	adds	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d9dc      	bls.n	8005588 <inc_lock+0x10>
 80055ce:	e000      	b.n	80055d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80055d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d132      	bne.n	800563e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e002      	b.n	80055e4 <inc_lock+0x6c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d806      	bhi.n	80055f8 <inc_lock+0x80>
 80055ea:	4a29      	ldr	r2, [pc, #164]	; (8005690 <inc_lock+0x118>)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	4413      	add	r3, r2
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f2      	bne.n	80055de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d101      	bne.n	8005602 <inc_lock+0x8a>
 80055fe:	2300      	movs	r3, #0
 8005600:	e040      	b.n	8005684 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4922      	ldr	r1, [pc, #136]	; (8005690 <inc_lock+0x118>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	440b      	add	r3, r1
 800560e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	491e      	ldr	r1, [pc, #120]	; (8005690 <inc_lock+0x118>)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	440b      	add	r3, r1
 800561c:	3304      	adds	r3, #4
 800561e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	491a      	ldr	r1, [pc, #104]	; (8005690 <inc_lock+0x118>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	440b      	add	r3, r1
 800562c:	3308      	adds	r3, #8
 800562e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <inc_lock+0x118>)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	4413      	add	r3, r2
 8005638:	330c      	adds	r3, #12
 800563a:	2200      	movs	r2, #0
 800563c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <inc_lock+0xe0>
 8005644:	4a12      	ldr	r2, [pc, #72]	; (8005690 <inc_lock+0x118>)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	4413      	add	r3, r2
 800564c:	330c      	adds	r3, #12
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <inc_lock+0xe0>
 8005654:	2300      	movs	r3, #0
 8005656:	e015      	b.n	8005684 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d108      	bne.n	8005670 <inc_lock+0xf8>
 800565e:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <inc_lock+0x118>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	4413      	add	r3, r2
 8005666:	330c      	adds	r3, #12
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	3301      	adds	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	e001      	b.n	8005674 <inc_lock+0xfc>
 8005670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005674:	4906      	ldr	r1, [pc, #24]	; (8005690 <inc_lock+0x118>)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	440b      	add	r3, r1
 800567c:	330c      	adds	r3, #12
 800567e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000914 	.word	0x20000914

08005694 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d825      	bhi.n	80056f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80056a8:	4a17      	ldr	r2, [pc, #92]	; (8005708 <dec_lock+0x74>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	4413      	add	r3, r2
 80056b0:	330c      	adds	r3, #12
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056b6:	89fb      	ldrh	r3, [r7, #14]
 80056b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056bc:	d101      	bne.n	80056c2 <dec_lock+0x2e>
 80056be:	2300      	movs	r3, #0
 80056c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <dec_lock+0x3a>
 80056c8:	89fb      	ldrh	r3, [r7, #14]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <dec_lock+0x74>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	4413      	add	r3, r2
 80056d6:	330c      	adds	r3, #12
 80056d8:	89fa      	ldrh	r2, [r7, #14]
 80056da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056dc:	89fb      	ldrh	r3, [r7, #14]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <dec_lock+0x5a>
 80056e2:	4a09      	ldr	r2, [pc, #36]	; (8005708 <dec_lock+0x74>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	4413      	add	r3, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	737b      	strb	r3, [r7, #13]
 80056f2:	e001      	b.n	80056f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80056f4:	2302      	movs	r3, #2
 80056f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80056f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000914 	.word	0x20000914

0800570c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e010      	b.n	800573c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800571a:	4a0d      	ldr	r2, [pc, #52]	; (8005750 <clear_lock+0x44>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d105      	bne.n	8005736 <clear_lock+0x2a>
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <clear_lock+0x44>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	4413      	add	r3, r2
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d9eb      	bls.n	800571a <clear_lock+0xe>
	}
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20000914 	.word	0x20000914

08005754 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d034      	beq.n	80057d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	7858      	ldrb	r0, [r3, #1]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005778:	2301      	movs	r3, #1
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	f7ff fd40 	bl	8005200 <disk_write>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
 800578a:	e022      	b.n	80057d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d217      	bcs.n	80057d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e010      	b.n	80057cc <sync_window+0x78>
					wsect += fs->fsize;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7858      	ldrb	r0, [r3, #1]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057be:	2301      	movs	r3, #1
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	f7ff fd1d 	bl	8005200 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d8eb      	bhi.n	80057aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d01b      	beq.n	800582c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ffad 	bl	8005754 <sync_window>
 80057fa:	4603      	mov	r3, r0
 80057fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d113      	bne.n	800582c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7858      	ldrb	r0, [r3, #1]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800580e:	2301      	movs	r3, #1
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	f7ff fcd5 	bl	80051c0 <disk_read>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800581c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005820:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff87 	bl	8005754 <sync_window>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d158      	bne.n	8005902 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d148      	bne.n	80058ea <sync_fs+0xb2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d144      	bne.n	80058ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3330      	adds	r3, #48	; 0x30
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fda9 	bl	80053c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3330      	adds	r3, #48	; 0x30
 8005874:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005878:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fd38 	bl	80052f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3330      	adds	r3, #48	; 0x30
 8005886:	4921      	ldr	r1, [pc, #132]	; (800590c <sync_fs+0xd4>)
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fd4d 	bl	8005328 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3330      	adds	r3, #48	; 0x30
 8005892:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005896:	491e      	ldr	r1, [pc, #120]	; (8005910 <sync_fs+0xd8>)
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fd45 	bl	8005328 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3330      	adds	r3, #48	; 0x30
 80058a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7ff fd3b 	bl	8005328 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3330      	adds	r3, #48	; 0x30
 80058b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f7ff fd31 	bl	8005328 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7858      	ldrb	r0, [r3, #1]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	2301      	movs	r3, #1
 80058e0:	f7ff fc8e 	bl	8005200 <disk_write>
			fs->fsi_flag = 0;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	2200      	movs	r2, #0
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fca4 	bl	8005240 <disk_ioctl>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <sync_fs+0xca>
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	41615252 	.word	0x41615252
 8005910:	61417272 	.word	0x61417272

08005914 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3b02      	subs	r3, #2
 8005922:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	3b02      	subs	r3, #2
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d301      	bcc.n	8005934 <clust2sect+0x20>
 8005930:	2300      	movs	r3, #0
 8005932:	e008      	b.n	8005946 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	895b      	ldrh	r3, [r3, #10]
 8005938:	461a      	mov	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	fb03 f202 	mul.w	r2, r3, r2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	4413      	add	r3, r2
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d904      	bls.n	8005972 <get_fat+0x20>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005972:	2301      	movs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e08f      	b.n	8005a98 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b03      	cmp	r3, #3
 8005984:	d062      	beq.n	8005a4c <get_fat+0xfa>
 8005986:	2b03      	cmp	r3, #3
 8005988:	dc7c      	bgt.n	8005a84 <get_fat+0x132>
 800598a:	2b01      	cmp	r3, #1
 800598c:	d002      	beq.n	8005994 <get_fat+0x42>
 800598e:	2b02      	cmp	r3, #2
 8005990:	d042      	beq.n	8005a18 <get_fat+0xc6>
 8005992:	e077      	b.n	8005a84 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6a1a      	ldr	r2, [r3, #32]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	0a5b      	lsrs	r3, r3, #9
 80059aa:	4413      	add	r3, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	6938      	ldr	r0, [r7, #16]
 80059b0:	f7ff ff14 	bl	80057dc <move_window>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d167      	bne.n	8005a8a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	60fa      	str	r2, [r7, #12]
 80059c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6a1a      	ldr	r2, [r3, #32]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	4413      	add	r3, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	6938      	ldr	r0, [r7, #16]
 80059dc:	f7ff fefe 	bl	80057dc <move_window>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d153      	bne.n	8005a8e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4413      	add	r3, r2
 80059f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	461a      	mov	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <get_fat+0xbc>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	e002      	b.n	8005a14 <get_fat+0xc2>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a14:	617b      	str	r3, [r7, #20]
			break;
 8005a16:	e03f      	b.n	8005a98 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	4413      	add	r3, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	6938      	ldr	r0, [r7, #16]
 8005a26:	f7ff fed9 	bl	80057dc <move_window>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d130      	bne.n	8005a92 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a3e:	4413      	add	r3, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fc1b 	bl	800527c <ld_word>
 8005a46:	4603      	mov	r3, r0
 8005a48:	617b      	str	r3, [r7, #20]
			break;
 8005a4a:	e025      	b.n	8005a98 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	4413      	add	r3, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6938      	ldr	r0, [r7, #16]
 8005a5a:	f7ff febf 	bl	80057dc <move_window>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d118      	bne.n	8005a96 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005a72:	4413      	add	r3, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fc19 	bl	80052ac <ld_dword>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a80:	617b      	str	r3, [r7, #20]
			break;
 8005a82:	e009      	b.n	8005a98 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e006      	b.n	8005a98 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a8a:	bf00      	nop
 8005a8c:	e004      	b.n	8005a98 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a8e:	bf00      	nop
 8005a90:	e002      	b.n	8005a98 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a96:	bf00      	nop
		}
	}

	return val;
 8005a98:	697b      	ldr	r3, [r7, #20]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005aa2:	b590      	push	{r4, r7, lr}
 8005aa4:	b089      	sub	sp, #36	; 0x24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f240 80d9 	bls.w	8005c6c <put_fat+0x1ca>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	f080 80d3 	bcs.w	8005c6c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	f000 8096 	beq.w	8005bfc <put_fat+0x15a>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	f300 80cb 	bgt.w	8005c6c <put_fat+0x1ca>
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d002      	beq.n	8005ae0 <put_fat+0x3e>
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d06e      	beq.n	8005bbc <put_fat+0x11a>
 8005ade:	e0c5      	b.n	8005c6c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4413      	add	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	0a5b      	lsrs	r3, r3, #9
 8005af6:	4413      	add	r3, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fe6e 	bl	80057dc <move_window>
 8005b00:	4603      	mov	r3, r0
 8005b02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b04:	7ffb      	ldrb	r3, [r7, #31]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 80a9 	bne.w	8005c5e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	61b9      	str	r1, [r7, #24]
 8005b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1c:	4413      	add	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <put_fat+0xa4>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b25a      	sxtb	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	e001      	b.n	8005b4a <put_fat+0xa8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1a      	ldr	r2, [r3, #32]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	0a5b      	lsrs	r3, r3, #9
 8005b5c:	4413      	add	r3, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fe3b 	bl	80057dc <move_window>
 8005b66:	4603      	mov	r3, r0
 8005b68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b6a:	7ffb      	ldrb	r3, [r7, #31]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d178      	bne.n	8005c62 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7c:	4413      	add	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <put_fat+0xf0>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e00e      	b.n	8005bb0 <put_fat+0x10e>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	f023 030f 	bic.w	r3, r3, #15
 8005b9c:	b25a      	sxtb	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	70da      	strb	r2, [r3, #3]
			break;
 8005bba:	e057      	b.n	8005c6c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fe07 	bl	80057dc <move_window>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d146      	bne.n	8005c66 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005be6:	4413      	add	r3, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	b292      	uxth	r2, r2
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fb7f 	bl	80052f2 <st_word>
			fs->wflag = 1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	70da      	strb	r2, [r3, #3]
			break;
 8005bfa:	e037      	b.n	8005c6c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	09db      	lsrs	r3, r3, #7
 8005c04:	4413      	add	r3, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff fde7 	bl	80057dc <move_window>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d128      	bne.n	8005c6a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fb3c 	bl	80052ac <ld_dword>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c3a:	4323      	orrs	r3, r4
 8005c3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c4c:	4413      	add	r3, r2
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fb69 	bl	8005328 <st_dword>
			fs->wflag = 1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	70da      	strb	r2, [r3, #3]
			break;
 8005c5c:	e006      	b.n	8005c6c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c6a:	bf00      	nop
		}
	}
	return res;
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3724      	adds	r7, #36	; 0x24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}

08005c76 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d904      	bls.n	8005c9c <remove_chain+0x26>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d301      	bcc.n	8005ca0 <remove_chain+0x2a>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e04b      	b.n	8005d38 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	69b8      	ldr	r0, [r7, #24]
 8005cae:	f7ff fef8 	bl	8005aa2 <put_fat>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <remove_chain+0x4a>
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	e03b      	b.n	8005d38 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f7ff fe45 	bl	8005952 <get_fat>
 8005cc8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d031      	beq.n	8005d34 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <remove_chain+0x64>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e02e      	b.n	8005d38 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce0:	d101      	bne.n	8005ce6 <remove_chain+0x70>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e028      	b.n	8005d38 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f7ff fed9 	bl	8005aa2 <put_fat>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005cf4:	7ffb      	ldrb	r3, [r7, #31]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <remove_chain+0x88>
 8005cfa:	7ffb      	ldrb	r3, [r7, #31]
 8005cfc:	e01c      	b.n	8005d38 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	3b02      	subs	r3, #2
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d20b      	bcs.n	8005d24 <remove_chain+0xae>
			fs->free_clst++;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	791b      	ldrb	r3, [r3, #4]
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3c6      	bcc.n	8005cc0 <remove_chain+0x4a>
 8005d32:	e000      	b.n	8005d36 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d34:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <create_chain+0x2c>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d31b      	bcc.n	8005da4 <create_chain+0x64>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	e018      	b.n	8005da4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fdec 	bl	8005952 <get_fat>
 8005d7a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d801      	bhi.n	8005d86 <create_chain+0x46>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e070      	b.n	8005e68 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8c:	d101      	bne.n	8005d92 <create_chain+0x52>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	e06a      	b.n	8005e68 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d201      	bcs.n	8005da0 <create_chain+0x60>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	e063      	b.n	8005e68 <create_chain+0x128>
		scl = clst;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d307      	bcc.n	8005dc8 <create_chain+0x88>
				ncl = 2;
 8005db8:	2302      	movs	r3, #2
 8005dba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d901      	bls.n	8005dc8 <create_chain+0x88>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e04f      	b.n	8005e68 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fdc1 	bl	8005952 <get_fat>
 8005dd0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d003      	beq.n	8005de6 <create_chain+0xa6>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de4:	d101      	bne.n	8005dea <create_chain+0xaa>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	e03e      	b.n	8005e68 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d1da      	bne.n	8005da8 <create_chain+0x68>
 8005df2:	2300      	movs	r3, #0
 8005df4:	e038      	b.n	8005e68 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005df6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	6938      	ldr	r0, [r7, #16]
 8005e00:	f7ff fe4f 	bl	8005aa2 <put_fat>
 8005e04:	4603      	mov	r3, r0
 8005e06:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <create_chain+0xe2>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6938      	ldr	r0, [r7, #16]
 8005e1a:	f7ff fe42 	bl	8005aa2 <put_fat>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d116      	bne.n	8005e56 <create_chain+0x116>
		fs->last_clst = ncl;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	3b02      	subs	r3, #2
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d804      	bhi.n	8005e46 <create_chain+0x106>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	711a      	strb	r2, [r3, #4]
 8005e54:	e007      	b.n	8005e66 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d102      	bne.n	8005e62 <create_chain+0x122>
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e60:	e000      	b.n	8005e64 <create_chain+0x124>
 8005e62:	2301      	movs	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e66:	69fb      	ldr	r3, [r7, #28]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	3304      	adds	r3, #4
 8005e86:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	0a5b      	lsrs	r3, r3, #9
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	8952      	ldrh	r2, [r2, #10]
 8005e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1d1a      	adds	r2, r3, #4
 8005e9a:	613a      	str	r2, [r7, #16]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <clmt_clust+0x3a>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e010      	b.n	8005ecc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d307      	bcc.n	8005ec2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ec0:	e7e9      	b.n	8005e96 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005ec2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eee:	d204      	bcs.n	8005efa <dir_sdi+0x22>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <dir_sdi+0x26>
		return FR_INT_ERR;
 8005efa:	2302      	movs	r3, #2
 8005efc:	e063      	b.n	8005fc6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <dir_sdi+0x46>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d902      	bls.n	8005f1e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10c      	bne.n	8005f3e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	8912      	ldrh	r2, [r2, #8]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d301      	bcc.n	8005f34 <dir_sdi+0x5c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e048      	b.n	8005fc6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	61da      	str	r2, [r3, #28]
 8005f3c:	e029      	b.n	8005f92 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	895b      	ldrh	r3, [r3, #10]
 8005f42:	025b      	lsls	r3, r3, #9
 8005f44:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f46:	e019      	b.n	8005f7c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fd00 	bl	8005952 <get_fat>
 8005f52:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5a:	d101      	bne.n	8005f60 <dir_sdi+0x88>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e032      	b.n	8005fc6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d904      	bls.n	8005f70 <dir_sdi+0x98>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d301      	bcc.n	8005f74 <dir_sdi+0x9c>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e028      	b.n	8005fc6 <dir_sdi+0xee>
			ofs -= csz;
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d2e1      	bcs.n	8005f48 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	6938      	ldr	r0, [r7, #16]
 8005f88:	f7ff fcc4 	bl	8005914 <clust2sect>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <dir_sdi+0xcc>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e010      	b.n	8005fc6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	0a5b      	lsrs	r3, r3, #9
 8005fac:	441a      	add	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbe:	441a      	add	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b086      	sub	sp, #24
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	3320      	adds	r3, #32
 8005fe4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <dir_next+0x28>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff4:	d301      	bcc.n	8005ffa <dir_next+0x2c>
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	e0aa      	b.n	8006150 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 8098 	bne.w	8006136 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	8912      	ldrh	r2, [r2, #8]
 8006020:	4293      	cmp	r3, r2
 8006022:	f0c0 8088 	bcc.w	8006136 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	61da      	str	r2, [r3, #28]
 800602c:	2304      	movs	r3, #4
 800602e:	e08f      	b.n	8006150 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	0a5b      	lsrs	r3, r3, #9
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	8952      	ldrh	r2, [r2, #10]
 8006038:	3a01      	subs	r2, #1
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d17a      	bne.n	8006136 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f7ff fc82 	bl	8005952 <get_fat>
 800604e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d801      	bhi.n	800605a <dir_next+0x8c>
 8006056:	2302      	movs	r3, #2
 8006058:	e07a      	b.n	8006150 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006060:	d101      	bne.n	8006066 <dir_next+0x98>
 8006062:	2301      	movs	r3, #1
 8006064:	e074      	b.n	8006150 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	429a      	cmp	r2, r3
 800606e:	d358      	bcc.n	8006122 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	61da      	str	r2, [r3, #28]
 800607c:	2304      	movs	r3, #4
 800607e:	e067      	b.n	8006150 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7ff fe59 	bl	8005d40 <create_chain>
 800608e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <dir_next+0xcc>
 8006096:	2307      	movs	r3, #7
 8006098:	e05a      	b.n	8006150 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <dir_next+0xd6>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e055      	b.n	8006150 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060aa:	d101      	bne.n	80060b0 <dir_next+0xe2>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e04f      	b.n	8006150 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff fb4f 	bl	8005754 <sync_window>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <dir_next+0xf2>
 80060bc:	2301      	movs	r3, #1
 80060be:	e047      	b.n	8006150 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3330      	adds	r3, #48	; 0x30
 80060c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c8:	2100      	movs	r1, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff f979 	bl	80053c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	6979      	ldr	r1, [r7, #20]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fc1c 	bl	8005914 <clust2sect>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80060e2:	e012      	b.n	800610a <dir_next+0x13c>
						fs->wflag = 1;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fb32 	bl	8005754 <sync_window>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <dir_next+0x12c>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e02a      	b.n	8006150 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3301      	adds	r3, #1
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	62da      	str	r2, [r3, #44]	; 0x2c
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	895b      	ldrh	r3, [r3, #10]
 800610e:	461a      	mov	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4293      	cmp	r3, r2
 8006114:	d3e6      	bcc.n	80060e4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad2      	subs	r2, r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fbf2 	bl	8005914 <clust2sect>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006148:	441a      	add	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006168:	2100      	movs	r1, #0
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff feb4 	bl	8005ed8 <dir_sdi>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d12b      	bne.n	80061d2 <dir_alloc+0x7a>
		n = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4619      	mov	r1, r3
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fb29 	bl	80057dc <move_window>
 800618a:	4603      	mov	r3, r0
 800618c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11d      	bne.n	80061d0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2be5      	cmp	r3, #229	; 0xe5
 800619c:	d004      	beq.n	80061a8 <dir_alloc+0x50>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d107      	bne.n	80061b8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	3301      	adds	r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d102      	bne.n	80061bc <dir_alloc+0x64>
 80061b6:	e00c      	b.n	80061d2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80061bc:	2101      	movs	r1, #1
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ff05 	bl	8005fce <dir_next>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0d7      	beq.n	800617e <dir_alloc+0x26>
 80061ce:	e000      	b.n	80061d2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80061d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d101      	bne.n	80061dc <dir_alloc+0x84>
 80061d8:	2307      	movs	r3, #7
 80061da:	75fb      	strb	r3, [r7, #23]
	return res;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	331a      	adds	r3, #26
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff f841 	bl	800527c <ld_word>
 80061fa:	4603      	mov	r3, r0
 80061fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d109      	bne.n	800621a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff f836 	bl	800527c <ld_word>
 8006210:	4603      	mov	r3, r0
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800621a:	68fb      	ldr	r3, [r7, #12]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	331a      	adds	r3, #26
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	b292      	uxth	r2, r2
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f859 	bl	80052f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d109      	bne.n	800625c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f103 0214 	add.w	r2, r3, #20
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	b29b      	uxth	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7ff f84b 	bl	80052f2 <st_word>
	}
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006272:	2100      	movs	r1, #0
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fe2f 	bl	8005ed8 <dir_sdi>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <dir_find+0x24>
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	e03e      	b.n	8006306 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4619      	mov	r1, r3
 800628e:	6938      	ldr	r0, [r7, #16]
 8006290:	f7ff faa4 	bl	80057dc <move_window>
 8006294:	4603      	mov	r3, r0
 8006296:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d12f      	bne.n	80062fe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <dir_find+0x4e>
 80062ac:	2304      	movs	r3, #4
 80062ae:	75fb      	strb	r3, [r7, #23]
 80062b0:	e028      	b.n	8006304 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	330b      	adds	r3, #11
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	330b      	adds	r3, #11
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <dir_find+0x86>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a18      	ldr	r0, [r3, #32]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3324      	adds	r3, #36	; 0x24
 80062dc:	220b      	movs	r2, #11
 80062de:	4619      	mov	r1, r3
 80062e0:	f7ff f88a 	bl	80053f8 <mem_cmp>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062ea:	2100      	movs	r1, #0
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fe6e 	bl	8005fce <dir_next>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0c5      	beq.n	8006288 <dir_find+0x24>
 80062fc:	e002      	b.n	8006304 <dir_find+0xa0>
		if (res != FR_OK) break;
 80062fe:	bf00      	nop
 8006300:	e000      	b.n	8006304 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006302:	bf00      	nop

	return res;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800631c:	2101      	movs	r1, #1
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff ff1a 	bl	8006158 <dir_alloc>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d11c      	bne.n	8006368 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	4619      	mov	r1, r3
 8006334:	68b8      	ldr	r0, [r7, #8]
 8006336:	f7ff fa51 	bl	80057dc <move_window>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d111      	bne.n	8006368 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	2220      	movs	r2, #32
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f838 	bl	80053c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a18      	ldr	r0, [r3, #32]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3324      	adds	r3, #36	; 0x24
 800635a:	220b      	movs	r2, #11
 800635c:	4619      	mov	r1, r3
 800635e:	f7ff f80f 	bl	8005380 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2201      	movs	r2, #1
 8006366:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800638a:	220b      	movs	r2, #11
 800638c:	2120      	movs	r1, #32
 800638e:	68b8      	ldr	r0, [r7, #8]
 8006390:	f7ff f817 	bl	80053c2 <mem_set>
	si = i = 0; ni = 8;
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	2308      	movs	r3, #8
 800639e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80063ae:	7efb      	ldrb	r3, [r7, #27]
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d94e      	bls.n	8006452 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80063b4:	7efb      	ldrb	r3, [r7, #27]
 80063b6:	2b2f      	cmp	r3, #47	; 0x2f
 80063b8:	d006      	beq.n	80063c8 <create_name+0x54>
 80063ba:	7efb      	ldrb	r3, [r7, #27]
 80063bc:	2b5c      	cmp	r3, #92	; 0x5c
 80063be:	d110      	bne.n	80063e2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80063c0:	e002      	b.n	80063c8 <create_name+0x54>
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	3301      	adds	r3, #1
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b2f      	cmp	r3, #47	; 0x2f
 80063d2:	d0f6      	beq.n	80063c2 <create_name+0x4e>
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b5c      	cmp	r3, #92	; 0x5c
 80063de:	d0f0      	beq.n	80063c2 <create_name+0x4e>
			break;
 80063e0:	e038      	b.n	8006454 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80063e2:	7efb      	ldrb	r3, [r7, #27]
 80063e4:	2b2e      	cmp	r3, #46	; 0x2e
 80063e6:	d003      	beq.n	80063f0 <create_name+0x7c>
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d30c      	bcc.n	800640a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b0b      	cmp	r3, #11
 80063f4:	d002      	beq.n	80063fc <create_name+0x88>
 80063f6:	7efb      	ldrb	r3, [r7, #27]
 80063f8:	2b2e      	cmp	r3, #46	; 0x2e
 80063fa:	d001      	beq.n	8006400 <create_name+0x8c>
 80063fc:	2306      	movs	r3, #6
 80063fe:	e044      	b.n	800648a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006400:	2308      	movs	r3, #8
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	230b      	movs	r3, #11
 8006406:	617b      	str	r3, [r7, #20]
			continue;
 8006408:	e022      	b.n	8006450 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800640a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da04      	bge.n	800641c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006412:	7efb      	ldrb	r3, [r7, #27]
 8006414:	3b80      	subs	r3, #128	; 0x80
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <create_name+0x120>)
 8006418:	5cd3      	ldrb	r3, [r2, r3]
 800641a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800641c:	7efb      	ldrb	r3, [r7, #27]
 800641e:	4619      	mov	r1, r3
 8006420:	481d      	ldr	r0, [pc, #116]	; (8006498 <create_name+0x124>)
 8006422:	f7ff f810 	bl	8005446 <chk_chr>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <create_name+0xbc>
 800642c:	2306      	movs	r3, #6
 800642e:	e02c      	b.n	800648a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006430:	7efb      	ldrb	r3, [r7, #27]
 8006432:	2b60      	cmp	r3, #96	; 0x60
 8006434:	d905      	bls.n	8006442 <create_name+0xce>
 8006436:	7efb      	ldrb	r3, [r7, #27]
 8006438:	2b7a      	cmp	r3, #122	; 0x7a
 800643a:	d802      	bhi.n	8006442 <create_name+0xce>
 800643c:	7efb      	ldrb	r3, [r7, #27]
 800643e:	3b20      	subs	r3, #32
 8006440:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	613a      	str	r2, [r7, #16]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4413      	add	r3, r2
 800644c:	7efa      	ldrb	r2, [r7, #27]
 800644e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006450:	e7a6      	b.n	80063a0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006452:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	441a      	add	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <create_name+0xf4>
 8006464:	2306      	movs	r3, #6
 8006466:	e010      	b.n	800648a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2be5      	cmp	r3, #229	; 0xe5
 800646e:	d102      	bne.n	8006476 <create_name+0x102>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2205      	movs	r2, #5
 8006474:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006476:	7efb      	ldrb	r3, [r7, #27]
 8006478:	2b20      	cmp	r3, #32
 800647a:	d801      	bhi.n	8006480 <create_name+0x10c>
 800647c:	2204      	movs	r2, #4
 800647e:	e000      	b.n	8006482 <create_name+0x10e>
 8006480:	2200      	movs	r2, #0
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	330b      	adds	r3, #11
 8006486:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006488:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	0800b258 	.word	0x0800b258
 8006498:	0800b1bc 	.word	0x0800b1bc

0800649c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064b0:	e002      	b.n	80064b8 <follow_path+0x1c>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b2f      	cmp	r3, #47	; 0x2f
 80064be:	d0f8      	beq.n	80064b2 <follow_path+0x16>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b5c      	cmp	r3, #92	; 0x5c
 80064c6:	d0f4      	beq.n	80064b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b1f      	cmp	r3, #31
 80064d4:	d80a      	bhi.n	80064ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2280      	movs	r2, #128	; 0x80
 80064da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fcf9 	bl	8005ed8 <dir_sdi>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
 80064ea:	e043      	b.n	8006574 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064ec:	463b      	mov	r3, r7
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff3f 	bl	8006374 <create_name>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d134      	bne.n	800656a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff feaf 	bl	8006264 <dir_find>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006510:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d127      	bne.n	800656e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d122      	bne.n	800656e <follow_path+0xd2>
 8006528:	2305      	movs	r3, #5
 800652a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800652c:	e01f      	b.n	800656e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11c      	bne.n	8006572 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	799b      	ldrb	r3, [r3, #6]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006544:	2305      	movs	r3, #5
 8006546:	75fb      	strb	r3, [r7, #23]
 8006548:	e014      	b.n	8006574 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	4413      	add	r3, r2
 800655a:	4619      	mov	r1, r3
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fe42 	bl	80061e6 <ld_clust>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006568:	e7c0      	b.n	80064ec <follow_path+0x50>
			if (res != FR_OK) break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <follow_path+0xd8>
				break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006572:	bf00      	nop
			}
		}
	}

	return res;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800658a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d031      	beq.n	80065f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e002      	b.n	80065a2 <get_ldnumber+0x24>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3301      	adds	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d903      	bls.n	80065b2 <get_ldnumber+0x34>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b3a      	cmp	r3, #58	; 0x3a
 80065b0:	d1f4      	bne.n	800659c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b3a      	cmp	r3, #58	; 0x3a
 80065b8:	d11c      	bne.n	80065f4 <get_ldnumber+0x76>
			tp = *path;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	60fa      	str	r2, [r7, #12]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	3b30      	subs	r3, #48	; 0x30
 80065ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d80e      	bhi.n	80065f0 <get_ldnumber+0x72>
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d10a      	bne.n	80065f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <get_ldnumber+0x72>
					vol = (int)i;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	3301      	adds	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	e002      	b.n	80065fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80065f8:	693b      	ldr	r3, [r7, #16]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	70da      	strb	r2, [r3, #3]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800661e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff f8da 	bl	80057dc <move_window>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <check_fs+0x2a>
 800662e:	2304      	movs	r3, #4
 8006630:	e038      	b.n	80066a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3330      	adds	r3, #48	; 0x30
 8006636:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fe1e 	bl	800527c <ld_word>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006648:	429a      	cmp	r2, r3
 800664a:	d001      	beq.n	8006650 <check_fs+0x48>
 800664c:	2303      	movs	r3, #3
 800664e:	e029      	b.n	80066a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006656:	2be9      	cmp	r3, #233	; 0xe9
 8006658:	d009      	beq.n	800666e <check_fs+0x66>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006660:	2beb      	cmp	r3, #235	; 0xeb
 8006662:	d11e      	bne.n	80066a2 <check_fs+0x9a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800666a:	2b90      	cmp	r3, #144	; 0x90
 800666c:	d119      	bne.n	80066a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3330      	adds	r3, #48	; 0x30
 8006672:	3336      	adds	r3, #54	; 0x36
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fe19 	bl	80052ac <ld_dword>
 800667a:	4603      	mov	r3, r0
 800667c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <check_fs+0xa4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <check_fs+0x82>
 8006686:	2300      	movs	r3, #0
 8006688:	e00c      	b.n	80066a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3330      	adds	r3, #48	; 0x30
 800668e:	3352      	adds	r3, #82	; 0x52
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fe0b 	bl	80052ac <ld_dword>
 8006696:	4603      	mov	r3, r0
 8006698:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <check_fs+0xa8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <check_fs+0x9a>
 800669e:	2300      	movs	r3, #0
 80066a0:	e000      	b.n	80066a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066a2:	2302      	movs	r3, #2
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	00544146 	.word	0x00544146
 80066b0:	33544146 	.word	0x33544146

080066b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b096      	sub	sp, #88	; 0x58
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff ff58 	bl	800657e <get_ldnumber>
 80066ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da01      	bge.n	80066da <find_volume+0x26>
 80066d6:	230b      	movs	r3, #11
 80066d8:	e22d      	b.n	8006b36 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066da:	4aa1      	ldr	r2, [pc, #644]	; (8006960 <find_volume+0x2ac>)
 80066dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <find_volume+0x3a>
 80066ea:	230c      	movs	r3, #12
 80066ec:	e223      	b.n	8006b36 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01a      	beq.n	800673a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fd19 	bl	8005140 <disk_status>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10c      	bne.n	800673a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <find_volume+0x82>
 8006726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006732:	230a      	movs	r3, #10
 8006734:	e1ff      	b.n	8006b36 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006736:	2300      	movs	r3, #0
 8006738:	e1fd      	b.n	8006b36 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fd11 	bl	8005174 <disk_initialize>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006764:	2303      	movs	r3, #3
 8006766:	e1e6      	b.n	8006b36 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006768:	79fb      	ldrb	r3, [r7, #7]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <find_volume+0xca>
 800676e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800677a:	230a      	movs	r3, #10
 800677c:	e1db      	b.n	8006b36 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006786:	f7ff ff3f 	bl	8006608 <check_fs>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006794:	2b02      	cmp	r3, #2
 8006796:	d149      	bne.n	800682c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006798:	2300      	movs	r3, #0
 800679a:	643b      	str	r3, [r7, #64]	; 0x40
 800679c:	e01e      	b.n	80067dc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80067ac:	4413      	add	r3, r2
 80067ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	3304      	adds	r3, #4
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <find_volume+0x114>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	3308      	adds	r3, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe fd74 	bl	80052ac <ld_dword>
 80067c4:	4602      	mov	r2, r0
 80067c6:	e000      	b.n	80067ca <find_volume+0x116>
 80067c8:	2200      	movs	r2, #0
 80067ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	3358      	adds	r3, #88	; 0x58
 80067d0:	443b      	add	r3, r7
 80067d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d8:	3301      	adds	r3, #1
 80067da:	643b      	str	r3, [r7, #64]	; 0x40
 80067dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d9dd      	bls.n	800679e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80067e2:	2300      	movs	r3, #0
 80067e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <find_volume+0x13e>
 80067ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ee:	3b01      	subs	r3, #1
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80067f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	3358      	adds	r3, #88	; 0x58
 80067f8:	443b      	add	r3, r7
 80067fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <find_volume+0x15e>
 8006806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800680a:	f7ff fefd 	bl	8006608 <check_fs>
 800680e:	4603      	mov	r3, r0
 8006810:	e000      	b.n	8006814 <find_volume+0x160>
 8006812:	2303      	movs	r3, #3
 8006814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800681c:	2b01      	cmp	r3, #1
 800681e:	d905      	bls.n	800682c <find_volume+0x178>
 8006820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006822:	3301      	adds	r3, #1
 8006824:	643b      	str	r3, [r7, #64]	; 0x40
 8006826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006828:	2b03      	cmp	r3, #3
 800682a:	d9e2      	bls.n	80067f2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800682c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006830:	2b04      	cmp	r3, #4
 8006832:	d101      	bne.n	8006838 <find_volume+0x184>
 8006834:	2301      	movs	r3, #1
 8006836:	e17e      	b.n	8006b36 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800683c:	2b01      	cmp	r3, #1
 800683e:	d901      	bls.n	8006844 <find_volume+0x190>
 8006840:	230d      	movs	r3, #13
 8006842:	e178      	b.n	8006b36 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	3330      	adds	r3, #48	; 0x30
 8006848:	330b      	adds	r3, #11
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd16 	bl	800527c <ld_word>
 8006850:	4603      	mov	r3, r0
 8006852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006856:	d001      	beq.n	800685c <find_volume+0x1a8>
 8006858:	230d      	movs	r3, #13
 800685a:	e16c      	b.n	8006b36 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	3330      	adds	r3, #48	; 0x30
 8006860:	3316      	adds	r3, #22
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fd0a 	bl	800527c <ld_word>
 8006868:	4603      	mov	r3, r0
 800686a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800686c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <find_volume+0x1cc>
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	3330      	adds	r3, #48	; 0x30
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fd17 	bl	80052ac <ld_dword>
 800687e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006884:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	789b      	ldrb	r3, [r3, #2]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d005      	beq.n	80068a4 <find_volume+0x1f0>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	789b      	ldrb	r3, [r3, #2]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d001      	beq.n	80068a4 <find_volume+0x1f0>
 80068a0:	230d      	movs	r3, #13
 80068a2:	e148      	b.n	8006b36 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	789b      	ldrb	r3, [r3, #2]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ac:	fb02 f303 	mul.w	r3, r2, r3
 80068b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	895b      	ldrh	r3, [r3, #10]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <find_volume+0x224>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	895b      	ldrh	r3, [r3, #10]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	895b      	ldrh	r3, [r3, #10]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <find_volume+0x228>
 80068d8:	230d      	movs	r3, #13
 80068da:	e12c      	b.n	8006b36 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	3330      	adds	r3, #48	; 0x30
 80068e0:	3311      	adds	r3, #17
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fcca 	bl	800527c <ld_word>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	891b      	ldrh	r3, [r3, #8]
 80068f4:	f003 030f 	and.w	r3, r3, #15
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <find_volume+0x24e>
 80068fe:	230d      	movs	r3, #13
 8006900:	e119      	b.n	8006b36 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	3330      	adds	r3, #48	; 0x30
 8006906:	3313      	adds	r3, #19
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fcb7 	bl	800527c <ld_word>
 800690e:	4603      	mov	r3, r0
 8006910:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <find_volume+0x272>
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	3330      	adds	r3, #48	; 0x30
 800691c:	3320      	adds	r3, #32
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fcc4 	bl	80052ac <ld_dword>
 8006924:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	3330      	adds	r3, #48	; 0x30
 800692a:	330e      	adds	r3, #14
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fca5 	bl	800527c <ld_word>
 8006932:	4603      	mov	r3, r0
 8006934:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <find_volume+0x28c>
 800693c:	230d      	movs	r3, #13
 800693e:	e0fa      	b.n	8006b36 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006940:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	4413      	add	r3, r2
 8006946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006948:	8912      	ldrh	r2, [r2, #8]
 800694a:	0912      	lsrs	r2, r2, #4
 800694c:	b292      	uxth	r2, r2
 800694e:	4413      	add	r3, r2
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	429a      	cmp	r2, r3
 8006958:	d204      	bcs.n	8006964 <find_volume+0x2b0>
 800695a:	230d      	movs	r3, #13
 800695c:	e0eb      	b.n	8006b36 <find_volume+0x482>
 800695e:	bf00      	nop
 8006960:	2000090c 	.word	0x2000090c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696c:	8952      	ldrh	r2, [r2, #10]
 800696e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <find_volume+0x2ca>
 800697a:	230d      	movs	r3, #13
 800697c:	e0db      	b.n	8006b36 <find_volume+0x482>
		fmt = FS_FAT32;
 800697e:	2303      	movs	r3, #3
 8006980:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800698a:	4293      	cmp	r3, r2
 800698c:	d802      	bhi.n	8006994 <find_volume+0x2e0>
 800698e:	2302      	movs	r3, #2
 8006990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	f640 72f5 	movw	r2, #4085	; 0xff5
 800699a:	4293      	cmp	r3, r2
 800699c:	d802      	bhi.n	80069a4 <find_volume+0x2f0>
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069b0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b6:	441a      	add	r2, r3
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80069bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	441a      	add	r2, r3
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80069c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d11e      	bne.n	8006a0c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	3330      	adds	r3, #48	; 0x30
 80069d2:	332a      	adds	r3, #42	; 0x2a
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe fc51 	bl	800527c <ld_word>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <find_volume+0x330>
 80069e0:	230d      	movs	r3, #13
 80069e2:	e0a8      	b.n	8006b36 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	891b      	ldrh	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <find_volume+0x33c>
 80069ec:	230d      	movs	r3, #13
 80069ee:	e0a2      	b.n	8006b36 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	3330      	adds	r3, #48	; 0x30
 80069f4:	332c      	adds	r3, #44	; 0x2c
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe fc58 	bl	80052ac <ld_dword>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0a:	e01f      	b.n	8006a4c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	891b      	ldrh	r3, [r3, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <find_volume+0x364>
 8006a14:	230d      	movs	r3, #13
 8006a16:	e08e      	b.n	8006b36 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1e:	441a      	add	r2, r3
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d103      	bne.n	8006a34 <find_volume+0x380>
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	e00a      	b.n	8006a4a <find_volume+0x396>
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	085a      	lsrs	r2, r3, #1
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a56:	0a5b      	lsrs	r3, r3, #9
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d201      	bcs.n	8006a60 <find_volume+0x3ac>
 8006a5c:	230d      	movs	r3, #13
 8006a5e:	e06a      	b.n	8006b36 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a66:	611a      	str	r2, [r3, #16]
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	2280      	movs	r2, #128	; 0x80
 8006a74:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d149      	bne.n	8006b12 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	3330      	adds	r3, #48	; 0x30
 8006a82:	3330      	adds	r3, #48	; 0x30
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fbf9 	bl	800527c <ld_word>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d140      	bne.n	8006b12 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a92:	3301      	adds	r3, #1
 8006a94:	4619      	mov	r1, r3
 8006a96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a98:	f7fe fea0 	bl	80057dc <move_window>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d137      	bne.n	8006b12 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	3330      	adds	r3, #48	; 0x30
 8006aac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fbe3 	bl	800527c <ld_word>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d127      	bne.n	8006b12 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	3330      	adds	r3, #48	; 0x30
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fbf0 	bl	80052ac <ld_dword>
 8006acc:	4603      	mov	r3, r0
 8006ace:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <find_volume+0x48c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d11e      	bne.n	8006b12 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	3330      	adds	r3, #48	; 0x30
 8006ad8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fbe5 	bl	80052ac <ld_dword>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <find_volume+0x490>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d113      	bne.n	8006b12 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	3330      	adds	r3, #48	; 0x30
 8006aee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fbda 	bl	80052ac <ld_dword>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	3330      	adds	r3, #48	; 0x30
 8006b02:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fbd0 	bl	80052ac <ld_dword>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006b18:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <find_volume+0x494>)
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <find_volume+0x494>)
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <find_volume+0x494>)
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b30:	f7fe fdec 	bl	800570c <clear_lock>
#endif
	return FR_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3758      	adds	r7, #88	; 0x58
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	41615252 	.word	0x41615252
 8006b44:	61417272 	.word	0x61417272
 8006b48:	20000910 	.word	0x20000910

08006b4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b56:	2309      	movs	r3, #9
 8006b58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01c      	beq.n	8006b9a <validate+0x4e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d018      	beq.n	8006b9a <validate+0x4e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d013      	beq.n	8006b9a <validate+0x4e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	889a      	ldrh	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	88db      	ldrh	r3, [r3, #6]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d10c      	bne.n	8006b9a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fada 	bl	8005140 <disk_status>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <validate+0x4e>
			res = FR_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <validate+0x5a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	e000      	b.n	8006ba8 <validate+0x5c>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	6013      	str	r3, [r2, #0]
	return res;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006bca:	f107 0310 	add.w	r3, r7, #16
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fcd5 	bl	800657e <get_ldnumber>
 8006bd4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da01      	bge.n	8006be0 <f_mount+0x28>
 8006bdc:	230b      	movs	r3, #11
 8006bde:	e02b      	b.n	8006c38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006be0:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <f_mount+0x88>)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006bf0:	69b8      	ldr	r0, [r7, #24]
 8006bf2:	f7fe fd8b 	bl	800570c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	490d      	ldr	r1, [pc, #52]	; (8006c40 <f_mount+0x88>)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <f_mount+0x66>
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d001      	beq.n	8006c22 <f_mount+0x6a>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e00a      	b.n	8006c38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c22:	f107 010c 	add.w	r1, r7, #12
 8006c26:	f107 0308 	add.w	r3, r7, #8
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fd41 	bl	80066b4 <find_volume>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	2000090c 	.word	0x2000090c

08006c44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b098      	sub	sp, #96	; 0x60
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <f_open+0x18>
 8006c58:	2309      	movs	r3, #9
 8006c5a:	e1ad      	b.n	8006fb8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006c64:	79fa      	ldrb	r2, [r7, #7]
 8006c66:	f107 0110 	add.w	r1, r7, #16
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fd20 	bl	80066b4 <find_volume>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f040 8191 	bne.w	8006fa6 <f_open+0x362>
		dj.obj.fs = fs;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fc03 	bl	800649c <follow_path>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11a      	bne.n	8006cda <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da03      	bge.n	8006cb6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006cae:	2306      	movs	r3, #6
 8006cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cb4:	e011      	b.n	8006cda <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f107 0314 	add.w	r3, r7, #20
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fbd4 	bl	800547c <chk_lock>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	f003 031c 	and.w	r3, r3, #28
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d07f      	beq.n	8006de4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d017      	beq.n	8006d1c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d10e      	bne.n	8006d12 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006cf4:	f7fe fc1e 	bl	8005534 <enq_lock>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d006      	beq.n	8006d0c <f_open+0xc8>
 8006cfe:	f107 0314 	add.w	r3, r7, #20
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff fb03 	bl	800630e <dir_register>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	e000      	b.n	8006d0e <f_open+0xca>
 8006d0c:	2312      	movs	r3, #18
 8006d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	f043 0308 	orr.w	r3, r3, #8
 8006d18:	71fb      	strb	r3, [r7, #7]
 8006d1a:	e010      	b.n	8006d3e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d1c:	7ebb      	ldrb	r3, [r7, #26]
 8006d1e:	f003 0311 	and.w	r3, r3, #17
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <f_open+0xea>
					res = FR_DENIED;
 8006d26:	2307      	movs	r3, #7
 8006d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d2c:	e007      	b.n	8006d3e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <f_open+0xfa>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d168      	bne.n	8006e18 <f_open+0x1d4>
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d063      	beq.n	8006e18 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006d50:	f7fd fcbe 	bl	80046d0 <get_fattime>
 8006d54:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	330e      	adds	r3, #14
 8006d5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe fae3 	bl	8005328 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	3316      	adds	r3, #22
 8006d66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe fadd 	bl	8005328 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d70:	330b      	adds	r3, #11
 8006d72:	2220      	movs	r2, #32
 8006d74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fa32 	bl	80061e6 <ld_clust>
 8006d82:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff fa4a 	bl	8006224 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	331c      	adds	r3, #28
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fac6 	bl	8005328 <st_dword>
					fs->wflag = 1;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d037      	beq.n	8006e18 <f_open+0x1d4>
						dw = fs->winsect;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	2200      	movs	r2, #0
 8006db4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe ff5d 	bl	8005c76 <remove_chain>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d126      	bne.n	8006e18 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fd04 	bl	80057dc <move_window>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dde:	3a01      	subs	r2, #1
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	e019      	b.n	8006e18 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d115      	bne.n	8006e18 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006dec:	7ebb      	ldrb	r3, [r7, #26]
 8006dee:	f003 0310 	and.w	r3, r3, #16
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <f_open+0x1ba>
					res = FR_NO_FILE;
 8006df6:	2304      	movs	r3, #4
 8006df8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006dfc:	e00c      	b.n	8006e18 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <f_open+0x1d4>
 8006e08:	7ebb      	ldrb	r3, [r7, #26]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <f_open+0x1d4>
						res = FR_DENIED;
 8006e12:	2307      	movs	r3, #7
 8006e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d128      	bne.n	8006e72 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bf14      	ite	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	2300      	moveq	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	f107 0314 	add.w	r3, r7, #20
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fb8d 	bl	8005578 <inc_lock>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <f_open+0x22e>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 8095 	bne.w	8006fa6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff f9af 	bl	80061e6 <ld_clust>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e90:	331c      	adds	r3, #28
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fa0a 	bl	80052ac <ld_dword>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	88da      	ldrh	r2, [r3, #6]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	79fa      	ldrb	r2, [r7, #7]
 8006eb6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3330      	adds	r3, #48	; 0x30
 8006ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fa74 	bl	80053c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d060      	beq.n	8006fa6 <f_open+0x362>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05c      	beq.n	8006fa6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	895b      	ldrh	r3, [r3, #10]
 8006ef8:	025b      	lsls	r3, r3, #9
 8006efa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	657b      	str	r3, [r7, #84]	; 0x54
 8006f08:	e016      	b.n	8006f38 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fd1f 	bl	8005952 <get_fat>
 8006f14:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d802      	bhi.n	8006f22 <f_open+0x2de>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f28:	d102      	bne.n	8006f30 <f_open+0x2ec>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
 8006f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <f_open+0x304>
 8006f40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d8e0      	bhi.n	8006f0a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d127      	bne.n	8006fa6 <f_open+0x362>
 8006f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d022      	beq.n	8006fa6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fcd5 	bl	8005914 <clust2sect>
 8006f6a:	6478      	str	r0, [r7, #68]	; 0x44
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <f_open+0x336>
						res = FR_INT_ERR;
 8006f72:	2302      	movs	r3, #2
 8006f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f78:	e015      	b.n	8006fa6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7c:	0a5a      	lsrs	r2, r3, #9
 8006f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	7858      	ldrb	r0, [r3, #1]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1a      	ldr	r2, [r3, #32]
 8006f94:	2301      	movs	r3, #1
 8006f96:	f7fe f913 	bl	80051c0 <disk_read>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <f_open+0x362>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <f_open+0x370>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3760      	adds	r7, #96	; 0x60
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	; 0x38
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f107 0214 	add.w	r2, r7, #20
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fdb3 	bl	8006b4c <validate>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006fec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <f_read+0x44>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	7d5b      	ldrb	r3, [r3, #21]
 8006ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <f_read+0x4a>
 8007004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007008:	e115      	b.n	8007236 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	7d1b      	ldrb	r3, [r3, #20]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <f_read+0x5a>
 8007016:	2307      	movs	r3, #7
 8007018:	e10d      	b.n	8007236 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	429a      	cmp	r2, r3
 800702c:	f240 80fe 	bls.w	800722c <f_read+0x26c>
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007034:	e0fa      	b.n	800722c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 80c6 	bne.w	80071d0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	0a5b      	lsrs	r3, r3, #9
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	8952      	ldrh	r2, [r2, #10]
 800704e:	3a01      	subs	r2, #1
 8007050:	4013      	ands	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d12f      	bne.n	80070ba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	633b      	str	r3, [r7, #48]	; 0x30
 8007068:	e013      	b.n	8007092 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	4619      	mov	r1, r3
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7fe fef9 	bl	8005e70 <clmt_clust>
 800707e:	6338      	str	r0, [r7, #48]	; 0x30
 8007080:	e007      	b.n	8007092 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fe fc61 	bl	8005952 <get_fat>
 8007090:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b01      	cmp	r3, #1
 8007096:	d804      	bhi.n	80070a2 <f_read+0xe2>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2202      	movs	r2, #2
 800709c:	755a      	strb	r2, [r3, #21]
 800709e:	2302      	movs	r3, #2
 80070a0:	e0c9      	b.n	8007236 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070a8:	d104      	bne.n	80070b4 <f_read+0xf4>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	755a      	strb	r2, [r3, #21]
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0c0      	b.n	8007236 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f7fe fc26 	bl	8005914 <clust2sect>
 80070c8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <f_read+0x11a>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2202      	movs	r2, #2
 80070d4:	755a      	strb	r2, [r3, #21]
 80070d6:	2302      	movs	r3, #2
 80070d8:	e0ad      	b.n	8007236 <f_read+0x276>
			sect += csect;
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d039      	beq.n	8007162 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	4413      	add	r3, r2
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	8952      	ldrh	r2, [r2, #10]
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d905      	bls.n	8007108 <f_read+0x148>
					cc = fs->csize - csect;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	895b      	ldrh	r3, [r3, #10]
 8007100:	461a      	mov	r2, r3
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	7858      	ldrb	r0, [r3, #1]
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007112:	f7fe f855 	bl	80051c0 <disk_read>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <f_read+0x166>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	755a      	strb	r2, [r3, #21]
 8007122:	2301      	movs	r3, #1
 8007124:	e087      	b.n	8007236 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	7d1b      	ldrb	r3, [r3, #20]
 800712a:	b25b      	sxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	da14      	bge.n	800715a <f_read+0x19a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713a:	429a      	cmp	r2, r3
 800713c:	d90d      	bls.n	800715a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	025b      	lsls	r3, r3, #9
 8007148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714a:	18d0      	adds	r0, r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3330      	adds	r3, #48	; 0x30
 8007150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007154:	4619      	mov	r1, r3
 8007156:	f7fe f913 	bl	8005380 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	025b      	lsls	r3, r3, #9
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007160:	e050      	b.n	8007204 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	429a      	cmp	r2, r3
 800716a:	d02e      	beq.n	80071ca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7d1b      	ldrb	r3, [r3, #20]
 8007170:	b25b      	sxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	da18      	bge.n	80071a8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	7858      	ldrb	r0, [r3, #1]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	2301      	movs	r3, #1
 8007186:	f7fe f83b 	bl	8005200 <disk_write>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <f_read+0x1da>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	755a      	strb	r2, [r3, #21]
 8007196:	2301      	movs	r3, #1
 8007198:	e04d      	b.n	8007236 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	7858      	ldrb	r0, [r3, #1]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071b2:	2301      	movs	r3, #1
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	f7fe f803 	bl	80051c0 <disk_read>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <f_read+0x20a>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	755a      	strb	r2, [r3, #21]
 80071c6:	2301      	movs	r3, #1
 80071c8:	e035      	b.n	8007236 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80071de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d901      	bls.n	80071ea <f_read+0x22a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f8:	4413      	add	r3, r2
 80071fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fc:	4619      	mov	r1, r3
 80071fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007200:	f7fe f8be 	bl	8005380 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	4413      	add	r3, r2
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	441a      	add	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	619a      	str	r2, [r3, #24]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	441a      	add	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f47f af01 	bne.w	8007036 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3738      	adds	r7, #56	; 0x38
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b08c      	sub	sp, #48	; 0x30
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f107 0210 	add.w	r2, r7, #16
 800725c:	4611      	mov	r1, r2
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff fc74 	bl	8006b4c <validate>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800726a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800726e:	2b00      	cmp	r3, #0
 8007270:	d107      	bne.n	8007282 <f_write+0x44>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	7d5b      	ldrb	r3, [r3, #21]
 8007276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800727a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <f_write+0x4a>
 8007282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007286:	e14b      	b.n	8007520 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	7d1b      	ldrb	r3, [r3, #20]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <f_write+0x5a>
 8007294:	2307      	movs	r3, #7
 8007296:	e143      	b.n	8007520 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	441a      	add	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	f080 812d 	bcs.w	8007504 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	43db      	mvns	r3, r3
 80072b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80072b2:	e127      	b.n	8007504 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f040 80e3 	bne.w	8007488 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	0a5b      	lsrs	r3, r3, #9
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	8952      	ldrh	r2, [r2, #10]
 80072cc:	3a01      	subs	r2, #1
 80072ce:	4013      	ands	r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d143      	bne.n	8007360 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10c      	bne.n	80072fa <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11a      	bne.n	8007322 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fd25 	bl	8005d40 <create_chain>
 80072f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80072f8:	e013      	b.n	8007322 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	4619      	mov	r1, r3
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7fe fdb1 	bl	8005e70 <clmt_clust>
 800730e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007310:	e007      	b.n	8007322 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f7fe fd10 	bl	8005d40 <create_chain>
 8007320:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80f2 	beq.w	800750e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	2b01      	cmp	r3, #1
 800732e:	d104      	bne.n	800733a <f_write+0xfc>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2202      	movs	r2, #2
 8007334:	755a      	strb	r2, [r3, #21]
 8007336:	2302      	movs	r3, #2
 8007338:	e0f2      	b.n	8007520 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007340:	d104      	bne.n	800734c <f_write+0x10e>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	755a      	strb	r2, [r3, #21]
 8007348:	2301      	movs	r3, #1
 800734a:	e0e9      	b.n	8007520 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007350:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <f_write+0x122>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	7d1b      	ldrb	r3, [r3, #20]
 8007364:	b25b      	sxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	da18      	bge.n	800739c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	7858      	ldrb	r0, [r3, #1]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1a      	ldr	r2, [r3, #32]
 8007378:	2301      	movs	r3, #1
 800737a:	f7fd ff41 	bl	8005200 <disk_write>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <f_write+0x150>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	755a      	strb	r2, [r3, #21]
 800738a:	2301      	movs	r3, #1
 800738c:	e0c8      	b.n	8007520 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	7d1b      	ldrb	r3, [r3, #20]
 8007392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007396:	b2da      	uxtb	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fe fab5 	bl	8005914 <clust2sect>
 80073aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <f_write+0x17e>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2202      	movs	r2, #2
 80073b6:	755a      	strb	r2, [r3, #21]
 80073b8:	2302      	movs	r3, #2
 80073ba:	e0b1      	b.n	8007520 <f_write+0x2e2>
			sect += csect;
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	4413      	add	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	0a5b      	lsrs	r3, r3, #9
 80073c8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03c      	beq.n	800744a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	4413      	add	r3, r2
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	8952      	ldrh	r2, [r2, #10]
 80073da:	4293      	cmp	r3, r2
 80073dc:	d905      	bls.n	80073ea <f_write+0x1ac>
					cc = fs->csize - csect;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	895b      	ldrh	r3, [r3, #10]
 80073e2:	461a      	mov	r2, r3
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	7858      	ldrb	r0, [r3, #1]
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	69f9      	ldr	r1, [r7, #28]
 80073f4:	f7fd ff04 	bl	8005200 <disk_write>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <f_write+0x1ca>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	755a      	strb	r2, [r3, #21]
 8007404:	2301      	movs	r3, #1
 8007406:	e08b      	b.n	8007520 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	6a3a      	ldr	r2, [r7, #32]
 8007412:	429a      	cmp	r2, r3
 8007414:	d915      	bls.n	8007442 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	025b      	lsls	r3, r3, #9
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800742e:	4619      	mov	r1, r3
 8007430:	f7fd ffa6 	bl	8005380 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	7d1b      	ldrb	r3, [r3, #20]
 8007438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743c:	b2da      	uxtb	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	025b      	lsls	r3, r3, #9
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007448:	e03f      	b.n	80074ca <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	429a      	cmp	r2, r3
 8007452:	d016      	beq.n	8007482 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800745c:	429a      	cmp	r2, r3
 800745e:	d210      	bcs.n	8007482 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	7858      	ldrb	r0, [r3, #1]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800746a:	2301      	movs	r3, #1
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	f7fd fea7 	bl	80051c0 <disk_read>
 8007472:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	755a      	strb	r2, [r3, #21]
 800747e:	2301      	movs	r3, #1
 8007480:	e04e      	b.n	8007520 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007490:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	429a      	cmp	r2, r3
 800749c:	d901      	bls.n	80074a2 <f_write+0x264>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	4413      	add	r3, r2
 80074b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fd ff62 	bl	8005380 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	7d1b      	ldrb	r3, [r3, #20]
 80074c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	4413      	add	r3, r2
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	441a      	add	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	619a      	str	r2, [r3, #24]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	bf38      	it	cc
 80074ea:	461a      	movcc	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	441a      	add	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f47f aed4 	bne.w	80072b4 <f_write+0x76>
 800750c:	e000      	b.n	8007510 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800750e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	7d1b      	ldrb	r3, [r3, #20]
 8007514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007518:	b2da      	uxtb	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3730      	adds	r7, #48	; 0x30
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f107 0208 	add.w	r2, r7, #8
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fb07 	bl	8006b4c <validate>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d168      	bne.n	800761a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7d1b      	ldrb	r3, [r3, #20]
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d062      	beq.n	800761a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7d1b      	ldrb	r3, [r3, #20]
 8007558:	b25b      	sxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	da15      	bge.n	800758a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	7858      	ldrb	r0, [r3, #1]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	2301      	movs	r3, #1
 800756e:	f7fd fe47 	bl	8005200 <disk_write>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <f_sync+0x54>
 8007578:	2301      	movs	r3, #1
 800757a:	e04f      	b.n	800761c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7d1b      	ldrb	r3, [r3, #20]
 8007580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800758a:	f7fd f8a1 	bl	80046d0 <get_fattime>
 800758e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	4619      	mov	r1, r3
 8007598:	4610      	mov	r0, r2
 800759a:	f7fe f91f 	bl	80057dc <move_window>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d138      	bne.n	800761a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	330b      	adds	r3, #11
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	330b      	adds	r3, #11
 80075b8:	f042 0220 	orr.w	r2, r2, #32
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	461a      	mov	r2, r3
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	f7fe fe2a 	bl	8006224 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f103 021c 	add.w	r2, r3, #28
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	4619      	mov	r1, r3
 80075dc:	4610      	mov	r0, r2
 80075de:	f7fd fea3 	bl	8005328 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3316      	adds	r3, #22
 80075e6:	6939      	ldr	r1, [r7, #16]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd fe9d 	bl	8005328 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3312      	adds	r3, #18
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd fe7c 	bl	80052f2 <st_word>
					fs->wflag = 1;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2201      	movs	r2, #1
 80075fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe f918 	bl	8005838 <sync_fs>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7d1b      	ldrb	r3, [r3, #20]
 8007610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800761a:	7dfb      	ldrb	r3, [r7, #23]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff ff7b 	bl	8007528 <f_sync>
 8007632:	4603      	mov	r3, r0
 8007634:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d118      	bne.n	800766e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f107 0208 	add.w	r2, r7, #8
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fa81 	bl	8006b4c <validate>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10c      	bne.n	800766e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe f81b 	bl	8005694 <dec_lock>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b092      	sub	sp, #72	; 0x48
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007684:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	2200      	movs	r2, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f810 	bl	80066b4 <find_volume>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800769a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 8099 	bne.w	80077d6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80076a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	3b02      	subs	r3, #2
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d804      	bhi.n	80076c2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e089      	b.n	80077d6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d128      	bne.n	8007720 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80076ce:	2302      	movs	r3, #2
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe f938 	bl	8005952 <get_fat>
 80076e2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ea:	d103      	bne.n	80076f4 <f_getfree+0x7c>
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076f2:	e063      	b.n	80077bc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d103      	bne.n	8007702 <f_getfree+0x8a>
 80076fa:	2302      	movs	r3, #2
 80076fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007700:	e05c      	b.n	80077bc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <f_getfree+0x96>
 8007708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770a:	3301      	adds	r3, #1
 800770c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800770e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007710:	3301      	adds	r3, #1
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800771a:	429a      	cmp	r2, r3
 800771c:	d3db      	bcc.n	80076d6 <f_getfree+0x5e>
 800771e:	e04d      	b.n	80077bc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
 8007730:	2300      	movs	r3, #0
 8007732:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	2b00      	cmp	r3, #0
 8007738:	d113      	bne.n	8007762 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800773a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	63ba      	str	r2, [r7, #56]	; 0x38
 8007742:	4619      	mov	r1, r3
 8007744:	f7fe f84a 	bl	80057dc <move_window>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800774e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007752:	2b00      	cmp	r3, #0
 8007754:	d131      	bne.n	80077ba <f_getfree+0x142>
							p = fs->win;
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	3330      	adds	r3, #48	; 0x30
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800775c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d10f      	bne.n	800778a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800776a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800776c:	f7fd fd86 	bl	800527c <ld_word>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <f_getfree+0x104>
 8007776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007778:	3301      	adds	r3, #1
 800777a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	3302      	adds	r3, #2
 8007780:	633b      	str	r3, [r7, #48]	; 0x30
 8007782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007784:	3b02      	subs	r3, #2
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
 8007788:	e010      	b.n	80077ac <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800778a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800778c:	f7fd fd8e 	bl	80052ac <ld_dword>
 8007790:	4603      	mov	r3, r0
 8007792:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d102      	bne.n	80077a0 <f_getfree+0x128>
 800779a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779c:	3301      	adds	r3, #1
 800779e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	3304      	adds	r3, #4
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	3b04      	subs	r3, #4
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80077ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ae:	3b01      	subs	r3, #1
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1bd      	bne.n	8007734 <f_getfree+0xbc>
 80077b8:	e000      	b.n	80077bc <f_getfree+0x144>
							if (res != FR_OK) break;
 80077ba:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	791a      	ldrb	r2, [r3, #4]
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80077d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3748      	adds	r7, #72	; 0x48
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b088      	sub	sp, #32
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
	int n = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80077f6:	e01b      	b.n	8007830 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80077f8:	f107 0310 	add.w	r3, r7, #16
 80077fc:	f107 0114 	add.w	r1, r7, #20
 8007800:	2201      	movs	r2, #1
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fbdc 	bl	8006fc0 <f_read>
		if (rc != 1) break;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d116      	bne.n	800783c <f_gets+0x5a>
		c = s[0];
 800780e:	7d3b      	ldrb	r3, [r7, #20]
 8007810:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	2b0d      	cmp	r3, #13
 8007816:	d100      	bne.n	800781a <f_gets+0x38>
 8007818:	e00a      	b.n	8007830 <f_gets+0x4e>
		*p++ = c;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	61ba      	str	r2, [r7, #24]
 8007820:	7dfa      	ldrb	r2, [r7, #23]
 8007822:	701a      	strb	r2, [r3, #0]
		n++;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	3301      	adds	r3, #1
 8007828:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	2b0a      	cmp	r3, #10
 800782e:	d007      	beq.n	8007840 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	3b01      	subs	r3, #1
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	429a      	cmp	r2, r3
 8007838:	dbde      	blt.n	80077f8 <f_gets+0x16>
 800783a:	e002      	b.n	8007842 <f_gets+0x60>
		if (rc != 1) break;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007840:	bf00      	nop
	}
	*p = 0;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <f_gets+0x70>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	e000      	b.n	8007854 <f_gets+0x72>
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3720      	adds	r7, #32
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007872:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 8007874:	7a5b      	ldrb	r3, [r3, #9]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d131      	bne.n	80078e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800787c:	4b1c      	ldr	r3, [pc, #112]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 800787e:	7a5b      	ldrb	r3, [r3, #9]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 8007886:	2100      	movs	r1, #0
 8007888:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800788a:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 800788c:	7a5b      	ldrb	r3, [r3, #9]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800789a:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 800789c:	7a5b      	ldrb	r3, [r3, #9]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 80078a4:	4413      	add	r3, r2
 80078a6:	79fa      	ldrb	r2, [r7, #7]
 80078a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 80078ac:	7a5b      	ldrb	r3, [r3, #9]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	b2d1      	uxtb	r1, r2
 80078b4:	4a0e      	ldr	r2, [pc, #56]	; (80078f0 <FATFS_LinkDriverEx+0x94>)
 80078b6:	7251      	strb	r1, [r2, #9]
 80078b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80078ba:	7dbb      	ldrb	r3, [r7, #22]
 80078bc:	3330      	adds	r3, #48	; 0x30
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	3301      	adds	r3, #1
 80078c8:	223a      	movs	r2, #58	; 0x3a
 80078ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	3302      	adds	r3, #2
 80078d0:	222f      	movs	r2, #47	; 0x2f
 80078d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	3303      	adds	r3, #3
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000934 	.word	0x20000934

080078f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80078fe:	2200      	movs	r2, #0
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff ffaa 	bl	800785c <FATFS_LinkDriverEx>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8007918:	4b10      	ldr	r3, [pc, #64]	; (800795c <MX_PDM2PCM_Init+0x48>)
 800791a:	2200      	movs	r2, #0
 800791c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <MX_PDM2PCM_Init+0x48>)
 8007920:	2201      	movs	r2, #1
 8007922:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <MX_PDM2PCM_Init+0x48>)
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <MX_PDM2PCM_Init+0x4c>)
 8007928:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <MX_PDM2PCM_Init+0x48>)
 800792c:	2202      	movs	r2, #2
 800792e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8007930:	4b0a      	ldr	r3, [pc, #40]	; (800795c <MX_PDM2PCM_Init+0x48>)
 8007932:	2202      	movs	r2, #2
 8007934:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007936:	4809      	ldr	r0, [pc, #36]	; (800795c <MX_PDM2PCM_Init+0x48>)
 8007938:	f001 fd66 	bl	8009408 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <MX_PDM2PCM_Init+0x50>)
 800793e:	2202      	movs	r2, #2
 8007940:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <MX_PDM2PCM_Init+0x50>)
 8007944:	2210      	movs	r2, #16
 8007946:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <MX_PDM2PCM_Init+0x50>)
 800794a:	2200      	movs	r2, #0
 800794c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800794e:	4905      	ldr	r1, [pc, #20]	; (8007964 <MX_PDM2PCM_Init+0x50>)
 8007950:	4802      	ldr	r0, [pc, #8]	; (800795c <MX_PDM2PCM_Init+0x48>)
 8007952:	f001 fde3 	bl	800951c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007956:	bf00      	nop
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000940 	.word	0x20000940
 8007960:	7d70a3d6 	.word	0x7d70a3d6
 8007964:	2000098c 	.word	0x2000098c

08007968 <D16_GENERIC>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b089      	sub	sp, #36	; 0x24
 800796e:	68d4      	ldr	r4, [r2, #12]
 8007970:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007972:	6993      	ldr	r3, [r2, #24]
 8007974:	9407      	str	r4, [sp, #28]
 8007976:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007978:	9306      	str	r3, [sp, #24]
 800797a:	9402      	str	r4, [sp, #8]
 800797c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007980:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8007984:	69d3      	ldr	r3, [r2, #28]
 8007986:	6896      	ldr	r6, [r2, #8]
 8007988:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800798a:	9103      	str	r1, [sp, #12]
 800798c:	2d00      	cmp	r5, #0
 800798e:	d066      	beq.n	8007a5e <D16_GENERIC+0xf6>
 8007990:	f004 0510 	and.w	r5, r4, #16
 8007994:	f004 0420 	and.w	r4, r4, #32
 8007998:	9504      	str	r5, [sp, #16]
 800799a:	4938      	ldr	r1, [pc, #224]	; (8007a7c <D16_GENERIC+0x114>)
 800799c:	9405      	str	r4, [sp, #20]
 800799e:	f04f 0e00 	mov.w	lr, #0
 80079a2:	4635      	mov	r5, r6
 80079a4:	e04f      	b.n	8007a46 <D16_GENERIC+0xde>
 80079a6:	5d87      	ldrb	r7, [r0, r6]
 80079a8:	7804      	ldrb	r4, [r0, #0]
 80079aa:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80079ae:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80079b2:	b2e6      	uxtb	r6, r4
 80079b4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80079b8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80079bc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80079c0:	4433      	add	r3, r6
 80079c2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80079c6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80079ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ce:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80079d2:	0aa3      	lsrs	r3, r4, #10
 80079d4:	4c2a      	ldr	r4, [pc, #168]	; (8007a80 <D16_GENERIC+0x118>)
 80079d6:	fb26 5404 	smlad	r4, r6, r4, r5
 80079da:	4d2a      	ldr	r5, [pc, #168]	; (8007a84 <D16_GENERIC+0x11c>)
 80079dc:	fb26 f505 	smuad	r5, r6, r5
 80079e0:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80079e4:	eb04 080a 	add.w	r8, r4, sl
 80079e8:	eba8 080b 	sub.w	r8, r8, fp
 80079ec:	4646      	mov	r6, r8
 80079ee:	17f7      	asrs	r7, r6, #31
 80079f0:	e9cd 6700 	strd	r6, r7, [sp]
 80079f4:	9e04      	ldr	r6, [sp, #16]
 80079f6:	f10e 0c01 	add.w	ip, lr, #1
 80079fa:	b16e      	cbz	r6, 8007a18 <D16_GENERIC+0xb0>
 80079fc:	6a16      	ldr	r6, [r2, #32]
 80079fe:	9f01      	ldr	r7, [sp, #4]
 8007a00:	fba8 8906 	umull	r8, r9, r8, r6
 8007a04:	fb06 9907 	mla	r9, r6, r7, r9
 8007a08:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8007a0c:	f149 0900 	adc.w	r9, r9, #0
 8007a10:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007a14:	46a3      	mov	fp, r4
 8007a16:	4654      	mov	r4, sl
 8007a18:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007a1a:	9f02      	ldr	r7, [sp, #8]
 8007a1c:	0424      	lsls	r4, r4, #16
 8007a1e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	fb0e fe06 	mul.w	lr, lr, r6
 8007a2a:	fbc7 8904 	smlal	r8, r9, r7, r4
 8007a2e:	9e03      	ldr	r6, [sp, #12]
 8007a30:	464f      	mov	r7, r9
 8007a32:	10bc      	asrs	r4, r7, #2
 8007a34:	f304 040f 	ssat	r4, #16, r4
 8007a38:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8007a3c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007a3e:	fa1f fe8c 	uxth.w	lr, ip
 8007a42:	4574      	cmp	r4, lr
 8007a44:	d90a      	bls.n	8007a5c <D16_GENERIC+0xf4>
 8007a46:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007a48:	2c01      	cmp	r4, #1
 8007a4a:	b2e6      	uxtb	r6, r4
 8007a4c:	d1ab      	bne.n	80079a6 <D16_GENERIC+0x3e>
 8007a4e:	9e05      	ldr	r6, [sp, #20]
 8007a50:	f850 4b02 	ldr.w	r4, [r0], #2
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	d0ac      	beq.n	80079b2 <D16_GENERIC+0x4a>
 8007a58:	ba64      	rev16	r4, r4
 8007a5a:	e7aa      	b.n	80079b2 <D16_GENERIC+0x4a>
 8007a5c:	462e      	mov	r6, r5
 8007a5e:	9907      	ldr	r1, [sp, #28]
 8007a60:	61d3      	str	r3, [r2, #28]
 8007a62:	9b06      	ldr	r3, [sp, #24]
 8007a64:	6096      	str	r6, [r2, #8]
 8007a66:	2000      	movs	r0, #0
 8007a68:	60d1      	str	r1, [r2, #12]
 8007a6a:	f8c2 a010 	str.w	sl, [r2, #16]
 8007a6e:	f8c2 b014 	str.w	fp, [r2, #20]
 8007a72:	6193      	str	r3, [r2, #24]
 8007a74:	b009      	add	sp, #36	; 0x24
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000000 	.word	0x20000000
 8007a80:	00030001 	.word	0x00030001
 8007a84:	00010003 	.word	0x00010003

08007a88 <D24_GENERIC>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007a8e:	6993      	ldr	r3, [r2, #24]
 8007a90:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007a92:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007a96:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8007a9a:	6894      	ldr	r4, [r2, #8]
 8007a9c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8007aa0:	b089      	sub	sp, #36	; 0x24
 8007aa2:	9307      	str	r3, [sp, #28]
 8007aa4:	9503      	str	r5, [sp, #12]
 8007aa6:	69d3      	ldr	r3, [r2, #28]
 8007aa8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007aaa:	9104      	str	r1, [sp, #16]
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	f000 8096 	beq.w	8007bde <D24_GENERIC+0x156>
 8007ab2:	f005 0610 	and.w	r6, r5, #16
 8007ab6:	f005 0520 	and.w	r5, r5, #32
 8007aba:	4954      	ldr	r1, [pc, #336]	; (8007c0c <D24_GENERIC+0x184>)
 8007abc:	9605      	str	r6, [sp, #20]
 8007abe:	9506      	str	r5, [sp, #24]
 8007ac0:	f04f 0e00 	mov.w	lr, #0
 8007ac4:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ac8:	e06a      	b.n	8007ba0 <D24_GENERIC+0x118>
 8007aca:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007ace:	f810 8007 	ldrb.w	r8, [r0, r7]
 8007ad2:	f890 c000 	ldrb.w	ip, [r0]
 8007ad6:	042d      	lsls	r5, r5, #16
 8007ad8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007adc:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8007ae0:	44ac      	add	ip, r5
 8007ae2:	4438      	add	r0, r7
 8007ae4:	fa5f f68c 	uxtb.w	r6, ip
 8007ae8:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8007aec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007af0:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8007af4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007af8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8007afc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007b00:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8007b04:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007b08:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007b0c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007b10:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007b14:	4d3e      	ldr	r5, [pc, #248]	; (8007c10 <D24_GENERIC+0x188>)
 8007b16:	fb26 b705 	smlad	r7, r6, r5, fp
 8007b1a:	4d3e      	ldr	r5, [pc, #248]	; (8007c14 <D24_GENERIC+0x18c>)
 8007b1c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8007b20:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8007b24:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8007b28:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8007b2c:	2401      	movs	r4, #1
 8007b2e:	fb26 f604 	smuad	r6, r6, r4
 8007b32:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8007b36:	9f02      	ldr	r7, [sp, #8]
 8007b38:	eb0e 0c04 	add.w	ip, lr, r4
 8007b3c:	eb08 0406 	add.w	r4, r8, r6
 8007b40:	eb05 060a 	add.w	r6, r5, sl
 8007b44:	1bf6      	subs	r6, r6, r7
 8007b46:	4637      	mov	r7, r6
 8007b48:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007b4c:	e9cd 7800 	strd	r7, r8, [sp]
 8007b50:	9f05      	ldr	r7, [sp, #20]
 8007b52:	b177      	cbz	r7, 8007b72 <D24_GENERIC+0xea>
 8007b54:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007b58:	9502      	str	r5, [sp, #8]
 8007b5a:	fba6 9a08 	umull	r9, sl, r6, r8
 8007b5e:	9e01      	ldr	r6, [sp, #4]
 8007b60:	fb08 aa06 	mla	sl, r8, r6, sl
 8007b64:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8007b68:	f14a 0700 	adc.w	r7, sl, #0
 8007b6c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007b70:	4655      	mov	r5, sl
 8007b72:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007b74:	9f03      	ldr	r7, [sp, #12]
 8007b76:	03ad      	lsls	r5, r5, #14
 8007b78:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007b7c:	f04f 0900 	mov.w	r9, #0
 8007b80:	fb0e fe06 	mul.w	lr, lr, r6
 8007b84:	fbc7 8905 	smlal	r8, r9, r7, r5
 8007b88:	9e04      	ldr	r6, [sp, #16]
 8007b8a:	464f      	mov	r7, r9
 8007b8c:	10bd      	asrs	r5, r7, #2
 8007b8e:	f305 050f 	ssat	r5, #16, r5
 8007b92:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8007b96:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007b98:	fa1f fe8c 	uxth.w	lr, ip
 8007b9c:	4575      	cmp	r5, lr
 8007b9e:	d91c      	bls.n	8007bda <D24_GENERIC+0x152>
 8007ba0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007ba2:	b2ef      	uxtb	r7, r5
 8007ba4:	2d01      	cmp	r5, #1
 8007ba6:	b23e      	sxth	r6, r7
 8007ba8:	d18f      	bne.n	8007aca <D24_GENERIC+0x42>
 8007baa:	9d06      	ldr	r5, [sp, #24]
 8007bac:	b15d      	cbz	r5, 8007bc6 <D24_GENERIC+0x13e>
 8007bae:	f01e 0f01 	tst.w	lr, #1
 8007bb2:	d122      	bne.n	8007bfa <D24_GENERIC+0x172>
 8007bb4:	7805      	ldrb	r5, [r0, #0]
 8007bb6:	78c7      	ldrb	r7, [r0, #3]
 8007bb8:	7846      	ldrb	r6, [r0, #1]
 8007bba:	022d      	lsls	r5, r5, #8
 8007bbc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8007bc0:	44b4      	add	ip, r6
 8007bc2:	3002      	adds	r0, #2
 8007bc4:	e78e      	b.n	8007ae4 <D24_GENERIC+0x5c>
 8007bc6:	7846      	ldrb	r6, [r0, #1]
 8007bc8:	f890 c002 	ldrb.w	ip, [r0, #2]
 8007bcc:	f810 5b03 	ldrb.w	r5, [r0], #3
 8007bd0:	0236      	lsls	r6, r6, #8
 8007bd2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8007bd6:	44ac      	add	ip, r5
 8007bd8:	e784      	b.n	8007ae4 <D24_GENERIC+0x5c>
 8007bda:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007bde:	61d3      	str	r3, [r2, #28]
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	6094      	str	r4, [r2, #8]
 8007be4:	2000      	movs	r0, #0
 8007be6:	f8c2 b00c 	str.w	fp, [r2, #12]
 8007bea:	f8c2 a010 	str.w	sl, [r2, #16]
 8007bee:	f8c2 9014 	str.w	r9, [r2, #20]
 8007bf2:	6193      	str	r3, [r2, #24]
 8007bf4:	b009      	add	sp, #36	; 0x24
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	78c5      	ldrb	r5, [r0, #3]
 8007bfc:	7887      	ldrb	r7, [r0, #2]
 8007bfe:	f810 6b04 	ldrb.w	r6, [r0], #4
 8007c02:	022d      	lsls	r5, r5, #8
 8007c04:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8007c08:	44b4      	add	ip, r6
 8007c0a:	e76b      	b.n	8007ae4 <D24_GENERIC+0x5c>
 8007c0c:	20000000 	.word	0x20000000
 8007c10:	00030001 	.word	0x00030001
 8007c14:	00060007 	.word	0x00060007

08007c18 <D32_GENERIC>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007c1e:	6993      	ldr	r3, [r2, #24]
 8007c20:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007c22:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007c26:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8007c2a:	69d6      	ldr	r6, [r2, #28]
 8007c2c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8007c30:	b089      	sub	sp, #36	; 0x24
 8007c32:	9307      	str	r3, [sp, #28]
 8007c34:	9403      	str	r4, [sp, #12]
 8007c36:	6893      	ldr	r3, [r2, #8]
 8007c38:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007c3a:	9104      	str	r1, [sp, #16]
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	f000 809f 	beq.w	8007d80 <D32_GENERIC+0x168>
 8007c42:	f004 0510 	and.w	r5, r4, #16
 8007c46:	f004 0420 	and.w	r4, r4, #32
 8007c4a:	9505      	str	r5, [sp, #20]
 8007c4c:	4953      	ldr	r1, [pc, #332]	; (8007d9c <D32_GENERIC+0x184>)
 8007c4e:	9406      	str	r4, [sp, #24]
 8007c50:	f04f 0c00 	mov.w	ip, #0
 8007c54:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c58:	461d      	mov	r5, r3
 8007c5a:	4617      	mov	r7, r2
 8007c5c:	e077      	b.n	8007d4e <D32_GENERIC+0x136>
 8007c5e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8007c62:	f810 800e 	ldrb.w	r8, [r0, lr]
 8007c66:	f810 e002 	ldrb.w	lr, [r0, r2]
 8007c6a:	7800      	ldrb	r0, [r0, #0]
 8007c6c:	041b      	lsls	r3, r3, #16
 8007c6e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007c72:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8007c76:	4403      	add	r3, r0
 8007c78:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8007c7c:	b2dc      	uxtb	r4, r3
 8007c7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c82:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8007c86:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007c8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c8e:	0e1b      	lsrs	r3, r3, #24
 8007c90:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8007c94:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8007c98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c9c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8007ca0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8007ca4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8007ca8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8007cac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007cb0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007cb4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007cb8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8007cbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007cc0:	4b37      	ldr	r3, [pc, #220]	; (8007da0 <D32_GENERIC+0x188>)
 8007cc2:	fb22 b403 	smlad	r4, r2, r3, fp
 8007cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cca:	fb2e 4803 	smlad	r8, lr, r3, r4
 8007cce:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <D32_GENERIC+0x18c>)
 8007cd0:	fb22 5503 	smlad	r5, r2, r3, r5
 8007cd4:	4b34      	ldr	r3, [pc, #208]	; (8007da8 <D32_GENERIC+0x190>)
 8007cd6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8007cda:	2301      	movs	r3, #1
 8007cdc:	fb22 f203 	smuad	r2, r2, r3
 8007ce0:	4b32      	ldr	r3, [pc, #200]	; (8007dac <D32_GENERIC+0x194>)
 8007ce2:	fb2e 2503 	smlad	r5, lr, r3, r2
 8007ce6:	9b02      	ldr	r3, [sp, #8]
 8007ce8:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8007cec:	eb04 080a 	add.w	r8, r4, sl
 8007cf0:	eba8 0803 	sub.w	r8, r8, r3
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	17d3      	asrs	r3, r2, #31
 8007cf8:	e9cd 2300 	strd	r2, r3, [sp]
 8007cfc:	9b05      	ldr	r3, [sp, #20]
 8007cfe:	f10c 0e01 	add.w	lr, ip, #1
 8007d02:	b16b      	cbz	r3, 8007d20 <D32_GENERIC+0x108>
 8007d04:	6a3a      	ldr	r2, [r7, #32]
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	9402      	str	r4, [sp, #8]
 8007d0a:	fba8 8902 	umull	r8, r9, r8, r2
 8007d0e:	fb02 9903 	mla	r9, r2, r3, r9
 8007d12:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8007d16:	f149 0900 	adc.w	r9, r9, #0
 8007d1a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007d1e:	4654      	mov	r4, sl
 8007d20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d22:	9a04      	ldr	r2, [sp, #16]
 8007d24:	fb0c fc03 	mul.w	ip, ip, r3
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	0364      	lsls	r4, r4, #13
 8007d2c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007d30:	f04f 0900 	mov.w	r9, #0
 8007d34:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007d38:	464b      	mov	r3, r9
 8007d3a:	109b      	asrs	r3, r3, #2
 8007d3c:	f303 030f 	ssat	r3, #16, r3
 8007d40:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8007d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d46:	fa1f fc8e 	uxth.w	ip, lr
 8007d4a:	4563      	cmp	r3, ip
 8007d4c:	d914      	bls.n	8007d78 <D32_GENERIC+0x160>
 8007d4e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8007d50:	b2e2      	uxtb	r2, r4
 8007d52:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8007d56:	eb00 080e 	add.w	r8, r0, lr
 8007d5a:	4253      	negs	r3, r2
 8007d5c:	2c01      	cmp	r4, #1
 8007d5e:	eb08 0403 	add.w	r4, r8, r3
 8007d62:	f47f af7c 	bne.w	8007c5e <D32_GENERIC+0x46>
 8007d66:	1d02      	adds	r2, r0, #4
 8007d68:	6803      	ldr	r3, [r0, #0]
 8007d6a:	9806      	ldr	r0, [sp, #24]
 8007d6c:	b110      	cbz	r0, 8007d74 <D32_GENERIC+0x15c>
 8007d6e:	ba5b      	rev16	r3, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	e783      	b.n	8007c7c <D32_GENERIC+0x64>
 8007d74:	4610      	mov	r0, r2
 8007d76:	e781      	b.n	8007c7c <D32_GENERIC+0x64>
 8007d78:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	463a      	mov	r2, r7
 8007d80:	6093      	str	r3, [r2, #8]
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	f8c2 b00c 	str.w	fp, [r2, #12]
 8007d88:	2000      	movs	r0, #0
 8007d8a:	61d6      	str	r6, [r2, #28]
 8007d8c:	f8c2 a010 	str.w	sl, [r2, #16]
 8007d90:	f8c2 9014 	str.w	r9, [r2, #20]
 8007d94:	6193      	str	r3, [r2, #24]
 8007d96:	b009      	add	sp, #36	; 0x24
 8007d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9c:	20000000 	.word	0x20000000
 8007da0:	00060003 	.word	0x00060003
 8007da4:	000a000c 	.word	0x000a000c
 8007da8:	000c000a 	.word	0x000c000a
 8007dac:	00030006 	.word	0x00030006

08007db0 <D48_GENERIC>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	b089      	sub	sp, #36	; 0x24
 8007db6:	6953      	ldr	r3, [r2, #20]
 8007db8:	68d4      	ldr	r4, [r2, #12]
 8007dba:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007dbc:	9302      	str	r3, [sp, #8]
 8007dbe:	9400      	str	r4, [sp, #0]
 8007dc0:	6993      	ldr	r3, [r2, #24]
 8007dc2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007dc4:	9307      	str	r3, [sp, #28]
 8007dc6:	9403      	str	r4, [sp, #12]
 8007dc8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007dcc:	69d6      	ldr	r6, [r2, #28]
 8007dce:	6893      	ldr	r3, [r2, #8]
 8007dd0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007dd2:	9104      	str	r1, [sp, #16]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	f000 80c5 	beq.w	8007f64 <D48_GENERIC+0x1b4>
 8007dda:	f004 0510 	and.w	r5, r4, #16
 8007dde:	f004 0420 	and.w	r4, r4, #32
 8007de2:	4967      	ldr	r1, [pc, #412]	; (8007f80 <D48_GENERIC+0x1d0>)
 8007de4:	9505      	str	r5, [sp, #20]
 8007de6:	9406      	str	r4, [sp, #24]
 8007de8:	f04f 0c00 	mov.w	ip, #0
 8007dec:	4657      	mov	r7, sl
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	e09c      	b.n	8007f2c <D48_GENERIC+0x17c>
 8007df2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8007df6:	f810 b009 	ldrb.w	fp, [r0, r9]
 8007dfa:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8007dfe:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8007e02:	7800      	ldrb	r0, [r0, #0]
 8007e04:	0424      	lsls	r4, r4, #16
 8007e06:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007e0a:	f818 4005 	ldrb.w	r4, [r8, r5]
 8007e0e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8007e12:	44a8      	add	r8, r5
 8007e14:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8007e18:	eb0b 0500 	add.w	r5, fp, r0
 8007e1c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8007e20:	fa5f f885 	uxtb.w	r8, r5
 8007e24:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8007e28:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8007e2c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8007e30:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8007e34:	0e2d      	lsrs	r5, r5, #24
 8007e36:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8007e3a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8007e3e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8007e42:	b2e6      	uxtb	r6, r4
 8007e44:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8007e48:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007e4c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8007e50:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007e54:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8007e58:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8007e5c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007e60:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8007e64:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007e68:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007e6c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8007e70:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007e74:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007e78:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007e7c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8007e80:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8007e84:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8007e88:	4c3e      	ldr	r4, [pc, #248]	; (8007f84 <D48_GENERIC+0x1d4>)
 8007e8a:	9d00      	ldr	r5, [sp, #0]
 8007e8c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8007e90:	4d3d      	ldr	r5, [pc, #244]	; (8007f88 <D48_GENERIC+0x1d8>)
 8007e92:	fb28 4405 	smlad	r4, r8, r5, r4
 8007e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e9a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8007e9e:	4c3b      	ldr	r4, [pc, #236]	; (8007f8c <D48_GENERIC+0x1dc>)
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	fb2a 3304 	smlad	r3, sl, r4, r3
 8007ea6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007eaa:	fb28 3304 	smlad	r3, r8, r4, r3
 8007eae:	4c38      	ldr	r4, [pc, #224]	; (8007f90 <D48_GENERIC+0x1e0>)
 8007eb0:	fb2e 3304 	smlad	r3, lr, r4, r3
 8007eb4:	2501      	movs	r5, #1
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	fb2a fa05 	smuad	sl, sl, r5
 8007ebc:	4b35      	ldr	r3, [pc, #212]	; (8007f94 <D48_GENERIC+0x1e4>)
 8007ebe:	fb28 a803 	smlad	r8, r8, r3, sl
 8007ec2:	4b35      	ldr	r3, [pc, #212]	; (8007f98 <D48_GENERIC+0x1e8>)
 8007ec4:	fb2e 8303 	smlad	r3, lr, r3, r8
 8007ec8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	eb04 0807 	add.w	r8, r4, r7
 8007ed4:	eba8 0803 	sub.w	r8, r8, r3
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	4465      	add	r5, ip
 8007edc:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8007ee0:	b163      	cbz	r3, 8007efc <D48_GENERIC+0x14c>
 8007ee2:	6a17      	ldr	r7, [r2, #32]
 8007ee4:	9402      	str	r4, [sp, #8]
 8007ee6:	fba8 8907 	umull	r8, r9, r8, r7
 8007eea:	fb07 990b 	mla	r9, r7, fp, r9
 8007eee:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8007ef2:	f149 0900 	adc.w	r9, r9, #0
 8007ef6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8007efa:	463c      	mov	r4, r7
 8007efc:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	02e4      	lsls	r4, r4, #11
 8007f04:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007f08:	f04f 0900 	mov.w	r9, #0
 8007f0c:	fb0c fc0e 	mul.w	ip, ip, lr
 8007f10:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8007f1a:	f304 040f 	ssat	r4, #16, r4
 8007f1e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8007f22:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007f24:	fa1f fc85 	uxth.w	ip, r5
 8007f28:	4564      	cmp	r4, ip
 8007f2a:	d919      	bls.n	8007f60 <D48_GENERIC+0x1b0>
 8007f2c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007f2e:	fa5f fe84 	uxtb.w	lr, r4
 8007f32:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8007f36:	f1ce 0500 	rsb	r5, lr, #0
 8007f3a:	eb00 0b09 	add.w	fp, r0, r9
 8007f3e:	eb0b 0a05 	add.w	sl, fp, r5
 8007f42:	2c01      	cmp	r4, #1
 8007f44:	eb0a 0809 	add.w	r8, sl, r9
 8007f48:	f47f af53 	bne.w	8007df2 <D48_GENERIC+0x42>
 8007f4c:	9b06      	ldr	r3, [sp, #24]
 8007f4e:	6805      	ldr	r5, [r0, #0]
 8007f50:	6844      	ldr	r4, [r0, #4]
 8007f52:	3006      	adds	r0, #6
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f43f af63 	beq.w	8007e20 <D48_GENERIC+0x70>
 8007f5a:	ba6d      	rev16	r5, r5
 8007f5c:	ba64      	rev16	r4, r4
 8007f5e:	e75f      	b.n	8007e20 <D48_GENERIC+0x70>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	46ba      	mov	sl, r7
 8007f64:	6093      	str	r3, [r2, #8]
 8007f66:	9b00      	ldr	r3, [sp, #0]
 8007f68:	60d3      	str	r3, [r2, #12]
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	6153      	str	r3, [r2, #20]
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	61d6      	str	r6, [r2, #28]
 8007f72:	2000      	movs	r0, #0
 8007f74:	f8c2 a010 	str.w	sl, [r2, #16]
 8007f78:	6193      	str	r3, [r2, #24]
 8007f7a:	b009      	add	sp, #36	; 0x24
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	20000000 	.word	0x20000000
 8007f84:	000f000a 	.word	0x000f000a
 8007f88:	00060003 	.word	0x00060003
 8007f8c:	00150019 	.word	0x00150019
 8007f90:	00190015 	.word	0x00190015
 8007f94:	00030006 	.word	0x00030006
 8007f98:	000a000f 	.word	0x000a000f

08007f9c <D64_GENERIC>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	b089      	sub	sp, #36	; 0x24
 8007fa2:	6913      	ldr	r3, [r2, #16]
 8007fa4:	6895      	ldr	r5, [r2, #8]
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	9501      	str	r5, [sp, #4]
 8007faa:	6953      	ldr	r3, [r2, #20]
 8007fac:	68d5      	ldr	r5, [r2, #12]
 8007fae:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	9500      	str	r5, [sp, #0]
 8007fb4:	6993      	ldr	r3, [r2, #24]
 8007fb6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	9505      	str	r5, [sp, #20]
 8007fbc:	69d3      	ldr	r3, [r2, #28]
 8007fbe:	9106      	str	r1, [sp, #24]
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	f000 80d9 	beq.w	8008178 <D64_GENERIC+0x1dc>
 8007fc6:	6a11      	ldr	r1, [r2, #32]
 8007fc8:	9102      	str	r1, [sp, #8]
 8007fca:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80081b8 <D64_GENERIC+0x21c>
 8007fce:	f04f 0c00 	mov.w	ip, #0
 8007fd2:	4681      	mov	r9, r0
 8007fd4:	e0c1      	b.n	800815a <D64_GENERIC+0x1be>
 8007fd6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8007fda:	4274      	negs	r4, r6
 8007fdc:	eb09 0708 	add.w	r7, r9, r8
 8007fe0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007fe4:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8007fe8:	5d38      	ldrb	r0, [r7, r4]
 8007fea:	5d29      	ldrb	r1, [r5, r4]
 8007fec:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007ff0:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007ff4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007ff8:	f899 7000 	ldrb.w	r7, [r9]
 8007ffc:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8008000:	4425      	add	r5, r4
 8008002:	0409      	lsls	r1, r1, #16
 8008004:	0400      	lsls	r0, r0, #16
 8008006:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800800a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800800e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8008012:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8008016:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800801a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800801e:	4459      	add	r1, fp
 8008020:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8008024:	4438      	add	r0, r7
 8008026:	b2c5      	uxtb	r5, r0
 8008028:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800802c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8008030:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8008034:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8008038:	0e00      	lsrs	r0, r0, #24
 800803a:	eb03 0806 	add.w	r8, r3, r6
 800803e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8008042:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8008046:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800804a:	b2c8      	uxtb	r0, r1
 800804c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008050:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008054:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8008058:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800805c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008060:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8008064:	0e09      	lsrs	r1, r1, #24
 8008066:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800806a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800806e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8008072:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008076:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800807a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800807e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8008082:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008086:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800808a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800808e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8008092:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008096:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800809a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800809e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80080a2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80080a6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80080aa:	0a8b      	lsrs	r3, r1, #10
 80080ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80080b0:	4939      	ldr	r1, [pc, #228]	; (8008198 <D64_GENERIC+0x1fc>)
 80080b2:	9c00      	ldr	r4, [sp, #0]
 80080b4:	fb28 4101 	smlad	r1, r8, r1, r4
 80080b8:	4c38      	ldr	r4, [pc, #224]	; (800819c <D64_GENERIC+0x200>)
 80080ba:	fb27 1104 	smlad	r1, r7, r4, r1
 80080be:	4c38      	ldr	r4, [pc, #224]	; (80081a0 <D64_GENERIC+0x204>)
 80080c0:	fb20 1104 	smlad	r1, r0, r4, r1
 80080c4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80080c8:	fb2a 1106 	smlad	r1, sl, r6, r1
 80080cc:	4c35      	ldr	r4, [pc, #212]	; (80081a4 <D64_GENERIC+0x208>)
 80080ce:	9d01      	ldr	r5, [sp, #4]
 80080d0:	fb28 5404 	smlad	r4, r8, r4, r5
 80080d4:	4d33      	ldr	r5, [pc, #204]	; (80081a4 <D64_GENERIC+0x208>)
 80080d6:	fb2a 4415 	smladx	r4, sl, r5, r4
 80080da:	4d33      	ldr	r5, [pc, #204]	; (80081a8 <D64_GENERIC+0x20c>)
 80080dc:	fb27 4405 	smlad	r4, r7, r5, r4
 80080e0:	fb20 4415 	smladx	r4, r0, r5, r4
 80080e4:	2501      	movs	r5, #1
 80080e6:	9400      	str	r4, [sp, #0]
 80080e8:	fb28 f805 	smuad	r8, r8, r5
 80080ec:	4c2f      	ldr	r4, [pc, #188]	; (80081ac <D64_GENERIC+0x210>)
 80080ee:	fb27 8704 	smlad	r7, r7, r4, r8
 80080f2:	4c2f      	ldr	r4, [pc, #188]	; (80081b0 <D64_GENERIC+0x214>)
 80080f4:	fb20 7004 	smlad	r0, r0, r4, r7
 80080f8:	4c2e      	ldr	r4, [pc, #184]	; (80081b4 <D64_GENERIC+0x218>)
 80080fa:	fb2a 0004 	smlad	r0, sl, r4, r0
 80080fe:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8008102:	9902      	ldr	r1, [sp, #8]
 8008104:	9001      	str	r0, [sp, #4]
 8008106:	b189      	cbz	r1, 800812c <D64_GENERIC+0x190>
 8008108:	9803      	ldr	r0, [sp, #12]
 800810a:	9c04      	ldr	r4, [sp, #16]
 800810c:	9604      	str	r6, [sp, #16]
 800810e:	4430      	add	r0, r6
 8008110:	1b00      	subs	r0, r0, r4
 8008112:	17c5      	asrs	r5, r0, #31
 8008114:	460f      	mov	r7, r1
 8008116:	fba0 0101 	umull	r0, r1, r0, r1
 800811a:	fb07 1105 	mla	r1, r7, r5, r1
 800811e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008122:	f141 0100 	adc.w	r1, r1, #0
 8008126:	0049      	lsls	r1, r1, #1
 8008128:	9103      	str	r1, [sp, #12]
 800812a:	460e      	mov	r6, r1
 800812c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800812e:	9905      	ldr	r1, [sp, #20]
 8008130:	9806      	ldr	r0, [sp, #24]
 8008132:	02b6      	lsls	r6, r6, #10
 8008134:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008138:	f04f 0800 	mov.w	r8, #0
 800813c:	fb0c f404 	mul.w	r4, ip, r4
 8008140:	fbc1 7806 	smlal	r7, r8, r1, r6
 8008144:	4641      	mov	r1, r8
 8008146:	1089      	asrs	r1, r1, #2
 8008148:	f301 010f 	ssat	r1, #16, r1
 800814c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8008150:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8008152:	f10c 0c01 	add.w	ip, ip, #1
 8008156:	4561      	cmp	r1, ip
 8008158:	dd0e      	ble.n	8008178 <D64_GENERIC+0x1dc>
 800815a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800815c:	2e01      	cmp	r6, #1
 800815e:	f47f af3a 	bne.w	8007fd6 <D64_GENERIC+0x3a>
 8008162:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8008164:	06b4      	lsls	r4, r6, #26
 8008166:	e899 0003 	ldmia.w	r9, {r0, r1}
 800816a:	f109 0908 	add.w	r9, r9, #8
 800816e:	f57f af5a 	bpl.w	8008026 <D64_GENERIC+0x8a>
 8008172:	ba40      	rev16	r0, r0
 8008174:	ba49      	rev16	r1, r1
 8008176:	e756      	b.n	8008026 <D64_GENERIC+0x8a>
 8008178:	61d3      	str	r3, [r2, #28]
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	9901      	ldr	r1, [sp, #4]
 800817e:	6113      	str	r3, [r2, #16]
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	6091      	str	r1, [r2, #8]
 8008184:	6153      	str	r3, [r2, #20]
 8008186:	9900      	ldr	r1, [sp, #0]
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	60d1      	str	r1, [r2, #12]
 800818c:	2000      	movs	r0, #0
 800818e:	6193      	str	r3, [r2, #24]
 8008190:	b009      	add	sp, #36	; 0x24
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	bf00      	nop
 8008198:	001c0015 	.word	0x001c0015
 800819c:	000f000a 	.word	0x000f000a
 80081a0:	00060003 	.word	0x00060003
 80081a4:	0024002a 	.word	0x0024002a
 80081a8:	002e0030 	.word	0x002e0030
 80081ac:	00030006 	.word	0x00030006
 80081b0:	000a000f 	.word	0x000a000f
 80081b4:	0015001c 	.word	0x0015001c
 80081b8:	20000000 	.word	0x20000000

080081bc <D80_GENERIC>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	b08b      	sub	sp, #44	; 0x2c
 80081c2:	6914      	ldr	r4, [r2, #16]
 80081c4:	9404      	str	r4, [sp, #16]
 80081c6:	6954      	ldr	r4, [r2, #20]
 80081c8:	9405      	str	r4, [sp, #20]
 80081ca:	6994      	ldr	r4, [r2, #24]
 80081cc:	9409      	str	r4, [sp, #36]	; 0x24
 80081ce:	6894      	ldr	r4, [r2, #8]
 80081d0:	9402      	str	r4, [sp, #8]
 80081d2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80081d4:	68d4      	ldr	r4, [r2, #12]
 80081d6:	9401      	str	r4, [sp, #4]
 80081d8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80081da:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80081de:	9406      	str	r4, [sp, #24]
 80081e0:	9107      	str	r1, [sp, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 810f 	beq.w	8008406 <D80_GENERIC+0x24a>
 80081e8:	6a13      	ldr	r3, [r2, #32]
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	2300      	movs	r3, #0
 80081ee:	9200      	str	r2, [sp, #0]
 80081f0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8008458 <D80_GENERIC+0x29c>
 80081f4:	f8cd b00c 	str.w	fp, [sp, #12]
 80081f8:	461a      	mov	r2, r3
 80081fa:	e0ed      	b.n	80083d8 <D80_GENERIC+0x21c>
 80081fc:	fa5f fc8c 	uxtb.w	ip, ip
 8008200:	fa0f f48c 	sxth.w	r4, ip
 8008204:	0066      	lsls	r6, r4, #1
 8008206:	eb06 0804 	add.w	r8, r6, r4
 800820a:	f1cc 0500 	rsb	r5, ip, #0
 800820e:	eb00 0108 	add.w	r1, r0, r8
 8008212:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008216:	194b      	adds	r3, r1, r5
 8008218:	5d49      	ldrb	r1, [r1, r5]
 800821a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800821e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8008222:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8008226:	f890 8000 	ldrb.w	r8, [r0]
 800822a:	eb03 0e04 	add.w	lr, r3, r4
 800822e:	eb0e 0705 	add.w	r7, lr, r5
 8008232:	0409      	lsls	r1, r1, #16
 8008234:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8008238:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800823c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008240:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8008244:	eb0a 0004 	add.w	r0, sl, r4
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800824e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8008252:	5d44      	ldrb	r4, [r0, r5]
 8008254:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008258:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800825c:	4428      	add	r0, r5
 800825e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008262:	4441      	add	r1, r8
 8008264:	4430      	add	r0, r6
 8008266:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800826a:	441f      	add	r7, r3
 800826c:	b2cd      	uxtb	r5, r1
 800826e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008272:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8008276:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008280:	0e09      	lsrs	r1, r1, #24
 8008282:	4433      	add	r3, r6
 8008284:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8008288:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800828c:	b2fd      	uxtb	r5, r7
 800828e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8008292:	469b      	mov	fp, r3
 8008294:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8008298:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800829c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80082a0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80082a4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80082a8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80082ac:	0e3b      	lsrs	r3, r7, #24
 80082ae:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80082b2:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80082b6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80082ba:	fa5f fe84 	uxtb.w	lr, r4
 80082be:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80082c2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80082c6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80082ca:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80082ce:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80082d2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80082d6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80082da:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80082de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80082e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082e6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80082ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80082ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80082f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80082f6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80082fa:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80082fe:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8008302:	0aa3      	lsrs	r3, r4, #10
 8008304:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008308:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800830c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008310:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800831a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800831e:	4b42      	ldr	r3, [pc, #264]	; (8008428 <D80_GENERIC+0x26c>)
 8008320:	9901      	ldr	r1, [sp, #4]
 8008322:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008326:	4941      	ldr	r1, [pc, #260]	; (800842c <D80_GENERIC+0x270>)
 8008328:	fb28 3301 	smlad	r3, r8, r1, r3
 800832c:	4940      	ldr	r1, [pc, #256]	; (8008430 <D80_GENERIC+0x274>)
 800832e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8008332:	4940      	ldr	r1, [pc, #256]	; (8008434 <D80_GENERIC+0x278>)
 8008334:	fb27 3301 	smlad	r3, r7, r1, r3
 8008338:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800833c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8008340:	493d      	ldr	r1, [pc, #244]	; (8008438 <D80_GENERIC+0x27c>)
 8008342:	9c02      	ldr	r4, [sp, #8]
 8008344:	fb2b 4401 	smlad	r4, fp, r1, r4
 8008348:	493c      	ldr	r1, [pc, #240]	; (800843c <D80_GENERIC+0x280>)
 800834a:	fb28 4401 	smlad	r4, r8, r1, r4
 800834e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8008352:	fb2c 4101 	smlad	r1, ip, r1, r4
 8008356:	4c3a      	ldr	r4, [pc, #232]	; (8008440 <D80_GENERIC+0x284>)
 8008358:	fb27 1104 	smlad	r1, r7, r4, r1
 800835c:	4c39      	ldr	r4, [pc, #228]	; (8008444 <D80_GENERIC+0x288>)
 800835e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8008362:	9101      	str	r1, [sp, #4]
 8008364:	2101      	movs	r1, #1
 8008366:	fb2b fb01 	smuad	fp, fp, r1
 800836a:	4937      	ldr	r1, [pc, #220]	; (8008448 <D80_GENERIC+0x28c>)
 800836c:	fb28 b801 	smlad	r8, r8, r1, fp
 8008370:	4d36      	ldr	r5, [pc, #216]	; (800844c <D80_GENERIC+0x290>)
 8008372:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8008376:	4d36      	ldr	r5, [pc, #216]	; (8008450 <D80_GENERIC+0x294>)
 8008378:	fb27 c705 	smlad	r7, r7, r5, ip
 800837c:	4d35      	ldr	r5, [pc, #212]	; (8008454 <D80_GENERIC+0x298>)
 800837e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8008382:	9102      	str	r1, [sp, #8]
 8008384:	9908      	ldr	r1, [sp, #32]
 8008386:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800838a:	b181      	cbz	r1, 80083ae <D80_GENERIC+0x1f2>
 800838c:	9c04      	ldr	r4, [sp, #16]
 800838e:	9d05      	ldr	r5, [sp, #20]
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	441c      	add	r4, r3
 8008394:	1b64      	subs	r4, r4, r5
 8008396:	17e7      	asrs	r7, r4, #31
 8008398:	fba4 4501 	umull	r4, r5, r4, r1
 800839c:	fb01 5507 	mla	r5, r1, r7, r5
 80083a0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80083a4:	f145 0500 	adc.w	r5, r5, #0
 80083a8:	0069      	lsls	r1, r5, #1
 80083aa:	9104      	str	r1, [sp, #16]
 80083ac:	460b      	mov	r3, r1
 80083ae:	9e00      	ldr	r6, [sp, #0]
 80083b0:	9f06      	ldr	r7, [sp, #24]
 80083b2:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80083b4:	025b      	lsls	r3, r3, #9
 80083b6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80083ba:	2500      	movs	r5, #0
 80083bc:	fb02 f101 	mul.w	r1, r2, r1
 80083c0:	fbc7 4503 	smlal	r4, r5, r7, r3
 80083c4:	9c07      	ldr	r4, [sp, #28]
 80083c6:	10ab      	asrs	r3, r5, #2
 80083c8:	f303 030f 	ssat	r3, #16, r3
 80083cc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80083d0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80083d2:	3201      	adds	r2, #1
 80083d4:	4293      	cmp	r3, r2
 80083d6:	dd13      	ble.n	8008400 <D80_GENERIC+0x244>
 80083d8:	9b00      	ldr	r3, [sp, #0]
 80083da:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80083de:	f1bc 0f01 	cmp.w	ip, #1
 80083e2:	f47f af0b 	bne.w	80081fc <D80_GENERIC+0x40>
 80083e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e8:	6884      	ldr	r4, [r0, #8]
 80083ea:	069b      	lsls	r3, r3, #26
 80083ec:	e890 0082 	ldmia.w	r0, {r1, r7}
 80083f0:	f100 000a 	add.w	r0, r0, #10
 80083f4:	f57f af3a 	bpl.w	800826c <D80_GENERIC+0xb0>
 80083f8:	ba49      	rev16	r1, r1
 80083fa:	ba7f      	rev16	r7, r7
 80083fc:	ba64      	rev16	r4, r4
 80083fe:	e735      	b.n	800826c <D80_GENERIC+0xb0>
 8008400:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008404:	4632      	mov	r2, r6
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	6093      	str	r3, [r2, #8]
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	60d3      	str	r3, [r2, #12]
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	6113      	str	r3, [r2, #16]
 8008412:	9b05      	ldr	r3, [sp, #20]
 8008414:	6153      	str	r3, [r2, #20]
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	f8c2 b01c 	str.w	fp, [r2, #28]
 800841c:	2000      	movs	r0, #0
 800841e:	6193      	str	r3, [r2, #24]
 8008420:	b00b      	add	sp, #44	; 0x2c
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	bf00      	nop
 8008428:	002d0024 	.word	0x002d0024
 800842c:	001c0015 	.word	0x001c0015
 8008430:	000f000a 	.word	0x000f000a
 8008434:	00060003 	.word	0x00060003
 8008438:	0037003f 	.word	0x0037003f
 800843c:	00450049 	.word	0x00450049
 8008440:	00490045 	.word	0x00490045
 8008444:	003f0037 	.word	0x003f0037
 8008448:	00030006 	.word	0x00030006
 800844c:	000a000f 	.word	0x000a000f
 8008450:	0015001c 	.word	0x0015001c
 8008454:	0024002d 	.word	0x0024002d
 8008458:	20000000 	.word	0x20000000

0800845c <D128_GENERIC>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	b093      	sub	sp, #76	; 0x4c
 8008462:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008464:	9005      	str	r0, [sp, #20]
 8008466:	4610      	mov	r0, r2
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	6912      	ldr	r2, [r2, #16]
 800846c:	920c      	str	r2, [sp, #48]	; 0x30
 800846e:	4602      	mov	r2, r0
 8008470:	6940      	ldr	r0, [r0, #20]
 8008472:	900d      	str	r0, [sp, #52]	; 0x34
 8008474:	4610      	mov	r0, r2
 8008476:	4614      	mov	r4, r2
 8008478:	6992      	ldr	r2, [r2, #24]
 800847a:	9211      	str	r2, [sp, #68]	; 0x44
 800847c:	69c2      	ldr	r2, [r0, #28]
 800847e:	9202      	str	r2, [sp, #8]
 8008480:	68e2      	ldr	r2, [r4, #12]
 8008482:	6880      	ldr	r0, [r0, #8]
 8008484:	9203      	str	r2, [sp, #12]
 8008486:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008488:	9004      	str	r0, [sp, #16]
 800848a:	920e      	str	r2, [sp, #56]	; 0x38
 800848c:	910f      	str	r1, [sp, #60]	; 0x3c
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 819b 	beq.w	80087ca <D128_GENERIC+0x36e>
 8008494:	6a23      	ldr	r3, [r4, #32]
 8008496:	9310      	str	r3, [sp, #64]	; 0x40
 8008498:	2300      	movs	r3, #0
 800849a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8008844 <D128_GENERIC+0x3e8>
 800849e:	9306      	str	r3, [sp, #24]
 80084a0:	e17a      	b.n	8008798 <D128_GENERIC+0x33c>
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	9d05      	ldr	r5, [sp, #20]
 80084a6:	b214      	sxth	r4, r2
 80084a8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80084ac:	4250      	negs	r0, r2
 80084ae:	eb05 010a 	add.w	r1, r5, sl
 80084b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084b6:	eb01 0800 	add.w	r8, r1, r0
 80084ba:	eb0b 0c04 	add.w	ip, fp, r4
 80084be:	eb08 070c 	add.w	r7, r8, ip
 80084c2:	183b      	adds	r3, r7, r0
 80084c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80084c8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80084cc:	eb0e 0604 	add.w	r6, lr, r4
 80084d0:	9307      	str	r3, [sp, #28]
 80084d2:	1833      	adds	r3, r6, r0
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	462b      	mov	r3, r5
 80084d8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80084dc:	f8cd a020 	str.w	sl, [sp, #32]
 80084e0:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80084e4:	f813 c002 	ldrb.w	ip, [r3, r2]
 80084e8:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80084ec:	5c3a      	ldrb	r2, [r7, r0]
 80084ee:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80084f2:	781f      	ldrb	r7, [r3, #0]
 80084f4:	9b07      	ldr	r3, [sp, #28]
 80084f6:	9d05      	ldr	r5, [sp, #20]
 80084f8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80084fc:	5c09      	ldrb	r1, [r1, r0]
 80084fe:	9709      	str	r7, [sp, #36]	; 0x24
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8008506:	5c33      	ldrb	r3, [r6, r0]
 8008508:	0412      	lsls	r2, r2, #16
 800850a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800850e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8008512:	9d08      	ldr	r5, [sp, #32]
 8008514:	eb06 0a04 	add.w	sl, r6, r4
 8008518:	0409      	lsls	r1, r1, #16
 800851a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800851e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8008522:	5d36      	ldrb	r6, [r6, r4]
 8008524:	9c05      	ldr	r4, [sp, #20]
 8008526:	042d      	lsls	r5, r5, #16
 8008528:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800852c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8008530:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8008534:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8008538:	eb0a 0c00 	add.w	ip, sl, r0
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8008542:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8008546:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800854a:	9d07      	ldr	r5, [sp, #28]
 800854c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8008550:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8008554:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008556:	4458      	add	r0, fp
 8008558:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800855c:	9005      	str	r0, [sp, #20]
 800855e:	4439      	add	r1, r7
 8008560:	442a      	add	r2, r5
 8008562:	44b2      	add	sl, r6
 8008564:	1918      	adds	r0, r3, r4
 8008566:	b2cb      	uxtb	r3, r1
 8008568:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800856c:	9e02      	ldr	r6, [sp, #8]
 800856e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008572:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008576:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800857a:	441e      	add	r6, r3
 800857c:	0e09      	lsrs	r1, r1, #24
 800857e:	4633      	mov	r3, r6
 8008580:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008584:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8008588:	b2d4      	uxtb	r4, r2
 800858a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800858e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008592:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8008596:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800859a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800859e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80085a2:	0e12      	lsrs	r2, r2, #24
 80085a4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80085a8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80085ac:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80085b0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80085b4:	9702      	str	r7, [sp, #8]
 80085b6:	b2c2      	uxtb	r2, r0
 80085b8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80085bc:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80085c0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80085c4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80085c8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80085cc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80085d0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80085d4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80085d8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80085dc:	0e00      	lsrs	r0, r0, #24
 80085de:	fa5f f68a 	uxtb.w	r6, sl
 80085e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e6:	9309      	str	r3, [sp, #36]	; 0x24
 80085e8:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80085ec:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80085f0:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80085f4:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80085f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80085fc:	950a      	str	r5, [sp, #40]	; 0x28
 80085fe:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008602:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008606:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800860a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800860e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008612:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008616:	920b      	str	r2, [sp, #44]	; 0x2c
 8008618:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800861c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800861e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008622:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800862c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	f8cd c008 	str.w	ip, [sp, #8]
 8008636:	4694      	mov	ip, r2
 8008638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800863a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800863e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8008642:	9a02      	ldr	r2, [sp, #8]
 8008644:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008648:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800864c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008652:	f8cd a020 	str.w	sl, [sp, #32]
 8008656:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800865a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800865e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008662:	9b07      	ldr	r3, [sp, #28]
 8008664:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008668:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800866c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8008670:	9a08      	ldr	r2, [sp, #32]
 8008672:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800867a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800867e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008682:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8008686:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800868a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800868e:	0a96      	lsrs	r6, r2, #10
 8008690:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008694:	9602      	str	r6, [sp, #8]
 8008696:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800869a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800869e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80086a2:	4e53      	ldr	r6, [pc, #332]	; (80087f0 <D128_GENERIC+0x394>)
 80086a4:	9f03      	ldr	r7, [sp, #12]
 80086a6:	fb2c 7606 	smlad	r6, ip, r6, r7
 80086aa:	4f52      	ldr	r7, [pc, #328]	; (80087f4 <D128_GENERIC+0x398>)
 80086ac:	fb2a 6607 	smlad	r6, sl, r7, r6
 80086b0:	4f51      	ldr	r7, [pc, #324]	; (80087f8 <D128_GENERIC+0x39c>)
 80086b2:	fb21 6607 	smlad	r6, r1, r7, r6
 80086b6:	4f51      	ldr	r7, [pc, #324]	; (80087fc <D128_GENERIC+0x3a0>)
 80086b8:	fb24 6607 	smlad	r6, r4, r7, r6
 80086bc:	4f50      	ldr	r7, [pc, #320]	; (8008800 <D128_GENERIC+0x3a4>)
 80086be:	fb28 6607 	smlad	r6, r8, r7, r6
 80086c2:	4f50      	ldr	r7, [pc, #320]	; (8008804 <D128_GENERIC+0x3a8>)
 80086c4:	fb20 6607 	smlad	r6, r0, r7, r6
 80086c8:	4f4f      	ldr	r7, [pc, #316]	; (8008808 <D128_GENERIC+0x3ac>)
 80086ca:	fb23 6607 	smlad	r6, r3, r7, r6
 80086ce:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80086d2:	fb25 6607 	smlad	r6, r5, r7, r6
 80086d6:	4f4d      	ldr	r7, [pc, #308]	; (800880c <D128_GENERIC+0x3b0>)
 80086d8:	9a04      	ldr	r2, [sp, #16]
 80086da:	fb2c 2e07 	smlad	lr, ip, r7, r2
 80086de:	4a4c      	ldr	r2, [pc, #304]	; (8008810 <D128_GENERIC+0x3b4>)
 80086e0:	fb2a ee02 	smlad	lr, sl, r2, lr
 80086e4:	4f4b      	ldr	r7, [pc, #300]	; (8008814 <D128_GENERIC+0x3b8>)
 80086e6:	fb21 ee07 	smlad	lr, r1, r7, lr
 80086ea:	4f4b      	ldr	r7, [pc, #300]	; (8008818 <D128_GENERIC+0x3bc>)
 80086ec:	fb24 ee07 	smlad	lr, r4, r7, lr
 80086f0:	4f4a      	ldr	r7, [pc, #296]	; (800881c <D128_GENERIC+0x3c0>)
 80086f2:	fb28 ee07 	smlad	lr, r8, r7, lr
 80086f6:	4f4a      	ldr	r7, [pc, #296]	; (8008820 <D128_GENERIC+0x3c4>)
 80086f8:	fb20 ee07 	smlad	lr, r0, r7, lr
 80086fc:	4f49      	ldr	r7, [pc, #292]	; (8008824 <D128_GENERIC+0x3c8>)
 80086fe:	fb23 e707 	smlad	r7, r3, r7, lr
 8008702:	f8df e144 	ldr.w	lr, [pc, #324]	; 8008848 <D128_GENERIC+0x3ec>
 8008706:	fb25 720e 	smlad	r2, r5, lr, r7
 800870a:	f04f 0b01 	mov.w	fp, #1
 800870e:	9203      	str	r2, [sp, #12]
 8008710:	fb2c fb0b 	smuad	fp, ip, fp
 8008714:	4f44      	ldr	r7, [pc, #272]	; (8008828 <D128_GENERIC+0x3cc>)
 8008716:	fb2a ba07 	smlad	sl, sl, r7, fp
 800871a:	4f44      	ldr	r7, [pc, #272]	; (800882c <D128_GENERIC+0x3d0>)
 800871c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008720:	4f43      	ldr	r7, [pc, #268]	; (8008830 <D128_GENERIC+0x3d4>)
 8008722:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008726:	4f43      	ldr	r7, [pc, #268]	; (8008834 <D128_GENERIC+0x3d8>)
 8008728:	fb28 a707 	smlad	r7, r8, r7, sl
 800872c:	4a42      	ldr	r2, [pc, #264]	; (8008838 <D128_GENERIC+0x3dc>)
 800872e:	fb20 7702 	smlad	r7, r0, r2, r7
 8008732:	4a42      	ldr	r2, [pc, #264]	; (800883c <D128_GENERIC+0x3e0>)
 8008734:	fb23 7702 	smlad	r7, r3, r2, r7
 8008738:	4b41      	ldr	r3, [pc, #260]	; (8008840 <D128_GENERIC+0x3e4>)
 800873a:	fb25 7303 	smlad	r3, r5, r3, r7
 800873e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8008746:	b185      	cbz	r5, 800876a <D128_GENERIC+0x30e>
 8008748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800874a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800874c:	960d      	str	r6, [sp, #52]	; 0x34
 800874e:	4432      	add	r2, r6
 8008750:	1a52      	subs	r2, r2, r1
 8008752:	17d1      	asrs	r1, r2, #31
 8008754:	fba2 2305 	umull	r2, r3, r2, r5
 8008758:	fb05 3301 	mla	r3, r5, r1, r3
 800875c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008760:	f143 0300 	adc.w	r3, r3, #0
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	930c      	str	r3, [sp, #48]	; 0x30
 8008768:	461e      	mov	r6, r3
 800876a:	9801      	ldr	r0, [sp, #4]
 800876c:	9c06      	ldr	r4, [sp, #24]
 800876e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8008770:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008772:	01f6      	lsls	r6, r6, #7
 8008774:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008778:	2300      	movs	r3, #0
 800877a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800877e:	fb04 f101 	mul.w	r1, r4, r1
 8008782:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008784:	109b      	asrs	r3, r3, #2
 8008786:	f303 030f 	ssat	r3, #16, r3
 800878a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800878e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8008790:	1c62      	adds	r2, r4, #1
 8008792:	4293      	cmp	r3, r2
 8008794:	9206      	str	r2, [sp, #24]
 8008796:	dd18      	ble.n	80087ca <D128_GENERIC+0x36e>
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800879c:	2a01      	cmp	r2, #1
 800879e:	f47f ae80 	bne.w	80084a2 <D128_GENERIC+0x46>
 80087a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a4:	9d05      	ldr	r5, [sp, #20]
 80087a6:	069b      	lsls	r3, r3, #26
 80087a8:	6829      	ldr	r1, [r5, #0]
 80087aa:	686a      	ldr	r2, [r5, #4]
 80087ac:	68a8      	ldr	r0, [r5, #8]
 80087ae:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80087b2:	f105 0410 	add.w	r4, r5, #16
 80087b6:	d506      	bpl.n	80087c6 <D128_GENERIC+0x36a>
 80087b8:	ba49      	rev16	r1, r1
 80087ba:	ba52      	rev16	r2, r2
 80087bc:	ba40      	rev16	r0, r0
 80087be:	fa9a fa9a 	rev16.w	sl, sl
 80087c2:	9405      	str	r4, [sp, #20]
 80087c4:	e6cf      	b.n	8008566 <D128_GENERIC+0x10a>
 80087c6:	9405      	str	r4, [sp, #20]
 80087c8:	e6cd      	b.n	8008566 <D128_GENERIC+0x10a>
 80087ca:	9a01      	ldr	r2, [sp, #4]
 80087cc:	9904      	ldr	r1, [sp, #16]
 80087ce:	6091      	str	r1, [r2, #8]
 80087d0:	9903      	ldr	r1, [sp, #12]
 80087d2:	60d1      	str	r1, [r2, #12]
 80087d4:	9b02      	ldr	r3, [sp, #8]
 80087d6:	61d3      	str	r3, [r2, #28]
 80087d8:	4611      	mov	r1, r2
 80087da:	4613      	mov	r3, r2
 80087dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087de:	610a      	str	r2, [r1, #16]
 80087e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087e2:	6159      	str	r1, [r3, #20]
 80087e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087e6:	6199      	str	r1, [r3, #24]
 80087e8:	2000      	movs	r0, #0
 80087ea:	b013      	add	sp, #76	; 0x4c
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	00780069 	.word	0x00780069
 80087f4:	005b004e 	.word	0x005b004e
 80087f8:	00420037 	.word	0x00420037
 80087fc:	002d0024 	.word	0x002d0024
 8008800:	001c0015 	.word	0x001c0015
 8008804:	000f000a 	.word	0x000f000a
 8008808:	00060003 	.word	0x00060003
 800880c:	00880096 	.word	0x00880096
 8008810:	00a200ac 	.word	0x00a200ac
 8008814:	00b400ba 	.word	0x00b400ba
 8008818:	00be00c0 	.word	0x00be00c0
 800881c:	00c000be 	.word	0x00c000be
 8008820:	00ba00b4 	.word	0x00ba00b4
 8008824:	00ac00a2 	.word	0x00ac00a2
 8008828:	00030006 	.word	0x00030006
 800882c:	000a000f 	.word	0x000a000f
 8008830:	0015001c 	.word	0x0015001c
 8008834:	0024002d 	.word	0x0024002d
 8008838:	00370042 	.word	0x00370042
 800883c:	004e005b 	.word	0x004e005b
 8008840:	00690078 	.word	0x00690078
 8008844:	20000000 	.word	0x20000000
 8008848:	00960088 	.word	0x00960088

0800884c <D16_1CH_HTONS_VOL_HP>:
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	4691      	mov	r9, r2
 8008852:	b083      	sub	sp, #12
 8008854:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008856:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800885a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	4680      	mov	r8, r0
 8008862:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8008866:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800886a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800886e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8008872:	9401      	str	r4, [sp, #4]
 8008874:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8008878:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800887c:	2a00      	cmp	r2, #0
 800887e:	d04e      	beq.n	800891e <D16_1CH_HTONS_VOL_HP+0xd2>
 8008880:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800892c <D16_1CH_HTONS_VOL_HP+0xe0>
 8008884:	1e8c      	subs	r4, r1, #2
 8008886:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800888a:	f858 2b02 	ldr.w	r2, [r8], #2
 800888e:	ba52      	rev16	r2, r2
 8008890:	b2d6      	uxtb	r6, r2
 8008892:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008896:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800889a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800889e:	4413      	add	r3, r2
 80088a0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80088a4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80088a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80088b0:	0a93      	lsrs	r3, r2, #10
 80088b2:	4a1c      	ldr	r2, [pc, #112]	; (8008924 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80088b4:	fb21 5202 	smlad	r2, r1, r2, r5
 80088b8:	4d1b      	ldr	r5, [pc, #108]	; (8008928 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80088ba:	fb21 f505 	smuad	r5, r1, r5
 80088be:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80088c2:	4410      	add	r0, r2
 80088c4:	1bc0      	subs	r0, r0, r7
 80088c6:	17c7      	asrs	r7, r0, #31
 80088c8:	fba0 010e 	umull	r0, r1, r0, lr
 80088cc:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80088d0:	fb0e 1107 	mla	r1, lr, r7, r1
 80088d4:	f141 0100 	adc.w	r1, r1, #0
 80088d8:	0448      	lsls	r0, r1, #17
 80088da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80088de:	2700      	movs	r7, #0
 80088e0:	fbc0 670a 	smlal	r6, r7, r0, sl
 80088e4:	45d8      	cmp	r8, fp
 80088e6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80088ea:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80088ee:	4617      	mov	r7, r2
 80088f0:	f301 010f 	ssat	r1, #16, r1
 80088f4:	f824 1f02 	strh.w	r1, [r4, #2]!
 80088f8:	d1c7      	bne.n	800888a <D16_1CH_HTONS_VOL_HP+0x3e>
 80088fa:	9901      	ldr	r1, [sp, #4]
 80088fc:	f8c9 301c 	str.w	r3, [r9, #28]
 8008900:	9b00      	ldr	r3, [sp, #0]
 8008902:	f8c9 0010 	str.w	r0, [r9, #16]
 8008906:	2000      	movs	r0, #0
 8008908:	f8c9 5008 	str.w	r5, [r9, #8]
 800890c:	f8c9 100c 	str.w	r1, [r9, #12]
 8008910:	f8c9 2014 	str.w	r2, [r9, #20]
 8008914:	f8c9 3018 	str.w	r3, [r9, #24]
 8008918:	b003      	add	sp, #12
 800891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891e:	463a      	mov	r2, r7
 8008920:	4621      	mov	r1, r4
 8008922:	e7eb      	b.n	80088fc <D16_1CH_HTONS_VOL_HP+0xb0>
 8008924:	00030001 	.word	0x00030001
 8008928:	00010003 	.word	0x00010003
 800892c:	20000000 	.word	0x20000000

08008930 <D24_1CH_HTONS_VOL_HP>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	b089      	sub	sp, #36	; 0x24
 8008936:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008938:	6996      	ldr	r6, [r2, #24]
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800893e:	9207      	str	r2, [sp, #28]
 8008940:	6915      	ldr	r5, [r2, #16]
 8008942:	6954      	ldr	r4, [r2, #20]
 8008944:	9606      	str	r6, [sp, #24]
 8008946:	6893      	ldr	r3, [r2, #8]
 8008948:	69d6      	ldr	r6, [r2, #28]
 800894a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800894e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008952:	9a04      	ldr	r2, [sp, #16]
 8008954:	9705      	str	r7, [sp, #20]
 8008956:	2a00      	cmp	r2, #0
 8008958:	d07e      	beq.n	8008a58 <D24_1CH_HTONS_VOL_HP+0x128>
 800895a:	f1a1 0b02 	sub.w	fp, r1, #2
 800895e:	2700      	movs	r7, #0
 8008960:	46a8      	mov	r8, r5
 8008962:	f8cd b004 	str.w	fp, [sp, #4]
 8008966:	4655      	mov	r5, sl
 8008968:	46e3      	mov	fp, ip
 800896a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8008a64 <D24_1CH_HTONS_VOL_HP+0x134>
 800896e:	46ba      	mov	sl, r7
 8008970:	469c      	mov	ip, r3
 8008972:	e055      	b.n	8008a20 <D24_1CH_HTONS_VOL_HP+0xf0>
 8008974:	7802      	ldrb	r2, [r0, #0]
 8008976:	78c3      	ldrb	r3, [r0, #3]
 8008978:	7841      	ldrb	r1, [r0, #1]
 800897a:	0212      	lsls	r2, r2, #8
 800897c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8008980:	440b      	add	r3, r1
 8008982:	3002      	adds	r0, #2
 8008984:	b2d9      	uxtb	r1, r3
 8008986:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800898a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800898e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8008992:	0c1b      	lsrs	r3, r3, #16
 8008994:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008998:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800899c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80089a0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80089a4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80089a8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80089ac:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80089b0:	4a2a      	ldr	r2, [pc, #168]	; (8008a5c <D24_1CH_HTONS_VOL_HP+0x12c>)
 80089b2:	fb23 b102 	smlad	r1, r3, r2, fp
 80089b6:	4a2a      	ldr	r2, [pc, #168]	; (8008a60 <D24_1CH_HTONS_VOL_HP+0x130>)
 80089b8:	fb23 cb02 	smlad	fp, r3, r2, ip
 80089bc:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80089c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80089c4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80089c8:	2201      	movs	r2, #1
 80089ca:	fb23 f702 	smuad	r7, r3, r2
 80089ce:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80089d2:	eb01 0208 	add.w	r2, r1, r8
 80089d6:	1b12      	subs	r2, r2, r4
 80089d8:	17d4      	asrs	r4, r2, #31
 80089da:	fba2 2305 	umull	r2, r3, r2, r5
 80089de:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80089e2:	fb05 3304 	mla	r3, r5, r4, r3
 80089e6:	f143 0300 	adc.w	r3, r3, #0
 80089ea:	9c05      	ldr	r4, [sp, #20]
 80089ec:	03da      	lsls	r2, r3, #15
 80089ee:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	fbc4 8902 	smlal	r8, r9, r4, r2
 80089fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80089fe:	9a01      	ldr	r2, [sp, #4]
 8008a00:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	109b      	asrs	r3, r3, #2
 8008a08:	f303 030f 	ssat	r3, #16, r3
 8008a0c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	9201      	str	r2, [sp, #4]
 8008a14:	f10a 0a01 	add.w	sl, sl, #1
 8008a18:	459a      	cmp	sl, r3
 8008a1a:	44bc      	add	ip, r7
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	d00b      	beq.n	8008a38 <D24_1CH_HTONS_VOL_HP+0x108>
 8008a20:	f01a 0f01 	tst.w	sl, #1
 8008a24:	d0a6      	beq.n	8008974 <D24_1CH_HTONS_VOL_HP+0x44>
 8008a26:	78c2      	ldrb	r2, [r0, #3]
 8008a28:	7883      	ldrb	r3, [r0, #2]
 8008a2a:	f810 1b04 	ldrb.w	r1, [r0], #4
 8008a2e:	0212      	lsls	r2, r2, #8
 8008a30:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8008a34:	440b      	add	r3, r1
 8008a36:	e7a5      	b.n	8008984 <D24_1CH_HTONS_VOL_HP+0x54>
 8008a38:	4663      	mov	r3, ip
 8008a3a:	4645      	mov	r5, r8
 8008a3c:	46dc      	mov	ip, fp
 8008a3e:	9807      	ldr	r0, [sp, #28]
 8008a40:	6141      	str	r1, [r0, #20]
 8008a42:	9906      	ldr	r1, [sp, #24]
 8008a44:	6083      	str	r3, [r0, #8]
 8008a46:	f8c0 c00c 	str.w	ip, [r0, #12]
 8008a4a:	61c6      	str	r6, [r0, #28]
 8008a4c:	6105      	str	r5, [r0, #16]
 8008a4e:	6181      	str	r1, [r0, #24]
 8008a50:	2000      	movs	r0, #0
 8008a52:	b009      	add	sp, #36	; 0x24
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	4621      	mov	r1, r4
 8008a5a:	e7f0      	b.n	8008a3e <D24_1CH_HTONS_VOL_HP+0x10e>
 8008a5c:	00030001 	.word	0x00030001
 8008a60:	00060007 	.word	0x00060007
 8008a64:	20000000 	.word	0x20000000

08008a68 <D32_1CH_HTONS_VOL_HP>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4692      	mov	sl, r2
 8008a6e:	b087      	sub	sp, #28
 8008a70:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008a72:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008a76:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8008a80:	f8da 8014 	ldr.w	r8, [sl, #20]
 8008a84:	f8da 601c 	ldr.w	r6, [sl, #28]
 8008a88:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008a8c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8008a90:	9501      	str	r5, [sp, #4]
 8008a92:	f8da c020 	ldr.w	ip, [sl, #32]
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	d07b      	beq.n	8008b92 <D32_1CH_HTONS_VOL_HP+0x12a>
 8008a9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008a9e:	4f3e      	ldr	r7, [pc, #248]	; (8008b98 <D32_1CH_HTONS_VOL_HP+0x130>)
 8008aa0:	f8cd c00c 	str.w	ip, [sp, #12]
 8008aa4:	9202      	str	r2, [sp, #8]
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	46a1      	mov	r9, r4
 8008aaa:	4684      	mov	ip, r0
 8008aac:	f8cd a014 	str.w	sl, [sp, #20]
 8008ab0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ab4:	ba49      	rev16	r1, r1
 8008ab6:	b2c8      	uxtb	r0, r1
 8008ab8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008abc:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8008ac0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008ac4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008ac8:	0e09      	lsrs	r1, r1, #24
 8008aca:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008ace:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8008ad2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008ad6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8008ada:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8008ade:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8008ae2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008ae6:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8008aea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008aee:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008af2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8008af6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8008afa:	4a28      	ldr	r2, [pc, #160]	; (8008b9c <D32_1CH_HTONS_VOL_HP+0x134>)
 8008afc:	fb20 e202 	smlad	r2, r0, r2, lr
 8008b00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b04:	fb2a 2101 	smlad	r1, sl, r1, r2
 8008b08:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <D32_1CH_HTONS_VOL_HP+0x138>)
 8008b0a:	fb20 3302 	smlad	r3, r0, r2, r3
 8008b0e:	4a25      	ldr	r2, [pc, #148]	; (8008ba4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8008b10:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8008b14:	2301      	movs	r3, #1
 8008b16:	fb20 f003 	smuad	r0, r0, r3
 8008b1a:	4b23      	ldr	r3, [pc, #140]	; (8008ba8 <D32_1CH_HTONS_VOL_HP+0x140>)
 8008b1c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8008b20:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8008b24:	9c03      	ldr	r4, [sp, #12]
 8008b26:	eb02 0009 	add.w	r0, r2, r9
 8008b2a:	eba0 0008 	sub.w	r0, r0, r8
 8008b2e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8008b32:	fba0 0104 	umull	r0, r1, r0, r4
 8008b36:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008b3a:	fb04 110b 	mla	r1, r4, fp, r1
 8008b3e:	f141 0100 	adc.w	r1, r1, #0
 8008b42:	9c01      	ldr	r4, [sp, #4]
 8008b44:	0388      	lsls	r0, r1, #14
 8008b46:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008b4a:	f04f 0900 	mov.w	r9, #0
 8008b4e:	fbc0 8904 	smlal	r8, r9, r0, r4
 8008b52:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8008b56:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8008b5a:	f300 000f 	ssat	r0, #16, r0
 8008b5e:	9902      	ldr	r1, [sp, #8]
 8008b60:	f825 0b02 	strh.w	r0, [r5], #2
 8008b64:	428d      	cmp	r5, r1
 8008b66:	4690      	mov	r8, r2
 8008b68:	d1a2      	bne.n	8008ab0 <D32_1CH_HTONS_VOL_HP+0x48>
 8008b6a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008b6e:	464c      	mov	r4, r9
 8008b70:	f8ca 3008 	str.w	r3, [sl, #8]
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	f8ca e00c 	str.w	lr, [sl, #12]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f8ca 601c 	str.w	r6, [sl, #28]
 8008b80:	f8ca 4010 	str.w	r4, [sl, #16]
 8008b84:	f8ca 2014 	str.w	r2, [sl, #20]
 8008b88:	f8ca 3018 	str.w	r3, [sl, #24]
 8008b8c:	b007      	add	sp, #28
 8008b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b92:	4642      	mov	r2, r8
 8008b94:	e7ec      	b.n	8008b70 <D32_1CH_HTONS_VOL_HP+0x108>
 8008b96:	bf00      	nop
 8008b98:	20000000 	.word	0x20000000
 8008b9c:	00060003 	.word	0x00060003
 8008ba0:	000a000c 	.word	0x000a000c
 8008ba4:	000c000a 	.word	0x000c000a
 8008ba8:	00030006 	.word	0x00030006

08008bac <D48_1CH_HTONS_VOL_HP>:
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	461c      	mov	r4, r3
 8008bb4:	b087      	sub	sp, #28
 8008bb6:	4625      	mov	r5, r4
 8008bb8:	4626      	mov	r6, r4
 8008bba:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8008bbc:	9205      	str	r2, [sp, #20]
 8008bbe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008bc0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8008bc4:	9501      	str	r5, [sp, #4]
 8008bc6:	4680      	mov	r8, r0
 8008bc8:	6a35      	ldr	r5, [r6, #32]
 8008bca:	6918      	ldr	r0, [r3, #16]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	9502      	str	r5, [sp, #8]
 8008bd8:	68e4      	ldr	r4, [r4, #12]
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	f000 808c 	beq.w	8008cf8 <D48_1CH_HTONS_VOL_HP+0x14c>
 8008be0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008be4:	4d45      	ldr	r5, [pc, #276]	; (8008cfc <D48_1CH_HTONS_VOL_HP+0x150>)
 8008be6:	9203      	str	r2, [sp, #12]
 8008be8:	468c      	mov	ip, r1
 8008bea:	e898 0044 	ldmia.w	r8, {r2, r6}
 8008bee:	f108 0806 	add.w	r8, r8, #6
 8008bf2:	ba52      	rev16	r2, r2
 8008bf4:	ba76      	rev16	r6, r6
 8008bf6:	b2d7      	uxtb	r7, r2
 8008bf8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008bfc:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8008c00:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8008c04:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8008c08:	0e12      	lsrs	r2, r2, #24
 8008c0a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8008c0e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8008c12:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008c16:	fa5f fb86 	uxtb.w	fp, r6
 8008c1a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008c1e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8008c22:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008c26:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8008c2a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8008c2e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008c32:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8008c36:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008c3a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c3e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008c42:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8008c46:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008c4a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008c52:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8008c56:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8008c5a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8008c5e:	4a28      	ldr	r2, [pc, #160]	; (8008d00 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008c60:	fb2a 4202 	smlad	r2, sl, r2, r4
 8008c64:	4927      	ldr	r1, [pc, #156]	; (8008d04 <D48_1CH_HTONS_VOL_HP+0x158>)
 8008c66:	fb27 2201 	smlad	r2, r7, r1, r2
 8008c6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008c6e:	fb26 2201 	smlad	r2, r6, r1, r2
 8008c72:	4925      	ldr	r1, [pc, #148]	; (8008d08 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008c74:	fb2a 3401 	smlad	r4, sl, r1, r3
 8008c78:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008c7c:	fb27 4403 	smlad	r4, r7, r3, r4
 8008c80:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <D48_1CH_HTONS_VOL_HP+0x160>)
 8008c82:	fb26 4403 	smlad	r4, r6, r3, r4
 8008c86:	2101      	movs	r1, #1
 8008c88:	fb2a fa01 	smuad	sl, sl, r1
 8008c8c:	4b20      	ldr	r3, [pc, #128]	; (8008d10 <D48_1CH_HTONS_VOL_HP+0x164>)
 8008c8e:	fb27 a703 	smlad	r7, r7, r3, sl
 8008c92:	4b20      	ldr	r3, [pc, #128]	; (8008d14 <D48_1CH_HTONS_VOL_HP+0x168>)
 8008c94:	fb26 7303 	smlad	r3, r6, r3, r7
 8008c98:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8008c9c:	9e02      	ldr	r6, [sp, #8]
 8008c9e:	9f01      	ldr	r7, [sp, #4]
 8008ca0:	4410      	add	r0, r2
 8008ca2:	eba0 0009 	sub.w	r0, r0, r9
 8008ca6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8008caa:	fba0 0106 	umull	r0, r1, r0, r6
 8008cae:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008cb2:	fb06 110a 	mla	r1, r6, sl, r1
 8008cb6:	f141 0100 	adc.w	r1, r1, #0
 8008cba:	0308      	lsls	r0, r1, #12
 8008cbc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008cc0:	f04f 0a00 	mov.w	sl, #0
 8008cc4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8008cc8:	4657      	mov	r7, sl
 8008cca:	10b8      	asrs	r0, r7, #2
 8008ccc:	f300 000f 	ssat	r0, #16, r0
 8008cd0:	f82c 0b02 	strh.w	r0, [ip], #2
 8008cd4:	0048      	lsls	r0, r1, #1
 8008cd6:	9903      	ldr	r1, [sp, #12]
 8008cd8:	458c      	cmp	ip, r1
 8008cda:	4691      	mov	r9, r2
 8008cdc:	d185      	bne.n	8008bea <D48_1CH_HTONS_VOL_HP+0x3e>
 8008cde:	9d05      	ldr	r5, [sp, #20]
 8008ce0:	616a      	str	r2, [r5, #20]
 8008ce2:	9a04      	ldr	r2, [sp, #16]
 8008ce4:	6128      	str	r0, [r5, #16]
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	60ab      	str	r3, [r5, #8]
 8008cea:	60ec      	str	r4, [r5, #12]
 8008cec:	f8c5 e01c 	str.w	lr, [r5, #28]
 8008cf0:	61aa      	str	r2, [r5, #24]
 8008cf2:	b007      	add	sp, #28
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf8:	464a      	mov	r2, r9
 8008cfa:	e7f0      	b.n	8008cde <D48_1CH_HTONS_VOL_HP+0x132>
 8008cfc:	20000000 	.word	0x20000000
 8008d00:	000f000a 	.word	0x000f000a
 8008d04:	00060003 	.word	0x00060003
 8008d08:	00150019 	.word	0x00150019
 8008d0c:	00190015 	.word	0x00190015
 8008d10:	00030006 	.word	0x00030006
 8008d14:	000a000f 	.word	0x000a000f

08008d18 <D64_1CH_HTONS_VOL_HP>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	b089      	sub	sp, #36	; 0x24
 8008d1e:	4614      	mov	r4, r2
 8008d20:	9207      	str	r2, [sp, #28]
 8008d22:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008d24:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8008d28:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8008d2c:	6992      	ldr	r2, [r2, #24]
 8008d2e:	9206      	str	r2, [sp, #24]
 8008d30:	68e2      	ldr	r2, [r4, #12]
 8008d32:	9201      	str	r2, [sp, #4]
 8008d34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008d36:	9203      	str	r2, [sp, #12]
 8008d38:	6a22      	ldr	r2, [r4, #32]
 8008d3a:	69e5      	ldr	r5, [r4, #28]
 8008d3c:	68a6      	ldr	r6, [r4, #8]
 8008d3e:	9204      	str	r2, [sp, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80b0 	beq.w	8008ea6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8008d46:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008d4a:	4f58      	ldr	r7, [pc, #352]	; (8008eac <D64_1CH_HTONS_VOL_HP+0x194>)
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	9102      	str	r1, [sp, #8]
 8008d50:	f850 2b08 	ldr.w	r2, [r0], #8
 8008d54:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008d58:	ba52      	rev16	r2, r2
 8008d5a:	fa93 f993 	rev16.w	r9, r3
 8008d5e:	b2d4      	uxtb	r4, r2
 8008d60:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008d64:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8008d68:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008d6c:	9901      	ldr	r1, [sp, #4]
 8008d6e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008d72:	0e12      	lsrs	r2, r2, #24
 8008d74:	44ab      	add	fp, r5
 8008d76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d7a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8008d7e:	fa5f f289 	uxtb.w	r2, r9
 8008d82:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8008d86:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8008d8a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8008d8e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008d92:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008d96:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8008d9a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8008d9e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008da2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008da6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8008daa:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8008dae:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8008db2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008db6:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8008dba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008dbe:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008dc2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008dce:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8008dd2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008dd6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8008dda:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008dde:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008de2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8008de6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008dea:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8008dee:	4b30      	ldr	r3, [pc, #192]	; (8008eb0 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008df0:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008df4:	492f      	ldr	r1, [pc, #188]	; (8008eb4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8008df6:	fb24 3301 	smlad	r3, r4, r1, r3
 8008dfa:	492f      	ldr	r1, [pc, #188]	; (8008eb8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8008dfc:	fb22 3301 	smlad	r3, r2, r1, r3
 8008e00:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008e04:	fb2e 390a 	smlad	r9, lr, sl, r3
 8008e08:	4b2c      	ldr	r3, [pc, #176]	; (8008ebc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8008e0a:	fb2b 6603 	smlad	r6, fp, r3, r6
 8008e0e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8008e12:	4b2b      	ldr	r3, [pc, #172]	; (8008ec0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8008e14:	fb24 6603 	smlad	r6, r4, r3, r6
 8008e18:	fb22 6313 	smladx	r3, r2, r3, r6
 8008e1c:	f04f 0a01 	mov.w	sl, #1
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	fb2b fb0a 	smuad	fp, fp, sl
 8008e26:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8008e28:	fb24 ba03 	smlad	sl, r4, r3, fp
 8008e2c:	4b26      	ldr	r3, [pc, #152]	; (8008ec8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8008e2e:	fb22 a203 	smlad	r2, r2, r3, sl
 8008e32:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8008e34:	fb2e 2603 	smlad	r6, lr, r3, r2
 8008e38:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8008e3c:	eb0a 020c 	add.w	r2, sl, ip
 8008e40:	9c04      	ldr	r4, [sp, #16]
 8008e42:	9903      	ldr	r1, [sp, #12]
 8008e44:	eba2 0208 	sub.w	r2, r2, r8
 8008e48:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008e4c:	fba2 2304 	umull	r2, r3, r2, r4
 8008e50:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008e54:	fb04 3309 	mla	r3, r4, r9, r3
 8008e58:	f143 0300 	adc.w	r3, r3, #0
 8008e5c:	02da      	lsls	r2, r3, #11
 8008e5e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008e62:	f04f 0900 	mov.w	r9, #0
 8008e66:	fbc1 8902 	smlal	r8, r9, r1, r2
 8008e6a:	9902      	ldr	r1, [sp, #8]
 8008e6c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8008e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e74:	f302 020f 	ssat	r2, #16, r2
 8008e78:	9b05      	ldr	r3, [sp, #20]
 8008e7a:	f821 2b02 	strh.w	r2, [r1], #2
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	9102      	str	r1, [sp, #8]
 8008e82:	46d0      	mov	r8, sl
 8008e84:	f47f af64 	bne.w	8008d50 <D64_1CH_HTONS_VOL_HP+0x38>
 8008e88:	9a07      	ldr	r2, [sp, #28]
 8008e8a:	9901      	ldr	r1, [sp, #4]
 8008e8c:	60d1      	str	r1, [r2, #12]
 8008e8e:	9906      	ldr	r1, [sp, #24]
 8008e90:	6096      	str	r6, [r2, #8]
 8008e92:	2000      	movs	r0, #0
 8008e94:	61d5      	str	r5, [r2, #28]
 8008e96:	f8c2 c010 	str.w	ip, [r2, #16]
 8008e9a:	f8c2 a014 	str.w	sl, [r2, #20]
 8008e9e:	6191      	str	r1, [r2, #24]
 8008ea0:	b009      	add	sp, #36	; 0x24
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea6:	46c2      	mov	sl, r8
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	e7ee      	b.n	8008e8a <D64_1CH_HTONS_VOL_HP+0x172>
 8008eac:	20000000 	.word	0x20000000
 8008eb0:	001c0015 	.word	0x001c0015
 8008eb4:	000f000a 	.word	0x000f000a
 8008eb8:	00060003 	.word	0x00060003
 8008ebc:	0024002a 	.word	0x0024002a
 8008ec0:	002e0030 	.word	0x002e0030
 8008ec4:	00030006 	.word	0x00030006
 8008ec8:	000a000f 	.word	0x000a000f
 8008ecc:	0015001c 	.word	0x0015001c

08008ed0 <D80_1CH_HTONS_VOL_HP>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	b089      	sub	sp, #36	; 0x24
 8008ed8:	4686      	mov	lr, r0
 8008eda:	6918      	ldr	r0, [r3, #16]
 8008edc:	9000      	str	r0, [sp, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	461c      	mov	r4, r3
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	9302      	str	r3, [sp, #8]
 8008ee6:	6983      	ldr	r3, [r0, #24]
 8008ee8:	9306      	str	r3, [sp, #24]
 8008eea:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8008eee:	69c3      	ldr	r3, [r0, #28]
 8008ef0:	68c0      	ldr	r0, [r0, #12]
 8008ef2:	9207      	str	r2, [sp, #28]
 8008ef4:	9001      	str	r0, [sp, #4]
 8008ef6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008ef8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008efa:	9003      	str	r0, [sp, #12]
 8008efc:	6a20      	ldr	r0, [r4, #32]
 8008efe:	9004      	str	r0, [sp, #16]
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	f000 80d2 	beq.w	80090aa <D80_1CH_HTONS_VOL_HP+0x1da>
 8008f06:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008f0a:	4869      	ldr	r0, [pc, #420]	; (80090b0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008f0c:	9205      	str	r2, [sp, #20]
 8008f0e:	461c      	mov	r4, r3
 8008f10:	f8de 5000 	ldr.w	r5, [lr]
 8008f14:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008f18:	f8de 3008 	ldr.w	r3, [lr, #8]
 8008f1c:	f10e 0e0a 	add.w	lr, lr, #10
 8008f20:	ba6d      	rev16	r5, r5
 8008f22:	ba52      	rev16	r2, r2
 8008f24:	fa93 fb93 	rev16.w	fp, r3
 8008f28:	b2ee      	uxtb	r6, r5
 8008f2a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8008f2e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8008f32:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008f36:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8008f3a:	eb04 0a07 	add.w	sl, r4, r7
 8008f3e:	0e2d      	lsrs	r5, r5, #24
 8008f40:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8008f44:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8008f48:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8008f4c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8008f50:	b2d5      	uxtb	r5, r2
 8008f52:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008f56:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8008f5a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008f5e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008f62:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008f66:	0e12      	lsrs	r2, r2, #24
 8008f68:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8008f6c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8008f70:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008f74:	fa5f f48b 	uxtb.w	r4, fp
 8008f78:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008f7c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8008f80:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008f84:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8008f88:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8008f8c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008f90:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008f94:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8008f98:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f9c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008fa0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008fa4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008fa8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008fac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008fb0:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8008fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fb8:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8008fbc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008fc0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008fc4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8008fc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008fcc:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8008fd0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008fd4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8008fd8:	4d36      	ldr	r5, [pc, #216]	; (80090b4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008fda:	9f01      	ldr	r7, [sp, #4]
 8008fdc:	fb23 7505 	smlad	r5, r3, r5, r7
 8008fe0:	4f35      	ldr	r7, [pc, #212]	; (80090b8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008fe2:	fb29 5507 	smlad	r5, r9, r7, r5
 8008fe6:	4f35      	ldr	r7, [pc, #212]	; (80090bc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008fe8:	fb28 5507 	smlad	r5, r8, r7, r5
 8008fec:	4f34      	ldr	r7, [pc, #208]	; (80090c0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008fee:	fb22 5507 	smlad	r5, r2, r7, r5
 8008ff2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008ff6:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8008ffa:	4d32      	ldr	r5, [pc, #200]	; (80090c4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008ffc:	fb23 cc05 	smlad	ip, r3, r5, ip
 8009000:	4d31      	ldr	r5, [pc, #196]	; (80090c8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8009002:	fb29 cc05 	smlad	ip, r9, r5, ip
 8009006:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800900a:	fb28 c505 	smlad	r5, r8, r5, ip
 800900e:	4f2f      	ldr	r7, [pc, #188]	; (80090cc <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8009010:	fb22 5507 	smlad	r5, r2, r7, r5
 8009014:	4f2e      	ldr	r7, [pc, #184]	; (80090d0 <D80_1CH_HTONS_VOL_HP+0x200>)
 8009016:	fb26 5507 	smlad	r5, r6, r7, r5
 800901a:	f04f 0a01 	mov.w	sl, #1
 800901e:	9501      	str	r5, [sp, #4]
 8009020:	fb23 fa0a 	smuad	sl, r3, sl
 8009024:	4b2b      	ldr	r3, [pc, #172]	; (80090d4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8009026:	fb29 a903 	smlad	r9, r9, r3, sl
 800902a:	4d2b      	ldr	r5, [pc, #172]	; (80090d8 <D80_1CH_HTONS_VOL_HP+0x208>)
 800902c:	fb28 9805 	smlad	r8, r8, r5, r9
 8009030:	4d2a      	ldr	r5, [pc, #168]	; (80090dc <D80_1CH_HTONS_VOL_HP+0x20c>)
 8009032:	fb22 8205 	smlad	r2, r2, r5, r8
 8009036:	4b2a      	ldr	r3, [pc, #168]	; (80090e0 <D80_1CH_HTONS_VOL_HP+0x210>)
 8009038:	fb26 2c03 	smlad	ip, r6, r3, r2
 800903c:	9b00      	ldr	r3, [sp, #0]
 800903e:	9d04      	ldr	r5, [sp, #16]
 8009040:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8009044:	4453      	add	r3, sl
 8009046:	461a      	mov	r2, r3
 8009048:	9b02      	ldr	r3, [sp, #8]
 800904a:	f8cd a008 	str.w	sl, [sp, #8]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	17d7      	asrs	r7, r2, #31
 8009052:	fba2 2305 	umull	r2, r3, r2, r5
 8009056:	fb05 3307 	mla	r3, r5, r7, r3
 800905a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800905e:	f143 0300 	adc.w	r3, r3, #0
 8009062:	9d03      	ldr	r5, [sp, #12]
 8009064:	029a      	lsls	r2, r3, #10
 8009066:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800906a:	2700      	movs	r7, #0
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8009072:	10ba      	asrs	r2, r7, #2
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	f302 020f 	ssat	r2, #16, r2
 800907a:	9b05      	ldr	r3, [sp, #20]
 800907c:	f821 2b02 	strh.w	r2, [r1], #2
 8009080:	4299      	cmp	r1, r3
 8009082:	f47f af45 	bne.w	8008f10 <D80_1CH_HTONS_VOL_HP+0x40>
 8009086:	4623      	mov	r3, r4
 8009088:	9907      	ldr	r1, [sp, #28]
 800908a:	9801      	ldr	r0, [sp, #4]
 800908c:	60c8      	str	r0, [r1, #12]
 800908e:	9a00      	ldr	r2, [sp, #0]
 8009090:	f8c1 c008 	str.w	ip, [r1, #8]
 8009094:	4608      	mov	r0, r1
 8009096:	61cb      	str	r3, [r1, #28]
 8009098:	610a      	str	r2, [r1, #16]
 800909a:	f8c1 a014 	str.w	sl, [r1, #20]
 800909e:	9906      	ldr	r1, [sp, #24]
 80090a0:	6181      	str	r1, [r0, #24]
 80090a2:	2000      	movs	r0, #0
 80090a4:	b009      	add	sp, #36	; 0x24
 80090a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090aa:	f8dd a008 	ldr.w	sl, [sp, #8]
 80090ae:	e7eb      	b.n	8009088 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80090b0:	20000000 	.word	0x20000000
 80090b4:	002d0024 	.word	0x002d0024
 80090b8:	001c0015 	.word	0x001c0015
 80090bc:	000f000a 	.word	0x000f000a
 80090c0:	00060003 	.word	0x00060003
 80090c4:	0037003f 	.word	0x0037003f
 80090c8:	00450049 	.word	0x00450049
 80090cc:	00490045 	.word	0x00490045
 80090d0:	003f0037 	.word	0x003f0037
 80090d4:	00030006 	.word	0x00030006
 80090d8:	000a000f 	.word	0x000a000f
 80090dc:	0015001c 	.word	0x0015001c
 80090e0:	0024002d 	.word	0x0024002d

080090e4 <D128_1CH_HTONS_VOL_HP>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	b093      	sub	sp, #76	; 0x4c
 80090ea:	4614      	mov	r4, r2
 80090ec:	9211      	str	r2, [sp, #68]	; 0x44
 80090ee:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80090f0:	6912      	ldr	r2, [r2, #16]
 80090f2:	9203      	str	r2, [sp, #12]
 80090f4:	4622      	mov	r2, r4
 80090f6:	4615      	mov	r5, r2
 80090f8:	6964      	ldr	r4, [r4, #20]
 80090fa:	9406      	str	r4, [sp, #24]
 80090fc:	4614      	mov	r4, r2
 80090fe:	6992      	ldr	r2, [r2, #24]
 8009100:	9210      	str	r2, [sp, #64]	; 0x40
 8009102:	68ea      	ldr	r2, [r5, #12]
 8009104:	9204      	str	r2, [sp, #16]
 8009106:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8009108:	69e6      	ldr	r6, [r4, #28]
 800910a:	920d      	str	r2, [sp, #52]	; 0x34
 800910c:	68a4      	ldr	r4, [r4, #8]
 800910e:	6a2a      	ldr	r2, [r5, #32]
 8009110:	9405      	str	r4, [sp, #20]
 8009112:	920e      	str	r2, [sp, #56]	; 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8145 	beq.w	80093a4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800911a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800911e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009120:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8009400 <D128_1CH_HTONS_VOL_HP+0x31c>
 8009124:	9107      	str	r1, [sp, #28]
 8009126:	f100 0310 	add.w	r3, r0, #16
 800912a:	4699      	mov	r9, r3
 800912c:	f1a9 0110 	sub.w	r1, r9, #16
 8009130:	c90e      	ldmia	r1, {r1, r2, r3}
 8009132:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8009136:	ba49      	rev16	r1, r1
 8009138:	ba52      	rev16	r2, r2
 800913a:	ba5b      	rev16	r3, r3
 800913c:	fa90 fa90 	rev16.w	sl, r0
 8009140:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8009144:	b2cc      	uxtb	r4, r1
 8009146:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800914a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800914e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009152:	0e09      	lsrs	r1, r1, #24
 8009154:	4426      	add	r6, r4
 8009156:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800915a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800915e:	b2d0      	uxtb	r0, r2
 8009160:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009164:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8009168:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800916c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8009170:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8009174:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009178:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800917c:	0e12      	lsrs	r2, r2, #24
 800917e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8009182:	9701      	str	r7, [sp, #4]
 8009184:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8009188:	4627      	mov	r7, r4
 800918a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800918e:	9702      	str	r7, [sp, #8]
 8009190:	b2da      	uxtb	r2, r3
 8009192:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009196:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800919a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800919e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80091a2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80091a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80091aa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80091ae:	0e1b      	lsrs	r3, r3, #24
 80091b0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80091b4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80091b8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80091bc:	fa5f f38a 	uxtb.w	r3, sl
 80091c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80091c4:	960a      	str	r6, [sp, #40]	; 0x28
 80091c6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80091ca:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80091ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80091d2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80091d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80091d8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80091dc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80091e0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80091e4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80091e8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80091ec:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80091f0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80091f4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80091f8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009208:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800920c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009216:	9302      	str	r3, [sp, #8]
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800921e:	9308      	str	r3, [sp, #32]
 8009220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009222:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009226:	950c      	str	r5, [sp, #48]	; 0x30
 8009228:	461d      	mov	r5, r3
 800922a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009230:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009234:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8009238:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	9b02      	ldr	r3, [sp, #8]
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009246:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800924a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800924e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009252:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009256:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800925a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800925e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	9f01      	ldr	r7, [sp, #4]
 8009266:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800926a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800926e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009272:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009276:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800927a:	46be      	mov	lr, r7
 800927c:	0a96      	lsrs	r6, r2, #10
 800927e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8009282:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8009286:	4f49      	ldr	r7, [pc, #292]	; (80093ac <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009288:	9a04      	ldr	r2, [sp, #16]
 800928a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800928e:	4a48      	ldr	r2, [pc, #288]	; (80093b0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8009290:	fb2a ee02 	smlad	lr, sl, r2, lr
 8009294:	4a47      	ldr	r2, [pc, #284]	; (80093b4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8009296:	fb21 ee02 	smlad	lr, r1, r2, lr
 800929a:	4a47      	ldr	r2, [pc, #284]	; (80093b8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800929c:	fb24 ee02 	smlad	lr, r4, r2, lr
 80092a0:	4a46      	ldr	r2, [pc, #280]	; (80093bc <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80092a2:	9f02      	ldr	r7, [sp, #8]
 80092a4:	fb27 ee02 	smlad	lr, r7, r2, lr
 80092a8:	4a45      	ldr	r2, [pc, #276]	; (80093c0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80092aa:	fb20 ee02 	smlad	lr, r0, r2, lr
 80092ae:	4a45      	ldr	r2, [pc, #276]	; (80093c4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80092b0:	fb23 e702 	smlad	r7, r3, r2, lr
 80092b4:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80092b8:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80092bc:	9f01      	ldr	r7, [sp, #4]
 80092be:	4a42      	ldr	r2, [pc, #264]	; (80093c8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80092c0:	46bc      	mov	ip, r7
 80092c2:	9f05      	ldr	r7, [sp, #20]
 80092c4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80092c8:	4a40      	ldr	r2, [pc, #256]	; (80093cc <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80092ca:	fb2a cc02 	smlad	ip, sl, r2, ip
 80092ce:	4f40      	ldr	r7, [pc, #256]	; (80093d0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80092d0:	fb21 cc07 	smlad	ip, r1, r7, ip
 80092d4:	4f3f      	ldr	r7, [pc, #252]	; (80093d4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80092d6:	fb24 cc07 	smlad	ip, r4, r7, ip
 80092da:	4f3f      	ldr	r7, [pc, #252]	; (80093d8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80092dc:	9a02      	ldr	r2, [sp, #8]
 80092de:	fb22 cc07 	smlad	ip, r2, r7, ip
 80092e2:	4f3e      	ldr	r7, [pc, #248]	; (80093dc <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80092e4:	fb20 cc07 	smlad	ip, r0, r7, ip
 80092e8:	4f3d      	ldr	r7, [pc, #244]	; (80093e0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80092ea:	fb23 c707 	smlad	r7, r3, r7, ip
 80092ee:	f8df c114 	ldr.w	ip, [pc, #276]	; 8009404 <D128_1CH_HTONS_VOL_HP+0x320>
 80092f2:	fb25 720c 	smlad	r2, r5, ip, r7
 80092f6:	f04f 0b01 	mov.w	fp, #1
 80092fa:	9204      	str	r2, [sp, #16]
 80092fc:	9f01      	ldr	r7, [sp, #4]
 80092fe:	fb27 fb0b 	smuad	fp, r7, fp
 8009302:	4f38      	ldr	r7, [pc, #224]	; (80093e4 <D128_1CH_HTONS_VOL_HP+0x300>)
 8009304:	fb2a ba07 	smlad	sl, sl, r7, fp
 8009308:	4f37      	ldr	r7, [pc, #220]	; (80093e8 <D128_1CH_HTONS_VOL_HP+0x304>)
 800930a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800930e:	4f37      	ldr	r7, [pc, #220]	; (80093ec <D128_1CH_HTONS_VOL_HP+0x308>)
 8009310:	fb24 aa07 	smlad	sl, r4, r7, sl
 8009314:	4f36      	ldr	r7, [pc, #216]	; (80093f0 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8009316:	9a02      	ldr	r2, [sp, #8]
 8009318:	fb22 a707 	smlad	r7, r2, r7, sl
 800931c:	4a35      	ldr	r2, [pc, #212]	; (80093f4 <D128_1CH_HTONS_VOL_HP+0x310>)
 800931e:	fb20 7702 	smlad	r7, r0, r2, r7
 8009322:	4a35      	ldr	r2, [pc, #212]	; (80093f8 <D128_1CH_HTONS_VOL_HP+0x314>)
 8009324:	fb23 7702 	smlad	r7, r3, r2, r7
 8009328:	4b34      	ldr	r3, [pc, #208]	; (80093fc <D128_1CH_HTONS_VOL_HP+0x318>)
 800932a:	fb25 7303 	smlad	r3, r5, r3, r7
 800932e:	9305      	str	r3, [sp, #20]
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009334:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8009338:	4473      	add	r3, lr
 800933a:	461a      	mov	r2, r3
 800933c:	9b06      	ldr	r3, [sp, #24]
 800933e:	f8cd e018 	str.w	lr, [sp, #24]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	17d1      	asrs	r1, r2, #31
 8009346:	fba2 2304 	umull	r2, r3, r2, r4
 800934a:	fb04 3301 	mla	r3, r4, r1, r3
 800934e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009352:	f143 0300 	adc.w	r3, r3, #0
 8009356:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009358:	021a      	lsls	r2, r3, #8
 800935a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800935e:	2100      	movs	r1, #0
 8009360:	fbc4 0102 	smlal	r0, r1, r4, r2
 8009364:	108a      	asrs	r2, r1, #2
 8009366:	9907      	ldr	r1, [sp, #28]
 8009368:	f302 020f 	ssat	r2, #16, r2
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	f821 2b02 	strh.w	r2, [r1], #2
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009376:	9107      	str	r1, [sp, #28]
 8009378:	4299      	cmp	r1, r3
 800937a:	f109 0910 	add.w	r9, r9, #16
 800937e:	f47f aed5 	bne.w	800912c <D128_1CH_HTONS_VOL_HP+0x48>
 8009382:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009384:	9905      	ldr	r1, [sp, #20]
 8009386:	6091      	str	r1, [r2, #8]
 8009388:	9904      	ldr	r1, [sp, #16]
 800938a:	60d1      	str	r1, [r2, #12]
 800938c:	4613      	mov	r3, r2
 800938e:	61d6      	str	r6, [r2, #28]
 8009390:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009392:	9a03      	ldr	r2, [sp, #12]
 8009394:	611a      	str	r2, [r3, #16]
 8009396:	2000      	movs	r0, #0
 8009398:	f8c3 e014 	str.w	lr, [r3, #20]
 800939c:	6199      	str	r1, [r3, #24]
 800939e:	b013      	add	sp, #76	; 0x4c
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80093a8:	e7eb      	b.n	8009382 <D128_1CH_HTONS_VOL_HP+0x29e>
 80093aa:	bf00      	nop
 80093ac:	00780069 	.word	0x00780069
 80093b0:	005b004e 	.word	0x005b004e
 80093b4:	00420037 	.word	0x00420037
 80093b8:	002d0024 	.word	0x002d0024
 80093bc:	001c0015 	.word	0x001c0015
 80093c0:	000f000a 	.word	0x000f000a
 80093c4:	00060003 	.word	0x00060003
 80093c8:	00880096 	.word	0x00880096
 80093cc:	00a200ac 	.word	0x00a200ac
 80093d0:	00b400ba 	.word	0x00b400ba
 80093d4:	00be00c0 	.word	0x00be00c0
 80093d8:	00c000be 	.word	0x00c000be
 80093dc:	00ba00b4 	.word	0x00ba00b4
 80093e0:	00ac00a2 	.word	0x00ac00a2
 80093e4:	00030006 	.word	0x00030006
 80093e8:	000a000f 	.word	0x000a000f
 80093ec:	0015001c 	.word	0x0015001c
 80093f0:	0024002d 	.word	0x0024002d
 80093f4:	00370042 	.word	0x00370042
 80093f8:	004e005b 	.word	0x004e005b
 80093fc:	00690078 	.word	0x00690078
 8009400:	20000000 	.word	0x20000000
 8009404:	00960088 	.word	0x00960088

08009408 <PDM_Filter_Init>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	2240      	movs	r2, #64	; 0x40
 800940c:	4604      	mov	r4, r0
 800940e:	2100      	movs	r1, #0
 8009410:	300c      	adds	r0, #12
 8009412:	f000 fbff 	bl	8009c14 <memset>
 8009416:	493b      	ldr	r1, [pc, #236]	; (8009504 <PDM_Filter_Init+0xfc>)
 8009418:	483b      	ldr	r0, [pc, #236]	; (8009508 <PDM_Filter_Init+0x100>)
 800941a:	f000 f98d 	bl	8009738 <CRC_Lock>
 800941e:	8822      	ldrh	r2, [r4, #0]
 8009420:	8963      	ldrh	r3, [r4, #10]
 8009422:	4938      	ldr	r1, [pc, #224]	; (8009504 <PDM_Filter_Init+0xfc>)
 8009424:	8925      	ldrh	r5, [r4, #8]
 8009426:	86a3      	strh	r3, [r4, #52]	; 0x34
 8009428:	2801      	cmp	r0, #1
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	bf18      	it	ne
 8009430:	2100      	movne	r1, #0
 8009432:	2a01      	cmp	r2, #1
 8009434:	6461      	str	r1, [r4, #68]	; 0x44
 8009436:	86e5      	strh	r5, [r4, #54]	; 0x36
 8009438:	61a3      	str	r3, [r4, #24]
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	6163      	str	r3, [r4, #20]
 800943e:	60e3      	str	r3, [r4, #12]
 8009440:	6263      	str	r3, [r4, #36]	; 0x24
 8009442:	61e3      	str	r3, [r4, #28]
 8009444:	6223      	str	r3, [r4, #32]
 8009446:	6423      	str	r3, [r4, #64]	; 0x40
 8009448:	d918      	bls.n	800947c <PDM_Filter_Init+0x74>
 800944a:	2003      	movs	r0, #3
 800944c:	2302      	movs	r3, #2
 800944e:	8862      	ldrh	r2, [r4, #2]
 8009450:	2a01      	cmp	r2, #1
 8009452:	d91d      	bls.n	8009490 <PDM_Filter_Init+0x88>
 8009454:	2140      	movs	r1, #64	; 0x40
 8009456:	2300      	movs	r3, #0
 8009458:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800945a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800945e:	6862      	ldr	r2, [r4, #4]
 8009460:	bf04      	itt	eq
 8009462:	6421      	streq	r1, [r4, #64]	; 0x40
 8009464:	460b      	moveq	r3, r1
 8009466:	b11a      	cbz	r2, 8009470 <PDM_Filter_Init+0x68>
 8009468:	f043 0310 	orr.w	r3, r3, #16
 800946c:	6423      	str	r3, [r4, #64]	; 0x40
 800946e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009470:	2200      	movs	r2, #0
 8009472:	8722      	strh	r2, [r4, #56]	; 0x38
 8009474:	b908      	cbnz	r0, 800947a <PDM_Filter_Init+0x72>
 8009476:	3380      	adds	r3, #128	; 0x80
 8009478:	6423      	str	r3, [r4, #64]	; 0x40
 800947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947c:	4d23      	ldr	r5, [pc, #140]	; (800950c <PDM_Filter_Init+0x104>)
 800947e:	d010      	beq.n	80094a2 <PDM_Filter_Init+0x9a>
 8009480:	782a      	ldrb	r2, [r5, #0]
 8009482:	2a01      	cmp	r2, #1
 8009484:	d027      	beq.n	80094d6 <PDM_Filter_Init+0xce>
 8009486:	8862      	ldrh	r2, [r4, #2]
 8009488:	2a01      	cmp	r2, #1
 800948a:	f04f 0001 	mov.w	r0, #1
 800948e:	d8e1      	bhi.n	8009454 <PDM_Filter_Init+0x4c>
 8009490:	d001      	beq.n	8009496 <PDM_Filter_Init+0x8e>
 8009492:	4618      	mov	r0, r3
 8009494:	e7de      	b.n	8009454 <PDM_Filter_Init+0x4c>
 8009496:	2220      	movs	r2, #32
 8009498:	4618      	mov	r0, r3
 800949a:	6422      	str	r2, [r4, #64]	; 0x40
 800949c:	4613      	mov	r3, r2
 800949e:	2160      	movs	r1, #96	; 0x60
 80094a0:	e7da      	b.n	8009458 <PDM_Filter_Init+0x50>
 80094a2:	7829      	ldrb	r1, [r5, #0]
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d1ee      	bne.n	8009486 <PDM_Filter_Init+0x7e>
 80094a8:	4919      	ldr	r1, [pc, #100]	; (8009510 <PDM_Filter_Init+0x108>)
 80094aa:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8009518 <PDM_Filter_Init+0x110>
 80094ae:	4f19      	ldr	r7, [pc, #100]	; (8009514 <PDM_Filter_Init+0x10c>)
 80094b0:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80094b4:	684a      	ldr	r2, [r1, #4]
 80094b6:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80094ba:	ea02 0007 	and.w	r0, r2, r7
 80094be:	4303      	orrs	r3, r0
 80094c0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80094c4:	4413      	add	r3, r2
 80094c6:	f841 3f04 	str.w	r3, [r1, #4]!
 80094ca:	428e      	cmp	r6, r1
 80094cc:	d1f2      	bne.n	80094b4 <PDM_Filter_Init+0xac>
 80094ce:	2001      	movs	r0, #1
 80094d0:	7028      	strb	r0, [r5, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	e7bb      	b.n	800944e <PDM_Filter_Init+0x46>
 80094d6:	490e      	ldr	r1, [pc, #56]	; (8009510 <PDM_Filter_Init+0x108>)
 80094d8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8009518 <PDM_Filter_Init+0x110>
 80094dc:	4f0d      	ldr	r7, [pc, #52]	; (8009514 <PDM_Filter_Init+0x10c>)
 80094de:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80094e2:	684a      	ldr	r2, [r1, #4]
 80094e4:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80094e8:	ea02 0007 	and.w	r0, r2, r7
 80094ec:	4303      	orrs	r3, r0
 80094ee:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80094f2:	4413      	add	r3, r2
 80094f4:	f841 3f04 	str.w	r3, [r1, #4]!
 80094f8:	428e      	cmp	r6, r1
 80094fa:	d1f2      	bne.n	80094e2 <PDM_Filter_Init+0xda>
 80094fc:	2300      	movs	r3, #0
 80094fe:	702b      	strb	r3, [r5, #0]
 8009500:	e7c1      	b.n	8009486 <PDM_Filter_Init+0x7e>
 8009502:	bf00      	nop
 8009504:	b5e8b5cd 	.word	0xb5e8b5cd
 8009508:	f407a5c2 	.word	0xf407a5c2
 800950c:	2000049c 	.word	0x2000049c
 8009510:	1ffffffc 	.word	0x1ffffffc
 8009514:	000ffc00 	.word	0x000ffc00
 8009518:	3ff00000 	.word	0x3ff00000

0800951c <PDM_Filter_setConfig>:
 800951c:	4b66      	ldr	r3, [pc, #408]	; (80096b8 <PDM_Filter_setConfig+0x19c>)
 800951e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009520:	429a      	cmp	r2, r3
 8009522:	d001      	beq.n	8009528 <PDM_Filter_setConfig+0xc>
 8009524:	2004      	movs	r0, #4
 8009526:	4770      	bx	lr
 8009528:	b530      	push	{r4, r5, lr}
 800952a:	880a      	ldrh	r2, [r1, #0]
 800952c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800952e:	ed2d 8b04 	vpush	{d8-d9}
 8009532:	4604      	mov	r4, r0
 8009534:	460d      	mov	r5, r1
 8009536:	1e51      	subs	r1, r2, #1
 8009538:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800953c:	2906      	cmp	r1, #6
 800953e:	b083      	sub	sp, #12
 8009540:	6420      	str	r0, [r4, #64]	; 0x40
 8009542:	d91a      	bls.n	800957a <PDM_Filter_setConfig+0x5e>
 8009544:	2008      	movs	r0, #8
 8009546:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800954a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800954e:	4299      	cmp	r1, r3
 8009550:	d07e      	beq.n	8009650 <PDM_Filter_setConfig+0x134>
 8009552:	f113 0f0c 	cmn.w	r3, #12
 8009556:	da2a      	bge.n	80095ae <PDM_Filter_setConfig+0x92>
 8009558:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800955c:	3040      	adds	r0, #64	; 0x40
 800955e:	80ab      	strh	r3, [r5, #4]
 8009560:	8622      	strh	r2, [r4, #48]	; 0x30
 8009562:	886b      	ldrh	r3, [r5, #2]
 8009564:	8663      	strh	r3, [r4, #50]	; 0x32
 8009566:	b920      	cbnz	r0, 8009572 <PDM_Filter_setConfig+0x56>
 8009568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800956a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800956e:	6423      	str	r3, [r4, #64]	; 0x40
 8009570:	2000      	movs	r0, #0
 8009572:	b003      	add	sp, #12
 8009574:	ecbd 8b04 	vpop	{d8-d9}
 8009578:	bd30      	pop	{r4, r5, pc}
 800957a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800957c:	4291      	cmp	r1, r2
 800957e:	d06c      	beq.n	800965a <PDM_Filter_setConfig+0x13e>
 8009580:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8009584:	f023 0301 	bic.w	r3, r3, #1
 8009588:	4313      	orrs	r3, r2
 800958a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800958e:	6423      	str	r3, [r4, #64]	; 0x40
 8009590:	2970      	cmp	r1, #112	; 0x70
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800959a:	d066      	beq.n	800966a <PDM_Filter_setConfig+0x14e>
 800959c:	2b06      	cmp	r3, #6
 800959e:	f200 8089 	bhi.w	80096b4 <PDM_Filter_setConfig+0x198>
 80095a2:	e8df f003 	tbb	[pc, r3]
 80095a6:	4f52      	.short	0x4f52
 80095a8:	3d43494c 	.word	0x3d43494c
 80095ac:	46          	.byte	0x46
 80095ad:	00          	.byte	0x00
 80095ae:	2b33      	cmp	r3, #51	; 0x33
 80095b0:	dc32      	bgt.n	8009618 <PDM_Filter_setConfig+0xfc>
 80095b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80095b4:	f002 020f 	and.w	r2, r2, #15
 80095b8:	3a01      	subs	r2, #1
 80095ba:	2a06      	cmp	r2, #6
 80095bc:	d872      	bhi.n	80096a4 <PDM_Filter_setConfig+0x188>
 80095be:	493f      	ldr	r1, [pc, #252]	; (80096bc <PDM_Filter_setConfig+0x1a0>)
 80095c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80095c4:	ed92 9a00 	vldr	s18, [r2]
 80095c8:	ed92 8a07 	vldr	s16, [r2, #28]
 80095cc:	9001      	str	r0, [sp, #4]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095d6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80095da:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80095de:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80095e2:	f001 f914 	bl	800a80e <powf>
 80095e6:	eddf 0a36 	vldr	s1, [pc, #216]	; 80096c0 <PDM_Filter_setConfig+0x1a4>
 80095ea:	eef0 8a40 	vmov.f32	s17, s0
 80095ee:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80095f2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80095f6:	f001 f90a 	bl	800a80e <powf>
 80095fa:	ee28 8a28 	vmul.f32	s16, s16, s17
 80095fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009602:	f001 f969 	bl	800a8d8 <roundf>
 8009606:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800960a:	88ab      	ldrh	r3, [r5, #4]
 800960c:	882a      	ldrh	r2, [r5, #0]
 800960e:	9801      	ldr	r0, [sp, #4]
 8009610:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8009614:	8723      	strh	r3, [r4, #56]	; 0x38
 8009616:	e7a3      	b.n	8009560 <PDM_Filter_setConfig+0x44>
 8009618:	2333      	movs	r3, #51	; 0x33
 800961a:	3040      	adds	r0, #64	; 0x40
 800961c:	80ab      	strh	r3, [r5, #4]
 800961e:	e79f      	b.n	8009560 <PDM_Filter_setConfig+0x44>
 8009620:	4b28      	ldr	r3, [pc, #160]	; (80096c4 <PDM_Filter_setConfig+0x1a8>)
 8009622:	64a3      	str	r3, [r4, #72]	; 0x48
 8009624:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009628:	2000      	movs	r0, #0
 800962a:	e792      	b.n	8009552 <PDM_Filter_setConfig+0x36>
 800962c:	4b26      	ldr	r3, [pc, #152]	; (80096c8 <PDM_Filter_setConfig+0x1ac>)
 800962e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009630:	e7f8      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009632:	4b26      	ldr	r3, [pc, #152]	; (80096cc <PDM_Filter_setConfig+0x1b0>)
 8009634:	64a3      	str	r3, [r4, #72]	; 0x48
 8009636:	e7f5      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009638:	4b25      	ldr	r3, [pc, #148]	; (80096d0 <PDM_Filter_setConfig+0x1b4>)
 800963a:	64a3      	str	r3, [r4, #72]	; 0x48
 800963c:	e7f2      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 800963e:	4b25      	ldr	r3, [pc, #148]	; (80096d4 <PDM_Filter_setConfig+0x1b8>)
 8009640:	64a3      	str	r3, [r4, #72]	; 0x48
 8009642:	e7ef      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009644:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <PDM_Filter_setConfig+0x1bc>)
 8009646:	64a3      	str	r3, [r4, #72]	; 0x48
 8009648:	e7ec      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 800964a:	4b24      	ldr	r3, [pc, #144]	; (80096dc <PDM_Filter_setConfig+0x1c0>)
 800964c:	64a3      	str	r3, [r4, #72]	; 0x48
 800964e:	e7e9      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009650:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8009652:	4291      	cmp	r1, r2
 8009654:	f47f af7d 	bne.w	8009552 <PDM_Filter_setConfig+0x36>
 8009658:	e783      	b.n	8009562 <PDM_Filter_setConfig+0x46>
 800965a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800965e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8009662:	4299      	cmp	r1, r3
 8009664:	d023      	beq.n	80096ae <PDM_Filter_setConfig+0x192>
 8009666:	2000      	movs	r0, #0
 8009668:	e773      	b.n	8009552 <PDM_Filter_setConfig+0x36>
 800966a:	2b06      	cmp	r3, #6
 800966c:	d822      	bhi.n	80096b4 <PDM_Filter_setConfig+0x198>
 800966e:	e8df f003 	tbb	[pc, r3]
 8009672:	1316      	.short	0x1316
 8009674:	070a0d10 	.word	0x070a0d10
 8009678:	04          	.byte	0x04
 8009679:	00          	.byte	0x00
 800967a:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <PDM_Filter_setConfig+0x1c4>)
 800967c:	64a3      	str	r3, [r4, #72]	; 0x48
 800967e:	e7d1      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009680:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <PDM_Filter_setConfig+0x1c8>)
 8009682:	64a3      	str	r3, [r4, #72]	; 0x48
 8009684:	e7ce      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009686:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <PDM_Filter_setConfig+0x1cc>)
 8009688:	64a3      	str	r3, [r4, #72]	; 0x48
 800968a:	e7cb      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 800968c:	4b17      	ldr	r3, [pc, #92]	; (80096ec <PDM_Filter_setConfig+0x1d0>)
 800968e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009690:	e7c8      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009692:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <PDM_Filter_setConfig+0x1d4>)
 8009694:	64a3      	str	r3, [r4, #72]	; 0x48
 8009696:	e7c5      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 8009698:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <PDM_Filter_setConfig+0x1d8>)
 800969a:	64a3      	str	r3, [r4, #72]	; 0x48
 800969c:	e7c2      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 800969e:	4b16      	ldr	r3, [pc, #88]	; (80096f8 <PDM_Filter_setConfig+0x1dc>)
 80096a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80096a2:	e7bf      	b.n	8009624 <PDM_Filter_setConfig+0x108>
 80096a4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80096fc <PDM_Filter_setConfig+0x1e0>
 80096a8:	eeb0 9a48 	vmov.f32	s18, s16
 80096ac:	e78e      	b.n	80095cc <PDM_Filter_setConfig+0xb0>
 80096ae:	886b      	ldrh	r3, [r5, #2]
 80096b0:	8663      	strh	r3, [r4, #50]	; 0x32
 80096b2:	e759      	b.n	8009568 <PDM_Filter_setConfig+0x4c>
 80096b4:	2000      	movs	r0, #0
 80096b6:	e746      	b.n	8009546 <PDM_Filter_setConfig+0x2a>
 80096b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80096bc:	0800b200 	.word	0x0800b200
 80096c0:	42000000 	.word	0x42000000
 80096c4:	08007a89 	.word	0x08007a89
 80096c8:	08007969 	.word	0x08007969
 80096cc:	08007c19 	.word	0x08007c19
 80096d0:	0800845d 	.word	0x0800845d
 80096d4:	080081bd 	.word	0x080081bd
 80096d8:	08007f9d 	.word	0x08007f9d
 80096dc:	08007db1 	.word	0x08007db1
 80096e0:	08008a69 	.word	0x08008a69
 80096e4:	08008931 	.word	0x08008931
 80096e8:	0800884d 	.word	0x0800884d
 80096ec:	080090e5 	.word	0x080090e5
 80096f0:	08008ed1 	.word	0x08008ed1
 80096f4:	08008d19 	.word	0x08008d19
 80096f8:	08008bad 	.word	0x08008bad
 80096fc:	00000000 	.word	0x00000000

08009700 <PDM_Filter>:
 8009700:	b410      	push	{r4}
 8009702:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <PDM_Filter+0x34>)
 8009704:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8009706:	429c      	cmp	r4, r3
 8009708:	d003      	beq.n	8009712 <PDM_Filter+0x12>
 800970a:	2004      	movs	r0, #4
 800970c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009714:	05dc      	lsls	r4, r3, #23
 8009716:	d407      	bmi.n	8009728 <PDM_Filter+0x28>
 8009718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800971c:	bf14      	ite	ne
 800971e:	2020      	movne	r0, #32
 8009720:	2030      	moveq	r0, #48	; 0x30
 8009722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800972a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972e:	320c      	adds	r2, #12
 8009730:	4718      	bx	r3
 8009732:	bf00      	nop
 8009734:	b5e8b5cd 	.word	0xb5e8b5cd

08009738 <CRC_Lock>:
 8009738:	4a17      	ldr	r2, [pc, #92]	; (8009798 <CRC_Lock+0x60>)
 800973a:	6813      	ldr	r3, [r2, #0]
 800973c:	b410      	push	{r4}
 800973e:	f023 0301 	bic.w	r3, r3, #1
 8009742:	4c16      	ldr	r4, [pc, #88]	; (800979c <CRC_Lock+0x64>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	b933      	cbnz	r3, 8009758 <CRC_Lock+0x20>
 800974a:	4b15      	ldr	r3, [pc, #84]	; (80097a0 <CRC_Lock+0x68>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009752:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009756:	d00f      	beq.n	8009778 <CRC_Lock+0x40>
 8009758:	4a12      	ldr	r2, [pc, #72]	; (80097a4 <CRC_Lock+0x6c>)
 800975a:	2301      	movs	r3, #1
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1fc      	bne.n	800975e <CRC_Lock+0x26>
 8009764:	4b10      	ldr	r3, [pc, #64]	; (80097a8 <CRC_Lock+0x70>)
 8009766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976a:	6018      	str	r0, [r3, #0]
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	1a08      	subs	r0, r1, r0
 8009770:	fab0 f080 	clz	r0, r0
 8009774:	0940      	lsrs	r0, r0, #5
 8009776:	4770      	bx	lr
 8009778:	4a0c      	ldr	r2, [pc, #48]	; (80097ac <CRC_Lock+0x74>)
 800977a:	2301      	movs	r3, #1
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	6813      	ldr	r3, [r2, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1fc      	bne.n	800977e <CRC_Lock+0x46>
 8009784:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <CRC_Lock+0x78>)
 8009786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978a:	6018      	str	r0, [r3, #0]
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	1a40      	subs	r0, r0, r1
 8009790:	fab0 f080 	clz	r0, r0
 8009794:	0940      	lsrs	r0, r0, #5
 8009796:	4770      	bx	lr
 8009798:	e0002000 	.word	0xe0002000
 800979c:	e0042000 	.word	0xe0042000
 80097a0:	5c001000 	.word	0x5c001000
 80097a4:	40023008 	.word	0x40023008
 80097a8:	40023000 	.word	0x40023000
 80097ac:	58024c08 	.word	0x58024c08
 80097b0:	58024c00 	.word	0x58024c00

080097b4 <std>:
 80097b4:	2300      	movs	r3, #0
 80097b6:	b510      	push	{r4, lr}
 80097b8:	4604      	mov	r4, r0
 80097ba:	e9c0 3300 	strd	r3, r3, [r0]
 80097be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097c2:	6083      	str	r3, [r0, #8]
 80097c4:	8181      	strh	r1, [r0, #12]
 80097c6:	6643      	str	r3, [r0, #100]	; 0x64
 80097c8:	81c2      	strh	r2, [r0, #14]
 80097ca:	6183      	str	r3, [r0, #24]
 80097cc:	4619      	mov	r1, r3
 80097ce:	2208      	movs	r2, #8
 80097d0:	305c      	adds	r0, #92	; 0x5c
 80097d2:	f000 fa1f 	bl	8009c14 <memset>
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <std+0x58>)
 80097d8:	6263      	str	r3, [r4, #36]	; 0x24
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <std+0x5c>)
 80097dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <std+0x60>)
 80097e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097e2:	4b0d      	ldr	r3, [pc, #52]	; (8009818 <std+0x64>)
 80097e4:	6323      	str	r3, [r4, #48]	; 0x30
 80097e6:	4b0d      	ldr	r3, [pc, #52]	; (800981c <std+0x68>)
 80097e8:	6224      	str	r4, [r4, #32]
 80097ea:	429c      	cmp	r4, r3
 80097ec:	d006      	beq.n	80097fc <std+0x48>
 80097ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097f2:	4294      	cmp	r4, r2
 80097f4:	d002      	beq.n	80097fc <std+0x48>
 80097f6:	33d0      	adds	r3, #208	; 0xd0
 80097f8:	429c      	cmp	r4, r3
 80097fa:	d105      	bne.n	8009808 <std+0x54>
 80097fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009804:	f000 ba7e 	b.w	8009d04 <__retarget_lock_init_recursive>
 8009808:	bd10      	pop	{r4, pc}
 800980a:	bf00      	nop
 800980c:	080099f1 	.word	0x080099f1
 8009810:	08009a13 	.word	0x08009a13
 8009814:	08009a4b 	.word	0x08009a4b
 8009818:	08009a6f 	.word	0x08009a6f
 800981c:	20000994 	.word	0x20000994

08009820 <stdio_exit_handler>:
 8009820:	4a02      	ldr	r2, [pc, #8]	; (800982c <stdio_exit_handler+0xc>)
 8009822:	4903      	ldr	r1, [pc, #12]	; (8009830 <stdio_exit_handler+0x10>)
 8009824:	4803      	ldr	r0, [pc, #12]	; (8009834 <stdio_exit_handler+0x14>)
 8009826:	f000 b869 	b.w	80098fc <_fwalk_sglue>
 800982a:	bf00      	nop
 800982c:	20000424 	.word	0x20000424
 8009830:	0800a5d9 	.word	0x0800a5d9
 8009834:	20000430 	.word	0x20000430

08009838 <cleanup_stdio>:
 8009838:	6841      	ldr	r1, [r0, #4]
 800983a:	4b0c      	ldr	r3, [pc, #48]	; (800986c <cleanup_stdio+0x34>)
 800983c:	4299      	cmp	r1, r3
 800983e:	b510      	push	{r4, lr}
 8009840:	4604      	mov	r4, r0
 8009842:	d001      	beq.n	8009848 <cleanup_stdio+0x10>
 8009844:	f000 fec8 	bl	800a5d8 <_fflush_r>
 8009848:	68a1      	ldr	r1, [r4, #8]
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <cleanup_stdio+0x38>)
 800984c:	4299      	cmp	r1, r3
 800984e:	d002      	beq.n	8009856 <cleanup_stdio+0x1e>
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fec1 	bl	800a5d8 <_fflush_r>
 8009856:	68e1      	ldr	r1, [r4, #12]
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <cleanup_stdio+0x3c>)
 800985a:	4299      	cmp	r1, r3
 800985c:	d004      	beq.n	8009868 <cleanup_stdio+0x30>
 800985e:	4620      	mov	r0, r4
 8009860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009864:	f000 beb8 	b.w	800a5d8 <_fflush_r>
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	20000994 	.word	0x20000994
 8009870:	200009fc 	.word	0x200009fc
 8009874:	20000a64 	.word	0x20000a64

08009878 <global_stdio_init.part.0>:
 8009878:	b510      	push	{r4, lr}
 800987a:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <global_stdio_init.part.0+0x30>)
 800987c:	4c0b      	ldr	r4, [pc, #44]	; (80098ac <global_stdio_init.part.0+0x34>)
 800987e:	4a0c      	ldr	r2, [pc, #48]	; (80098b0 <global_stdio_init.part.0+0x38>)
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	4620      	mov	r0, r4
 8009884:	2200      	movs	r2, #0
 8009886:	2104      	movs	r1, #4
 8009888:	f7ff ff94 	bl	80097b4 <std>
 800988c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009890:	2201      	movs	r2, #1
 8009892:	2109      	movs	r1, #9
 8009894:	f7ff ff8e 	bl	80097b4 <std>
 8009898:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800989c:	2202      	movs	r2, #2
 800989e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a2:	2112      	movs	r1, #18
 80098a4:	f7ff bf86 	b.w	80097b4 <std>
 80098a8:	20000acc 	.word	0x20000acc
 80098ac:	20000994 	.word	0x20000994
 80098b0:	08009821 	.word	0x08009821

080098b4 <__sfp_lock_acquire>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__sfp_lock_acquire+0x8>)
 80098b6:	f000 ba26 	b.w	8009d06 <__retarget_lock_acquire_recursive>
 80098ba:	bf00      	nop
 80098bc:	20000ad5 	.word	0x20000ad5

080098c0 <__sfp_lock_release>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__sfp_lock_release+0x8>)
 80098c2:	f000 ba21 	b.w	8009d08 <__retarget_lock_release_recursive>
 80098c6:	bf00      	nop
 80098c8:	20000ad5 	.word	0x20000ad5

080098cc <__sinit>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	4604      	mov	r4, r0
 80098d0:	f7ff fff0 	bl	80098b4 <__sfp_lock_acquire>
 80098d4:	6a23      	ldr	r3, [r4, #32]
 80098d6:	b11b      	cbz	r3, 80098e0 <__sinit+0x14>
 80098d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098dc:	f7ff bff0 	b.w	80098c0 <__sfp_lock_release>
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <__sinit+0x28>)
 80098e2:	6223      	str	r3, [r4, #32]
 80098e4:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <__sinit+0x2c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f5      	bne.n	80098d8 <__sinit+0xc>
 80098ec:	f7ff ffc4 	bl	8009878 <global_stdio_init.part.0>
 80098f0:	e7f2      	b.n	80098d8 <__sinit+0xc>
 80098f2:	bf00      	nop
 80098f4:	08009839 	.word	0x08009839
 80098f8:	20000acc 	.word	0x20000acc

080098fc <_fwalk_sglue>:
 80098fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009900:	4607      	mov	r7, r0
 8009902:	4688      	mov	r8, r1
 8009904:	4614      	mov	r4, r2
 8009906:	2600      	movs	r6, #0
 8009908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800990c:	f1b9 0901 	subs.w	r9, r9, #1
 8009910:	d505      	bpl.n	800991e <_fwalk_sglue+0x22>
 8009912:	6824      	ldr	r4, [r4, #0]
 8009914:	2c00      	cmp	r4, #0
 8009916:	d1f7      	bne.n	8009908 <_fwalk_sglue+0xc>
 8009918:	4630      	mov	r0, r6
 800991a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991e:	89ab      	ldrh	r3, [r5, #12]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d907      	bls.n	8009934 <_fwalk_sglue+0x38>
 8009924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009928:	3301      	adds	r3, #1
 800992a:	d003      	beq.n	8009934 <_fwalk_sglue+0x38>
 800992c:	4629      	mov	r1, r5
 800992e:	4638      	mov	r0, r7
 8009930:	47c0      	blx	r8
 8009932:	4306      	orrs	r6, r0
 8009934:	3568      	adds	r5, #104	; 0x68
 8009936:	e7e9      	b.n	800990c <_fwalk_sglue+0x10>

08009938 <_puts_r>:
 8009938:	6a03      	ldr	r3, [r0, #32]
 800993a:	b570      	push	{r4, r5, r6, lr}
 800993c:	6884      	ldr	r4, [r0, #8]
 800993e:	4605      	mov	r5, r0
 8009940:	460e      	mov	r6, r1
 8009942:	b90b      	cbnz	r3, 8009948 <_puts_r+0x10>
 8009944:	f7ff ffc2 	bl	80098cc <__sinit>
 8009948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800994a:	07db      	lsls	r3, r3, #31
 800994c:	d405      	bmi.n	800995a <_puts_r+0x22>
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	0598      	lsls	r0, r3, #22
 8009952:	d402      	bmi.n	800995a <_puts_r+0x22>
 8009954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009956:	f000 f9d6 	bl	8009d06 <__retarget_lock_acquire_recursive>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	0719      	lsls	r1, r3, #28
 800995e:	d513      	bpl.n	8009988 <_puts_r+0x50>
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	b18b      	cbz	r3, 8009988 <_puts_r+0x50>
 8009964:	3e01      	subs	r6, #1
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800996c:	3b01      	subs	r3, #1
 800996e:	60a3      	str	r3, [r4, #8]
 8009970:	b9e9      	cbnz	r1, 80099ae <_puts_r+0x76>
 8009972:	2b00      	cmp	r3, #0
 8009974:	da2e      	bge.n	80099d4 <_puts_r+0x9c>
 8009976:	4622      	mov	r2, r4
 8009978:	210a      	movs	r1, #10
 800997a:	4628      	mov	r0, r5
 800997c:	f000 f8b4 	bl	8009ae8 <__swbuf_r>
 8009980:	3001      	adds	r0, #1
 8009982:	d007      	beq.n	8009994 <_puts_r+0x5c>
 8009984:	250a      	movs	r5, #10
 8009986:	e007      	b.n	8009998 <_puts_r+0x60>
 8009988:	4621      	mov	r1, r4
 800998a:	4628      	mov	r0, r5
 800998c:	f000 f8ea 	bl	8009b64 <__swsetup_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	d0e7      	beq.n	8009964 <_puts_r+0x2c>
 8009994:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800999a:	07da      	lsls	r2, r3, #31
 800999c:	d405      	bmi.n	80099aa <_puts_r+0x72>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	059b      	lsls	r3, r3, #22
 80099a2:	d402      	bmi.n	80099aa <_puts_r+0x72>
 80099a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099a6:	f000 f9af 	bl	8009d08 <__retarget_lock_release_recursive>
 80099aa:	4628      	mov	r0, r5
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da04      	bge.n	80099bc <_puts_r+0x84>
 80099b2:	69a2      	ldr	r2, [r4, #24]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	dc06      	bgt.n	80099c6 <_puts_r+0x8e>
 80099b8:	290a      	cmp	r1, #10
 80099ba:	d004      	beq.n	80099c6 <_puts_r+0x8e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	7019      	strb	r1, [r3, #0]
 80099c4:	e7cf      	b.n	8009966 <_puts_r+0x2e>
 80099c6:	4622      	mov	r2, r4
 80099c8:	4628      	mov	r0, r5
 80099ca:	f000 f88d 	bl	8009ae8 <__swbuf_r>
 80099ce:	3001      	adds	r0, #1
 80099d0:	d1c9      	bne.n	8009966 <_puts_r+0x2e>
 80099d2:	e7df      	b.n	8009994 <_puts_r+0x5c>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	250a      	movs	r5, #10
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	6022      	str	r2, [r4, #0]
 80099dc:	701d      	strb	r5, [r3, #0]
 80099de:	e7db      	b.n	8009998 <_puts_r+0x60>

080099e0 <puts>:
 80099e0:	4b02      	ldr	r3, [pc, #8]	; (80099ec <puts+0xc>)
 80099e2:	4601      	mov	r1, r0
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	f7ff bfa7 	b.w	8009938 <_puts_r>
 80099ea:	bf00      	nop
 80099ec:	2000047c 	.word	0x2000047c

080099f0 <__sread>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	460c      	mov	r4, r1
 80099f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f8:	f000 f936 	bl	8009c68 <_read_r>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	bfab      	itete	ge
 8009a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a02:	89a3      	ldrhlt	r3, [r4, #12]
 8009a04:	181b      	addge	r3, r3, r0
 8009a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a0a:	bfac      	ite	ge
 8009a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a0e:	81a3      	strhlt	r3, [r4, #12]
 8009a10:	bd10      	pop	{r4, pc}

08009a12 <__swrite>:
 8009a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a16:	461f      	mov	r7, r3
 8009a18:	898b      	ldrh	r3, [r1, #12]
 8009a1a:	05db      	lsls	r3, r3, #23
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	4616      	mov	r6, r2
 8009a22:	d505      	bpl.n	8009a30 <__swrite+0x1e>
 8009a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a28:	2302      	movs	r3, #2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f000 f90a 	bl	8009c44 <_lseek_r>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	463b      	mov	r3, r7
 8009a40:	4628      	mov	r0, r5
 8009a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	f000 b921 	b.w	8009c8c <_write_r>

08009a4a <__sseek>:
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a52:	f000 f8f7 	bl	8009c44 <_lseek_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	bf15      	itete	ne
 8009a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a66:	81a3      	strheq	r3, [r4, #12]
 8009a68:	bf18      	it	ne
 8009a6a:	81a3      	strhne	r3, [r4, #12]
 8009a6c:	bd10      	pop	{r4, pc}

08009a6e <__sclose>:
 8009a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a72:	f000 b8d7 	b.w	8009c24 <_close_r>

08009a76 <_vsniprintf_r>:
 8009a76:	b530      	push	{r4, r5, lr}
 8009a78:	4614      	mov	r4, r2
 8009a7a:	2c00      	cmp	r4, #0
 8009a7c:	b09b      	sub	sp, #108	; 0x6c
 8009a7e:	4605      	mov	r5, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	da05      	bge.n	8009a90 <_vsniprintf_r+0x1a>
 8009a84:	238b      	movs	r3, #139	; 0x8b
 8009a86:	6003      	str	r3, [r0, #0]
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8c:	b01b      	add	sp, #108	; 0x6c
 8009a8e:	bd30      	pop	{r4, r5, pc}
 8009a90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009a94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a98:	bf14      	ite	ne
 8009a9a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009a9e:	4623      	moveq	r3, r4
 8009aa0:	9302      	str	r3, [sp, #8]
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aa8:	9100      	str	r1, [sp, #0]
 8009aaa:	9104      	str	r1, [sp, #16]
 8009aac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ab0:	4669      	mov	r1, sp
 8009ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ab4:	f000 fa7c 	bl	8009fb0 <_svfiprintf_r>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	bfbc      	itt	lt
 8009abc:	238b      	movlt	r3, #139	; 0x8b
 8009abe:	602b      	strlt	r3, [r5, #0]
 8009ac0:	2c00      	cmp	r4, #0
 8009ac2:	d0e3      	beq.n	8009a8c <_vsniprintf_r+0x16>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	e7df      	b.n	8009a8c <_vsniprintf_r+0x16>

08009acc <vsniprintf>:
 8009acc:	b507      	push	{r0, r1, r2, lr}
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	460a      	mov	r2, r1
 8009ad4:	4601      	mov	r1, r0
 8009ad6:	4803      	ldr	r0, [pc, #12]	; (8009ae4 <vsniprintf+0x18>)
 8009ad8:	6800      	ldr	r0, [r0, #0]
 8009ada:	f7ff ffcc 	bl	8009a76 <_vsniprintf_r>
 8009ade:	b003      	add	sp, #12
 8009ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ae4:	2000047c 	.word	0x2000047c

08009ae8 <__swbuf_r>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	460e      	mov	r6, r1
 8009aec:	4614      	mov	r4, r2
 8009aee:	4605      	mov	r5, r0
 8009af0:	b118      	cbz	r0, 8009afa <__swbuf_r+0x12>
 8009af2:	6a03      	ldr	r3, [r0, #32]
 8009af4:	b90b      	cbnz	r3, 8009afa <__swbuf_r+0x12>
 8009af6:	f7ff fee9 	bl	80098cc <__sinit>
 8009afa:	69a3      	ldr	r3, [r4, #24]
 8009afc:	60a3      	str	r3, [r4, #8]
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	071a      	lsls	r2, r3, #28
 8009b02:	d525      	bpl.n	8009b50 <__swbuf_r+0x68>
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	b31b      	cbz	r3, 8009b50 <__swbuf_r+0x68>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	6922      	ldr	r2, [r4, #16]
 8009b0c:	1a98      	subs	r0, r3, r2
 8009b0e:	6963      	ldr	r3, [r4, #20]
 8009b10:	b2f6      	uxtb	r6, r6
 8009b12:	4283      	cmp	r3, r0
 8009b14:	4637      	mov	r7, r6
 8009b16:	dc04      	bgt.n	8009b22 <__swbuf_r+0x3a>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 fd5c 	bl	800a5d8 <_fflush_r>
 8009b20:	b9e0      	cbnz	r0, 8009b5c <__swbuf_r+0x74>
 8009b22:	68a3      	ldr	r3, [r4, #8]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	60a3      	str	r3, [r4, #8]
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	701e      	strb	r6, [r3, #0]
 8009b30:	6962      	ldr	r2, [r4, #20]
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d004      	beq.n	8009b42 <__swbuf_r+0x5a>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	07db      	lsls	r3, r3, #31
 8009b3c:	d506      	bpl.n	8009b4c <__swbuf_r+0x64>
 8009b3e:	2e0a      	cmp	r6, #10
 8009b40:	d104      	bne.n	8009b4c <__swbuf_r+0x64>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 fd47 	bl	800a5d8 <_fflush_r>
 8009b4a:	b938      	cbnz	r0, 8009b5c <__swbuf_r+0x74>
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f806 	bl	8009b64 <__swsetup_r>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0d5      	beq.n	8009b08 <__swbuf_r+0x20>
 8009b5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b60:	e7f4      	b.n	8009b4c <__swbuf_r+0x64>
	...

08009b64 <__swsetup_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <__swsetup_r+0xac>)
 8009b68:	4605      	mov	r5, r0
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b118      	cbz	r0, 8009b78 <__swsetup_r+0x14>
 8009b70:	6a03      	ldr	r3, [r0, #32]
 8009b72:	b90b      	cbnz	r3, 8009b78 <__swsetup_r+0x14>
 8009b74:	f7ff feaa 	bl	80098cc <__sinit>
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b7e:	0718      	lsls	r0, r3, #28
 8009b80:	d422      	bmi.n	8009bc8 <__swsetup_r+0x64>
 8009b82:	06d9      	lsls	r1, r3, #27
 8009b84:	d407      	bmi.n	8009b96 <__swsetup_r+0x32>
 8009b86:	2309      	movs	r3, #9
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b8e:	81a3      	strh	r3, [r4, #12]
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b94:	e034      	b.n	8009c00 <__swsetup_r+0x9c>
 8009b96:	0758      	lsls	r0, r3, #29
 8009b98:	d512      	bpl.n	8009bc0 <__swsetup_r+0x5c>
 8009b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b9c:	b141      	cbz	r1, 8009bb0 <__swsetup_r+0x4c>
 8009b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	d002      	beq.n	8009bac <__swsetup_r+0x48>
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f000 f8b0 	bl	8009d0c <_free_r>
 8009bac:	2300      	movs	r3, #0
 8009bae:	6363      	str	r3, [r4, #52]	; 0x34
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	6063      	str	r3, [r4, #4]
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f043 0308 	orr.w	r3, r3, #8
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	b94b      	cbnz	r3, 8009be0 <__swsetup_r+0x7c>
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd6:	d003      	beq.n	8009be0 <__swsetup_r+0x7c>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 fd4a 	bl	800a674 <__smakebuf_r>
 8009be0:	89a0      	ldrh	r0, [r4, #12]
 8009be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009be6:	f010 0301 	ands.w	r3, r0, #1
 8009bea:	d00a      	beq.n	8009c02 <__swsetup_r+0x9e>
 8009bec:	2300      	movs	r3, #0
 8009bee:	60a3      	str	r3, [r4, #8]
 8009bf0:	6963      	ldr	r3, [r4, #20]
 8009bf2:	425b      	negs	r3, r3
 8009bf4:	61a3      	str	r3, [r4, #24]
 8009bf6:	6923      	ldr	r3, [r4, #16]
 8009bf8:	b943      	cbnz	r3, 8009c0c <__swsetup_r+0xa8>
 8009bfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bfe:	d1c4      	bne.n	8009b8a <__swsetup_r+0x26>
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	0781      	lsls	r1, r0, #30
 8009c04:	bf58      	it	pl
 8009c06:	6963      	ldrpl	r3, [r4, #20]
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	e7f4      	b.n	8009bf6 <__swsetup_r+0x92>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e7f7      	b.n	8009c00 <__swsetup_r+0x9c>
 8009c10:	2000047c 	.word	0x2000047c

08009c14 <memset>:
 8009c14:	4402      	add	r2, r0
 8009c16:	4603      	mov	r3, r0
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d100      	bne.n	8009c1e <memset+0xa>
 8009c1c:	4770      	bx	lr
 8009c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c22:	e7f9      	b.n	8009c18 <memset+0x4>

08009c24 <_close_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d06      	ldr	r5, [pc, #24]	; (8009c40 <_close_r+0x1c>)
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	f7f7 fa1d 	bl	800106e <_close>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_close_r+0x1a>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_close_r+0x1a>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20000ad0 	.word	0x20000ad0

08009c44 <_lseek_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_lseek_r+0x20>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f7f7 fa32 	bl	80010bc <_lseek>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_lseek_r+0x1e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_lseek_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000ad0 	.word	0x20000ad0

08009c68 <_read_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	; (8009c88 <_read_r+0x20>)
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7f7 f9dc 	bl	8001034 <_read>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_read_r+0x1e>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_read_r+0x1e>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20000ad0 	.word	0x20000ad0

08009c8c <_write_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	; (8009cac <_write_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f6 ffa6 	bl	8000bec <_write>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_write_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_write_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	20000ad0 	.word	0x20000ad0

08009cb0 <__errno>:
 8009cb0:	4b01      	ldr	r3, [pc, #4]	; (8009cb8 <__errno+0x8>)
 8009cb2:	6818      	ldr	r0, [r3, #0]
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	2000047c 	.word	0x2000047c

08009cbc <__libc_init_array>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4d0d      	ldr	r5, [pc, #52]	; (8009cf4 <__libc_init_array+0x38>)
 8009cc0:	4c0d      	ldr	r4, [pc, #52]	; (8009cf8 <__libc_init_array+0x3c>)
 8009cc2:	1b64      	subs	r4, r4, r5
 8009cc4:	10a4      	asrs	r4, r4, #2
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	42a6      	cmp	r6, r4
 8009cca:	d109      	bne.n	8009ce0 <__libc_init_array+0x24>
 8009ccc:	4d0b      	ldr	r5, [pc, #44]	; (8009cfc <__libc_init_array+0x40>)
 8009cce:	4c0c      	ldr	r4, [pc, #48]	; (8009d00 <__libc_init_array+0x44>)
 8009cd0:	f001 f984 	bl	800afdc <_init>
 8009cd4:	1b64      	subs	r4, r4, r5
 8009cd6:	10a4      	asrs	r4, r4, #2
 8009cd8:	2600      	movs	r6, #0
 8009cda:	42a6      	cmp	r6, r4
 8009cdc:	d105      	bne.n	8009cea <__libc_init_array+0x2e>
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce4:	4798      	blx	r3
 8009ce6:	3601      	adds	r6, #1
 8009ce8:	e7ee      	b.n	8009cc8 <__libc_init_array+0xc>
 8009cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cee:	4798      	blx	r3
 8009cf0:	3601      	adds	r6, #1
 8009cf2:	e7f2      	b.n	8009cda <__libc_init_array+0x1e>
 8009cf4:	0800b32c 	.word	0x0800b32c
 8009cf8:	0800b32c 	.word	0x0800b32c
 8009cfc:	0800b32c 	.word	0x0800b32c
 8009d00:	0800b330 	.word	0x0800b330

08009d04 <__retarget_lock_init_recursive>:
 8009d04:	4770      	bx	lr

08009d06 <__retarget_lock_acquire_recursive>:
 8009d06:	4770      	bx	lr

08009d08 <__retarget_lock_release_recursive>:
 8009d08:	4770      	bx	lr
	...

08009d0c <_free_r>:
 8009d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	d044      	beq.n	8009d9c <_free_r+0x90>
 8009d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d16:	9001      	str	r0, [sp, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d1e:	bfb8      	it	lt
 8009d20:	18e4      	addlt	r4, r4, r3
 8009d22:	f000 f8df 	bl	8009ee4 <__malloc_lock>
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <_free_r+0x94>)
 8009d28:	9801      	ldr	r0, [sp, #4]
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	b933      	cbnz	r3, 8009d3c <_free_r+0x30>
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	6014      	str	r4, [r2, #0]
 8009d32:	b003      	add	sp, #12
 8009d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d38:	f000 b8da 	b.w	8009ef0 <__malloc_unlock>
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	d908      	bls.n	8009d52 <_free_r+0x46>
 8009d40:	6825      	ldr	r5, [r4, #0]
 8009d42:	1961      	adds	r1, r4, r5
 8009d44:	428b      	cmp	r3, r1
 8009d46:	bf01      	itttt	eq
 8009d48:	6819      	ldreq	r1, [r3, #0]
 8009d4a:	685b      	ldreq	r3, [r3, #4]
 8009d4c:	1949      	addeq	r1, r1, r5
 8009d4e:	6021      	streq	r1, [r4, #0]
 8009d50:	e7ed      	b.n	8009d2e <_free_r+0x22>
 8009d52:	461a      	mov	r2, r3
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	b10b      	cbz	r3, 8009d5c <_free_r+0x50>
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d9fa      	bls.n	8009d52 <_free_r+0x46>
 8009d5c:	6811      	ldr	r1, [r2, #0]
 8009d5e:	1855      	adds	r5, r2, r1
 8009d60:	42a5      	cmp	r5, r4
 8009d62:	d10b      	bne.n	8009d7c <_free_r+0x70>
 8009d64:	6824      	ldr	r4, [r4, #0]
 8009d66:	4421      	add	r1, r4
 8009d68:	1854      	adds	r4, r2, r1
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	6011      	str	r1, [r2, #0]
 8009d6e:	d1e0      	bne.n	8009d32 <_free_r+0x26>
 8009d70:	681c      	ldr	r4, [r3, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	6053      	str	r3, [r2, #4]
 8009d76:	440c      	add	r4, r1
 8009d78:	6014      	str	r4, [r2, #0]
 8009d7a:	e7da      	b.n	8009d32 <_free_r+0x26>
 8009d7c:	d902      	bls.n	8009d84 <_free_r+0x78>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	e7d6      	b.n	8009d32 <_free_r+0x26>
 8009d84:	6825      	ldr	r5, [r4, #0]
 8009d86:	1961      	adds	r1, r4, r5
 8009d88:	428b      	cmp	r3, r1
 8009d8a:	bf04      	itt	eq
 8009d8c:	6819      	ldreq	r1, [r3, #0]
 8009d8e:	685b      	ldreq	r3, [r3, #4]
 8009d90:	6063      	str	r3, [r4, #4]
 8009d92:	bf04      	itt	eq
 8009d94:	1949      	addeq	r1, r1, r5
 8009d96:	6021      	streq	r1, [r4, #0]
 8009d98:	6054      	str	r4, [r2, #4]
 8009d9a:	e7ca      	b.n	8009d32 <_free_r+0x26>
 8009d9c:	b003      	add	sp, #12
 8009d9e:	bd30      	pop	{r4, r5, pc}
 8009da0:	20000ad8 	.word	0x20000ad8

08009da4 <sbrk_aligned>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	4e0e      	ldr	r6, [pc, #56]	; (8009de0 <sbrk_aligned+0x3c>)
 8009da8:	460c      	mov	r4, r1
 8009daa:	6831      	ldr	r1, [r6, #0]
 8009dac:	4605      	mov	r5, r0
 8009dae:	b911      	cbnz	r1, 8009db6 <sbrk_aligned+0x12>
 8009db0:	f000 fcd8 	bl	800a764 <_sbrk_r>
 8009db4:	6030      	str	r0, [r6, #0]
 8009db6:	4621      	mov	r1, r4
 8009db8:	4628      	mov	r0, r5
 8009dba:	f000 fcd3 	bl	800a764 <_sbrk_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	d00a      	beq.n	8009dd8 <sbrk_aligned+0x34>
 8009dc2:	1cc4      	adds	r4, r0, #3
 8009dc4:	f024 0403 	bic.w	r4, r4, #3
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d007      	beq.n	8009ddc <sbrk_aligned+0x38>
 8009dcc:	1a21      	subs	r1, r4, r0
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 fcc8 	bl	800a764 <_sbrk_r>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d101      	bne.n	8009ddc <sbrk_aligned+0x38>
 8009dd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ddc:	4620      	mov	r0, r4
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	20000adc 	.word	0x20000adc

08009de4 <_malloc_r>:
 8009de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de8:	1ccd      	adds	r5, r1, #3
 8009dea:	f025 0503 	bic.w	r5, r5, #3
 8009dee:	3508      	adds	r5, #8
 8009df0:	2d0c      	cmp	r5, #12
 8009df2:	bf38      	it	cc
 8009df4:	250c      	movcc	r5, #12
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	4607      	mov	r7, r0
 8009dfa:	db01      	blt.n	8009e00 <_malloc_r+0x1c>
 8009dfc:	42a9      	cmp	r1, r5
 8009dfe:	d905      	bls.n	8009e0c <_malloc_r+0x28>
 8009e00:	230c      	movs	r3, #12
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	2600      	movs	r6, #0
 8009e06:	4630      	mov	r0, r6
 8009e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ee0 <_malloc_r+0xfc>
 8009e10:	f000 f868 	bl	8009ee4 <__malloc_lock>
 8009e14:	f8d8 3000 	ldr.w	r3, [r8]
 8009e18:	461c      	mov	r4, r3
 8009e1a:	bb5c      	cbnz	r4, 8009e74 <_malloc_r+0x90>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f7ff ffc0 	bl	8009da4 <sbrk_aligned>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	4604      	mov	r4, r0
 8009e28:	d155      	bne.n	8009ed6 <_malloc_r+0xf2>
 8009e2a:	f8d8 4000 	ldr.w	r4, [r8]
 8009e2e:	4626      	mov	r6, r4
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d145      	bne.n	8009ec0 <_malloc_r+0xdc>
 8009e34:	2c00      	cmp	r4, #0
 8009e36:	d048      	beq.n	8009eca <_malloc_r+0xe6>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	eb04 0903 	add.w	r9, r4, r3
 8009e42:	f000 fc8f 	bl	800a764 <_sbrk_r>
 8009e46:	4581      	cmp	r9, r0
 8009e48:	d13f      	bne.n	8009eca <_malloc_r+0xe6>
 8009e4a:	6821      	ldr	r1, [r4, #0]
 8009e4c:	1a6d      	subs	r5, r5, r1
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4638      	mov	r0, r7
 8009e52:	f7ff ffa7 	bl	8009da4 <sbrk_aligned>
 8009e56:	3001      	adds	r0, #1
 8009e58:	d037      	beq.n	8009eca <_malloc_r+0xe6>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	442b      	add	r3, r5
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	f8d8 3000 	ldr.w	r3, [r8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d038      	beq.n	8009eda <_malloc_r+0xf6>
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	42a2      	cmp	r2, r4
 8009e6c:	d12b      	bne.n	8009ec6 <_malloc_r+0xe2>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	605a      	str	r2, [r3, #4]
 8009e72:	e00f      	b.n	8009e94 <_malloc_r+0xb0>
 8009e74:	6822      	ldr	r2, [r4, #0]
 8009e76:	1b52      	subs	r2, r2, r5
 8009e78:	d41f      	bmi.n	8009eba <_malloc_r+0xd6>
 8009e7a:	2a0b      	cmp	r2, #11
 8009e7c:	d917      	bls.n	8009eae <_malloc_r+0xca>
 8009e7e:	1961      	adds	r1, r4, r5
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	6025      	str	r5, [r4, #0]
 8009e84:	bf18      	it	ne
 8009e86:	6059      	strne	r1, [r3, #4]
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	bf08      	it	eq
 8009e8c:	f8c8 1000 	streq.w	r1, [r8]
 8009e90:	5162      	str	r2, [r4, r5]
 8009e92:	604b      	str	r3, [r1, #4]
 8009e94:	4638      	mov	r0, r7
 8009e96:	f104 060b 	add.w	r6, r4, #11
 8009e9a:	f000 f829 	bl	8009ef0 <__malloc_unlock>
 8009e9e:	f026 0607 	bic.w	r6, r6, #7
 8009ea2:	1d23      	adds	r3, r4, #4
 8009ea4:	1af2      	subs	r2, r6, r3
 8009ea6:	d0ae      	beq.n	8009e06 <_malloc_r+0x22>
 8009ea8:	1b9b      	subs	r3, r3, r6
 8009eaa:	50a3      	str	r3, [r4, r2]
 8009eac:	e7ab      	b.n	8009e06 <_malloc_r+0x22>
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	6862      	ldr	r2, [r4, #4]
 8009eb2:	d1dd      	bne.n	8009e70 <_malloc_r+0x8c>
 8009eb4:	f8c8 2000 	str.w	r2, [r8]
 8009eb8:	e7ec      	b.n	8009e94 <_malloc_r+0xb0>
 8009eba:	4623      	mov	r3, r4
 8009ebc:	6864      	ldr	r4, [r4, #4]
 8009ebe:	e7ac      	b.n	8009e1a <_malloc_r+0x36>
 8009ec0:	4634      	mov	r4, r6
 8009ec2:	6876      	ldr	r6, [r6, #4]
 8009ec4:	e7b4      	b.n	8009e30 <_malloc_r+0x4c>
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	e7cc      	b.n	8009e64 <_malloc_r+0x80>
 8009eca:	230c      	movs	r3, #12
 8009ecc:	603b      	str	r3, [r7, #0]
 8009ece:	4638      	mov	r0, r7
 8009ed0:	f000 f80e 	bl	8009ef0 <__malloc_unlock>
 8009ed4:	e797      	b.n	8009e06 <_malloc_r+0x22>
 8009ed6:	6025      	str	r5, [r4, #0]
 8009ed8:	e7dc      	b.n	8009e94 <_malloc_r+0xb0>
 8009eda:	605b      	str	r3, [r3, #4]
 8009edc:	deff      	udf	#255	; 0xff
 8009ede:	bf00      	nop
 8009ee0:	20000ad8 	.word	0x20000ad8

08009ee4 <__malloc_lock>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__malloc_lock+0x8>)
 8009ee6:	f7ff bf0e 	b.w	8009d06 <__retarget_lock_acquire_recursive>
 8009eea:	bf00      	nop
 8009eec:	20000ad4 	.word	0x20000ad4

08009ef0 <__malloc_unlock>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__malloc_unlock+0x8>)
 8009ef2:	f7ff bf09 	b.w	8009d08 <__retarget_lock_release_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20000ad4 	.word	0x20000ad4

08009efc <__ssputs_r>:
 8009efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f00:	688e      	ldr	r6, [r1, #8]
 8009f02:	461f      	mov	r7, r3
 8009f04:	42be      	cmp	r6, r7
 8009f06:	680b      	ldr	r3, [r1, #0]
 8009f08:	4682      	mov	sl, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4690      	mov	r8, r2
 8009f0e:	d82c      	bhi.n	8009f6a <__ssputs_r+0x6e>
 8009f10:	898a      	ldrh	r2, [r1, #12]
 8009f12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f16:	d026      	beq.n	8009f66 <__ssputs_r+0x6a>
 8009f18:	6965      	ldr	r5, [r4, #20]
 8009f1a:	6909      	ldr	r1, [r1, #16]
 8009f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f20:	eba3 0901 	sub.w	r9, r3, r1
 8009f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f28:	1c7b      	adds	r3, r7, #1
 8009f2a:	444b      	add	r3, r9
 8009f2c:	106d      	asrs	r5, r5, #1
 8009f2e:	429d      	cmp	r5, r3
 8009f30:	bf38      	it	cc
 8009f32:	461d      	movcc	r5, r3
 8009f34:	0553      	lsls	r3, r2, #21
 8009f36:	d527      	bpl.n	8009f88 <__ssputs_r+0x8c>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7ff ff53 	bl	8009de4 <_malloc_r>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	b360      	cbz	r0, 8009f9c <__ssputs_r+0xa0>
 8009f42:	6921      	ldr	r1, [r4, #16]
 8009f44:	464a      	mov	r2, r9
 8009f46:	f000 fc1d 	bl	800a784 <memcpy>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	6126      	str	r6, [r4, #16]
 8009f58:	6165      	str	r5, [r4, #20]
 8009f5a:	444e      	add	r6, r9
 8009f5c:	eba5 0509 	sub.w	r5, r5, r9
 8009f60:	6026      	str	r6, [r4, #0]
 8009f62:	60a5      	str	r5, [r4, #8]
 8009f64:	463e      	mov	r6, r7
 8009f66:	42be      	cmp	r6, r7
 8009f68:	d900      	bls.n	8009f6c <__ssputs_r+0x70>
 8009f6a:	463e      	mov	r6, r7
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	4632      	mov	r2, r6
 8009f70:	4641      	mov	r1, r8
 8009f72:	f000 fbbb 	bl	800a6ec <memmove>
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	1b9b      	subs	r3, r3, r6
 8009f7a:	60a3      	str	r3, [r4, #8]
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	4433      	add	r3, r6
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	2000      	movs	r0, #0
 8009f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f88:	462a      	mov	r2, r5
 8009f8a:	f000 fc09 	bl	800a7a0 <_realloc_r>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d1e0      	bne.n	8009f56 <__ssputs_r+0x5a>
 8009f94:	6921      	ldr	r1, [r4, #16]
 8009f96:	4650      	mov	r0, sl
 8009f98:	f7ff feb8 	bl	8009d0c <_free_r>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	f8ca 3000 	str.w	r3, [sl]
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa8:	81a3      	strh	r3, [r4, #12]
 8009faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fae:	e7e9      	b.n	8009f84 <__ssputs_r+0x88>

08009fb0 <_svfiprintf_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	4698      	mov	r8, r3
 8009fb6:	898b      	ldrh	r3, [r1, #12]
 8009fb8:	061b      	lsls	r3, r3, #24
 8009fba:	b09d      	sub	sp, #116	; 0x74
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	d50e      	bpl.n	8009fe2 <_svfiprintf_r+0x32>
 8009fc4:	690b      	ldr	r3, [r1, #16]
 8009fc6:	b963      	cbnz	r3, 8009fe2 <_svfiprintf_r+0x32>
 8009fc8:	2140      	movs	r1, #64	; 0x40
 8009fca:	f7ff ff0b 	bl	8009de4 <_malloc_r>
 8009fce:	6028      	str	r0, [r5, #0]
 8009fd0:	6128      	str	r0, [r5, #16]
 8009fd2:	b920      	cbnz	r0, 8009fde <_svfiprintf_r+0x2e>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fdc:	e0d0      	b.n	800a180 <_svfiprintf_r+0x1d0>
 8009fde:	2340      	movs	r3, #64	; 0x40
 8009fe0:	616b      	str	r3, [r5, #20]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe6:	2320      	movs	r3, #32
 8009fe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff0:	2330      	movs	r3, #48	; 0x30
 8009ff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a198 <_svfiprintf_r+0x1e8>
 8009ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ffa:	f04f 0901 	mov.w	r9, #1
 8009ffe:	4623      	mov	r3, r4
 800a000:	469a      	mov	sl, r3
 800a002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a006:	b10a      	cbz	r2, 800a00c <_svfiprintf_r+0x5c>
 800a008:	2a25      	cmp	r2, #37	; 0x25
 800a00a:	d1f9      	bne.n	800a000 <_svfiprintf_r+0x50>
 800a00c:	ebba 0b04 	subs.w	fp, sl, r4
 800a010:	d00b      	beq.n	800a02a <_svfiprintf_r+0x7a>
 800a012:	465b      	mov	r3, fp
 800a014:	4622      	mov	r2, r4
 800a016:	4629      	mov	r1, r5
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ff6f 	bl	8009efc <__ssputs_r>
 800a01e:	3001      	adds	r0, #1
 800a020:	f000 80a9 	beq.w	800a176 <_svfiprintf_r+0x1c6>
 800a024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a026:	445a      	add	r2, fp
 800a028:	9209      	str	r2, [sp, #36]	; 0x24
 800a02a:	f89a 3000 	ldrb.w	r3, [sl]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80a1 	beq.w	800a176 <_svfiprintf_r+0x1c6>
 800a034:	2300      	movs	r3, #0
 800a036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a03e:	f10a 0a01 	add.w	sl, sl, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	9307      	str	r3, [sp, #28]
 800a046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a04a:	931a      	str	r3, [sp, #104]	; 0x68
 800a04c:	4654      	mov	r4, sl
 800a04e:	2205      	movs	r2, #5
 800a050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a054:	4850      	ldr	r0, [pc, #320]	; (800a198 <_svfiprintf_r+0x1e8>)
 800a056:	f7f6 f8cb 	bl	80001f0 <memchr>
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	b9d8      	cbnz	r0, 800a096 <_svfiprintf_r+0xe6>
 800a05e:	06d0      	lsls	r0, r2, #27
 800a060:	bf44      	itt	mi
 800a062:	2320      	movmi	r3, #32
 800a064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a068:	0711      	lsls	r1, r2, #28
 800a06a:	bf44      	itt	mi
 800a06c:	232b      	movmi	r3, #43	; 0x2b
 800a06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a072:	f89a 3000 	ldrb.w	r3, [sl]
 800a076:	2b2a      	cmp	r3, #42	; 0x2a
 800a078:	d015      	beq.n	800a0a6 <_svfiprintf_r+0xf6>
 800a07a:	9a07      	ldr	r2, [sp, #28]
 800a07c:	4654      	mov	r4, sl
 800a07e:	2000      	movs	r0, #0
 800a080:	f04f 0c0a 	mov.w	ip, #10
 800a084:	4621      	mov	r1, r4
 800a086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a08a:	3b30      	subs	r3, #48	; 0x30
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d94d      	bls.n	800a12c <_svfiprintf_r+0x17c>
 800a090:	b1b0      	cbz	r0, 800a0c0 <_svfiprintf_r+0x110>
 800a092:	9207      	str	r2, [sp, #28]
 800a094:	e014      	b.n	800a0c0 <_svfiprintf_r+0x110>
 800a096:	eba0 0308 	sub.w	r3, r0, r8
 800a09a:	fa09 f303 	lsl.w	r3, r9, r3
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	46a2      	mov	sl, r4
 800a0a4:	e7d2      	b.n	800a04c <_svfiprintf_r+0x9c>
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	1d19      	adds	r1, r3, #4
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	9103      	str	r1, [sp, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bfbb      	ittet	lt
 800a0b2:	425b      	neglt	r3, r3
 800a0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b8:	9307      	strge	r3, [sp, #28]
 800a0ba:	9307      	strlt	r3, [sp, #28]
 800a0bc:	bfb8      	it	lt
 800a0be:	9204      	strlt	r2, [sp, #16]
 800a0c0:	7823      	ldrb	r3, [r4, #0]
 800a0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0c4:	d10c      	bne.n	800a0e0 <_svfiprintf_r+0x130>
 800a0c6:	7863      	ldrb	r3, [r4, #1]
 800a0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ca:	d134      	bne.n	800a136 <_svfiprintf_r+0x186>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	1d1a      	adds	r2, r3, #4
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	9203      	str	r2, [sp, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	bfb8      	it	lt
 800a0d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0dc:	3402      	adds	r4, #2
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a1a8 <_svfiprintf_r+0x1f8>
 800a0e4:	7821      	ldrb	r1, [r4, #0]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	f7f6 f881 	bl	80001f0 <memchr>
 800a0ee:	b138      	cbz	r0, 800a100 <_svfiprintf_r+0x150>
 800a0f0:	9b04      	ldr	r3, [sp, #16]
 800a0f2:	eba0 000a 	sub.w	r0, r0, sl
 800a0f6:	2240      	movs	r2, #64	; 0x40
 800a0f8:	4082      	lsls	r2, r0
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	3401      	adds	r4, #1
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a104:	4825      	ldr	r0, [pc, #148]	; (800a19c <_svfiprintf_r+0x1ec>)
 800a106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a10a:	2206      	movs	r2, #6
 800a10c:	f7f6 f870 	bl	80001f0 <memchr>
 800a110:	2800      	cmp	r0, #0
 800a112:	d038      	beq.n	800a186 <_svfiprintf_r+0x1d6>
 800a114:	4b22      	ldr	r3, [pc, #136]	; (800a1a0 <_svfiprintf_r+0x1f0>)
 800a116:	bb1b      	cbnz	r3, 800a160 <_svfiprintf_r+0x1b0>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	3307      	adds	r3, #7
 800a11c:	f023 0307 	bic.w	r3, r3, #7
 800a120:	3308      	adds	r3, #8
 800a122:	9303      	str	r3, [sp, #12]
 800a124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a126:	4433      	add	r3, r6
 800a128:	9309      	str	r3, [sp, #36]	; 0x24
 800a12a:	e768      	b.n	8009ffe <_svfiprintf_r+0x4e>
 800a12c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a130:	460c      	mov	r4, r1
 800a132:	2001      	movs	r0, #1
 800a134:	e7a6      	b.n	800a084 <_svfiprintf_r+0xd4>
 800a136:	2300      	movs	r3, #0
 800a138:	3401      	adds	r4, #1
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	4619      	mov	r1, r3
 800a13e:	f04f 0c0a 	mov.w	ip, #10
 800a142:	4620      	mov	r0, r4
 800a144:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a148:	3a30      	subs	r2, #48	; 0x30
 800a14a:	2a09      	cmp	r2, #9
 800a14c:	d903      	bls.n	800a156 <_svfiprintf_r+0x1a6>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0c6      	beq.n	800a0e0 <_svfiprintf_r+0x130>
 800a152:	9105      	str	r1, [sp, #20]
 800a154:	e7c4      	b.n	800a0e0 <_svfiprintf_r+0x130>
 800a156:	fb0c 2101 	mla	r1, ip, r1, r2
 800a15a:	4604      	mov	r4, r0
 800a15c:	2301      	movs	r3, #1
 800a15e:	e7f0      	b.n	800a142 <_svfiprintf_r+0x192>
 800a160:	ab03      	add	r3, sp, #12
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	462a      	mov	r2, r5
 800a166:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <_svfiprintf_r+0x1f4>)
 800a168:	a904      	add	r1, sp, #16
 800a16a:	4638      	mov	r0, r7
 800a16c:	f3af 8000 	nop.w
 800a170:	1c42      	adds	r2, r0, #1
 800a172:	4606      	mov	r6, r0
 800a174:	d1d6      	bne.n	800a124 <_svfiprintf_r+0x174>
 800a176:	89ab      	ldrh	r3, [r5, #12]
 800a178:	065b      	lsls	r3, r3, #25
 800a17a:	f53f af2d 	bmi.w	8009fd8 <_svfiprintf_r+0x28>
 800a17e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a180:	b01d      	add	sp, #116	; 0x74
 800a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a186:	ab03      	add	r3, sp, #12
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	462a      	mov	r2, r5
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <_svfiprintf_r+0x1f4>)
 800a18e:	a904      	add	r1, sp, #16
 800a190:	4638      	mov	r0, r7
 800a192:	f000 f879 	bl	800a288 <_printf_i>
 800a196:	e7eb      	b.n	800a170 <_svfiprintf_r+0x1c0>
 800a198:	0800b2d8 	.word	0x0800b2d8
 800a19c:	0800b2e2 	.word	0x0800b2e2
 800a1a0:	00000000 	.word	0x00000000
 800a1a4:	08009efd 	.word	0x08009efd
 800a1a8:	0800b2de 	.word	0x0800b2de

0800a1ac <_printf_common>:
 800a1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b0:	4616      	mov	r6, r2
 800a1b2:	4699      	mov	r9, r3
 800a1b4:	688a      	ldr	r2, [r1, #8]
 800a1b6:	690b      	ldr	r3, [r1, #16]
 800a1b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	bfb8      	it	lt
 800a1c0:	4613      	movlt	r3, r2
 800a1c2:	6033      	str	r3, [r6, #0]
 800a1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	b10a      	cbz	r2, 800a1d2 <_printf_common+0x26>
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	6033      	str	r3, [r6, #0]
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	0699      	lsls	r1, r3, #26
 800a1d6:	bf42      	ittt	mi
 800a1d8:	6833      	ldrmi	r3, [r6, #0]
 800a1da:	3302      	addmi	r3, #2
 800a1dc:	6033      	strmi	r3, [r6, #0]
 800a1de:	6825      	ldr	r5, [r4, #0]
 800a1e0:	f015 0506 	ands.w	r5, r5, #6
 800a1e4:	d106      	bne.n	800a1f4 <_printf_common+0x48>
 800a1e6:	f104 0a19 	add.w	sl, r4, #25
 800a1ea:	68e3      	ldr	r3, [r4, #12]
 800a1ec:	6832      	ldr	r2, [r6, #0]
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	42ab      	cmp	r3, r5
 800a1f2:	dc26      	bgt.n	800a242 <_printf_common+0x96>
 800a1f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1f8:	1e13      	subs	r3, r2, #0
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	bf18      	it	ne
 800a1fe:	2301      	movne	r3, #1
 800a200:	0692      	lsls	r2, r2, #26
 800a202:	d42b      	bmi.n	800a25c <_printf_common+0xb0>
 800a204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a208:	4649      	mov	r1, r9
 800a20a:	4638      	mov	r0, r7
 800a20c:	47c0      	blx	r8
 800a20e:	3001      	adds	r0, #1
 800a210:	d01e      	beq.n	800a250 <_printf_common+0xa4>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	6922      	ldr	r2, [r4, #16]
 800a216:	f003 0306 	and.w	r3, r3, #6
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	bf02      	ittt	eq
 800a21e:	68e5      	ldreq	r5, [r4, #12]
 800a220:	6833      	ldreq	r3, [r6, #0]
 800a222:	1aed      	subeq	r5, r5, r3
 800a224:	68a3      	ldr	r3, [r4, #8]
 800a226:	bf0c      	ite	eq
 800a228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a22c:	2500      	movne	r5, #0
 800a22e:	4293      	cmp	r3, r2
 800a230:	bfc4      	itt	gt
 800a232:	1a9b      	subgt	r3, r3, r2
 800a234:	18ed      	addgt	r5, r5, r3
 800a236:	2600      	movs	r6, #0
 800a238:	341a      	adds	r4, #26
 800a23a:	42b5      	cmp	r5, r6
 800a23c:	d11a      	bne.n	800a274 <_printf_common+0xc8>
 800a23e:	2000      	movs	r0, #0
 800a240:	e008      	b.n	800a254 <_printf_common+0xa8>
 800a242:	2301      	movs	r3, #1
 800a244:	4652      	mov	r2, sl
 800a246:	4649      	mov	r1, r9
 800a248:	4638      	mov	r0, r7
 800a24a:	47c0      	blx	r8
 800a24c:	3001      	adds	r0, #1
 800a24e:	d103      	bne.n	800a258 <_printf_common+0xac>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a258:	3501      	adds	r5, #1
 800a25a:	e7c6      	b.n	800a1ea <_printf_common+0x3e>
 800a25c:	18e1      	adds	r1, r4, r3
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	2030      	movs	r0, #48	; 0x30
 800a262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a266:	4422      	add	r2, r4
 800a268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a26c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a270:	3302      	adds	r3, #2
 800a272:	e7c7      	b.n	800a204 <_printf_common+0x58>
 800a274:	2301      	movs	r3, #1
 800a276:	4622      	mov	r2, r4
 800a278:	4649      	mov	r1, r9
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c0      	blx	r8
 800a27e:	3001      	adds	r0, #1
 800a280:	d0e6      	beq.n	800a250 <_printf_common+0xa4>
 800a282:	3601      	adds	r6, #1
 800a284:	e7d9      	b.n	800a23a <_printf_common+0x8e>
	...

0800a288 <_printf_i>:
 800a288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a28c:	7e0f      	ldrb	r7, [r1, #24]
 800a28e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a290:	2f78      	cmp	r7, #120	; 0x78
 800a292:	4691      	mov	r9, r2
 800a294:	4680      	mov	r8, r0
 800a296:	460c      	mov	r4, r1
 800a298:	469a      	mov	sl, r3
 800a29a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a29e:	d807      	bhi.n	800a2b0 <_printf_i+0x28>
 800a2a0:	2f62      	cmp	r7, #98	; 0x62
 800a2a2:	d80a      	bhi.n	800a2ba <_printf_i+0x32>
 800a2a4:	2f00      	cmp	r7, #0
 800a2a6:	f000 80d4 	beq.w	800a452 <_printf_i+0x1ca>
 800a2aa:	2f58      	cmp	r7, #88	; 0x58
 800a2ac:	f000 80c0 	beq.w	800a430 <_printf_i+0x1a8>
 800a2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2b8:	e03a      	b.n	800a330 <_printf_i+0xa8>
 800a2ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2be:	2b15      	cmp	r3, #21
 800a2c0:	d8f6      	bhi.n	800a2b0 <_printf_i+0x28>
 800a2c2:	a101      	add	r1, pc, #4	; (adr r1, 800a2c8 <_printf_i+0x40>)
 800a2c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2c8:	0800a321 	.word	0x0800a321
 800a2cc:	0800a335 	.word	0x0800a335
 800a2d0:	0800a2b1 	.word	0x0800a2b1
 800a2d4:	0800a2b1 	.word	0x0800a2b1
 800a2d8:	0800a2b1 	.word	0x0800a2b1
 800a2dc:	0800a2b1 	.word	0x0800a2b1
 800a2e0:	0800a335 	.word	0x0800a335
 800a2e4:	0800a2b1 	.word	0x0800a2b1
 800a2e8:	0800a2b1 	.word	0x0800a2b1
 800a2ec:	0800a2b1 	.word	0x0800a2b1
 800a2f0:	0800a2b1 	.word	0x0800a2b1
 800a2f4:	0800a439 	.word	0x0800a439
 800a2f8:	0800a361 	.word	0x0800a361
 800a2fc:	0800a3f3 	.word	0x0800a3f3
 800a300:	0800a2b1 	.word	0x0800a2b1
 800a304:	0800a2b1 	.word	0x0800a2b1
 800a308:	0800a45b 	.word	0x0800a45b
 800a30c:	0800a2b1 	.word	0x0800a2b1
 800a310:	0800a361 	.word	0x0800a361
 800a314:	0800a2b1 	.word	0x0800a2b1
 800a318:	0800a2b1 	.word	0x0800a2b1
 800a31c:	0800a3fb 	.word	0x0800a3fb
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	1d1a      	adds	r2, r3, #4
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	602a      	str	r2, [r5, #0]
 800a328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a32c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a330:	2301      	movs	r3, #1
 800a332:	e09f      	b.n	800a474 <_printf_i+0x1ec>
 800a334:	6820      	ldr	r0, [r4, #0]
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	0607      	lsls	r7, r0, #24
 800a33a:	f103 0104 	add.w	r1, r3, #4
 800a33e:	6029      	str	r1, [r5, #0]
 800a340:	d501      	bpl.n	800a346 <_printf_i+0xbe>
 800a342:	681e      	ldr	r6, [r3, #0]
 800a344:	e003      	b.n	800a34e <_printf_i+0xc6>
 800a346:	0646      	lsls	r6, r0, #25
 800a348:	d5fb      	bpl.n	800a342 <_printf_i+0xba>
 800a34a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a34e:	2e00      	cmp	r6, #0
 800a350:	da03      	bge.n	800a35a <_printf_i+0xd2>
 800a352:	232d      	movs	r3, #45	; 0x2d
 800a354:	4276      	negs	r6, r6
 800a356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a35a:	485a      	ldr	r0, [pc, #360]	; (800a4c4 <_printf_i+0x23c>)
 800a35c:	230a      	movs	r3, #10
 800a35e:	e012      	b.n	800a386 <_printf_i+0xfe>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	1d19      	adds	r1, r3, #4
 800a366:	6029      	str	r1, [r5, #0]
 800a368:	0605      	lsls	r5, r0, #24
 800a36a:	d501      	bpl.n	800a370 <_printf_i+0xe8>
 800a36c:	681e      	ldr	r6, [r3, #0]
 800a36e:	e002      	b.n	800a376 <_printf_i+0xee>
 800a370:	0641      	lsls	r1, r0, #25
 800a372:	d5fb      	bpl.n	800a36c <_printf_i+0xe4>
 800a374:	881e      	ldrh	r6, [r3, #0]
 800a376:	4853      	ldr	r0, [pc, #332]	; (800a4c4 <_printf_i+0x23c>)
 800a378:	2f6f      	cmp	r7, #111	; 0x6f
 800a37a:	bf0c      	ite	eq
 800a37c:	2308      	moveq	r3, #8
 800a37e:	230a      	movne	r3, #10
 800a380:	2100      	movs	r1, #0
 800a382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a386:	6865      	ldr	r5, [r4, #4]
 800a388:	60a5      	str	r5, [r4, #8]
 800a38a:	2d00      	cmp	r5, #0
 800a38c:	bfa2      	ittt	ge
 800a38e:	6821      	ldrge	r1, [r4, #0]
 800a390:	f021 0104 	bicge.w	r1, r1, #4
 800a394:	6021      	strge	r1, [r4, #0]
 800a396:	b90e      	cbnz	r6, 800a39c <_printf_i+0x114>
 800a398:	2d00      	cmp	r5, #0
 800a39a:	d04b      	beq.n	800a434 <_printf_i+0x1ac>
 800a39c:	4615      	mov	r5, r2
 800a39e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a3a6:	5dc7      	ldrb	r7, [r0, r7]
 800a3a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3ac:	4637      	mov	r7, r6
 800a3ae:	42bb      	cmp	r3, r7
 800a3b0:	460e      	mov	r6, r1
 800a3b2:	d9f4      	bls.n	800a39e <_printf_i+0x116>
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d10b      	bne.n	800a3d0 <_printf_i+0x148>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	07de      	lsls	r6, r3, #31
 800a3bc:	d508      	bpl.n	800a3d0 <_printf_i+0x148>
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	6861      	ldr	r1, [r4, #4]
 800a3c2:	4299      	cmp	r1, r3
 800a3c4:	bfde      	ittt	le
 800a3c6:	2330      	movle	r3, #48	; 0x30
 800a3c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3d0:	1b52      	subs	r2, r2, r5
 800a3d2:	6122      	str	r2, [r4, #16]
 800a3d4:	f8cd a000 	str.w	sl, [sp]
 800a3d8:	464b      	mov	r3, r9
 800a3da:	aa03      	add	r2, sp, #12
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4640      	mov	r0, r8
 800a3e0:	f7ff fee4 	bl	800a1ac <_printf_common>
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d14a      	bne.n	800a47e <_printf_i+0x1f6>
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ec:	b004      	add	sp, #16
 800a3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f043 0320 	orr.w	r3, r3, #32
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	4833      	ldr	r0, [pc, #204]	; (800a4c8 <_printf_i+0x240>)
 800a3fc:	2778      	movs	r7, #120	; 0x78
 800a3fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	6829      	ldr	r1, [r5, #0]
 800a406:	061f      	lsls	r7, r3, #24
 800a408:	f851 6b04 	ldr.w	r6, [r1], #4
 800a40c:	d402      	bmi.n	800a414 <_printf_i+0x18c>
 800a40e:	065f      	lsls	r7, r3, #25
 800a410:	bf48      	it	mi
 800a412:	b2b6      	uxthmi	r6, r6
 800a414:	07df      	lsls	r7, r3, #31
 800a416:	bf48      	it	mi
 800a418:	f043 0320 	orrmi.w	r3, r3, #32
 800a41c:	6029      	str	r1, [r5, #0]
 800a41e:	bf48      	it	mi
 800a420:	6023      	strmi	r3, [r4, #0]
 800a422:	b91e      	cbnz	r6, 800a42c <_printf_i+0x1a4>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	f023 0320 	bic.w	r3, r3, #32
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	2310      	movs	r3, #16
 800a42e:	e7a7      	b.n	800a380 <_printf_i+0xf8>
 800a430:	4824      	ldr	r0, [pc, #144]	; (800a4c4 <_printf_i+0x23c>)
 800a432:	e7e4      	b.n	800a3fe <_printf_i+0x176>
 800a434:	4615      	mov	r5, r2
 800a436:	e7bd      	b.n	800a3b4 <_printf_i+0x12c>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	6826      	ldr	r6, [r4, #0]
 800a43c:	6961      	ldr	r1, [r4, #20]
 800a43e:	1d18      	adds	r0, r3, #4
 800a440:	6028      	str	r0, [r5, #0]
 800a442:	0635      	lsls	r5, r6, #24
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	d501      	bpl.n	800a44c <_printf_i+0x1c4>
 800a448:	6019      	str	r1, [r3, #0]
 800a44a:	e002      	b.n	800a452 <_printf_i+0x1ca>
 800a44c:	0670      	lsls	r0, r6, #25
 800a44e:	d5fb      	bpl.n	800a448 <_printf_i+0x1c0>
 800a450:	8019      	strh	r1, [r3, #0]
 800a452:	2300      	movs	r3, #0
 800a454:	6123      	str	r3, [r4, #16]
 800a456:	4615      	mov	r5, r2
 800a458:	e7bc      	b.n	800a3d4 <_printf_i+0x14c>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	1d1a      	adds	r2, r3, #4
 800a45e:	602a      	str	r2, [r5, #0]
 800a460:	681d      	ldr	r5, [r3, #0]
 800a462:	6862      	ldr	r2, [r4, #4]
 800a464:	2100      	movs	r1, #0
 800a466:	4628      	mov	r0, r5
 800a468:	f7f5 fec2 	bl	80001f0 <memchr>
 800a46c:	b108      	cbz	r0, 800a472 <_printf_i+0x1ea>
 800a46e:	1b40      	subs	r0, r0, r5
 800a470:	6060      	str	r0, [r4, #4]
 800a472:	6863      	ldr	r3, [r4, #4]
 800a474:	6123      	str	r3, [r4, #16]
 800a476:	2300      	movs	r3, #0
 800a478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a47c:	e7aa      	b.n	800a3d4 <_printf_i+0x14c>
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	462a      	mov	r2, r5
 800a482:	4649      	mov	r1, r9
 800a484:	4640      	mov	r0, r8
 800a486:	47d0      	blx	sl
 800a488:	3001      	adds	r0, #1
 800a48a:	d0ad      	beq.n	800a3e8 <_printf_i+0x160>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	079b      	lsls	r3, r3, #30
 800a490:	d413      	bmi.n	800a4ba <_printf_i+0x232>
 800a492:	68e0      	ldr	r0, [r4, #12]
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	4298      	cmp	r0, r3
 800a498:	bfb8      	it	lt
 800a49a:	4618      	movlt	r0, r3
 800a49c:	e7a6      	b.n	800a3ec <_printf_i+0x164>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	47d0      	blx	sl
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d09d      	beq.n	800a3e8 <_printf_i+0x160>
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	9903      	ldr	r1, [sp, #12]
 800a4b2:	1a5b      	subs	r3, r3, r1
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	dcf2      	bgt.n	800a49e <_printf_i+0x216>
 800a4b8:	e7eb      	b.n	800a492 <_printf_i+0x20a>
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	f104 0619 	add.w	r6, r4, #25
 800a4c0:	e7f5      	b.n	800a4ae <_printf_i+0x226>
 800a4c2:	bf00      	nop
 800a4c4:	0800b2e9 	.word	0x0800b2e9
 800a4c8:	0800b2fa 	.word	0x0800b2fa

0800a4cc <__sflush_r>:
 800a4cc:	898a      	ldrh	r2, [r1, #12]
 800a4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	0710      	lsls	r0, r2, #28
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	d458      	bmi.n	800a58c <__sflush_r+0xc0>
 800a4da:	684b      	ldr	r3, [r1, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dc05      	bgt.n	800a4ec <__sflush_r+0x20>
 800a4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dc02      	bgt.n	800a4ec <__sflush_r+0x20>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	d0f9      	beq.n	800a4e6 <__sflush_r+0x1a>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4f8:	682f      	ldr	r7, [r5, #0]
 800a4fa:	6a21      	ldr	r1, [r4, #32]
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	d032      	beq.n	800a566 <__sflush_r+0x9a>
 800a500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	075a      	lsls	r2, r3, #29
 800a506:	d505      	bpl.n	800a514 <__sflush_r+0x48>
 800a508:	6863      	ldr	r3, [r4, #4]
 800a50a:	1ac0      	subs	r0, r0, r3
 800a50c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a50e:	b10b      	cbz	r3, 800a514 <__sflush_r+0x48>
 800a510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a512:	1ac0      	subs	r0, r0, r3
 800a514:	2300      	movs	r3, #0
 800a516:	4602      	mov	r2, r0
 800a518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a51a:	6a21      	ldr	r1, [r4, #32]
 800a51c:	4628      	mov	r0, r5
 800a51e:	47b0      	blx	r6
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	d106      	bne.n	800a534 <__sflush_r+0x68>
 800a526:	6829      	ldr	r1, [r5, #0]
 800a528:	291d      	cmp	r1, #29
 800a52a:	d82b      	bhi.n	800a584 <__sflush_r+0xb8>
 800a52c:	4a29      	ldr	r2, [pc, #164]	; (800a5d4 <__sflush_r+0x108>)
 800a52e:	410a      	asrs	r2, r1
 800a530:	07d6      	lsls	r6, r2, #31
 800a532:	d427      	bmi.n	800a584 <__sflush_r+0xb8>
 800a534:	2200      	movs	r2, #0
 800a536:	6062      	str	r2, [r4, #4]
 800a538:	04d9      	lsls	r1, r3, #19
 800a53a:	6922      	ldr	r2, [r4, #16]
 800a53c:	6022      	str	r2, [r4, #0]
 800a53e:	d504      	bpl.n	800a54a <__sflush_r+0x7e>
 800a540:	1c42      	adds	r2, r0, #1
 800a542:	d101      	bne.n	800a548 <__sflush_r+0x7c>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b903      	cbnz	r3, 800a54a <__sflush_r+0x7e>
 800a548:	6560      	str	r0, [r4, #84]	; 0x54
 800a54a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a54c:	602f      	str	r7, [r5, #0]
 800a54e:	2900      	cmp	r1, #0
 800a550:	d0c9      	beq.n	800a4e6 <__sflush_r+0x1a>
 800a552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a556:	4299      	cmp	r1, r3
 800a558:	d002      	beq.n	800a560 <__sflush_r+0x94>
 800a55a:	4628      	mov	r0, r5
 800a55c:	f7ff fbd6 	bl	8009d0c <_free_r>
 800a560:	2000      	movs	r0, #0
 800a562:	6360      	str	r0, [r4, #52]	; 0x34
 800a564:	e7c0      	b.n	800a4e8 <__sflush_r+0x1c>
 800a566:	2301      	movs	r3, #1
 800a568:	4628      	mov	r0, r5
 800a56a:	47b0      	blx	r6
 800a56c:	1c41      	adds	r1, r0, #1
 800a56e:	d1c8      	bne.n	800a502 <__sflush_r+0x36>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0c5      	beq.n	800a502 <__sflush_r+0x36>
 800a576:	2b1d      	cmp	r3, #29
 800a578:	d001      	beq.n	800a57e <__sflush_r+0xb2>
 800a57a:	2b16      	cmp	r3, #22
 800a57c:	d101      	bne.n	800a582 <__sflush_r+0xb6>
 800a57e:	602f      	str	r7, [r5, #0]
 800a580:	e7b1      	b.n	800a4e6 <__sflush_r+0x1a>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	e7ad      	b.n	800a4e8 <__sflush_r+0x1c>
 800a58c:	690f      	ldr	r7, [r1, #16]
 800a58e:	2f00      	cmp	r7, #0
 800a590:	d0a9      	beq.n	800a4e6 <__sflush_r+0x1a>
 800a592:	0793      	lsls	r3, r2, #30
 800a594:	680e      	ldr	r6, [r1, #0]
 800a596:	bf08      	it	eq
 800a598:	694b      	ldreq	r3, [r1, #20]
 800a59a:	600f      	str	r7, [r1, #0]
 800a59c:	bf18      	it	ne
 800a59e:	2300      	movne	r3, #0
 800a5a0:	eba6 0807 	sub.w	r8, r6, r7
 800a5a4:	608b      	str	r3, [r1, #8]
 800a5a6:	f1b8 0f00 	cmp.w	r8, #0
 800a5aa:	dd9c      	ble.n	800a4e6 <__sflush_r+0x1a>
 800a5ac:	6a21      	ldr	r1, [r4, #32]
 800a5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5b0:	4643      	mov	r3, r8
 800a5b2:	463a      	mov	r2, r7
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	47b0      	blx	r6
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	dc06      	bgt.n	800a5ca <__sflush_r+0xfe>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5c8:	e78e      	b.n	800a4e8 <__sflush_r+0x1c>
 800a5ca:	4407      	add	r7, r0
 800a5cc:	eba8 0800 	sub.w	r8, r8, r0
 800a5d0:	e7e9      	b.n	800a5a6 <__sflush_r+0xda>
 800a5d2:	bf00      	nop
 800a5d4:	dfbffffe 	.word	0xdfbffffe

0800a5d8 <_fflush_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	690b      	ldr	r3, [r1, #16]
 800a5dc:	4605      	mov	r5, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	b913      	cbnz	r3, 800a5e8 <_fflush_r+0x10>
 800a5e2:	2500      	movs	r5, #0
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	b118      	cbz	r0, 800a5f2 <_fflush_r+0x1a>
 800a5ea:	6a03      	ldr	r3, [r0, #32]
 800a5ec:	b90b      	cbnz	r3, 800a5f2 <_fflush_r+0x1a>
 800a5ee:	f7ff f96d 	bl	80098cc <__sinit>
 800a5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0f3      	beq.n	800a5e2 <_fflush_r+0xa>
 800a5fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5fc:	07d0      	lsls	r0, r2, #31
 800a5fe:	d404      	bmi.n	800a60a <_fflush_r+0x32>
 800a600:	0599      	lsls	r1, r3, #22
 800a602:	d402      	bmi.n	800a60a <_fflush_r+0x32>
 800a604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a606:	f7ff fb7e 	bl	8009d06 <__retarget_lock_acquire_recursive>
 800a60a:	4628      	mov	r0, r5
 800a60c:	4621      	mov	r1, r4
 800a60e:	f7ff ff5d 	bl	800a4cc <__sflush_r>
 800a612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a614:	07da      	lsls	r2, r3, #31
 800a616:	4605      	mov	r5, r0
 800a618:	d4e4      	bmi.n	800a5e4 <_fflush_r+0xc>
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	059b      	lsls	r3, r3, #22
 800a61e:	d4e1      	bmi.n	800a5e4 <_fflush_r+0xc>
 800a620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a622:	f7ff fb71 	bl	8009d08 <__retarget_lock_release_recursive>
 800a626:	e7dd      	b.n	800a5e4 <_fflush_r+0xc>

0800a628 <__swhatbuf_r>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	460c      	mov	r4, r1
 800a62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a630:	2900      	cmp	r1, #0
 800a632:	b096      	sub	sp, #88	; 0x58
 800a634:	4615      	mov	r5, r2
 800a636:	461e      	mov	r6, r3
 800a638:	da0d      	bge.n	800a656 <__swhatbuf_r+0x2e>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a640:	f04f 0100 	mov.w	r1, #0
 800a644:	bf0c      	ite	eq
 800a646:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a64a:	2340      	movne	r3, #64	; 0x40
 800a64c:	2000      	movs	r0, #0
 800a64e:	6031      	str	r1, [r6, #0]
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	b016      	add	sp, #88	; 0x58
 800a654:	bd70      	pop	{r4, r5, r6, pc}
 800a656:	466a      	mov	r2, sp
 800a658:	f000 f862 	bl	800a720 <_fstat_r>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	dbec      	blt.n	800a63a <__swhatbuf_r+0x12>
 800a660:	9901      	ldr	r1, [sp, #4]
 800a662:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a666:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a66a:	4259      	negs	r1, r3
 800a66c:	4159      	adcs	r1, r3
 800a66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a672:	e7eb      	b.n	800a64c <__swhatbuf_r+0x24>

0800a674 <__smakebuf_r>:
 800a674:	898b      	ldrh	r3, [r1, #12]
 800a676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a678:	079d      	lsls	r5, r3, #30
 800a67a:	4606      	mov	r6, r0
 800a67c:	460c      	mov	r4, r1
 800a67e:	d507      	bpl.n	800a690 <__smakebuf_r+0x1c>
 800a680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	6123      	str	r3, [r4, #16]
 800a688:	2301      	movs	r3, #1
 800a68a:	6163      	str	r3, [r4, #20]
 800a68c:	b002      	add	sp, #8
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	ab01      	add	r3, sp, #4
 800a692:	466a      	mov	r2, sp
 800a694:	f7ff ffc8 	bl	800a628 <__swhatbuf_r>
 800a698:	9900      	ldr	r1, [sp, #0]
 800a69a:	4605      	mov	r5, r0
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff fba1 	bl	8009de4 <_malloc_r>
 800a6a2:	b948      	cbnz	r0, 800a6b8 <__smakebuf_r+0x44>
 800a6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a8:	059a      	lsls	r2, r3, #22
 800a6aa:	d4ef      	bmi.n	800a68c <__smakebuf_r+0x18>
 800a6ac:	f023 0303 	bic.w	r3, r3, #3
 800a6b0:	f043 0302 	orr.w	r3, r3, #2
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	e7e3      	b.n	800a680 <__smakebuf_r+0xc>
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	6163      	str	r3, [r4, #20]
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	6120      	str	r0, [r4, #16]
 800a6ca:	b15b      	cbz	r3, 800a6e4 <__smakebuf_r+0x70>
 800a6cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 f837 	bl	800a744 <_isatty_r>
 800a6d6:	b128      	cbz	r0, 800a6e4 <__smakebuf_r+0x70>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	431d      	orrs	r5, r3
 800a6e8:	81a5      	strh	r5, [r4, #12]
 800a6ea:	e7cf      	b.n	800a68c <__smakebuf_r+0x18>

0800a6ec <memmove>:
 800a6ec:	4288      	cmp	r0, r1
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	eb01 0402 	add.w	r4, r1, r2
 800a6f4:	d902      	bls.n	800a6fc <memmove+0x10>
 800a6f6:	4284      	cmp	r4, r0
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	d807      	bhi.n	800a70c <memmove+0x20>
 800a6fc:	1e43      	subs	r3, r0, #1
 800a6fe:	42a1      	cmp	r1, r4
 800a700:	d008      	beq.n	800a714 <memmove+0x28>
 800a702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a70a:	e7f8      	b.n	800a6fe <memmove+0x12>
 800a70c:	4402      	add	r2, r0
 800a70e:	4601      	mov	r1, r0
 800a710:	428a      	cmp	r2, r1
 800a712:	d100      	bne.n	800a716 <memmove+0x2a>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a71e:	e7f7      	b.n	800a710 <memmove+0x24>

0800a720 <_fstat_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4d07      	ldr	r5, [pc, #28]	; (800a740 <_fstat_r+0x20>)
 800a724:	2300      	movs	r3, #0
 800a726:	4604      	mov	r4, r0
 800a728:	4608      	mov	r0, r1
 800a72a:	4611      	mov	r1, r2
 800a72c:	602b      	str	r3, [r5, #0]
 800a72e:	f7f6 fcaa 	bl	8001086 <_fstat>
 800a732:	1c43      	adds	r3, r0, #1
 800a734:	d102      	bne.n	800a73c <_fstat_r+0x1c>
 800a736:	682b      	ldr	r3, [r5, #0]
 800a738:	b103      	cbz	r3, 800a73c <_fstat_r+0x1c>
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
 800a73e:	bf00      	nop
 800a740:	20000ad0 	.word	0x20000ad0

0800a744 <_isatty_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d06      	ldr	r5, [pc, #24]	; (800a760 <_isatty_r+0x1c>)
 800a748:	2300      	movs	r3, #0
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	602b      	str	r3, [r5, #0]
 800a750:	f7f6 fca9 	bl	80010a6 <_isatty>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_isatty_r+0x1a>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_isatty_r+0x1a>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	20000ad0 	.word	0x20000ad0

0800a764 <_sbrk_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d06      	ldr	r5, [pc, #24]	; (800a780 <_sbrk_r+0x1c>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	f7f6 fcb2 	bl	80010d8 <_sbrk>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_sbrk_r+0x1a>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_sbrk_r+0x1a>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20000ad0 	.word	0x20000ad0

0800a784 <memcpy>:
 800a784:	440a      	add	r2, r1
 800a786:	4291      	cmp	r1, r2
 800a788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a78c:	d100      	bne.n	800a790 <memcpy+0xc>
 800a78e:	4770      	bx	lr
 800a790:	b510      	push	{r4, lr}
 800a792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a79a:	4291      	cmp	r1, r2
 800a79c:	d1f9      	bne.n	800a792 <memcpy+0xe>
 800a79e:	bd10      	pop	{r4, pc}

0800a7a0 <_realloc_r>:
 800a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	460e      	mov	r6, r1
 800a7aa:	b921      	cbnz	r1, 800a7b6 <_realloc_r+0x16>
 800a7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	f7ff bb17 	b.w	8009de4 <_malloc_r>
 800a7b6:	b92a      	cbnz	r2, 800a7c4 <_realloc_r+0x24>
 800a7b8:	f7ff faa8 	bl	8009d0c <_free_r>
 800a7bc:	4625      	mov	r5, r4
 800a7be:	4628      	mov	r0, r5
 800a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c4:	f000 f81b 	bl	800a7fe <_malloc_usable_size_r>
 800a7c8:	4284      	cmp	r4, r0
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	d802      	bhi.n	800a7d4 <_realloc_r+0x34>
 800a7ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7d2:	d812      	bhi.n	800a7fa <_realloc_r+0x5a>
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f7ff fb04 	bl	8009de4 <_malloc_r>
 800a7dc:	4605      	mov	r5, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d0ed      	beq.n	800a7be <_realloc_r+0x1e>
 800a7e2:	42bc      	cmp	r4, r7
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	bf28      	it	cs
 800a7ea:	463a      	movcs	r2, r7
 800a7ec:	f7ff ffca 	bl	800a784 <memcpy>
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	f7ff fa8a 	bl	8009d0c <_free_r>
 800a7f8:	e7e1      	b.n	800a7be <_realloc_r+0x1e>
 800a7fa:	4635      	mov	r5, r6
 800a7fc:	e7df      	b.n	800a7be <_realloc_r+0x1e>

0800a7fe <_malloc_usable_size_r>:
 800a7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a802:	1f18      	subs	r0, r3, #4
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfbc      	itt	lt
 800a808:	580b      	ldrlt	r3, [r1, r0]
 800a80a:	18c0      	addlt	r0, r0, r3
 800a80c:	4770      	bx	lr

0800a80e <powf>:
 800a80e:	b508      	push	{r3, lr}
 800a810:	ed2d 8b04 	vpush	{d8-d9}
 800a814:	eeb0 8a60 	vmov.f32	s16, s1
 800a818:	eeb0 9a40 	vmov.f32	s18, s0
 800a81c:	f000 f880 	bl	800a920 <__ieee754_powf>
 800a820:	eeb4 8a48 	vcmp.f32	s16, s16
 800a824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a828:	eef0 8a40 	vmov.f32	s17, s0
 800a82c:	d63e      	bvs.n	800a8ac <powf+0x9e>
 800a82e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a836:	d112      	bne.n	800a85e <powf+0x50>
 800a838:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a840:	d039      	beq.n	800a8b6 <powf+0xa8>
 800a842:	eeb0 0a48 	vmov.f32	s0, s16
 800a846:	f000 f839 	bl	800a8bc <finitef>
 800a84a:	b378      	cbz	r0, 800a8ac <powf+0x9e>
 800a84c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a854:	d52a      	bpl.n	800a8ac <powf+0x9e>
 800a856:	f7ff fa2b 	bl	8009cb0 <__errno>
 800a85a:	2322      	movs	r3, #34	; 0x22
 800a85c:	e014      	b.n	800a888 <powf+0x7a>
 800a85e:	f000 f82d 	bl	800a8bc <finitef>
 800a862:	b998      	cbnz	r0, 800a88c <powf+0x7e>
 800a864:	eeb0 0a49 	vmov.f32	s0, s18
 800a868:	f000 f828 	bl	800a8bc <finitef>
 800a86c:	b170      	cbz	r0, 800a88c <powf+0x7e>
 800a86e:	eeb0 0a48 	vmov.f32	s0, s16
 800a872:	f000 f823 	bl	800a8bc <finitef>
 800a876:	b148      	cbz	r0, 800a88c <powf+0x7e>
 800a878:	eef4 8a68 	vcmp.f32	s17, s17
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	d7e9      	bvc.n	800a856 <powf+0x48>
 800a882:	f7ff fa15 	bl	8009cb0 <__errno>
 800a886:	2321      	movs	r3, #33	; 0x21
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	e00f      	b.n	800a8ac <powf+0x9e>
 800a88c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a894:	d10a      	bne.n	800a8ac <powf+0x9e>
 800a896:	eeb0 0a49 	vmov.f32	s0, s18
 800a89a:	f000 f80f 	bl	800a8bc <finitef>
 800a89e:	b128      	cbz	r0, 800a8ac <powf+0x9e>
 800a8a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a8a4:	f000 f80a 	bl	800a8bc <finitef>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1d4      	bne.n	800a856 <powf+0x48>
 800a8ac:	eeb0 0a68 	vmov.f32	s0, s17
 800a8b0:	ecbd 8b04 	vpop	{d8-d9}
 800a8b4:	bd08      	pop	{r3, pc}
 800a8b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a8ba:	e7f7      	b.n	800a8ac <powf+0x9e>

0800a8bc <finitef>:
 800a8bc:	b082      	sub	sp, #8
 800a8be:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a8c2:	9801      	ldr	r0, [sp, #4]
 800a8c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a8c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a8cc:	bfac      	ite	ge
 800a8ce:	2000      	movge	r0, #0
 800a8d0:	2001      	movlt	r0, #1
 800a8d2:	b002      	add	sp, #8
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <roundf>:
 800a8d8:	ee10 0a10 	vmov	r0, s0
 800a8dc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a8e0:	3a7f      	subs	r2, #127	; 0x7f
 800a8e2:	2a16      	cmp	r2, #22
 800a8e4:	dc15      	bgt.n	800a912 <roundf+0x3a>
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	da08      	bge.n	800a8fc <roundf+0x24>
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800a8f0:	d101      	bne.n	800a8f6 <roundf+0x1e>
 800a8f2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a8f6:	ee00 3a10 	vmov	s0, r3
 800a8fa:	4770      	bx	lr
 800a8fc:	4907      	ldr	r1, [pc, #28]	; (800a91c <roundf+0x44>)
 800a8fe:	4111      	asrs	r1, r2
 800a900:	4208      	tst	r0, r1
 800a902:	d0fa      	beq.n	800a8fa <roundf+0x22>
 800a904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a908:	4113      	asrs	r3, r2
 800a90a:	4403      	add	r3, r0
 800a90c:	ea23 0301 	bic.w	r3, r3, r1
 800a910:	e7f1      	b.n	800a8f6 <roundf+0x1e>
 800a912:	2a80      	cmp	r2, #128	; 0x80
 800a914:	d1f1      	bne.n	800a8fa <roundf+0x22>
 800a916:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a91a:	4770      	bx	lr
 800a91c:	007fffff 	.word	0x007fffff

0800a920 <__ieee754_powf>:
 800a920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a924:	ee10 4a90 	vmov	r4, s1
 800a928:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a92c:	ed2d 8b02 	vpush	{d8}
 800a930:	ee10 7a10 	vmov	r7, s0
 800a934:	eeb0 8a40 	vmov.f32	s16, s0
 800a938:	eef0 8a60 	vmov.f32	s17, s1
 800a93c:	d10c      	bne.n	800a958 <__ieee754_powf+0x38>
 800a93e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800a942:	007f      	lsls	r7, r7, #1
 800a944:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800a948:	f240 8292 	bls.w	800ae70 <__ieee754_powf+0x550>
 800a94c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a950:	ecbd 8b02 	vpop	{d8}
 800a954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a958:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800a95c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a960:	dcf4      	bgt.n	800a94c <__ieee754_powf+0x2c>
 800a962:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a966:	dd08      	ble.n	800a97a <__ieee754_powf+0x5a>
 800a968:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a96c:	d1ee      	bne.n	800a94c <__ieee754_powf+0x2c>
 800a96e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a972:	0064      	lsls	r4, r4, #1
 800a974:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a978:	e7e6      	b.n	800a948 <__ieee754_powf+0x28>
 800a97a:	2f00      	cmp	r7, #0
 800a97c:	da20      	bge.n	800a9c0 <__ieee754_powf+0xa0>
 800a97e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a982:	da2d      	bge.n	800a9e0 <__ieee754_powf+0xc0>
 800a984:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a988:	f2c0 827b 	blt.w	800ae82 <__ieee754_powf+0x562>
 800a98c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a990:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a994:	fa48 f603 	asr.w	r6, r8, r3
 800a998:	fa06 f303 	lsl.w	r3, r6, r3
 800a99c:	4543      	cmp	r3, r8
 800a99e:	f040 8270 	bne.w	800ae82 <__ieee754_powf+0x562>
 800a9a2:	f006 0601 	and.w	r6, r6, #1
 800a9a6:	f1c6 0602 	rsb	r6, r6, #2
 800a9aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a9ae:	d11f      	bne.n	800a9f0 <__ieee754_powf+0xd0>
 800a9b0:	2c00      	cmp	r4, #0
 800a9b2:	f280 8263 	bge.w	800ae7c <__ieee754_powf+0x55c>
 800a9b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a9ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a9be:	e7c7      	b.n	800a950 <__ieee754_powf+0x30>
 800a9c0:	2600      	movs	r6, #0
 800a9c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a9c6:	d1f0      	bne.n	800a9aa <__ieee754_powf+0x8a>
 800a9c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a9cc:	f000 8250 	beq.w	800ae70 <__ieee754_powf+0x550>
 800a9d0:	dd08      	ble.n	800a9e4 <__ieee754_powf+0xc4>
 800a9d2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800acd8 <__ieee754_powf+0x3b8>
 800a9d6:	2c00      	cmp	r4, #0
 800a9d8:	bfa8      	it	ge
 800a9da:	eeb0 0a68 	vmovge.f32	s0, s17
 800a9de:	e7b7      	b.n	800a950 <__ieee754_powf+0x30>
 800a9e0:	2602      	movs	r6, #2
 800a9e2:	e7ee      	b.n	800a9c2 <__ieee754_powf+0xa2>
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	f280 8246 	bge.w	800ae76 <__ieee754_powf+0x556>
 800a9ea:	eeb1 0a68 	vneg.f32	s0, s17
 800a9ee:	e7af      	b.n	800a950 <__ieee754_powf+0x30>
 800a9f0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a9f4:	d102      	bne.n	800a9fc <__ieee754_powf+0xdc>
 800a9f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a9fa:	e7a9      	b.n	800a950 <__ieee754_powf+0x30>
 800a9fc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800aa00:	eeb0 0a48 	vmov.f32	s0, s16
 800aa04:	d107      	bne.n	800aa16 <__ieee754_powf+0xf6>
 800aa06:	2f00      	cmp	r7, #0
 800aa08:	db05      	blt.n	800aa16 <__ieee754_powf+0xf6>
 800aa0a:	ecbd 8b02 	vpop	{d8}
 800aa0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa12:	f000 badf 	b.w	800afd4 <__ieee754_sqrtf>
 800aa16:	f000 fa4d 	bl	800aeb4 <fabsf>
 800aa1a:	b125      	cbz	r5, 800aa26 <__ieee754_powf+0x106>
 800aa1c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800aa20:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800aa24:	d115      	bne.n	800aa52 <__ieee754_powf+0x132>
 800aa26:	2c00      	cmp	r4, #0
 800aa28:	bfbc      	itt	lt
 800aa2a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800aa2e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800aa32:	2f00      	cmp	r7, #0
 800aa34:	da8c      	bge.n	800a950 <__ieee754_powf+0x30>
 800aa36:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800aa3a:	4335      	orrs	r5, r6
 800aa3c:	d104      	bne.n	800aa48 <__ieee754_powf+0x128>
 800aa3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa42:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aa46:	e783      	b.n	800a950 <__ieee754_powf+0x30>
 800aa48:	2e01      	cmp	r6, #1
 800aa4a:	d181      	bne.n	800a950 <__ieee754_powf+0x30>
 800aa4c:	eeb1 0a40 	vneg.f32	s0, s0
 800aa50:	e77e      	b.n	800a950 <__ieee754_powf+0x30>
 800aa52:	0ff8      	lsrs	r0, r7, #31
 800aa54:	3801      	subs	r0, #1
 800aa56:	ea56 0300 	orrs.w	r3, r6, r0
 800aa5a:	d104      	bne.n	800aa66 <__ieee754_powf+0x146>
 800aa5c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800aa60:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800aa64:	e774      	b.n	800a950 <__ieee754_powf+0x30>
 800aa66:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800aa6a:	dd73      	ble.n	800ab54 <__ieee754_powf+0x234>
 800aa6c:	4b9b      	ldr	r3, [pc, #620]	; (800acdc <__ieee754_powf+0x3bc>)
 800aa6e:	429d      	cmp	r5, r3
 800aa70:	dc08      	bgt.n	800aa84 <__ieee754_powf+0x164>
 800aa72:	2c00      	cmp	r4, #0
 800aa74:	da0b      	bge.n	800aa8e <__ieee754_powf+0x16e>
 800aa76:	2000      	movs	r0, #0
 800aa78:	ecbd 8b02 	vpop	{d8}
 800aa7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa80:	f000 baa2 	b.w	800afc8 <__math_oflowf>
 800aa84:	4b96      	ldr	r3, [pc, #600]	; (800ace0 <__ieee754_powf+0x3c0>)
 800aa86:	429d      	cmp	r5, r3
 800aa88:	dd08      	ble.n	800aa9c <__ieee754_powf+0x17c>
 800aa8a:	2c00      	cmp	r4, #0
 800aa8c:	dcf3      	bgt.n	800aa76 <__ieee754_powf+0x156>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	ecbd 8b02 	vpop	{d8}
 800aa94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa98:	f000 ba90 	b.w	800afbc <__math_uflowf>
 800aa9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aaa0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aaa4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800ace4 <__ieee754_powf+0x3c4>
 800aaa8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800aaac:	eee0 6a67 	vfms.f32	s13, s0, s15
 800aab0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aab4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800aab8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aabc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aac0:	eddf 7a89 	vldr	s15, [pc, #548]	; 800ace8 <__ieee754_powf+0x3c8>
 800aac4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800aac8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800acec <__ieee754_powf+0x3cc>
 800aacc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aad0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800acf0 <__ieee754_powf+0x3d0>
 800aad4:	eef0 6a67 	vmov.f32	s13, s15
 800aad8:	eee0 6a07 	vfma.f32	s13, s0, s14
 800aadc:	ee16 3a90 	vmov	r3, s13
 800aae0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aae4:	f023 030f 	bic.w	r3, r3, #15
 800aae8:	ee06 3a90 	vmov	s13, r3
 800aaec:	eee0 6a47 	vfms.f32	s13, s0, s14
 800aaf0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aaf4:	3e01      	subs	r6, #1
 800aaf6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800aafa:	4306      	orrs	r6, r0
 800aafc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab00:	f024 040f 	bic.w	r4, r4, #15
 800ab04:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ab08:	bf08      	it	eq
 800ab0a:	eeb0 8a47 	vmoveq.f32	s16, s14
 800ab0e:	ee07 4a10 	vmov	s14, r4
 800ab12:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ab16:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ab22:	ee07 4a10 	vmov	s14, r4
 800ab26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab2a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ab2e:	ee17 1a10 	vmov	r1, s14
 800ab32:	2900      	cmp	r1, #0
 800ab34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab38:	f340 817c 	ble.w	800ae34 <__ieee754_powf+0x514>
 800ab3c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ab40:	f340 80f8 	ble.w	800ad34 <__ieee754_powf+0x414>
 800ab44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ab48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4c:	bf4c      	ite	mi
 800ab4e:	2001      	movmi	r0, #1
 800ab50:	2000      	movpl	r0, #0
 800ab52:	e791      	b.n	800aa78 <__ieee754_powf+0x158>
 800ab54:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800ab58:	bf01      	itttt	eq
 800ab5a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800acf4 <__ieee754_powf+0x3d4>
 800ab5e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ab62:	f06f 0317 	mvneq.w	r3, #23
 800ab66:	ee17 5a90 	vmoveq	r5, s15
 800ab6a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800ab6e:	bf18      	it	ne
 800ab70:	2300      	movne	r3, #0
 800ab72:	3a7f      	subs	r2, #127	; 0x7f
 800ab74:	441a      	add	r2, r3
 800ab76:	4b60      	ldr	r3, [pc, #384]	; (800acf8 <__ieee754_powf+0x3d8>)
 800ab78:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800ab7c:	429d      	cmp	r5, r3
 800ab7e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800ab82:	dd06      	ble.n	800ab92 <__ieee754_powf+0x272>
 800ab84:	4b5d      	ldr	r3, [pc, #372]	; (800acfc <__ieee754_powf+0x3dc>)
 800ab86:	429d      	cmp	r5, r3
 800ab88:	f340 80a4 	ble.w	800acd4 <__ieee754_powf+0x3b4>
 800ab8c:	3201      	adds	r2, #1
 800ab8e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ab92:	2500      	movs	r5, #0
 800ab94:	4b5a      	ldr	r3, [pc, #360]	; (800ad00 <__ieee754_powf+0x3e0>)
 800ab96:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ab9a:	ee07 1a10 	vmov	s14, r1
 800ab9e:	edd3 5a00 	vldr	s11, [r3]
 800aba2:	4b58      	ldr	r3, [pc, #352]	; (800ad04 <__ieee754_powf+0x3e4>)
 800aba4:	ee75 7a87 	vadd.f32	s15, s11, s14
 800aba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800abb0:	1049      	asrs	r1, r1, #1
 800abb2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800abb6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800abba:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800abbe:	ee37 6a65 	vsub.f32	s12, s14, s11
 800abc2:	ee07 1a90 	vmov	s15, r1
 800abc6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800abca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800abce:	ee15 7a10 	vmov	r7, s10
 800abd2:	401f      	ands	r7, r3
 800abd4:	ee06 7a90 	vmov	s13, r7
 800abd8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800abdc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800abe0:	ee65 7a05 	vmul.f32	s15, s10, s10
 800abe4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800abe8:	eddf 5a47 	vldr	s11, [pc, #284]	; 800ad08 <__ieee754_powf+0x3e8>
 800abec:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ad0c <__ieee754_powf+0x3ec>
 800abf0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800abf4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ad10 <__ieee754_powf+0x3f0>
 800abf8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800abfc:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ace4 <__ieee754_powf+0x3c4>
 800ac00:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ac04:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ad14 <__ieee754_powf+0x3f4>
 800ac08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ac0c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ad18 <__ieee754_powf+0x3f8>
 800ac10:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ac14:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ac18:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ac1c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ac20:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ac24:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800ac28:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ac2c:	eef0 5a67 	vmov.f32	s11, s15
 800ac30:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ac34:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ac38:	ee15 1a90 	vmov	r1, s11
 800ac3c:	4019      	ands	r1, r3
 800ac3e:	ee05 1a90 	vmov	s11, r1
 800ac42:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ac46:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ac4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ac52:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ac56:	eeb0 6a67 	vmov.f32	s12, s15
 800ac5a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ac5e:	ee16 1a10 	vmov	r1, s12
 800ac62:	4019      	ands	r1, r3
 800ac64:	ee07 1a10 	vmov	s14, r1
 800ac68:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ac6c:	ee06 1a10 	vmov	s12, r1
 800ac70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac74:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ad1c <__ieee754_powf+0x3fc>
 800ac78:	4929      	ldr	r1, [pc, #164]	; (800ad20 <__ieee754_powf+0x400>)
 800ac7a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ad24 <__ieee754_powf+0x404>
 800ac7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac82:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ad28 <__ieee754_powf+0x408>
 800ac86:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac8a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800ac8e:	ed91 7a00 	vldr	s14, [r1]
 800ac92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac96:	ee07 2a10 	vmov	s14, r2
 800ac9a:	eef0 6a67 	vmov.f32	s13, s15
 800ac9e:	4a23      	ldr	r2, [pc, #140]	; (800ad2c <__ieee754_powf+0x40c>)
 800aca0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800aca4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800aca8:	ed92 5a00 	vldr	s10, [r2]
 800acac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acb0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800acb4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800acb8:	ee16 2a90 	vmov	r2, s13
 800acbc:	4013      	ands	r3, r2
 800acbe:	ee06 3a90 	vmov	s13, r3
 800acc2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800acc6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800acca:	eea6 7a65 	vfms.f32	s14, s12, s11
 800acce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acd2:	e70f      	b.n	800aaf4 <__ieee754_powf+0x1d4>
 800acd4:	2501      	movs	r5, #1
 800acd6:	e75d      	b.n	800ab94 <__ieee754_powf+0x274>
 800acd8:	00000000 	.word	0x00000000
 800acdc:	3f7ffff3 	.word	0x3f7ffff3
 800ace0:	3f800007 	.word	0x3f800007
 800ace4:	3eaaaaab 	.word	0x3eaaaaab
 800ace8:	3fb8aa3b 	.word	0x3fb8aa3b
 800acec:	36eca570 	.word	0x36eca570
 800acf0:	3fb8aa00 	.word	0x3fb8aa00
 800acf4:	4b800000 	.word	0x4b800000
 800acf8:	001cc471 	.word	0x001cc471
 800acfc:	005db3d6 	.word	0x005db3d6
 800ad00:	0800b30c 	.word	0x0800b30c
 800ad04:	fffff000 	.word	0xfffff000
 800ad08:	3e6c3255 	.word	0x3e6c3255
 800ad0c:	3e53f142 	.word	0x3e53f142
 800ad10:	3e8ba305 	.word	0x3e8ba305
 800ad14:	3edb6db7 	.word	0x3edb6db7
 800ad18:	3f19999a 	.word	0x3f19999a
 800ad1c:	3f76384f 	.word	0x3f76384f
 800ad20:	0800b31c 	.word	0x0800b31c
 800ad24:	3f763800 	.word	0x3f763800
 800ad28:	369dc3a0 	.word	0x369dc3a0
 800ad2c:	0800b314 	.word	0x0800b314
 800ad30:	3338aa3c 	.word	0x3338aa3c
 800ad34:	f040 8093 	bne.w	800ae5e <__ieee754_powf+0x53e>
 800ad38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ad30 <__ieee754_powf+0x410>
 800ad3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ad44:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ad48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4c:	f73f aefa 	bgt.w	800ab44 <__ieee754_powf+0x224>
 800ad50:	15db      	asrs	r3, r3, #23
 800ad52:	3b7e      	subs	r3, #126	; 0x7e
 800ad54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ad58:	4118      	asrs	r0, r3
 800ad5a:	4408      	add	r0, r1
 800ad5c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ad60:	4a49      	ldr	r2, [pc, #292]	; (800ae88 <__ieee754_powf+0x568>)
 800ad62:	3b7f      	subs	r3, #127	; 0x7f
 800ad64:	411a      	asrs	r2, r3
 800ad66:	4002      	ands	r2, r0
 800ad68:	ee07 2a10 	vmov	s14, r2
 800ad6c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ad70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ad74:	f1c3 0317 	rsb	r3, r3, #23
 800ad78:	4118      	asrs	r0, r3
 800ad7a:	2900      	cmp	r1, #0
 800ad7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad80:	bfb8      	it	lt
 800ad82:	4240      	neglt	r0, r0
 800ad84:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ad88:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ae8c <__ieee754_powf+0x56c>
 800ad8c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ae90 <__ieee754_powf+0x570>
 800ad90:	ee17 3a10 	vmov	r3, s14
 800ad94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ad98:	f023 030f 	bic.w	r3, r3, #15
 800ad9c:	ee07 3a10 	vmov	s14, r3
 800ada0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ada4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ada8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800adac:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ae94 <__ieee754_powf+0x574>
 800adb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800adb8:	eef0 6a67 	vmov.f32	s13, s15
 800adbc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800adc0:	eef0 5a66 	vmov.f32	s11, s13
 800adc4:	eee7 5a46 	vfms.f32	s11, s14, s12
 800adc8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800adcc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800add0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800ae98 <__ieee754_powf+0x578>
 800add4:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ae9c <__ieee754_powf+0x57c>
 800add8:	eea7 6a25 	vfma.f32	s12, s14, s11
 800addc:	eddf 5a30 	vldr	s11, [pc, #192]	; 800aea0 <__ieee754_powf+0x580>
 800ade0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ade4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800aea4 <__ieee754_powf+0x584>
 800ade8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800adec:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aea8 <__ieee754_powf+0x588>
 800adf0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800adf4:	eeb0 6a66 	vmov.f32	s12, s13
 800adf8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800adfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae00:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ae04:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ae08:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ae0c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ae10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae18:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae1c:	ee10 3a10 	vmov	r3, s0
 800ae20:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ae24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae28:	da1f      	bge.n	800ae6a <__ieee754_powf+0x54a>
 800ae2a:	f000 f84b 	bl	800aec4 <scalbnf>
 800ae2e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ae32:	e58d      	b.n	800a950 <__ieee754_powf+0x30>
 800ae34:	4a1d      	ldr	r2, [pc, #116]	; (800aeac <__ieee754_powf+0x58c>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	dd07      	ble.n	800ae4a <__ieee754_powf+0x52a>
 800ae3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae42:	bf4c      	ite	mi
 800ae44:	2001      	movmi	r0, #1
 800ae46:	2000      	movpl	r0, #0
 800ae48:	e622      	b.n	800aa90 <__ieee754_powf+0x170>
 800ae4a:	d108      	bne.n	800ae5e <__ieee754_powf+0x53e>
 800ae4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae50:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ae54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae58:	f6ff af7a 	blt.w	800ad50 <__ieee754_powf+0x430>
 800ae5c:	e7ed      	b.n	800ae3a <__ieee754_powf+0x51a>
 800ae5e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ae62:	f73f af75 	bgt.w	800ad50 <__ieee754_powf+0x430>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e78c      	b.n	800ad84 <__ieee754_powf+0x464>
 800ae6a:	ee00 3a10 	vmov	s0, r3
 800ae6e:	e7de      	b.n	800ae2e <__ieee754_powf+0x50e>
 800ae70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae74:	e56c      	b.n	800a950 <__ieee754_powf+0x30>
 800ae76:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aeb0 <__ieee754_powf+0x590>
 800ae7a:	e569      	b.n	800a950 <__ieee754_powf+0x30>
 800ae7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae80:	e566      	b.n	800a950 <__ieee754_powf+0x30>
 800ae82:	2600      	movs	r6, #0
 800ae84:	e591      	b.n	800a9aa <__ieee754_powf+0x8a>
 800ae86:	bf00      	nop
 800ae88:	ff800000 	.word	0xff800000
 800ae8c:	3f317218 	.word	0x3f317218
 800ae90:	3f317200 	.word	0x3f317200
 800ae94:	35bfbe8c 	.word	0x35bfbe8c
 800ae98:	b5ddea0e 	.word	0xb5ddea0e
 800ae9c:	3331bb4c 	.word	0x3331bb4c
 800aea0:	388ab355 	.word	0x388ab355
 800aea4:	bb360b61 	.word	0xbb360b61
 800aea8:	3e2aaaab 	.word	0x3e2aaaab
 800aeac:	43160000 	.word	0x43160000
 800aeb0:	00000000 	.word	0x00000000

0800aeb4 <fabsf>:
 800aeb4:	ee10 3a10 	vmov	r3, s0
 800aeb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aebc:	ee00 3a10 	vmov	s0, r3
 800aec0:	4770      	bx	lr
	...

0800aec4 <scalbnf>:
 800aec4:	ee10 3a10 	vmov	r3, s0
 800aec8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800aecc:	d02b      	beq.n	800af26 <scalbnf+0x62>
 800aece:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aed2:	d302      	bcc.n	800aeda <scalbnf+0x16>
 800aed4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aed8:	4770      	bx	lr
 800aeda:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800aede:	d123      	bne.n	800af28 <scalbnf+0x64>
 800aee0:	4b24      	ldr	r3, [pc, #144]	; (800af74 <scalbnf+0xb0>)
 800aee2:	eddf 7a25 	vldr	s15, [pc, #148]	; 800af78 <scalbnf+0xb4>
 800aee6:	4298      	cmp	r0, r3
 800aee8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aeec:	db17      	blt.n	800af1e <scalbnf+0x5a>
 800aeee:	ee10 3a10 	vmov	r3, s0
 800aef2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aef6:	3a19      	subs	r2, #25
 800aef8:	f24c 3150 	movw	r1, #50000	; 0xc350
 800aefc:	4288      	cmp	r0, r1
 800aefe:	dd15      	ble.n	800af2c <scalbnf+0x68>
 800af00:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800af7c <scalbnf+0xb8>
 800af04:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800af80 <scalbnf+0xbc>
 800af08:	ee10 3a10 	vmov	r3, s0
 800af0c:	eeb0 7a67 	vmov.f32	s14, s15
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfb8      	it	lt
 800af14:	eef0 7a66 	vmovlt.f32	s15, s13
 800af18:	ee27 0a87 	vmul.f32	s0, s15, s14
 800af1c:	4770      	bx	lr
 800af1e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800af84 <scalbnf+0xc0>
 800af22:	ee27 0a80 	vmul.f32	s0, s15, s0
 800af26:	4770      	bx	lr
 800af28:	0dd2      	lsrs	r2, r2, #23
 800af2a:	e7e5      	b.n	800aef8 <scalbnf+0x34>
 800af2c:	4410      	add	r0, r2
 800af2e:	28fe      	cmp	r0, #254	; 0xfe
 800af30:	dce6      	bgt.n	800af00 <scalbnf+0x3c>
 800af32:	2800      	cmp	r0, #0
 800af34:	dd06      	ble.n	800af44 <scalbnf+0x80>
 800af36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af3a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800af3e:	ee00 3a10 	vmov	s0, r3
 800af42:	4770      	bx	lr
 800af44:	f110 0f16 	cmn.w	r0, #22
 800af48:	da09      	bge.n	800af5e <scalbnf+0x9a>
 800af4a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800af84 <scalbnf+0xc0>
 800af4e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800af88 <scalbnf+0xc4>
 800af52:	ee10 3a10 	vmov	r3, s0
 800af56:	eeb0 7a67 	vmov.f32	s14, s15
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	e7d9      	b.n	800af12 <scalbnf+0x4e>
 800af5e:	3019      	adds	r0, #25
 800af60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af64:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800af68:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800af8c <scalbnf+0xc8>
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	e7d7      	b.n	800af22 <scalbnf+0x5e>
 800af72:	bf00      	nop
 800af74:	ffff3cb0 	.word	0xffff3cb0
 800af78:	4c000000 	.word	0x4c000000
 800af7c:	7149f2ca 	.word	0x7149f2ca
 800af80:	f149f2ca 	.word	0xf149f2ca
 800af84:	0da24260 	.word	0x0da24260
 800af88:	8da24260 	.word	0x8da24260
 800af8c:	33000000 	.word	0x33000000

0800af90 <with_errnof>:
 800af90:	b513      	push	{r0, r1, r4, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af98:	f7fe fe8a 	bl	8009cb0 <__errno>
 800af9c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800afa0:	6004      	str	r4, [r0, #0]
 800afa2:	b002      	add	sp, #8
 800afa4:	bd10      	pop	{r4, pc}

0800afa6 <xflowf>:
 800afa6:	b130      	cbz	r0, 800afb6 <xflowf+0x10>
 800afa8:	eef1 7a40 	vneg.f32	s15, s0
 800afac:	ee27 0a80 	vmul.f32	s0, s15, s0
 800afb0:	2022      	movs	r0, #34	; 0x22
 800afb2:	f7ff bfed 	b.w	800af90 <with_errnof>
 800afb6:	eef0 7a40 	vmov.f32	s15, s0
 800afba:	e7f7      	b.n	800afac <xflowf+0x6>

0800afbc <__math_uflowf>:
 800afbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afc4 <__math_uflowf+0x8>
 800afc0:	f7ff bff1 	b.w	800afa6 <xflowf>
 800afc4:	10000000 	.word	0x10000000

0800afc8 <__math_oflowf>:
 800afc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afd0 <__math_oflowf+0x8>
 800afcc:	f7ff bfeb 	b.w	800afa6 <xflowf>
 800afd0:	70000000 	.word	0x70000000

0800afd4 <__ieee754_sqrtf>:
 800afd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800afd8:	4770      	bx	lr
	...

0800afdc <_init>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	bf00      	nop
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr

0800afe8 <_fini>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr
