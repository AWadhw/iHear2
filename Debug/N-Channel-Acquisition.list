
N-Channel-Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b664  0800b664  00020480  2**0
                  CONTENTS
  4 .ARM          00000008  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b66c  0800b66c  00020480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  0800b674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028c4  20000480  0800baf4  00020480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d44  0800baf4  00022d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117ae  00000000  00000000  00020572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f2  00000000  00000000  00031d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c01  00000000  00000000  00035fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a75  00000000  00000000  00036be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001651c  00000000  00000000  00050656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d6d1  00000000  00000000  00066b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a74  00000000  00000000  000f4244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f8cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000480 	.word	0x20000480
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b280 	.word	0x0800b280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000484 	.word	0x20000484
 80001dc:	0800b280 	.word	0x0800b280

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <sd_card_init>:
static FRESULT fres;
static FATFS FatFs;
static FIL fil; 		//File handle

void sd_card_init()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//	mounting an sd card
	fres = f_mount(&FatFs, "", 1);
 8000590:	2201      	movs	r2, #1
 8000592:	490c      	ldr	r1, [pc, #48]	; (80005c4 <sd_card_init+0x38>)
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <sd_card_init+0x3c>)
 8000596:	f006 fb0b 	bl	8006bb0 <f_mount>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <sd_card_init+0x40>)
 80005a0:	701a      	strb	r2, [r3, #0]
	if(fres != 0)
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <sd_card_init+0x40>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <sd_card_init+0x2c>
	{
		printf("error in mounting an sd card: %d \n", fres);
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <sd_card_init+0x40>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <sd_card_init+0x44>)
 80005b2:	f009 f9bd 	bl	8009930 <iprintf>
		while(1);
 80005b6:	e7fe      	b.n	80005b6 <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <sd_card_init+0x48>)
 80005ba:	f009 fa1f 	bl	80099fc <puts>
	}
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	0800b298 	.word	0x0800b298
 80005c8:	200004a0 	.word	0x200004a0
 80005cc:	2000049d 	.word	0x2000049d
 80005d0:	0800b29c 	.word	0x0800b29c
 80005d4:	0800b2c0 	.word	0x0800b2c0

080005d8 <sd_demo>:

void sd_demo(void) {
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
	    //Let's get some statistics from the SD card
	    DWORD free_clusters, free_sectors, total_sectors;

	    FATFS* getFreeFs;

	    fres = f_getfree("", &free_clusters, &getFreeFs);
 80005de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e6:	4619      	mov	r1, r3
 80005e8:	484d      	ldr	r0, [pc, #308]	; (8000720 <sd_demo+0x148>)
 80005ea:	f007 f841 	bl	8007670 <f_getfree>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <sd_demo+0x14c>)
 80005f4:	701a      	strb	r2, [r3, #0]
	    if (fres != FR_OK) {
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <sd_demo+0x14c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <sd_demo+0x34>
	  	myprintf("f_getfree error (%i)\r\n", fres);
 80005fe:	4b49      	ldr	r3, [pc, #292]	; (8000724 <sd_demo+0x14c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	4848      	ldr	r0, [pc, #288]	; (8000728 <sd_demo+0x150>)
 8000606:	f000 f8d1 	bl	80007ac <myprintf>
	  	while(1);
 800060a:	e7fe      	b.n	800060a <sd_demo+0x32>
	    }

	    //Formula comes from ChaN's documentation
	    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	3b02      	subs	r3, #2
 8000612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000614:	8952      	ldrh	r2, [r2, #10]
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
	    free_sectors = free_clusters * getFreeFs->csize;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	895b      	ldrh	r3, [r3, #10]
 8000620:	461a      	mov	r2, r3
 8000622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000624:	fb02 f303 	mul.w	r3, r2, r3
 8000628:	633b      	str	r3, [r7, #48]	; 0x30

	    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800062a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800062c:	0859      	lsrs	r1, r3, #1
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	461a      	mov	r2, r3
 8000634:	483d      	ldr	r0, [pc, #244]	; (800072c <sd_demo+0x154>)
 8000636:	f000 f8b9 	bl	80007ac <myprintf>

	    //Now let's try to open file "test.txt"
	    fres = f_open(&fil, "test.txt", FA_READ);
 800063a:	2201      	movs	r2, #1
 800063c:	493c      	ldr	r1, [pc, #240]	; (8000730 <sd_demo+0x158>)
 800063e:	483d      	ldr	r0, [pc, #244]	; (8000734 <sd_demo+0x15c>)
 8000640:	f006 fafc 	bl	8006c3c <f_open>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <sd_demo+0x14c>)
 800064a:	701a      	strb	r2, [r3, #0]
	    if (fres != FR_OK) {
 800064c:	4b35      	ldr	r3, [pc, #212]	; (8000724 <sd_demo+0x14c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <sd_demo+0x84>
	  	myprintf("f_open error (%i)\r\n");
 8000654:	4838      	ldr	r0, [pc, #224]	; (8000738 <sd_demo+0x160>)
 8000656:	f000 f8a9 	bl	80007ac <myprintf>
	  	while(1);
 800065a:	e7fe      	b.n	800065a <sd_demo+0x82>
	    }
	    myprintf("I was able to open 'test.txt' for reading!\r\n");
 800065c:	4837      	ldr	r0, [pc, #220]	; (800073c <sd_demo+0x164>)
 800065e:	f000 f8a5 	bl	80007ac <myprintf>
	    //Read 30 bytes from "test.txt" on the SD card
	    BYTE readBuf[30];

	    //We can either use f_read OR f_gets to get data out of files
	    //f_gets is a wrapper on f_read that does some string formatting for us
	    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4a33      	ldr	r2, [pc, #204]	; (8000734 <sd_demo+0x15c>)
 8000666:	211e      	movs	r1, #30
 8000668:	4618      	mov	r0, r3
 800066a:	f007 f8b6 	bl	80077da <f_gets>
 800066e:	62f8      	str	r0, [r7, #44]	; 0x2c
	    if(rres != 0) {
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	2b00      	cmp	r3, #0
 8000674:	d005      	beq.n	8000682 <sd_demo+0xaa>
	  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4831      	ldr	r0, [pc, #196]	; (8000740 <sd_demo+0x168>)
 800067c:	f000 f896 	bl	80007ac <myprintf>
 8000680:	e005      	b.n	800068e <sd_demo+0xb6>
	    } else {
	  	myprintf("f_gets error (%i)\r\n", fres);
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <sd_demo+0x14c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	482e      	ldr	r0, [pc, #184]	; (8000744 <sd_demo+0x16c>)
 800068a:	f000 f88f 	bl	80007ac <myprintf>
	    }

	    //Be a tidy kiwi - don't forget to close your file!
	    f_close(&fil);
 800068e:	4829      	ldr	r0, [pc, #164]	; (8000734 <sd_demo+0x15c>)
 8000690:	f006 ffc4 	bl	800761c <f_close>

	    //Now let's try and write a file "write.txt"
	    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000694:	221a      	movs	r2, #26
 8000696:	492c      	ldr	r1, [pc, #176]	; (8000748 <sd_demo+0x170>)
 8000698:	4826      	ldr	r0, [pc, #152]	; (8000734 <sd_demo+0x15c>)
 800069a:	f006 facf 	bl	8006c3c <f_open>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <sd_demo+0x14c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	    if(fres == FR_OK) {
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <sd_demo+0x14c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d103      	bne.n	80006b6 <sd_demo+0xde>
	  	myprintf("I was able to open 'write.txt' for writing\r\n");
 80006ae:	4827      	ldr	r0, [pc, #156]	; (800074c <sd_demo+0x174>)
 80006b0:	f000 f87c 	bl	80007ac <myprintf>
 80006b4:	e005      	b.n	80006c2 <sd_demo+0xea>
	    } else {
	  	myprintf("f_open error (%i)\r\n", fres);
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <sd_demo+0x14c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	481e      	ldr	r0, [pc, #120]	; (8000738 <sd_demo+0x160>)
 80006be:	f000 f875 	bl	80007ac <myprintf>
	    }

	    //Copy in a string
	    strncpy((char*)readBuf, "a new file is made!", 19);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4a22      	ldr	r2, [pc, #136]	; (8000750 <sd_demo+0x178>)
 80006c6:	461c      	mov	r4, r3
 80006c8:	4615      	mov	r5, r2
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	682b      	ldr	r3, [r5, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	8022      	strh	r2, [r4, #0]
 80006d4:	3402      	adds	r4, #2
 80006d6:	0c1b      	lsrs	r3, r3, #16
 80006d8:	7023      	strb	r3, [r4, #0]
	    UINT bytesWrote;
	    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80006da:	463b      	mov	r3, r7
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	2213      	movs	r2, #19
 80006e0:	4814      	ldr	r0, [pc, #80]	; (8000734 <sd_demo+0x15c>)
 80006e2:	f006 fda8 	bl	8007236 <f_write>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <sd_demo+0x14c>)
 80006ec:	701a      	strb	r2, [r3, #0]
	    if(fres == FR_OK) {
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <sd_demo+0x14c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <sd_demo+0x12a>
	  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <sd_demo+0x17c>)
 80006fc:	f000 f856 	bl	80007ac <myprintf>
 8000700:	e002      	b.n	8000708 <sd_demo+0x130>
	    } else {
	  	myprintf("f_write error (%i)\r\n");
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <sd_demo+0x180>)
 8000704:	f000 f852 	bl	80007ac <myprintf>
	    }

	    //Be a tidy kiwi - don't forget to close your file!
	    f_close(&fil);
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <sd_demo+0x15c>)
 800070a:	f006 ff87 	bl	800761c <f_close>

	    //We're done, so de-mount the drive
	    f_mount(NULL, "", 0);
 800070e:	2200      	movs	r2, #0
 8000710:	4903      	ldr	r1, [pc, #12]	; (8000720 <sd_demo+0x148>)
 8000712:	2000      	movs	r0, #0
 8000714:	f006 fa4c 	bl	8006bb0 <f_mount>
}
 8000718:	bf00      	nop
 800071a:	3738      	adds	r7, #56	; 0x38
 800071c:	46bd      	mov	sp, r7
 800071e:	bdb0      	pop	{r4, r5, r7, pc}
 8000720:	0800b298 	.word	0x0800b298
 8000724:	2000049d 	.word	0x2000049d
 8000728:	0800b2e4 	.word	0x0800b2e4
 800072c:	0800b2fc 	.word	0x0800b2fc
 8000730:	0800b344 	.word	0x0800b344
 8000734:	200006d0 	.word	0x200006d0
 8000738:	0800b350 	.word	0x0800b350
 800073c:	0800b364 	.word	0x0800b364
 8000740:	0800b394 	.word	0x0800b394
 8000744:	0800b3c0 	.word	0x0800b3c0
 8000748:	0800b3d4 	.word	0x0800b3d4
 800074c:	0800b3e0 	.word	0x0800b3e0
 8000750:	0800b410 	.word	0x0800b410
 8000754:	0800b424 	.word	0x0800b424
 8000758:	0800b448 	.word	0x0800b448

0800075c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000764:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000768:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000774:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000778:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800077c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00b      	beq.n	800079c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000784:	e000      	b.n	8000788 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000786:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000788:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000792:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800079c:	687b      	ldr	r3, [r7, #4]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80007ac:	b40f      	push	{r0, r1, r2, r3}
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <myprintf+0x44>)
 80007c4:	f009 f990 	bl	8009ae8 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <myprintf+0x44>)
 80007ca:	f7ff fd09 	bl	80001e0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007da:	4905      	ldr	r1, [pc, #20]	; (80007f0 <myprintf+0x44>)
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <myprintf+0x48>)
 80007de:	f003 fbec 	bl	8003fba <HAL_UART_Transmit>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ec:	b004      	add	sp, #16
 80007ee:	4770      	bx	lr
 80007f0:	20002a54 	.word	0x20002a54
 80007f4:	20000a08 	.word	0x20000a08

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fcda 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f836 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 f966 	bl	8000ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000808:	f000 f944 	bl	8000a94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800080c:	f000 f918 	bl	8000a40 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 8000810:	f000 f8b2 	bl	8000978 <MX_I2S2_Init>
  MX_CRC_Init();
 8000814:	f000 f894 	bl	8000940 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000818:	f007 f878 	bl	800790c <MX_PDM2PCM_Init>
  MX_SPI5_Init();
 800081c:	f000 f8da 	bl	80009d4 <MX_SPI5_Init>
  MX_FATFS_Init();
 8000820:	f003 ff40 	bl	80046a4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, &dataIn_PDM[0], 64); //size in bytes so we divide by 2
 8000824:	2240      	movs	r2, #64	; 0x40
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <main+0x60>)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <main+0x64>)
 800082a:	f001 fcef 	bl	800220c <HAL_I2S_Receive_DMA>
  /*BELOW ADDED FOR SD_CARD*/
  sd_card_init();
 800082e:	f7ff fead 	bl	800058c <sd_card_init>
  PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <main+0x68>)
 8000834:	490b      	ldr	r1, [pc, #44]	; (8000864 <main+0x6c>)
 8000836:	4808      	ldr	r0, [pc, #32]	; (8000858 <main+0x60>)
 8000838:	f008 ff5e 	bl	80096f8 <PDM_Filter>
  //dump_audio_content((uint8_t*)processedData, WAV_WRITE_SAMPLE_COUNT);
  sd_demo();
 800083c:	f7ff fecc 	bl	80005d8 <sd_demo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World \n");
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x70>)
 8000842:	f009 f8db 	bl	80099fc <puts>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000846:	2120      	movs	r1, #32
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <main+0x74>)
 800084a:	f001 fb84 	bl	8001f56 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f000 fd21 	bl	8001298 <HAL_Delay>
	  printf("Hello World \n");
 8000856:	e7f3      	b.n	8000840 <main+0x48>
 8000858:	20000a4c 	.word	0x20000a4c
 800085c:	20000908 	.word	0x20000908
 8000860:	20002ba4 	.word	0x20002ba4
 8000864:	20001a50 	.word	0x20001a50
 8000868:	0800b4ec 	.word	0x0800b4ec
 800086c:	40020000 	.word	0x40020000

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f009 f9d6 	bl	8009c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SystemClock_Config+0xc8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <SystemClock_Config+0xc8>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <SystemClock_Config+0xcc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a20      	ldr	r2, [pc, #128]	; (800093c <SystemClock_Config+0xcc>)
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <SystemClock_Config+0xcc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008e4:	2360      	movs	r3, #96	; 0x60
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f8f9 	bl	8002aec <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000900:	f000 f9a6 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2103      	movs	r1, #3
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fb5b 	bl	8002fdc <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800092c:	f000 f990 	bl	8000c50 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_CRC_Init+0x30>)
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <MX_CRC_Init+0x34>)
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_CRC_Init+0x30>)
 800094c:	f000 fdd9 	bl	8001502 <HAL_CRC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000956:	f000 f97b 	bl	8000c50 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <MX_CRC_Init+0x30>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <MX_CRC_Init+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000900 	.word	0x20000900
 8000974:	40023000 	.word	0x40023000

08000978 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_I2S2_Init+0x54>)
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <MX_I2S2_Init+0x58>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2S2_Init+0x54>)
 8000984:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000988:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_I2S2_Init+0x54>)
 800098c:	2210      	movs	r2, #16
 800098e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_I2S2_Init+0x54>)
 8000992:	2201      	movs	r2, #1
 8000994:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_I2S2_Init+0x54>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_I2S2_Init+0x54>)
 800099e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009a2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_I2S2_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_I2S2_Init+0x54>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_I2S2_Init+0x54>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_I2S2_Init+0x54>)
 80009b8:	f001 fae8 	bl	8001f8c <HAL_I2S_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80009c2:	f000 f945 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000908 	.word	0x20000908
 80009d0:	40003800 	.word	0x40003800

080009d4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_SPI5_Init+0x64>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <MX_SPI5_Init+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_SPI5_Init+0x64>)
 80009e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_SPI5_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_SPI5_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_SPI5_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_SPI5_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a08:	2230      	movs	r2, #48	; 0x30
 8000a0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a20:	220a      	movs	r2, #10
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_SPI5_Init+0x64>)
 8000a26:	f002 fe49 	bl	80036bc <HAL_SPI_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a30:	f000 f90e 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200009b0 	.word	0x200009b0
 8000a3c:	40015000 	.word	0x40015000

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART2_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a78:	f003 fa52 	bl	8003f20 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f8e5 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000a08 	.word	0x20000a08
 8000a90:	40004400 	.word	0x40004400

08000a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_DMA_Init+0x3c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <MX_DMA_Init+0x3c>)
 8000aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_DMA_Init+0x3c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	200e      	movs	r0, #14
 8000abc:	f000 fceb 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ac0:	200e      	movs	r0, #14
 8000ac2:	f000 fd04 	bl	80014ce <HAL_NVIC_EnableIRQ>

}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0xfc>)
 8000b60:	f001 f9e0 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b6a:	f001 f9db 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0x104>)
 8000b86:	f001 f849 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_GPIO_Init+0xfc>)
 8000ba2:	f001 f83b 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000bbe:	f001 f82d 	bl	8001c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40020800 	.word	0x40020800

08000bdc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e009      	b.n	8000c02 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	60ba      	str	r2, [r7, #8]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fdb0 	bl	800075c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbf1      	blt.n	8000bee <_write+0x12>
	}
	return len;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	//sample_i2s = dataIn_PDM[0];
	PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_I2S_RxCpltCallback+0x28>)
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <HAL_I2S_RxCpltCallback+0x2c>)
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <HAL_I2S_RxCpltCallback+0x30>)
 8000c22:	f008 fd69 	bl	80096f8 <PDM_Filter>
	//MX_PDM2PCM_Process(&data_i2s[0], &processedData[0]);
	myData = processedData[0];
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_I2S_RxCpltCallback+0x2c>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_I2S_RxCpltCallback+0x34>)
 8000c2c:	801a      	strh	r2, [r3, #0]
	full_i2s = 1;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_I2S_RxCpltCallback+0x38>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20002ba4 	.word	0x20002ba4
 8000c40:	20001a50 	.word	0x20001a50
 8000c44:	20000a4c 	.word	0x20000a4c
 8000c48:	20001a4c 	.word	0x20001a4c
 8000c4c:	20002a50 	.word	0x20002a50

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c9a:	2007      	movs	r0, #7
 8000c9c:	f000 fbf0 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_CRC_MspInit+0x3c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10d      	bne.n	8000cda <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_CRC_MspInit+0x40>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_CRC_MspInit+0x40>)
 8000cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_CRC_MspInit+0x40>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023000 	.word	0x40023000
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b090      	sub	sp, #64	; 0x40
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <HAL_I2S_MspInit+0x15c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	f040 808f 	bne.w	8000e44 <HAL_I2S_MspInit+0x154>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8000d2a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000d2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 8000d30:	2307      	movs	r3, #7
 8000d32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 fb6d 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8000d48:	f7ff ff82 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a3e      	ldr	r2, [pc, #248]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a30      	ldr	r2, [pc, #192]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_I2S_MspInit+0x160>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da0:	2308      	movs	r3, #8
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db0:	2305      	movs	r3, #5
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	4826      	ldr	r0, [pc, #152]	; (8000e54 <HAL_I2S_MspInit+0x164>)
 8000dbc:	f000 ff2e 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000dc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481e      	ldr	r0, [pc, #120]	; (8000e58 <HAL_I2S_MspInit+0x168>)
 8000dde:	f000 ff1d 	bl	8001c1c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000de4:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <HAL_I2S_MspInit+0x170>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e20:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e2a:	f000 fb87 	bl	800153c <HAL_DMA_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8000e34:	f7ff ff0c 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_I2S_MspInit+0x16c>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3740      	adds	r7, #64	; 0x40
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40003800 	.word	0x40003800
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	20000950 	.word	0x20000950
 8000e60:	40026058 	.word	0x40026058

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_SPI_MspInit+0xc0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d14a      	bne.n	8000f1c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    PA12     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000eea:	2306      	movs	r3, #6
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <HAL_SPI_MspInit+0xc8>)
 8000ef6:	f000 fe91 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000efa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_SPI_MspInit+0xcc>)
 8000f18:	f000 fe80 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40015000 	.word	0x40015000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12b      	bne.n	8000fae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8e:	230c      	movs	r3, #12
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000faa:	f000 fe37 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f922 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Stream3_IRQHandler+0x10>)
 800101e:	f000 fb93 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000950 	.word	0x20000950

0800102c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e00a      	b.n	8001054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103e:	f3af 8000 	nop.w
 8001042:	4601      	mov	r1, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	b2ca      	uxtb	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf0      	blt.n	800103e <_read+0x12>
  }

  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108e:	605a      	str	r2, [r3, #4]
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f008 fde4 	bl	8009ccc <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20020000 	.word	0x20020000
 8001130:	00000400 	.word	0x00000400
 8001134:	20002b54 	.word	0x20002b54
 8001138:	20002d48 	.word	0x20002d48

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001166:	490e      	ldr	r1, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800117c:	4c0b      	ldr	r4, [pc, #44]	; (80011ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800118a:	f7ff ffd7 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f008 fda3 	bl	8009cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb31 	bl	80007f8 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 80011a4:	0800b674 	.word	0x0800b674
  ldr r2, =_sbss
 80011a8:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 80011ac:	20002d44 	.word	0x20002d44

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <HAL_Init+0x40>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_Init+0x40>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x40>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f94f 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fd38 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f967 	bl	80014ea <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001234:	f000 f92f 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000400 	.word	0x20000400
 8001250:	20000408 	.word	0x20000408
 8001254:	20000404 	.word	0x20000404

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000408 	.word	0x20000408
 800127c:	20002b58 	.word	0x20002b58

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20002b58 	.word	0x20002b58

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000408 	.word	0x20000408

080012e0 <__NVIC_SetPriorityGrouping>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff29 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff3e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e00e      	b.n	8001532 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	795b      	ldrb	r3, [r3, #5]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fbc1 	bl	8000cac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fe9a 	bl	8001280 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e099      	b.n	800168c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001578:	e00f      	b.n	800159a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157a:	f7ff fe81 	bl	8001280 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b05      	cmp	r3, #5
 8001586:	d908      	bls.n	800159a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e078      	b.n	800168c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e8      	bne.n	800157a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_DMA_Init+0x158>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4313      	orrs	r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f023 0307 	bic.w	r3, r3, #7
 800161a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	2b04      	cmp	r3, #4
 800162c:	d117      	bne.n	800165e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa6f 	bl	8001b24 <DMA_CheckFifoParam>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800165a:	2301      	movs	r3, #1
 800165c:	e016      	b.n	800168c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fa26 	bl	8001ab8 <DMA_CalcBaseAndBitshift>
 800166c:	4603      	mov	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	223f      	movs	r2, #63	; 0x3f
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f010803f 	.word	0xf010803f

08001698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_DMA_Start_IT+0x26>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e040      	b.n	8001740 <HAL_DMA_Start_IT+0xa8>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d12f      	bne.n	8001732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2202      	movs	r2, #2
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f9b8 	bl	8001a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	223f      	movs	r2, #63	; 0x3f
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0216 	orr.w	r2, r2, #22
 8001706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0208 	orr.w	r2, r2, #8
 800171e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e005      	b.n	800173e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800173a:	2302      	movs	r3, #2
 800173c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800173e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001754:	4b8e      	ldr	r3, [pc, #568]	; (8001990 <HAL_DMA_IRQHandler+0x248>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a8e      	ldr	r2, [pc, #568]	; (8001994 <HAL_DMA_IRQHandler+0x24c>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a9b      	lsrs	r3, r3, #10
 8001760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	2208      	movs	r2, #8
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2208      	movs	r2, #8
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2204      	movs	r2, #4
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	2210      	movs	r2, #16
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03c      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2210      	movs	r2, #16
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e01f      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e016      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2220      	movs	r2, #32
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808f 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8087 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2220      	movs	r2, #32
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d136      	bne.n	8001960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_IRQHandler+0x1da>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07e      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
        }
        return;
 800195e:	e079      	b.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01d      	beq.n	80019aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	2b00      	cmp	r3, #0
 8001982:	d031      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e02c      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
 800198e:	bf00      	nop
 8001990:	20000400 	.word	0x20000400
 8001994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d023      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e01e      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d032      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d307      	bcc.n	8001a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f2      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x2cc>
 8001a2e:	e000      	b.n	8001a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
 8001a52:	e000      	b.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a54:	bf00      	nop
    }
  }
}
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d108      	bne.n	8001a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a9a:	e007      	b.n	8001aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3b10      	subs	r3, #16
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <DMA_CalcBaseAndBitshift+0x64>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d909      	bls.n	8001afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
 8001af8:	e007      	b.n	8001b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	aaaaaaab 	.word	0xaaaaaaab
 8001b20:	0800b590 	.word	0x0800b590

08001b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11f      	bne.n	8001b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d856      	bhi.n	8001bf2 <DMA_CheckFifoParam+0xce>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <DMA_CheckFifoParam+0x28>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b6f 	.word	0x08001b6f
 8001b54:	08001b5d 	.word	0x08001b5d
 8001b58:	08001bf3 	.word	0x08001bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d046      	beq.n	8001bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b6c:	e043      	b.n	8001bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b76:	d140      	bne.n	8001bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e03d      	b.n	8001bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b86:	d121      	bne.n	8001bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d837      	bhi.n	8001bfe <DMA_CheckFifoParam+0xda>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <DMA_CheckFifoParam+0x70>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bab 	.word	0x08001bab
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001bbd 	.word	0x08001bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e030      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d025      	beq.n	8001c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bba:	e022      	b.n	8001c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bc4:	d11f      	bne.n	8001c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bca:	e01c      	b.n	8001c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d903      	bls.n	8001bda <DMA_CheckFifoParam+0xb6>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d003      	beq.n	8001be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd8:	e018      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8001bde:	e015      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e00b      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e00a      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e008      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e006      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e004      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
 8001c04:	e002      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	; (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	; (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	041a      	lsls	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	041a      	lsls	r2, r3, #16
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	400b      	ands	r3, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e128      	b.n	80021f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a90      	ldr	r2, [pc, #576]	; (80021f8 <HAL_I2S_Init+0x26c>)
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe fe99 	bl	8000cf0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fd4:	f023 030f 	bic.w	r3, r3, #15
 8001fd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d060      	beq.n	80020ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e001      	b.n	8001ffc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b20      	cmp	r3, #32
 8002002:	d802      	bhi.n	800200a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800200a:	2001      	movs	r0, #1
 800200c:	f001 faf6 	bl	80035fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002010:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201a:	d125      	bne.n	8002068 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	fbb2 f2f3 	udiv	r2, r2, r3
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	3305      	adds	r3, #5
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e01f      	b.n	8002086 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	3305      	adds	r3, #5
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e00e      	b.n	8002086 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	3305      	adds	r3, #5
 8002084:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a5c      	ldr	r2, [pc, #368]	; (80021fc <HAL_I2S_Init+0x270>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	e003      	b.n	80020b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d902      	bls.n	80020c0 <HAL_I2S_Init+0x134>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	2bff      	cmp	r3, #255	; 0xff
 80020be:	d907      	bls.n	80020d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e08f      	b.n	80021f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	ea42 0103 	orr.w	r1, r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020ee:	f023 030f 	bic.w	r3, r3, #15
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6851      	ldr	r1, [r2, #4]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68d2      	ldr	r2, [r2, #12]
 8002100:	4311      	orrs	r1, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6992      	ldr	r2, [r2, #24]
 8002106:	430a      	orrs	r2, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002112:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d161      	bne.n	80021e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_I2S_Init+0x274>)
 8002120:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a37      	ldr	r2, [pc, #220]	; (8002204 <HAL_I2S_Init+0x278>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_I2S_Init+0x1a4>
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_I2S_Init+0x27c>)
 800212e:	e001      	b.n	8002134 <HAL_I2S_Init+0x1a8>
 8002130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4932      	ldr	r1, [pc, #200]	; (8002204 <HAL_I2S_Init+0x278>)
 800213c:	428a      	cmp	r2, r1
 800213e:	d101      	bne.n	8002144 <HAL_I2S_Init+0x1b8>
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_I2S_Init+0x27c>)
 8002142:	e001      	b.n	8002148 <HAL_I2S_Init+0x1bc>
 8002144:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002148:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800214c:	f023 030f 	bic.w	r3, r3, #15
 8002150:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_I2S_Init+0x278>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_I2S_Init+0x1d4>
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <HAL_I2S_Init+0x27c>)
 800215e:	e001      	b.n	8002164 <HAL_I2S_Init+0x1d8>
 8002160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002164:	2202      	movs	r2, #2
 8002166:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_I2S_Init+0x278>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_I2S_Init+0x1ea>
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_I2S_Init+0x27c>)
 8002174:	e001      	b.n	800217a <HAL_I2S_Init+0x1ee>
 8002176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002186:	d003      	beq.n	8002190 <HAL_I2S_Init+0x204>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e001      	b.n	800219c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021ba:	4313      	orrs	r3, r2
 80021bc:	b29a      	uxth	r2, r3
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <HAL_I2S_Init+0x278>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_I2S_Init+0x24c>
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_I2S_Init+0x27c>)
 80021d6:	e001      	b.n	80021dc <HAL_I2S_Init+0x250>
 80021d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021dc:	897a      	ldrh	r2, [r7, #10]
 80021de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	08002525 	.word	0x08002525
 80021fc:	cccccccd 	.word	0xcccccccd
 8002200:	08002639 	.word	0x08002639
 8002204:	40003800 	.word	0x40003800
 8002208:	40003400 	.word	0x40003400

0800220c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_I2S_Receive_DMA+0x1a>
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0a1      	b.n	800236e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_I2S_Receive_DMA+0x2e>
 8002236:	2302      	movs	r3, #2
 8002238:	e099      	b.n	800236e <HAL_I2S_Receive_DMA+0x162>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	e089      	b.n	800236e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2204      	movs	r2, #4
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d002      	beq.n	8002286 <HAL_I2S_Receive_DMA+0x7a>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10a      	bne.n	800229c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	865a      	strh	r2, [r3, #50]	; 0x32
 800229a:	e005      	b.n	80022a8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	88fa      	ldrh	r2, [r7, #6]
 80022a6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	4a32      	ldr	r2, [pc, #200]	; (8002378 <HAL_I2S_Receive_DMA+0x16c>)
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_I2S_Receive_DMA+0x170>)
 80022b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_I2S_Receive_DMA+0x174>)
 80022be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ce:	d10a      	bne.n	80022e6 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	4619      	mov	r1, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80022fe:	f7ff f9cb 	bl	8001698 <HAL_DMA_Start_IT>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00f      	beq.n	8002328 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	f043 0208 	orr.w	r2, r3, #8
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e022      	b.n	800236e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d107      	bne.n	8002346 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002344:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d107      	bne.n	8002364 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	08002403 	.word	0x08002403
 800237c:	080023c1 	.word	0x080023c1
 8002380:	0800241f 	.word	0x0800241f

08002384 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10e      	bne.n	80023f4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7fe fc0d 	bl	8000c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ffc1 	bl	8002398 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0203 	bic.w	r2, r2, #3
 800243a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f043 0208 	orr.w	r2, r3, #8
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff ffa5 	bl	80023ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	1c9a      	adds	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10e      	bne.n	80024be <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff63 	bl	8002384 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	b292      	uxth	r2, r2
 80024da:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10e      	bne.n	800251c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800250c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fb7c 	bl	8000c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b04      	cmp	r3, #4
 800253e:	d13a      	bne.n	80025b6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d109      	bne.n	800255e <I2S_IRQHandler+0x3a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d102      	bne.n	800255e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ffb4 	bl	80024c6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d126      	bne.n	80025b6 <I2S_IRQHandler+0x92>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d11f      	bne.n	80025b6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002584:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0202 	orr.w	r2, r3, #2
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fefb 	bl	80023ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d136      	bne.n	8002630 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d109      	bne.n	80025e0 <I2S_IRQHandler+0xbc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	2b80      	cmp	r3, #128	; 0x80
 80025d8:	d102      	bne.n	80025e0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff45 	bl	800246a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d122      	bne.n	8002630 <I2S_IRQHandler+0x10c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d11b      	bne.n	8002630 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002606:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f043 0204 	orr.w	r2, r3, #4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff febe 	bl	80023ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a92      	ldr	r2, [pc, #584]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002652:	4b92      	ldr	r3, [pc, #584]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002654:	e001      	b.n	800265a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8b      	ldr	r2, [pc, #556]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002670:	4b8a      	ldr	r3, [pc, #552]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002672:	e001      	b.n	8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002684:	d004      	beq.n	8002690 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 8099 	bne.w	80027c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d107      	bne.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f925 	bl	80028f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d107      	bne.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9c8 	bl	8002a54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d13a      	bne.n	8002744 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d035      	beq.n	8002744 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80026e2:	4b6e      	ldr	r3, [pc, #440]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026e4:	e001      	b.n	80026ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80026e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4969      	ldr	r1, [pc, #420]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026f2:	428b      	cmp	r3, r1
 80026f4:	d101      	bne.n	80026fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80026f6:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026f8:	e001      	b.n	80026fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80026fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002702:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002712:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f043 0202 	orr.w	r2, r3, #2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fe34 	bl	80023ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b08      	cmp	r3, #8
 800274c:	f040 80c3 	bne.w	80028d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80bd 	beq.w	80028d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800276a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a49      	ldr	r2, [pc, #292]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002778:	e001      	b.n	800277e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800277a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4944      	ldr	r1, [pc, #272]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002786:	428b      	cmp	r3, r1
 8002788:	d101      	bne.n	800278e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800278c:	e001      	b.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800278e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002796:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fdf6 	bl	80023ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027c0:	e089      	b.n	80028d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d107      	bne.n	80027dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8be 	bl	8002958 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8fd 	bl	80029f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d12f      	bne.n	8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02a      	beq.n	8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002818:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d101      	bne.n	8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002826:	e001      	b.n	800282c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4919      	ldr	r1, [pc, #100]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002834:	428b      	cmp	r3, r1
 8002836:	d101      	bne.n	800283c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800283a:	e001      	b.n	8002840 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800283c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002844:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fda6 	bl	80023ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b08      	cmp	r3, #8
 8002868:	d136      	bne.n	80028d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d031      	beq.n	80028d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002880:	e001      	b.n	8002886 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4902      	ldr	r1, [pc, #8]	; (8002898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800288e:	428b      	cmp	r3, r1
 8002890:	d106      	bne.n	80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002892:	4b02      	ldr	r3, [pc, #8]	; (800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002894:	e006      	b.n	80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002896:	bf00      	nop
 8002898:	40003800 	.word	0x40003800
 800289c:	40003400 	.word	0x40003400
 80028a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f043 0204 	orr.w	r2, r3, #4
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fd6c 	bl	80023ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028d4:	e000      	b.n	80028d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028d6:	bf00      	nop
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c99      	adds	r1, r3, #2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6251      	str	r1, [r2, #36]	; 0x24
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d113      	bne.n	800294e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002934:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ffc9 	bl	80028e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c99      	adds	r1, r3, #2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6251      	str	r1, [r2, #36]	; 0x24
 800296a:	8819      	ldrh	r1, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <I2SEx_TxISR_I2SExt+0x90>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <I2SEx_TxISR_I2SExt+0x22>
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <I2SEx_TxISR_I2SExt+0x94>)
 8002978:	e001      	b.n	800297e <I2SEx_TxISR_I2SExt+0x26>
 800297a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800297e:	460a      	mov	r2, r1
 8002980:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d121      	bne.n	80029de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <I2SEx_TxISR_I2SExt+0x90>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <I2SEx_TxISR_I2SExt+0x50>
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <I2SEx_TxISR_I2SExt+0x94>)
 80029a6:	e001      	b.n	80029ac <I2SEx_TxISR_I2SExt+0x54>
 80029a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	490d      	ldr	r1, [pc, #52]	; (80029e8 <I2SEx_TxISR_I2SExt+0x90>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d101      	bne.n	80029bc <I2SEx_TxISR_I2SExt+0x64>
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <I2SEx_TxISR_I2SExt+0x94>)
 80029ba:	e001      	b.n	80029c0 <I2SEx_TxISR_I2SExt+0x68>
 80029bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff81 	bl	80028e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40003800 	.word	0x40003800
 80029ec:	40003400 	.word	0x40003400

080029f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68d8      	ldr	r0, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	1c99      	adds	r1, r3, #2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a08:	b282      	uxth	r2, r0
 8002a0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d113      	bne.n	8002a4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff4a 	bl	80028e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <I2SEx_RxISR_I2SExt+0x90>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <I2SEx_RxISR_I2SExt+0x16>
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <I2SEx_RxISR_I2SExt+0x94>)
 8002a68:	e001      	b.n	8002a6e <I2SEx_RxISR_I2SExt+0x1a>
 8002a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a6e:	68d8      	ldr	r0, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	1c99      	adds	r1, r3, #2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a7a:	b282      	uxth	r2, r0
 8002a7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d121      	bne.n	8002ada <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <I2SEx_RxISR_I2SExt+0x90>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <I2SEx_RxISR_I2SExt+0x50>
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <I2SEx_RxISR_I2SExt+0x94>)
 8002aa2:	e001      	b.n	8002aa8 <I2SEx_RxISR_I2SExt+0x54>
 8002aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	490d      	ldr	r1, [pc, #52]	; (8002ae4 <I2SEx_RxISR_I2SExt+0x90>)
 8002ab0:	428b      	cmp	r3, r1
 8002ab2:	d101      	bne.n	8002ab8 <I2SEx_RxISR_I2SExt+0x64>
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <I2SEx_RxISR_I2SExt+0x94>)
 8002ab6:	e001      	b.n	8002abc <I2SEx_RxISR_I2SExt+0x68>
 8002ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002abc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ac0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff03 	bl	80028e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40003800 	.word	0x40003800
 8002ae8:	40003400 	.word	0x40003400

08002aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e267      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d075      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d00c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d112      	bne.n	8002b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b2e:	d10b      	bne.n	8002b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	4b7e      	ldr	r3, [pc, #504]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d05b      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x108>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d157      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e242      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x74>
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0xb0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x98>
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6f      	ldr	r2, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6c      	ldr	r2, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0xb0>
 8002b84:	4b69      	ldr	r3, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a68      	ldr	r2, [pc, #416]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fb6c 	bl	8001280 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fb68 	bl	8001280 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e207      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0xc0>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fb58 	bl	8001280 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fb54 	bl	8001280 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1f3      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xe8>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d063      	beq.n	8002cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x152>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1c7      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4937      	ldr	r1, [pc, #220]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	e03a      	b.n	8002cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_OscConfig+0x244>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fb0d 	bl	8001280 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fb09 	bl	8001280 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1a8      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4925      	ldr	r1, [pc, #148]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_OscConfig+0x244>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe faec 	bl	8001280 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe fae8 	bl	8001280 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e187      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d036      	beq.n	8002d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_RCC_OscConfig+0x248>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe facc 	bl	8001280 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe fac8 	bl	8001280 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e167      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_OscConfig+0x240>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x200>
 8002d0a:	e01b      	b.n	8002d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_OscConfig+0x248>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d12:	f7fe fab5 	bl	8001280 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	e00e      	b.n	8002d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fab1 	bl	8001280 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d907      	bls.n	8002d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e150      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	42470000 	.word	0x42470000
 8002d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ea      	bne.n	8002d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8097 	beq.w	8002e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b81      	ldr	r3, [pc, #516]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	4b7d      	ldr	r3, [pc, #500]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a7c      	ldr	r2, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b7a      	ldr	r3, [pc, #488]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b77      	ldr	r3, [pc, #476]	; (8002f60 <HAL_RCC_OscConfig+0x474>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b74      	ldr	r3, [pc, #464]	; (8002f60 <HAL_RCC_OscConfig+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a73      	ldr	r2, [pc, #460]	; (8002f60 <HAL_RCC_OscConfig+0x474>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fa71 	bl	8001280 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7fe fa6d 	bl	8001280 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e10c      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_OscConfig+0x474>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2ea>
 8002dc8:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x324>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x30c>
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5b      	ldr	r2, [pc, #364]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0x324>
 8002df8:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a57      	ldr	r2, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fa32 	bl	8001280 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fa2e 	bl	8001280 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0cb      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ee      	beq.n	8002e20 <HAL_RCC_OscConfig+0x334>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e44:	f7fe fa1c 	bl	8001280 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fa18 	bl	8001280 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0b5      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ee      	bne.n	8002e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a1 	beq.w	8002fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e8a:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d05c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d141      	bne.n	8002f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <HAL_RCC_OscConfig+0x478>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f9ec 	bl	8001280 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe f9e8 	bl	8001280 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e087      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x478>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe f9c1 	bl	8001280 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe f9bd 	bl	8001280 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e05c      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x416>
 8002f20:	e054      	b.n	8002fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_RCC_OscConfig+0x478>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe f9aa 	bl	8001280 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe f9a6 	bl	8001280 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e045      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_OscConfig+0x470>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x444>
 8002f4e:	e03d      	b.n	8002fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e038      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
 8002f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x4ec>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d028      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d121      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d11a      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d111      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0cc      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b68      	ldr	r3, [pc, #416]	; (8003194 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d90c      	bls.n	8003018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b65      	ldr	r3, [pc, #404]	; (8003194 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b63      	ldr	r3, [pc, #396]	; (8003194 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0b8      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003030:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a58      	ldr	r2, [pc, #352]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800303a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a52      	ldr	r2, [pc, #328]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003054:	4b50      	ldr	r3, [pc, #320]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	494d      	ldr	r1, [pc, #308]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d044      	beq.n	80030fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d119      	bne.n	80030ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e07f      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d003      	beq.n	800309a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	2b03      	cmp	r3, #3
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e06f      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e067      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4934      	ldr	r1, [pc, #208]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030cc:	f7fe f8d8 	bl	8001280 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fe f8d4 	bl	8001280 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e04f      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 020c 	and.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1eb      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fc:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_RCC_ClockConfig+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d20c      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e032      	b.n	800318a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4916      	ldr	r1, [pc, #88]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	490e      	ldr	r1, [pc, #56]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003162:	f000 f821 	bl	80031a8 <HAL_RCC_GetSysClockFreq>
 8003166:	4602      	mov	r2, r0
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	490a      	ldr	r1, [pc, #40]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	5ccb      	ldrb	r3, [r1, r3]
 8003176:	fa22 f303 	lsr.w	r3, r2, r3
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f838 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023c00 	.word	0x40023c00
 8003198:	40023800 	.word	0x40023800
 800319c:	0800b578 	.word	0x0800b578
 80031a0:	20000400 	.word	0x20000400
 80031a4:	20000404 	.word	0x20000404

080031a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ac:	b094      	sub	sp, #80	; 0x50
 80031ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	647b      	str	r3, [r7, #68]	; 0x44
 80031b4:	2300      	movs	r3, #0
 80031b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b8:	2300      	movs	r3, #0
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c0:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d00d      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x40>
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	f200 80e1 	bhi.w	8003394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x34>
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031da:	e0db      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b73      	ldr	r3, [pc, #460]	; (80033ac <HAL_RCC_GetSysClockFreq+0x204>)
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031e0:	e0db      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031e2:	4b73      	ldr	r3, [pc, #460]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80031e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e6:	e0d8      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e8:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031f2:	4b6d      	ldr	r3, [pc, #436]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d063      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	2200      	movs	r2, #0
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
 8003208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
 8003212:	2300      	movs	r3, #0
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
 8003216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800321a:	4622      	mov	r2, r4
 800321c:	462b      	mov	r3, r5
 800321e:	f04f 0000 	mov.w	r0, #0
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	0159      	lsls	r1, r3, #5
 8003228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322c:	0150      	lsls	r0, r2, #5
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4621      	mov	r1, r4
 8003234:	1a51      	subs	r1, r2, r1
 8003236:	6139      	str	r1, [r7, #16]
 8003238:	4629      	mov	r1, r5
 800323a:	eb63 0301 	sbc.w	r3, r3, r1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800324c:	4659      	mov	r1, fp
 800324e:	018b      	lsls	r3, r1, #6
 8003250:	4651      	mov	r1, sl
 8003252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003256:	4651      	mov	r1, sl
 8003258:	018a      	lsls	r2, r1, #6
 800325a:	4651      	mov	r1, sl
 800325c:	ebb2 0801 	subs.w	r8, r2, r1
 8003260:	4659      	mov	r1, fp
 8003262:	eb63 0901 	sbc.w	r9, r3, r1
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800327a:	4690      	mov	r8, r2
 800327c:	4699      	mov	r9, r3
 800327e:	4623      	mov	r3, r4
 8003280:	eb18 0303 	adds.w	r3, r8, r3
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	462b      	mov	r3, r5
 8003288:	eb49 0303 	adc.w	r3, r9, r3
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800329a:	4629      	mov	r1, r5
 800329c:	024b      	lsls	r3, r1, #9
 800329e:	4621      	mov	r1, r4
 80032a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032a4:	4621      	mov	r1, r4
 80032a6:	024a      	lsls	r2, r1, #9
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ae:	2200      	movs	r2, #0
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032b8:	f7fc ffea 	bl	8000290 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c4:	e058      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	4611      	mov	r1, r2
 80032d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032d6:	623b      	str	r3, [r7, #32]
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
 80032dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	f04f 0000 	mov.w	r0, #0
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	0159      	lsls	r1, r3, #5
 80032ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f2:	0150      	lsls	r0, r2, #5
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4641      	mov	r1, r8
 80032fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80032fe:	4649      	mov	r1, r9
 8003300:	eb63 0b01 	sbc.w	fp, r3, r1
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003318:	ebb2 040a 	subs.w	r4, r2, sl
 800331c:	eb63 050b 	sbc.w	r5, r3, fp
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	00eb      	lsls	r3, r5, #3
 800332a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332e:	00e2      	lsls	r2, r4, #3
 8003330:	4614      	mov	r4, r2
 8003332:	461d      	mov	r5, r3
 8003334:	4643      	mov	r3, r8
 8003336:	18e3      	adds	r3, r4, r3
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	464b      	mov	r3, r9
 800333c:	eb45 0303 	adc.w	r3, r5, r3
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800334e:	4629      	mov	r1, r5
 8003350:	028b      	lsls	r3, r1, #10
 8003352:	4621      	mov	r1, r4
 8003354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003358:	4621      	mov	r1, r4
 800335a:	028a      	lsls	r2, r1, #10
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003362:	2200      	movs	r2, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	61fa      	str	r2, [r7, #28]
 8003368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336c:	f7fc ff90 	bl	8000290 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4613      	mov	r3, r2
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	3301      	adds	r3, #1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800338a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003392:	e002      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800339c:	4618      	mov	r0, r3
 800339e:	3750      	adds	r7, #80	; 0x50
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	00f42400 	.word	0x00f42400
 80033b0:	007a1200 	.word	0x007a1200

080033b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000400 	.word	0x20000400

080033cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d0:	f7ff fff0 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0a9b      	lsrs	r3, r3, #10
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4903      	ldr	r1, [pc, #12]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	0800b588 	.word	0x0800b588

080033f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033f8:	f7ff ffdc 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0b5b      	lsrs	r3, r3, #13
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	0800b588 	.word	0x0800b588

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003440:	2b00      	cmp	r3, #0
 8003442:	d038      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003444:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800344a:	f7fd ff19 	bl	8001280 <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003452:	f7fd ff15 	bl	8001280 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0bd      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003464:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	071b      	lsls	r3, r3, #28
 8003482:	495a      	ldr	r1, [pc, #360]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800348a:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003490:	f7fd fef6 	bl	8001280 <HAL_GetTick>
 8003494:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003498:	f7fd fef2 	bl	8001280 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e09a      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034aa:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8083 	beq.w	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	4a47      	ldr	r2, [pc, #284]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
 80034d4:	4b45      	ldr	r3, [pc, #276]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fd fec8 	bl	8001280 <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fd fec4 	bl	8001280 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e06c      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02f      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	429a      	cmp	r2, r3
 800352e:	d028      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003530:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d114      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003558:	f7fd fe92 	bl	8001280 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fd fe8e 	bl	8001280 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e034      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0ee      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358e:	d10d      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	4911      	ldr	r1, [pc, #68]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
 80035aa:	e005      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	4909      	ldr	r1, [pc, #36]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7d1a      	ldrb	r2, [r3, #20]
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80035dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	42470068 	.word	0x42470068
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470e40 	.word	0x42470e40
 80035f8:	424711e0 	.word	0x424711e0

080035fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d140      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d131      	bne.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003632:	617b      	str	r3, [r7, #20]
          break;
 8003634:	e031      	b.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003642:	d109      	bne.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364e:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e008      	b.n	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003662:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	099b      	lsrs	r3, r3, #6
 8003672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003684:	0f1b      	lsrs	r3, r3, #28
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
          break;
 8003692:	e002      	b.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
          break;
 8003698:	bf00      	nop
        }
      }
      break;
 800369a:	bf00      	nop
    }
  }
  return frequency;
 800369c:	697b      	ldr	r3, [r7, #20]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	00bb8000 	.word	0x00bb8000
 80036b4:	007a1200 	.word	0x007a1200
 80036b8:	00f42400 	.word	0x00f42400

080036bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07b      	b.n	80037c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036de:	d009      	beq.n	80036f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	61da      	str	r2, [r3, #28]
 80036e6:	e005      	b.n	80036f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fba8 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	ea42 0103 	orr.w	r1, r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f003 0104 	and.w	r1, r3, #4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f003 0210 	and.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b088      	sub	sp, #32
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_SPI_Transmit+0x22>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e126      	b.n	8003a3e <HAL_SPI_Transmit+0x270>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f8:	f7fd fd42 	bl	8001280 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d002      	beq.n	8003814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003812:	e10b      	b.n	8003a2c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_SPI_Transmit+0x52>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003824:	e102      	b.n	8003a2c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2203      	movs	r2, #3
 800382a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386c:	d10f      	bne.n	800388e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d007      	beq.n	80038ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b4:	d14b      	bne.n	800394e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0xf6>
 80038be:	8afb      	ldrh	r3, [r7, #22]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d13e      	bne.n	8003942 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038e8:	e02b      	b.n	8003942 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d112      	bne.n	800391e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	86da      	strh	r2, [r3, #54]	; 0x36
 800391c:	e011      	b.n	8003942 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391e:	f7fd fcaf 	bl	8001280 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d803      	bhi.n	8003936 <HAL_SPI_Transmit+0x168>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003934:	d102      	bne.n	800393c <HAL_SPI_Transmit+0x16e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003940:	e074      	b.n	8003a2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ce      	bne.n	80038ea <HAL_SPI_Transmit+0x11c>
 800394c:	e04c      	b.n	80039e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SPI_Transmit+0x18e>
 8003956:	8afb      	ldrh	r3, [r7, #22]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d140      	bne.n	80039de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003982:	e02c      	b.n	80039de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d113      	bne.n	80039ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039b8:	e011      	b.n	80039de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ba:	f7fd fc61 	bl	8001280 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d803      	bhi.n	80039d2 <HAL_SPI_Transmit+0x204>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d0:	d102      	bne.n	80039d8 <HAL_SPI_Transmit+0x20a>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039dc:	e026      	b.n	8003a2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1cd      	bne.n	8003984 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fa55 	bl	8003e9c <SPI_EndRxTxTransaction>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e000      	b.n	8003a2c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b08c      	sub	sp, #48	; 0x30
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a54:	2301      	movs	r3, #1
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x26>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e18a      	b.n	8003d82 <HAL_SPI_TransmitReceive+0x33c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a74:	f7fd fc04 	bl	8001280 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d00f      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x70>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9c:	d107      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x68>
 8003aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d003      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ab4:	e15b      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x82>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x82>
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ace:	e14e      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d003      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2205      	movs	r2, #5
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	887a      	ldrh	r2, [r7, #2]
 8003b06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d007      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b40:	d178      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x10a>
 8003b4a:	8b7b      	ldrh	r3, [r7, #26]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d166      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b74:	e053      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d11b      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x176>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x176>
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d113      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	1c9a      	adds	r2, r3, #2
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d119      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x1b8>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d014      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	b292      	uxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bfe:	f7fd fb3f 	bl	8001280 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d807      	bhi.n	8003c1e <HAL_SPI_TransmitReceive+0x1d8>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c14:	d003      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c1c:	e0a7      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1a6      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x130>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1a1      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x130>
 8003c32:	e07c      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x1fc>
 8003c3c:	8b7b      	ldrh	r3, [r7, #26]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d16b      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c68:	e057      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d11c      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x26c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_SPI_TransmitReceive+0x26c>
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d114      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d119      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x2ae>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d014      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cf4:	f7fd fac4 	bl	8001280 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d803      	bhi.n	8003d0c <HAL_SPI_TransmitReceive+0x2c6>
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0a:	d102      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x2cc>
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d18:	e029      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1a2      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x224>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d19d      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8b2 	bl	8003e9c <SPI_EndRxTxTransaction>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d4a:	e010      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	e000      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3730      	adds	r7, #48	; 0x30
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d9c:	f7fd fa70 	bl	8001280 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dac:	f7fd fa68 	bl	8001280 <HAL_GetTick>
 8003db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003db2:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	015b      	lsls	r3, r3, #5
 8003db8:	0d1b      	lsrs	r3, r3, #20
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc2:	e054      	b.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dca:	d050      	beq.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dcc:	f7fd fa58 	bl	8001280 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d902      	bls.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d13d      	bne.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfa:	d111      	bne.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e04:	d004      	beq.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d107      	bne.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e28:	d10f      	bne.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e017      	b.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d19b      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000400 	.word	0x20000400

08003e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <SPI_EndRxTxTransaction+0x7c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <SPI_EndRxTxTransaction+0x80>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0d5b      	lsrs	r3, r3, #21
 8003eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec6:	d112      	bne.n	8003eee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff5a 	bl	8003d8c <SPI_WaitFlagStateUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e00f      	b.n	8003f0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d0f2      	beq.n	8003eee <SPI_EndRxTxTransaction+0x52>
 8003f08:	e000      	b.n	8003f0c <SPI_EndRxTxTransaction+0x70>
        break;
 8003f0a:	bf00      	nop
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000400 	.word	0x20000400
 8003f1c:	165e9f81 	.word	0x165e9f81

08003f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e03f      	b.n	8003fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fc fff4 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	; 0x24
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f929 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08a      	sub	sp, #40	; 0x28
 8003fbe:	af02      	add	r7, sp, #8
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d17c      	bne.n	80040d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_UART_Transmit+0x2c>
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e075      	b.n	80040d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_UART_Transmit+0x3e>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e06e      	b.n	80040d6 <HAL_UART_Transmit+0x11c>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2221      	movs	r2, #33	; 0x21
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800400e:	f7fd f937 	bl	8001280 <HAL_GetTick>
 8004012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	88fa      	ldrh	r2, [r7, #6]
 8004018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	88fa      	ldrh	r2, [r7, #6]
 800401e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004028:	d108      	bne.n	800403c <HAL_UART_Transmit+0x82>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e003      	b.n	8004044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800404c:	e02a      	b.n	80040a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f840 	bl	80040de <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e036      	b.n	80040d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10b      	bne.n	8004086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800407c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	3302      	adds	r3, #2
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e007      	b.n	8004096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3301      	adds	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1cf      	bne.n	800404e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2140      	movs	r1, #64	; 0x40
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f810 	bl	80040de <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e006      	b.n	80040d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b090      	sub	sp, #64	; 0x40
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ee:	e050      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f6:	d04c      	beq.n	8004192 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0x30>
 80040fe:	f7fd f8bf 	bl	8001280 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410a:	429a      	cmp	r2, r3
 800410c:	d241      	bcs.n	8004192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800412e:	637a      	str	r2, [r7, #52]	; 0x34
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	613b      	str	r3, [r7, #16]
   return(result);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	63bb      	str	r3, [r7, #56]	; 0x38
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004162:	623a      	str	r2, [r7, #32]
 8004164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	69f9      	ldr	r1, [r7, #28]
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e00f      	b.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d09f      	beq.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3740      	adds	r7, #64	; 0x40
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b0c0      	sub	sp, #256	; 0x100
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	68d9      	ldr	r1, [r3, #12]
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	ea40 0301 	orr.w	r3, r0, r1
 80041e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004214:	f021 010c 	bic.w	r1, r1, #12
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004222:	430b      	orrs	r3, r1
 8004224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004236:	6999      	ldr	r1, [r3, #24]
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	ea40 0301 	orr.w	r3, r0, r1
 8004242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8f      	ldr	r3, [pc, #572]	; (8004488 <UART_SetConfig+0x2cc>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d005      	beq.n	800425c <UART_SetConfig+0xa0>
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b8d      	ldr	r3, [pc, #564]	; (800448c <UART_SetConfig+0x2d0>)
 8004258:	429a      	cmp	r2, r3
 800425a:	d104      	bne.n	8004266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7ff f8ca 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 8004260:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004264:	e003      	b.n	800426e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004266:	f7ff f8b1 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 800426a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	f040 810c 	bne.w	8004494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004286:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800428a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	1891      	adds	r1, r2, r2
 8004294:	65b9      	str	r1, [r7, #88]	; 0x58
 8004296:	415b      	adcs	r3, r3
 8004298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800429a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800429e:	4621      	mov	r1, r4
 80042a0:	eb12 0801 	adds.w	r8, r2, r1
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb43 0901 	adc.w	r9, r3, r1
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042be:	4690      	mov	r8, r2
 80042c0:	4699      	mov	r9, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	eb18 0303 	adds.w	r3, r8, r3
 80042c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb49 0303 	adc.w	r3, r9, r3
 80042d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042ea:	460b      	mov	r3, r1
 80042ec:	18db      	adds	r3, r3, r3
 80042ee:	653b      	str	r3, [r7, #80]	; 0x50
 80042f0:	4613      	mov	r3, r2
 80042f2:	eb42 0303 	adc.w	r3, r2, r3
 80042f6:	657b      	str	r3, [r7, #84]	; 0x54
 80042f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004300:	f7fb ffc6 	bl	8000290 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b61      	ldr	r3, [pc, #388]	; (8004490 <UART_SetConfig+0x2d4>)
 800430a:	fba3 2302 	umull	r2, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	011c      	lsls	r4, r3, #4
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800431c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	64b9      	str	r1, [r7, #72]	; 0x48
 800432c:	415b      	adcs	r3, r3
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004334:	4641      	mov	r1, r8
 8004336:	eb12 0a01 	adds.w	sl, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb43 0b01 	adc.w	fp, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800434c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004354:	4692      	mov	sl, r2
 8004356:	469b      	mov	fp, r3
 8004358:	4643      	mov	r3, r8
 800435a:	eb1a 0303 	adds.w	r3, sl, r3
 800435e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004362:	464b      	mov	r3, r9
 8004364:	eb4b 0303 	adc.w	r3, fp, r3
 8004368:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004378:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800437c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004380:	460b      	mov	r3, r1
 8004382:	18db      	adds	r3, r3, r3
 8004384:	643b      	str	r3, [r7, #64]	; 0x40
 8004386:	4613      	mov	r3, r2
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
 800438e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004396:	f7fb ff7b 	bl	8000290 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <UART_SetConfig+0x2d4>)
 80043a2:	fba3 2301 	umull	r2, r3, r3, r1
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2264      	movs	r2, #100	; 0x64
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	1acb      	subs	r3, r1, r3
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <UART_SetConfig+0x2d4>)
 80043b8:	fba3 2302 	umull	r2, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043c4:	441c      	add	r4, r3
 80043c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	1891      	adds	r1, r2, r2
 80043de:	63b9      	str	r1, [r7, #56]	; 0x38
 80043e0:	415b      	adcs	r3, r3
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043e8:	4641      	mov	r1, r8
 80043ea:	1851      	adds	r1, r2, r1
 80043ec:	6339      	str	r1, [r7, #48]	; 0x30
 80043ee:	4649      	mov	r1, r9
 80043f0:	414b      	adcs	r3, r1
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004400:	4659      	mov	r1, fp
 8004402:	00cb      	lsls	r3, r1, #3
 8004404:	4651      	mov	r1, sl
 8004406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440a:	4651      	mov	r1, sl
 800440c:	00ca      	lsls	r2, r1, #3
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	4603      	mov	r3, r0
 8004414:	4642      	mov	r2, r8
 8004416:	189b      	adds	r3, r3, r2
 8004418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800441c:	464b      	mov	r3, r9
 800441e:	460a      	mov	r2, r1
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004434:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800443c:	460b      	mov	r3, r1
 800443e:	18db      	adds	r3, r3, r3
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
 8004442:	4613      	mov	r3, r2
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800444e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004452:	f7fb ff1d 	bl	8000290 <__aeabi_uldivmod>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <UART_SetConfig+0x2d4>)
 800445c:	fba3 1302 	umull	r1, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2164      	movs	r1, #100	; 0x64
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	3332      	adds	r3, #50	; 0x32
 800446e:	4a08      	ldr	r2, [pc, #32]	; (8004490 <UART_SetConfig+0x2d4>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 0207 	and.w	r2, r3, #7
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4422      	add	r2, r4
 8004482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004484:	e106      	b.n	8004694 <UART_SetConfig+0x4d8>
 8004486:	bf00      	nop
 8004488:	40011000 	.word	0x40011000
 800448c:	40011400 	.word	0x40011400
 8004490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800449e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044a6:	4642      	mov	r2, r8
 80044a8:	464b      	mov	r3, r9
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	6239      	str	r1, [r7, #32]
 80044ae:	415b      	adcs	r3, r3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b6:	4641      	mov	r1, r8
 80044b8:	1854      	adds	r4, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb43 0501 	adc.w	r5, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	00eb      	lsls	r3, r5, #3
 80044ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ce:	00e2      	lsls	r2, r4, #3
 80044d0:	4614      	mov	r4, r2
 80044d2:	461d      	mov	r5, r3
 80044d4:	4643      	mov	r3, r8
 80044d6:	18e3      	adds	r3, r4, r3
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044dc:	464b      	mov	r3, r9
 80044de:	eb45 0303 	adc.w	r3, r5, r3
 80044e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004502:	4629      	mov	r1, r5
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800450c:	4621      	mov	r1, r4
 800450e:	008a      	lsls	r2, r1, #2
 8004510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004514:	f7fb febc 	bl	8000290 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4b60      	ldr	r3, [pc, #384]	; (80046a0 <UART_SetConfig+0x4e4>)
 800451e:	fba3 2302 	umull	r2, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	011c      	lsls	r4, r3, #4
 8004526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452a:	2200      	movs	r2, #0
 800452c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004530:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	1891      	adds	r1, r2, r2
 800453e:	61b9      	str	r1, [r7, #24]
 8004540:	415b      	adcs	r3, r3
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004548:	4641      	mov	r1, r8
 800454a:	1851      	adds	r1, r2, r1
 800454c:	6139      	str	r1, [r7, #16]
 800454e:	4649      	mov	r1, r9
 8004550:	414b      	adcs	r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	00cb      	lsls	r3, r1, #3
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456a:	4651      	mov	r1, sl
 800456c:	00ca      	lsls	r2, r1, #3
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	4603      	mov	r3, r0
 8004574:	4642      	mov	r2, r8
 8004576:	189b      	adds	r3, r3, r2
 8004578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800457c:	464b      	mov	r3, r9
 800457e:	460a      	mov	r2, r1
 8004580:	eb42 0303 	adc.w	r3, r2, r3
 8004584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	67bb      	str	r3, [r7, #120]	; 0x78
 8004592:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045a0:	4649      	mov	r1, r9
 80045a2:	008b      	lsls	r3, r1, #2
 80045a4:	4641      	mov	r1, r8
 80045a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045aa:	4641      	mov	r1, r8
 80045ac:	008a      	lsls	r2, r1, #2
 80045ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045b2:	f7fb fe6d 	bl	8000290 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <UART_SetConfig+0x4e4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	; 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	3332      	adds	r3, #50	; 0x32
 80045d0:	4a33      	ldr	r2, [pc, #204]	; (80046a0 <UART_SetConfig+0x4e4>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	441c      	add	r4, r3
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	673b      	str	r3, [r7, #112]	; 0x70
 80045e6:	677a      	str	r2, [r7, #116]	; 0x74
 80045e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045ec:	4642      	mov	r2, r8
 80045ee:	464b      	mov	r3, r9
 80045f0:	1891      	adds	r1, r2, r2
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	415b      	adcs	r3, r3
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045fc:	4641      	mov	r1, r8
 80045fe:	1851      	adds	r1, r2, r1
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	4649      	mov	r1, r9
 8004604:	414b      	adcs	r3, r1
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004614:	4659      	mov	r1, fp
 8004616:	00cb      	lsls	r3, r1, #3
 8004618:	4651      	mov	r1, sl
 800461a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461e:	4651      	mov	r1, sl
 8004620:	00ca      	lsls	r2, r1, #3
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	4603      	mov	r3, r0
 8004628:	4642      	mov	r2, r8
 800462a:	189b      	adds	r3, r3, r2
 800462c:	66bb      	str	r3, [r7, #104]	; 0x68
 800462e:	464b      	mov	r3, r9
 8004630:	460a      	mov	r2, r1
 8004632:	eb42 0303 	adc.w	r3, r2, r3
 8004636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	663b      	str	r3, [r7, #96]	; 0x60
 8004642:	667a      	str	r2, [r7, #100]	; 0x64
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004650:	4649      	mov	r1, r9
 8004652:	008b      	lsls	r3, r1, #2
 8004654:	4641      	mov	r1, r8
 8004656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465a:	4641      	mov	r1, r8
 800465c:	008a      	lsls	r2, r1, #2
 800465e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004662:	f7fb fe15 	bl	8000290 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <UART_SetConfig+0x4e4>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	3332      	adds	r3, #50	; 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <UART_SetConfig+0x4e4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a0:	51eb851f 	.word	0x51eb851f

080046a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <MX_FATFS_Init+0x18>)
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_FATFS_Init+0x1c>)
 80046ac:	f003 f91e 	bl	80078ec <FATFS_LinkDriver>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <MX_FATFS_Init+0x20>)
 80046b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20002b60 	.word	0x20002b60
 80046c0:	2000040c 	.word	0x2000040c
 80046c4:	20002b5c 	.word	0x20002b5c

080046c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80046cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f9d3 	bl	8004a90 <USER_SPI_initialize>
 80046ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fab1 	bl	8004c68 <USER_SPI_status>
 8004706:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8004720:	7bf8      	ldrb	r0, [r7, #15]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	f000 fab4 	bl	8004c94 <USER_SPI_read>
 800472c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4603      	mov	r3, r0
 8004744:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004746:	7bf8      	ldrb	r0, [r7, #15]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	f000 fb07 	bl	8004d60 <USER_SPI_write>
 8004752:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	603a      	str	r2, [r7, #0]
 8004766:	71fb      	strb	r3, [r7, #7]
 8004768:	460b      	mov	r3, r1
 800476a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800476c:	79b9      	ldrb	r1, [r7, #6]
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb70 	bl	8004e58 <USER_SPI_ioctl>
 8004778:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800478c:	f7fc fd78 	bl	8001280 <HAL_GetTick>
 8004790:	4603      	mov	r3, r0
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <SPI_Timer_On+0x20>)
 8004794:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <SPI_Timer_On+0x24>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20002b68 	.word	0x20002b68
 80047a8:	20002b6c 	.word	0x20002b6c

080047ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80047b0:	f7fc fd66 	bl	8001280 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <SPI_Timer_Status+0x24>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <SPI_Timer_Status+0x28>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	bf34      	ite	cc
 80047c4:	2301      	movcc	r3, #1
 80047c6:	2300      	movcs	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20002b68 	.word	0x20002b68
 80047d4:	20002b6c 	.word	0x20002b6c

080047d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80047e2:	f107 020f 	add.w	r2, r7, #15
 80047e6:	1df9      	adds	r1, r7, #7
 80047e8:	2332      	movs	r3, #50	; 0x32
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2301      	movs	r3, #1
 80047ee:	4804      	ldr	r0, [pc, #16]	; (8004800 <xchg_spi+0x28>)
 80047f0:	f7ff f929 	bl	8003a46 <HAL_SPI_TransmitReceive>
    return rxDat;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200009b0 	.word	0x200009b0

08004804 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e00a      	b.n	800482a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	18d4      	adds	r4, r2, r3
 800481a:	20ff      	movs	r0, #255	; 0xff
 800481c:	f7ff ffdc 	bl	80047d8 <xchg_spi>
 8004820:	4603      	mov	r3, r0
 8004822:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d3f0      	bcc.n	8004814 <rcvr_spi_multi+0x10>
	}
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}

0800483c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	b29a      	uxth	r2, r3
 800484a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4803      	ldr	r0, [pc, #12]	; (8004860 <xmit_spi_multi+0x24>)
 8004852:	f7fe ffbc 	bl	80037ce <HAL_SPI_Transmit>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200009b0 	.word	0x200009b0

08004864 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800486c:	f7fc fd08 	bl	8001280 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004876:	20ff      	movs	r0, #255	; 0xff
 8004878:	f7ff ffae 	bl	80047d8 <xchg_spi>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2bff      	cmp	r3, #255	; 0xff
 8004884:	d007      	beq.n	8004896 <wait_ready+0x32>
 8004886:	f7fc fcfb 	bl	8001280 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d8ef      	bhi.n	8004876 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2bff      	cmp	r3, #255	; 0xff
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80048b0:	2201      	movs	r2, #1
 80048b2:	2102      	movs	r1, #2
 80048b4:	4803      	ldr	r0, [pc, #12]	; (80048c4 <despiselect+0x18>)
 80048b6:	f7fd fb35 	bl	8001f24 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80048ba:	20ff      	movs	r0, #255	; 0xff
 80048bc:	f7ff ff8c 	bl	80047d8 <xchg_spi>

}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40020400 	.word	0x40020400

080048c8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80048cc:	2200      	movs	r2, #0
 80048ce:	2102      	movs	r1, #2
 80048d0:	4809      	ldr	r0, [pc, #36]	; (80048f8 <spiselect+0x30>)
 80048d2:	f7fd fb27 	bl	8001f24 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80048d6:	20ff      	movs	r0, #255	; 0xff
 80048d8:	f7ff ff7e 	bl	80047d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80048dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048e0:	f7ff ffc0 	bl	8004864 <wait_ready>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <spiselect+0x26>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e002      	b.n	80048f4 <spiselect+0x2c>

	despiselect();
 80048ee:	f7ff ffdd 	bl	80048ac <despiselect>
	return 0;	/* Timeout */
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40020400 	.word	0x40020400

080048fc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004906:	20c8      	movs	r0, #200	; 0xc8
 8004908:	f7ff ff3c 	bl	8004784 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800490c:	20ff      	movs	r0, #255	; 0xff
 800490e:	f7ff ff63 	bl	80047d8 <xchg_spi>
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	d104      	bne.n	8004926 <rcvr_datablock+0x2a>
 800491c:	f7ff ff46 	bl	80047ac <SPI_Timer_Status>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f2      	bne.n	800490c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2bfe      	cmp	r3, #254	; 0xfe
 800492a:	d001      	beq.n	8004930 <rcvr_datablock+0x34>
 800492c:	2300      	movs	r3, #0
 800492e:	e00a      	b.n	8004946 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ff66 	bl	8004804 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004938:	20ff      	movs	r0, #255	; 0xff
 800493a:	f7ff ff4d 	bl	80047d8 <xchg_spi>
 800493e:	20ff      	movs	r0, #255	; 0xff
 8004940:	f7ff ff4a 	bl	80047d8 <xchg_spi>

	return 1;						/* Function succeeded */
 8004944:	2301      	movs	r3, #1
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800495a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800495e:	f7ff ff81 	bl	8004864 <wait_ready>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <xmit_datablock+0x1e>
 8004968:	2300      	movs	r3, #0
 800496a:	e01e      	b.n	80049aa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff ff32 	bl	80047d8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	2bfd      	cmp	r3, #253	; 0xfd
 8004978:	d016      	beq.n	80049a8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800497a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ff5c 	bl	800483c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004984:	20ff      	movs	r0, #255	; 0xff
 8004986:	f7ff ff27 	bl	80047d8 <xchg_spi>
 800498a:	20ff      	movs	r0, #255	; 0xff
 800498c:	f7ff ff24 	bl	80047d8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004990:	20ff      	movs	r0, #255	; 0xff
 8004992:	f7ff ff21 	bl	80047d8 <xchg_spi>
 8004996:	4603      	mov	r3, r0
 8004998:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	2b05      	cmp	r3, #5
 80049a2:	d001      	beq.n	80049a8 <xmit_datablock+0x5a>
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <xmit_datablock+0x5c>
	}
	return 1;
 80049a8:	2301      	movs	r3, #1
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	6039      	str	r1, [r7, #0]
 80049bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da0e      	bge.n	80049e4 <send_cmd+0x32>
		cmd &= 0x7F;
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049cc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80049ce:	2100      	movs	r1, #0
 80049d0:	2037      	movs	r0, #55	; 0x37
 80049d2:	f7ff ffee 	bl	80049b2 <send_cmd>
 80049d6:	4603      	mov	r3, r0
 80049d8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80049da:	7bbb      	ldrb	r3, [r7, #14]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d901      	bls.n	80049e4 <send_cmd+0x32>
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	e051      	b.n	8004a88 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d008      	beq.n	80049fc <send_cmd+0x4a>
		despiselect();
 80049ea:	f7ff ff5f 	bl	80048ac <despiselect>
		if (!spiselect()) return 0xFF;
 80049ee:	f7ff ff6b 	bl	80048c8 <spiselect>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <send_cmd+0x4a>
 80049f8:	23ff      	movs	r3, #255	; 0xff
 80049fa:	e045      	b.n	8004a88 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fee7 	bl	80047d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	0e1b      	lsrs	r3, r3, #24
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fee1 	bl	80047d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fedb 	bl	80047d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	0a1b      	lsrs	r3, r3, #8
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fed5 	bl	80047d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fed0 	bl	80047d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <send_cmd+0x94>
 8004a42:	2395      	movs	r3, #149	; 0x95
 8004a44:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d101      	bne.n	8004a50 <send_cmd+0x9e>
 8004a4c:	2387      	movs	r3, #135	; 0x87
 8004a4e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fec0 	bl	80047d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d102      	bne.n	8004a64 <send_cmd+0xb2>
 8004a5e:	20ff      	movs	r0, #255	; 0xff
 8004a60:	f7ff feba 	bl	80047d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004a64:	230a      	movs	r3, #10
 8004a66:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004a68:	20ff      	movs	r0, #255	; 0xff
 8004a6a:	f7ff feb5 	bl	80047d8 <xchg_spi>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da05      	bge.n	8004a86 <send_cmd+0xd4>
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <USER_SPI_initialize+0x14>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0d6      	b.n	8004c52 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004aa4:	4b6d      	ldr	r3, [pc, #436]	; (8004c5c <USER_SPI_initialize+0x1cc>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <USER_SPI_initialize+0x2a>
 8004ab2:	4b6a      	ldr	r3, [pc, #424]	; (8004c5c <USER_SPI_initialize+0x1cc>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e0cb      	b.n	8004c52 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004aba:	4b69      	ldr	r3, [pc, #420]	; (8004c60 <USER_SPI_initialize+0x1d0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004ac4:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <USER_SPI_initialize+0x1d0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004acc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004ace:	230a      	movs	r3, #10
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e005      	b.n	8004ae0 <USER_SPI_initialize+0x50>
 8004ad4:	20ff      	movs	r0, #255	; 0xff
 8004ad6:	f7ff fe7f 	bl	80047d8 <xchg_spi>
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f6      	bne.n	8004ad4 <USER_SPI_initialize+0x44>

	ty = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004aea:	2100      	movs	r1, #0
 8004aec:	2000      	movs	r0, #0
 8004aee:	f7ff ff60 	bl	80049b2 <send_cmd>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 808b 	bne.w	8004c10 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004afe:	f7ff fe41 	bl	8004784 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004b02:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b06:	2008      	movs	r0, #8
 8004b08:	f7ff ff53 	bl	80049b2 <send_cmd>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d151      	bne.n	8004bb6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
 8004b16:	e00d      	b.n	8004b34 <USER_SPI_initialize+0xa4>
 8004b18:	7bfc      	ldrb	r4, [r7, #15]
 8004b1a:	20ff      	movs	r0, #255	; 0xff
 8004b1c:	f7ff fe5c 	bl	80047d8 <xchg_spi>
 8004b20:	4603      	mov	r3, r0
 8004b22:	461a      	mov	r2, r3
 8004b24:	f104 0310 	add.w	r3, r4, #16
 8004b28:	443b      	add	r3, r7
 8004b2a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	3301      	adds	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d9ee      	bls.n	8004b18 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004b3a:	7abb      	ldrb	r3, [r7, #10]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d167      	bne.n	8004c10 <USER_SPI_initialize+0x180>
 8004b40:	7afb      	ldrb	r3, [r7, #11]
 8004b42:	2baa      	cmp	r3, #170	; 0xaa
 8004b44:	d164      	bne.n	8004c10 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004b46:	bf00      	nop
 8004b48:	f7ff fe30 	bl	80047ac <SPI_Timer_Status>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <USER_SPI_initialize+0xd2>
 8004b52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b56:	20a9      	movs	r0, #169	; 0xa9
 8004b58:	f7ff ff2b 	bl	80049b2 <send_cmd>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f2      	bne.n	8004b48 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004b62:	f7ff fe23 	bl	80047ac <SPI_Timer_Status>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d051      	beq.n	8004c10 <USER_SPI_initialize+0x180>
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	203a      	movs	r0, #58	; 0x3a
 8004b70:	f7ff ff1f 	bl	80049b2 <send_cmd>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d14a      	bne.n	8004c10 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
 8004b7e:	e00d      	b.n	8004b9c <USER_SPI_initialize+0x10c>
 8004b80:	7bfc      	ldrb	r4, [r7, #15]
 8004b82:	20ff      	movs	r0, #255	; 0xff
 8004b84:	f7ff fe28 	bl	80047d8 <xchg_spi>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f104 0310 	add.w	r3, r4, #16
 8004b90:	443b      	add	r3, r7
 8004b92:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d9ee      	bls.n	8004b80 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004ba2:	7a3b      	ldrb	r3, [r7, #8]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <USER_SPI_initialize+0x120>
 8004bac:	230c      	movs	r3, #12
 8004bae:	e000      	b.n	8004bb2 <USER_SPI_initialize+0x122>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	737b      	strb	r3, [r7, #13]
 8004bb4:	e02c      	b.n	8004c10 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	20a9      	movs	r0, #169	; 0xa9
 8004bba:	f7ff fefa 	bl	80049b2 <send_cmd>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d804      	bhi.n	8004bce <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	737b      	strb	r3, [r7, #13]
 8004bc8:	23a9      	movs	r3, #169	; 0xa9
 8004bca:	73bb      	strb	r3, [r7, #14]
 8004bcc:	e003      	b.n	8004bd6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004bce:	2301      	movs	r3, #1
 8004bd0:	737b      	strb	r3, [r7, #13]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004bd6:	bf00      	nop
 8004bd8:	f7ff fde8 	bl	80047ac <SPI_Timer_Status>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <USER_SPI_initialize+0x162>
 8004be2:	7bbb      	ldrb	r3, [r7, #14]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fee3 	bl	80049b2 <send_cmd>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f2      	bne.n	8004bd8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004bf2:	f7ff fddb 	bl	80047ac <SPI_Timer_Status>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <USER_SPI_initialize+0x17c>
 8004bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c00:	2010      	movs	r0, #16
 8004c02:	f7ff fed6 	bl	80049b2 <send_cmd>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <USER_SPI_initialize+0x180>
				ty = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <USER_SPI_initialize+0x1d4>)
 8004c12:	7b7b      	ldrb	r3, [r7, #13]
 8004c14:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004c16:	f7ff fe49 	bl	80048ac <despiselect>

	if (ty) {			/* OK */
 8004c1a:	7b7b      	ldrb	r3, [r7, #13]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <USER_SPI_initialize+0x1d0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <USER_SPI_initialize+0x1d0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0210 	orr.w	r2, r2, #16
 8004c32:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <USER_SPI_initialize+0x1cc>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <USER_SPI_initialize+0x1cc>)
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <USER_SPI_initialize+0x1cc>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <USER_SPI_initialize+0x1cc>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000420 	.word	0x20000420
 8004c60:	200009b0 	.word	0x200009b0
 8004c64:	20002b64 	.word	0x20002b64

08004c68 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <USER_SPI_status+0x14>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e002      	b.n	8004c82 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <USER_SPI_status+0x28>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000420 	.word	0x20000420

08004c94 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <USER_SPI_read+0x1c>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <USER_SPI_read+0x20>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e04d      	b.n	8004d50 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004cb4:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <USER_SPI_read+0xc4>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <USER_SPI_read+0x32>
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e044      	b.n	8004d50 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004cc6:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <USER_SPI_read+0xc8>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <USER_SPI_read+0x44>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	025b      	lsls	r3, r3, #9
 8004cd6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d111      	bne.n	8004d02 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	2011      	movs	r0, #17
 8004ce2:	f7ff fe66 	bl	80049b2 <send_cmd>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d129      	bne.n	8004d40 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cf0:	68b8      	ldr	r0, [r7, #8]
 8004cf2:	f7ff fe03 	bl	80048fc <rcvr_datablock>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d021      	beq.n	8004d40 <USER_SPI_read+0xac>
			count = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	e01e      	b.n	8004d40 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	2012      	movs	r0, #18
 8004d06:	f7ff fe54 	bl	80049b2 <send_cmd>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d117      	bne.n	8004d40 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d14:	68b8      	ldr	r0, [r7, #8]
 8004d16:	f7ff fdf1 	bl	80048fc <rcvr_datablock>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <USER_SPI_read+0xa2>
				buff += 512;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d26:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ed      	bne.n	8004d10 <USER_SPI_read+0x7c>
 8004d34:	e000      	b.n	8004d38 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004d36:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004d38:	2100      	movs	r1, #0
 8004d3a:	200c      	movs	r0, #12
 8004d3c:	f7ff fe39 	bl	80049b2 <send_cmd>
		}
	}
	despiselect();
 8004d40:	f7ff fdb4 	bl	80048ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000420 	.word	0x20000420
 8004d5c:	20002b64 	.word	0x20002b64

08004d60 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <USER_SPI_write+0x1c>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <USER_SPI_write+0x20>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	e063      	b.n	8004e48 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <USER_SPI_write+0xf0>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <USER_SPI_write+0x32>
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e05a      	b.n	8004e48 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <USER_SPI_write+0xf0>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <USER_SPI_write+0x44>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e051      	b.n	8004e48 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <USER_SPI_write+0xf4>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <USER_SPI_write+0x56>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	025b      	lsls	r3, r3, #9
 8004db4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d110      	bne.n	8004dde <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	2018      	movs	r0, #24
 8004dc0:	f7ff fdf7 	bl	80049b2 <send_cmd>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d136      	bne.n	8004e38 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004dca:	21fe      	movs	r1, #254	; 0xfe
 8004dcc:	68b8      	ldr	r0, [r7, #8]
 8004dce:	f7ff fdbe 	bl	800494e <xmit_datablock>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02f      	beq.n	8004e38 <USER_SPI_write+0xd8>
			count = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	e02c      	b.n	8004e38 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <USER_SPI_write+0xf4>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	f003 0306 	and.w	r3, r3, #6
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <USER_SPI_write+0x92>
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	2097      	movs	r0, #151	; 0x97
 8004dee:	f7ff fde0 	bl	80049b2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	2019      	movs	r0, #25
 8004df6:	f7ff fddc 	bl	80049b2 <send_cmd>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11b      	bne.n	8004e38 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004e00:	21fc      	movs	r1, #252	; 0xfc
 8004e02:	68b8      	ldr	r0, [r7, #8]
 8004e04:	f7ff fda3 	bl	800494e <xmit_datablock>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <USER_SPI_write+0xc4>
				buff += 512;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e14:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ee      	bne.n	8004e00 <USER_SPI_write+0xa0>
 8004e22:	e000      	b.n	8004e26 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004e24:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004e26:	21fd      	movs	r1, #253	; 0xfd
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7ff fd90 	bl	800494e <xmit_datablock>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <USER_SPI_write+0xd8>
 8004e34:	2301      	movs	r3, #1
 8004e36:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004e38:	f7ff fd38 	bl	80048ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000420 	.word	0x20000420
 8004e54:	20002b64 	.word	0x20002b64

08004e58 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	603a      	str	r2, [r7, #0]
 8004e62:	71fb      	strb	r3, [r7, #7]
 8004e64:	460b      	mov	r3, r1
 8004e66:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <USER_SPI_ioctl+0x1a>
 8004e6e:	2304      	movs	r3, #4
 8004e70:	e15a      	b.n	8005128 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004e72:	4baf      	ldr	r3, [pc, #700]	; (8005130 <USER_SPI_ioctl+0x2d8>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <USER_SPI_ioctl+0x2c>
 8004e80:	2303      	movs	r3, #3
 8004e82:	e151      	b.n	8005128 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004e8a:	79bb      	ldrb	r3, [r7, #6]
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	f200 8136 	bhi.w	80050fe <USER_SPI_ioctl+0x2a6>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <USER_SPI_ioctl+0x40>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ead 	.word	0x08004ead
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	080050ff 	.word	0x080050ff
 8004ea4:	08004f6d 	.word	0x08004f6d
 8004ea8:	08005063 	.word	0x08005063
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004eac:	f7ff fd0c 	bl	80048c8 <spiselect>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8127 	beq.w	8005106 <USER_SPI_ioctl+0x2ae>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004ebe:	e122      	b.n	8005106 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2009      	movs	r0, #9
 8004ec4:	f7ff fd75 	bl	80049b2 <send_cmd>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 811d 	bne.w	800510a <USER_SPI_ioctl+0x2b2>
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fd10 	bl	80048fc <rcvr_datablock>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8113 	beq.w	800510a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004ee4:	7b3b      	ldrb	r3, [r7, #12]
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d111      	bne.n	8004f12 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004eee:	7d7b      	ldrb	r3, [r7, #21]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	7d3b      	ldrb	r3, [r7, #20]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	4413      	add	r3, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004f02:	4413      	add	r3, r2
 8004f04:	3301      	adds	r3, #1
 8004f06:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	029a      	lsls	r2, r3, #10
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e028      	b.n	8004f64 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004f12:	7c7b      	ldrb	r3, [r7, #17]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	7dbb      	ldrb	r3, [r7, #22]
 8004f1c:	09db      	lsrs	r3, r3, #7
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	7d7b      	ldrb	r3, [r7, #21]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f003 0306 	and.w	r3, r3, #6
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3302      	adds	r3, #2
 8004f36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004f3a:	7d3b      	ldrb	r3, [r7, #20]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	7cbb      	ldrb	r3, [r7, #18]
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f50:	4413      	add	r3, r2
 8004f52:	3301      	adds	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004f56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f5a:	3b09      	subs	r3, #9
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004f6a:	e0ce      	b.n	800510a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004f6c:	4b71      	ldr	r3, [pc, #452]	; (8005134 <USER_SPI_ioctl+0x2dc>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d031      	beq.n	8004fdc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004f78:	2100      	movs	r1, #0
 8004f7a:	208d      	movs	r0, #141	; 0x8d
 8004f7c:	f7ff fd19 	bl	80049b2 <send_cmd>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 80c3 	bne.w	800510e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004f88:	20ff      	movs	r0, #255	; 0xff
 8004f8a:	f7ff fc25 	bl	80047d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	2110      	movs	r1, #16
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fcb1 	bl	80048fc <rcvr_datablock>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80b6 	beq.w	800510e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004fa2:	2330      	movs	r3, #48	; 0x30
 8004fa4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004fa8:	e007      	b.n	8004fba <USER_SPI_ioctl+0x162>
 8004faa:	20ff      	movs	r0, #255	; 0xff
 8004fac:	f7ff fc14 	bl	80047d8 <xchg_spi>
 8004fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004fba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f3      	bne.n	8004faa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004fc2:	7dbb      	ldrb	r3, [r7, #22]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2310      	movs	r3, #16
 8004fcc:	fa03 f202 	lsl.w	r2, r3, r2
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004fda:	e098      	b.n	800510e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2009      	movs	r0, #9
 8004fe0:	f7ff fce7 	bl	80049b2 <send_cmd>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 8091 	bne.w	800510e <USER_SPI_ioctl+0x2b6>
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fc82 	bl	80048fc <rcvr_datablock>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8087 	beq.w	800510e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <USER_SPI_ioctl+0x2dc>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d012      	beq.n	8005032 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800500c:	7dbb      	ldrb	r3, [r7, #22]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005014:	7dfa      	ldrb	r2, [r7, #23]
 8005016:	09d2      	lsrs	r2, r2, #7
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	4413      	add	r3, r2
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	7e7b      	ldrb	r3, [r7, #25]
 8005020:	099b      	lsrs	r3, r3, #6
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	461a      	mov	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e013      	b.n	800505a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005032:	7dbb      	ldrb	r3, [r7, #22]
 8005034:	109b      	asrs	r3, r3, #2
 8005036:	b29b      	uxth	r3, r3
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	3301      	adds	r3, #1
 800503e:	7dfa      	ldrb	r2, [r7, #23]
 8005040:	00d2      	lsls	r2, r2, #3
 8005042:	f002 0218 	and.w	r2, r2, #24
 8005046:	7df9      	ldrb	r1, [r7, #23]
 8005048:	0949      	lsrs	r1, r1, #5
 800504a:	b2c9      	uxtb	r1, r1
 800504c:	440a      	add	r2, r1
 800504e:	3201      	adds	r2, #1
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	461a      	mov	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005060:	e055      	b.n	800510e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <USER_SPI_ioctl+0x2dc>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f003 0306 	and.w	r3, r3, #6
 800506a:	2b00      	cmp	r3, #0
 800506c:	d051      	beq.n	8005112 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800506e:	f107 020c 	add.w	r2, r7, #12
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	210b      	movs	r1, #11
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff feee 	bl	8004e58 <USER_SPI_ioctl>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d149      	bne.n	8005116 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005082:	7b3b      	ldrb	r3, [r7, #12]
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <USER_SPI_ioctl+0x23e>
 800508c:	7dbb      	ldrb	r3, [r7, #22]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d041      	beq.n	800511a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	623b      	str	r3, [r7, #32]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <USER_SPI_ioctl+0x2dc>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	025b      	lsls	r3, r3, #9
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	025b      	lsls	r3, r3, #9
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80050be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c0:	2020      	movs	r0, #32
 80050c2:	f7ff fc76 	bl	80049b2 <send_cmd>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d128      	bne.n	800511e <USER_SPI_ioctl+0x2c6>
 80050cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ce:	2021      	movs	r0, #33	; 0x21
 80050d0:	f7ff fc6f 	bl	80049b2 <send_cmd>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d121      	bne.n	800511e <USER_SPI_ioctl+0x2c6>
 80050da:	2100      	movs	r1, #0
 80050dc:	2026      	movs	r0, #38	; 0x26
 80050de:	f7ff fc68 	bl	80049b2 <send_cmd>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11a      	bne.n	800511e <USER_SPI_ioctl+0x2c6>
 80050e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80050ec:	f7ff fbba 	bl	8004864 <wait_ready>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80050fc:	e00f      	b.n	800511e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80050fe:	2304      	movs	r3, #4
 8005100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005104:	e00c      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		break;
 8005106:	bf00      	nop
 8005108:	e00a      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		break;
 800510a:	bf00      	nop
 800510c:	e008      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		break;
 800510e:	bf00      	nop
 8005110:	e006      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005112:	bf00      	nop
 8005114:	e004      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005116:	bf00      	nop
 8005118:	e002      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <USER_SPI_ioctl+0x2c8>
		break;
 800511e:	bf00      	nop
	}

	despiselect();
 8005120:	f7ff fbc4 	bl	80048ac <despiselect>

	return res;
 8005124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005128:	4618      	mov	r0, r3
 800512a:	3730      	adds	r7, #48	; 0x30
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000420 	.word	0x20000420
 8005134:	20002b64 	.word	0x20002b64

08005138 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	4a08      	ldr	r2, [pc, #32]	; (8005168 <disk_status+0x30>)
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	79fa      	ldrb	r2, [r7, #7]
 8005150:	4905      	ldr	r1, [pc, #20]	; (8005168 <disk_status+0x30>)
 8005152:	440a      	add	r2, r1
 8005154:	7a12      	ldrb	r2, [r2, #8]
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3
 800515a:	4603      	mov	r3, r0
 800515c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20002b98 	.word	0x20002b98

0800516c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <disk_initialize+0x48>)
 800517e:	5cd3      	ldrb	r3, [r2, r3]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <disk_initialize+0x48>)
 8005188:	2101      	movs	r1, #1
 800518a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <disk_initialize+0x48>)
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	79fa      	ldrb	r2, [r7, #7]
 800519a:	4906      	ldr	r1, [pc, #24]	; (80051b4 <disk_initialize+0x48>)
 800519c:	440a      	add	r2, r1
 800519e:	7a12      	ldrb	r2, [r2, #8]
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
 80051a4:	4603      	mov	r3, r0
 80051a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20002b98 	.word	0x20002b98

080051b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <disk_read+0x3c>)
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	689c      	ldr	r4, [r3, #8]
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <disk_read+0x3c>)
 80051d8:	4413      	add	r3, r2
 80051da:	7a18      	ldrb	r0, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	47a0      	blx	r4
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20002b98 	.word	0x20002b98

080051f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <disk_write+0x3c>)
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68dc      	ldr	r4, [r3, #12]
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	4a07      	ldr	r2, [pc, #28]	; (8005234 <disk_write+0x3c>)
 8005218:	4413      	add	r3, r2
 800521a:	7a18      	ldrb	r0, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	47a0      	blx	r4
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]
  return res;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	bf00      	nop
 8005234:	20002b98 	.word	0x20002b98

08005238 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	603a      	str	r2, [r7, #0]
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	460b      	mov	r3, r1
 8005246:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <disk_ioctl+0x38>)
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	79fa      	ldrb	r2, [r7, #7]
 8005256:	4906      	ldr	r1, [pc, #24]	; (8005270 <disk_ioctl+0x38>)
 8005258:	440a      	add	r2, r1
 800525a:	7a10      	ldrb	r0, [r2, #8]
 800525c:	79b9      	ldrb	r1, [r7, #6]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	4798      	blx	r3
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]
  return res;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20002b98 	.word	0x20002b98

08005274 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	b21a      	sxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b21b      	sxth	r3, r3
 8005290:	4313      	orrs	r3, r2
 8005292:	b21b      	sxth	r3, r3
 8005294:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005296:	89fb      	ldrh	r3, [r7, #14]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3303      	adds	r3, #3
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	3202      	adds	r2, #2
 80052bc:	7812      	ldrb	r2, [r2, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	3201      	adds	r2, #1
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
	return rv;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	887a      	ldrh	r2, [r7, #2]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	887b      	ldrh	r3, [r7, #2]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	1c53      	adds	r3, r2, #1
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1c59      	adds	r1, r3, #1
 800539c:	6179      	str	r1, [r7, #20]
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f1      	bne.n	8005392 <mem_cpy+0x1a>
	}
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80053ba:	b480      	push	{r7}
 80053bc:	b087      	sub	sp, #28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	617a      	str	r2, [r7, #20]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3b01      	subs	r3, #1
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f3      	bne.n	80053ca <mem_set+0x10>
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	61fa      	str	r2, [r7, #28]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	61ba      	str	r2, [r7, #24]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	1acb      	subs	r3, r1, r3
 800541c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3b01      	subs	r3, #1
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <mem_cmp+0x40>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0eb      	beq.n	8005408 <mem_cmp+0x18>

	return r;
 8005430:	697b      	ldr	r3, [r7, #20]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3724      	adds	r7, #36	; 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005448:	e002      	b.n	8005450 <chk_chr+0x12>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3301      	adds	r3, #1
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <chk_chr+0x26>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	4293      	cmp	r3, r2
 8005462:	d1f2      	bne.n	800544a <chk_chr+0xc>
	return *str;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	781b      	ldrb	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e029      	b.n	80054dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005488:	4a27      	ldr	r2, [pc, #156]	; (8005528 <chk_lock+0xb4>)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4413      	add	r3, r2
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01d      	beq.n	80054d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005496:	4a24      	ldr	r2, [pc, #144]	; (8005528 <chk_lock+0xb4>)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4413      	add	r3, r2
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d116      	bne.n	80054d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <chk_lock+0xb4>)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	4413      	add	r3, r2
 80054b0:	3304      	adds	r3, #4
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d10c      	bne.n	80054d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054bc:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <chk_lock+0xb4>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	4413      	add	r3, r2
 80054c4:	3308      	adds	r3, #8
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d102      	bne.n	80054d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054d0:	e007      	b.n	80054e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d9d2      	bls.n	8005488 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d109      	bne.n	80054fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <chk_lock+0x80>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d101      	bne.n	80054f8 <chk_lock+0x84>
 80054f4:	2300      	movs	r3, #0
 80054f6:	e010      	b.n	800551a <chk_lock+0xa6>
 80054f8:	2312      	movs	r3, #18
 80054fa:	e00e      	b.n	800551a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d108      	bne.n	8005514 <chk_lock+0xa0>
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <chk_lock+0xb4>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	330c      	adds	r3, #12
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005512:	d101      	bne.n	8005518 <chk_lock+0xa4>
 8005514:	2310      	movs	r3, #16
 8005516:	e000      	b.n	800551a <chk_lock+0xa6>
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20002b78 	.word	0x20002b78

0800552c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	e002      	b.n	800553e <enq_lock+0x12>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3301      	adds	r3, #1
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d806      	bhi.n	8005552 <enq_lock+0x26>
 8005544:	4a09      	ldr	r2, [pc, #36]	; (800556c <enq_lock+0x40>)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	4413      	add	r3, r2
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f2      	bne.n	8005538 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b02      	cmp	r3, #2
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20002b78 	.word	0x20002b78

08005570 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e01f      	b.n	80055c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005580:	4a41      	ldr	r2, [pc, #260]	; (8005688 <inc_lock+0x118>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d113      	bne.n	80055ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005592:	4a3d      	ldr	r2, [pc, #244]	; (8005688 <inc_lock+0x118>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d109      	bne.n	80055ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80055a6:	4a38      	ldr	r2, [pc, #224]	; (8005688 <inc_lock+0x118>)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	3308      	adds	r3, #8
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d006      	beq.n	80055c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d9dc      	bls.n	8005580 <inc_lock+0x10>
 80055c6:	e000      	b.n	80055ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80055c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d132      	bne.n	8005636 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <inc_lock+0x6c>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d806      	bhi.n	80055f0 <inc_lock+0x80>
 80055e2:	4a29      	ldr	r2, [pc, #164]	; (8005688 <inc_lock+0x118>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4413      	add	r3, r2
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f2      	bne.n	80055d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d101      	bne.n	80055fa <inc_lock+0x8a>
 80055f6:	2300      	movs	r3, #0
 80055f8:	e040      	b.n	800567c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4922      	ldr	r1, [pc, #136]	; (8005688 <inc_lock+0x118>)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	440b      	add	r3, r1
 8005606:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	491e      	ldr	r1, [pc, #120]	; (8005688 <inc_lock+0x118>)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	440b      	add	r3, r1
 8005614:	3304      	adds	r3, #4
 8005616:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	491a      	ldr	r1, [pc, #104]	; (8005688 <inc_lock+0x118>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	440b      	add	r3, r1
 8005624:	3308      	adds	r3, #8
 8005626:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005628:	4a17      	ldr	r2, [pc, #92]	; (8005688 <inc_lock+0x118>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	4413      	add	r3, r2
 8005630:	330c      	adds	r3, #12
 8005632:	2200      	movs	r2, #0
 8005634:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <inc_lock+0xe0>
 800563c:	4a12      	ldr	r2, [pc, #72]	; (8005688 <inc_lock+0x118>)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4413      	add	r3, r2
 8005644:	330c      	adds	r3, #12
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <inc_lock+0xe0>
 800564c:	2300      	movs	r3, #0
 800564e:	e015      	b.n	800567c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <inc_lock+0xf8>
 8005656:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <inc_lock+0x118>)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	330c      	adds	r3, #12
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	e001      	b.n	800566c <inc_lock+0xfc>
 8005668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566c:	4906      	ldr	r1, [pc, #24]	; (8005688 <inc_lock+0x118>)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	440b      	add	r3, r1
 8005674:	330c      	adds	r3, #12
 8005676:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20002b78 	.word	0x20002b78

0800568c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d825      	bhi.n	80056ec <dec_lock+0x60>
		n = Files[i].ctr;
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <dec_lock+0x74>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	330c      	adds	r3, #12
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056ae:	89fb      	ldrh	r3, [r7, #14]
 80056b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b4:	d101      	bne.n	80056ba <dec_lock+0x2e>
 80056b6:	2300      	movs	r3, #0
 80056b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80056ba:	89fb      	ldrh	r3, [r7, #14]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <dec_lock+0x3a>
 80056c0:	89fb      	ldrh	r3, [r7, #14]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80056c6:	4a0e      	ldr	r2, [pc, #56]	; (8005700 <dec_lock+0x74>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	4413      	add	r3, r2
 80056ce:	330c      	adds	r3, #12
 80056d0:	89fa      	ldrh	r2, [r7, #14]
 80056d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056d4:	89fb      	ldrh	r3, [r7, #14]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <dec_lock+0x5a>
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <dec_lock+0x74>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	4413      	add	r3, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	737b      	strb	r3, [r7, #13]
 80056ea:	e001      	b.n	80056f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80056ec:	2302      	movs	r3, #2
 80056ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80056f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20002b78 	.word	0x20002b78

08005704 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e010      	b.n	8005734 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005712:	4a0d      	ldr	r2, [pc, #52]	; (8005748 <clear_lock+0x44>)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	4413      	add	r3, r2
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	429a      	cmp	r2, r3
 8005720:	d105      	bne.n	800572e <clear_lock+0x2a>
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <clear_lock+0x44>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	4413      	add	r3, r2
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d9eb      	bls.n	8005712 <clear_lock+0xe>
	}
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20002b78 	.word	0x20002b78

0800574c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d034      	beq.n	80057ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7858      	ldrb	r0, [r3, #1]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005770:	2301      	movs	r3, #1
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	f7ff fd40 	bl	80051f8 <disk_write>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <sync_window+0x38>
			res = FR_DISK_ERR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	e022      	b.n	80057ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	1ad2      	subs	r2, r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	429a      	cmp	r2, r3
 8005798:	d217      	bcs.n	80057ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	789b      	ldrb	r3, [r3, #2]
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	e010      	b.n	80057c4 <sync_window+0x78>
					wsect += fs->fsize;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	7858      	ldrb	r0, [r3, #1]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057b6:	2301      	movs	r3, #1
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	f7ff fd1d 	bl	80051f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d8eb      	bhi.n	80057a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d01b      	beq.n	8005824 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ffad 	bl	800574c <sync_window>
 80057f2:	4603      	mov	r3, r0
 80057f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d113      	bne.n	8005824 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7858      	ldrb	r0, [r3, #1]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005806:	2301      	movs	r3, #1
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	f7ff fcd5 	bl	80051b8 <disk_read>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005818:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ff87 	bl	800574c <sync_window>
 800583e:	4603      	mov	r3, r0
 8005840:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d158      	bne.n	80058fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d148      	bne.n	80058e2 <sync_fs+0xb2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	791b      	ldrb	r3, [r3, #4]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d144      	bne.n	80058e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3330      	adds	r3, #48	; 0x30
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fda9 	bl	80053ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3330      	adds	r3, #48	; 0x30
 800586c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005870:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fd38 	bl	80052ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3330      	adds	r3, #48	; 0x30
 800587e:	4921      	ldr	r1, [pc, #132]	; (8005904 <sync_fs+0xd4>)
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff fd4d 	bl	8005320 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3330      	adds	r3, #48	; 0x30
 800588a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800588e:	491e      	ldr	r1, [pc, #120]	; (8005908 <sync_fs+0xd8>)
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fd45 	bl	8005320 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3330      	adds	r3, #48	; 0x30
 800589a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7ff fd3b 	bl	8005320 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3330      	adds	r3, #48	; 0x30
 80058ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f7ff fd31 	bl	8005320 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7858      	ldrb	r0, [r3, #1]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d6:	2301      	movs	r3, #1
 80058d8:	f7ff fc8e 	bl	80051f8 <disk_write>
			fs->fsi_flag = 0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2200      	movs	r2, #0
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fca4 	bl	8005238 <disk_ioctl>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <sync_fs+0xca>
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	41615252 	.word	0x41615252
 8005908:	61417272 	.word	0x61417272

0800590c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	3b02      	subs	r3, #2
 800591a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	3b02      	subs	r3, #2
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d301      	bcc.n	800592c <clust2sect+0x20>
 8005928:	2300      	movs	r3, #0
 800592a:	e008      	b.n	800593e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	895b      	ldrh	r3, [r3, #10]
 8005930:	461a      	mov	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	fb03 f202 	mul.w	r2, r3, r2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	4413      	add	r3, r2
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d904      	bls.n	800596a <get_fat+0x20>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <get_fat+0x26>
		val = 1;	/* Internal error */
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e08f      	b.n	8005a90 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005974:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d062      	beq.n	8005a44 <get_fat+0xfa>
 800597e:	2b03      	cmp	r3, #3
 8005980:	dc7c      	bgt.n	8005a7c <get_fat+0x132>
 8005982:	2b01      	cmp	r3, #1
 8005984:	d002      	beq.n	800598c <get_fat+0x42>
 8005986:	2b02      	cmp	r3, #2
 8005988:	d042      	beq.n	8005a10 <get_fat+0xc6>
 800598a:	e077      	b.n	8005a7c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0a5b      	lsrs	r3, r3, #9
 80059a2:	4413      	add	r3, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	6938      	ldr	r0, [r7, #16]
 80059a8:	f7ff ff14 	bl	80057d4 <move_window>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d167      	bne.n	8005a82 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	60fa      	str	r2, [r7, #12]
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6a1a      	ldr	r2, [r3, #32]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	4413      	add	r3, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	6938      	ldr	r0, [r7, #16]
 80059d4:	f7ff fefe 	bl	80057d4 <move_window>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d153      	bne.n	8005a86 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <get_fat+0xbc>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	e002      	b.n	8005a0c <get_fat+0xc2>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0c:	617b      	str	r3, [r7, #20]
			break;
 8005a0e:	e03f      	b.n	8005a90 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	4413      	add	r3, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6938      	ldr	r0, [r7, #16]
 8005a1e:	f7ff fed9 	bl	80057d4 <move_window>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d130      	bne.n	8005a8a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a36:	4413      	add	r3, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fc1b 	bl	8005274 <ld_word>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	617b      	str	r3, [r7, #20]
			break;
 8005a42:	e025      	b.n	8005a90 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	09db      	lsrs	r3, r3, #7
 8005a4c:	4413      	add	r3, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6938      	ldr	r0, [r7, #16]
 8005a52:	f7ff febf 	bl	80057d4 <move_window>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d118      	bne.n	8005a8e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fc19 	bl	80052a4 <ld_dword>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a78:	617b      	str	r3, [r7, #20]
			break;
 8005a7a:	e009      	b.n	8005a90 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e006      	b.n	8005a90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a82:	bf00      	nop
 8005a84:	e004      	b.n	8005a90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a86:	bf00      	nop
 8005a88:	e002      	b.n	8005a90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a8a:	bf00      	nop
 8005a8c:	e000      	b.n	8005a90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a8e:	bf00      	nop
		}
	}

	return val;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a9a:	b590      	push	{r4, r7, lr}
 8005a9c:	b089      	sub	sp, #36	; 0x24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f240 80d9 	bls.w	8005c64 <put_fat+0x1ca>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	f080 80d3 	bcs.w	8005c64 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	f000 8096 	beq.w	8005bf4 <put_fat+0x15a>
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	f300 80cb 	bgt.w	8005c64 <put_fat+0x1ca>
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d002      	beq.n	8005ad8 <put_fat+0x3e>
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d06e      	beq.n	8005bb4 <put_fat+0x11a>
 8005ad6:	e0c5      	b.n	8005c64 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	4413      	add	r3, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fe6e 	bl	80057d4 <move_window>
 8005af8:	4603      	mov	r3, r0
 8005afa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 80a9 	bne.w	8005c56 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	1c59      	adds	r1, r3, #1
 8005b0e:	61b9      	str	r1, [r7, #24]
 8005b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b14:	4413      	add	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <put_fat+0xa4>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	b25a      	sxtb	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	e001      	b.n	8005b42 <put_fat+0xa8>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	0a5b      	lsrs	r3, r3, #9
 8005b54:	4413      	add	r3, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fe3b 	bl	80057d4 <move_window>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d178      	bne.n	8005c5a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b74:	4413      	add	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <put_fat+0xf0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	e00e      	b.n	8005ba8 <put_fat+0x10e>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f023 030f 	bic.w	r3, r3, #15
 8005b94:	b25a      	sxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	b25b      	sxtb	r3, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	70da      	strb	r2, [r3, #3]
			break;
 8005bb2:	e057      	b.n	8005c64 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	4413      	add	r3, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fe07 	bl	80057d4 <move_window>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bca:	7ffb      	ldrb	r3, [r7, #31]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d146      	bne.n	8005c5e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005bde:	4413      	add	r3, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	b292      	uxth	r2, r2
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fb7f 	bl	80052ea <st_word>
			fs->wflag = 1;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	70da      	strb	r2, [r3, #3]
			break;
 8005bf2:	e037      	b.n	8005c64 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1a      	ldr	r2, [r3, #32]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	09db      	lsrs	r3, r3, #7
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fde7 	bl	80057d4 <move_window>
 8005c06:	4603      	mov	r3, r0
 8005c08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c0a:	7ffb      	ldrb	r3, [r7, #31]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d128      	bne.n	8005c62 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c24:	4413      	add	r3, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fb3c 	bl	80052a4 <ld_dword>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c32:	4323      	orrs	r3, r4
 8005c34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c44:	4413      	add	r3, r2
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fb69 	bl	8005320 <st_dword>
			fs->wflag = 1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	70da      	strb	r2, [r3, #3]
			break;
 8005c54:	e006      	b.n	8005c64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c56:	bf00      	nop
 8005c58:	e004      	b.n	8005c64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c5a:	bf00      	nop
 8005c5c:	e002      	b.n	8005c64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005c62:	bf00      	nop
		}
	}
	return res;
 8005c64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3724      	adds	r7, #36	; 0x24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}

08005c6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b088      	sub	sp, #32
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d904      	bls.n	8005c94 <remove_chain+0x26>
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d301      	bcc.n	8005c98 <remove_chain+0x2a>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e04b      	b.n	8005d30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	69b8      	ldr	r0, [r7, #24]
 8005ca6:	f7ff fef8 	bl	8005a9a <put_fat>
 8005caa:	4603      	mov	r3, r0
 8005cac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cae:	7ffb      	ldrb	r3, [r7, #31]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <remove_chain+0x4a>
 8005cb4:	7ffb      	ldrb	r3, [r7, #31]
 8005cb6:	e03b      	b.n	8005d30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fe45 	bl	800594a <get_fat>
 8005cc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d031      	beq.n	8005d2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <remove_chain+0x64>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e02e      	b.n	8005d30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd8:	d101      	bne.n	8005cde <remove_chain+0x70>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e028      	b.n	8005d30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005cde:	2200      	movs	r2, #0
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	69b8      	ldr	r0, [r7, #24]
 8005ce4:	f7ff fed9 	bl	8005a9a <put_fat>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005cec:	7ffb      	ldrb	r3, [r7, #31]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <remove_chain+0x88>
 8005cf2:	7ffb      	ldrb	r3, [r7, #31]
 8005cf4:	e01c      	b.n	8005d30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	3b02      	subs	r3, #2
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d20b      	bcs.n	8005d1c <remove_chain+0xae>
			fs->free_clst++;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	791b      	ldrb	r3, [r3, #4]
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d3c6      	bcc.n	8005cb8 <remove_chain+0x4a>
 8005d2a:	e000      	b.n	8005d2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <create_chain+0x2c>
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d31b      	bcc.n	8005d9c <create_chain+0x64>
 8005d64:	2301      	movs	r3, #1
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	e018      	b.n	8005d9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fdec 	bl	800594a <get_fat>
 8005d72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d801      	bhi.n	8005d7e <create_chain+0x46>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e070      	b.n	8005e60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d84:	d101      	bne.n	8005d8a <create_chain+0x52>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	e06a      	b.n	8005e60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d201      	bcs.n	8005d98 <create_chain+0x60>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	e063      	b.n	8005e60 <create_chain+0x128>
		scl = clst;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d307      	bcc.n	8005dc0 <create_chain+0x88>
				ncl = 2;
 8005db0:	2302      	movs	r3, #2
 8005db2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d901      	bls.n	8005dc0 <create_chain+0x88>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e04f      	b.n	8005e60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fdc1 	bl	800594a <get_fat>
 8005dc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d003      	beq.n	8005dde <create_chain+0xa6>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ddc:	d101      	bne.n	8005de2 <create_chain+0xaa>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	e03e      	b.n	8005e60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d1da      	bne.n	8005da0 <create_chain+0x68>
 8005dea:	2300      	movs	r3, #0
 8005dec:	e038      	b.n	8005e60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005dee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	6938      	ldr	r0, [r7, #16]
 8005df8:	f7ff fe4f 	bl	8005a9a <put_fat>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <create_chain+0xe2>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d006      	beq.n	8005e1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6938      	ldr	r0, [r7, #16]
 8005e12:	f7ff fe42 	bl	8005a9a <put_fat>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d116      	bne.n	8005e4e <create_chain+0x116>
		fs->last_clst = ncl;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	3b02      	subs	r3, #2
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d804      	bhi.n	8005e3e <create_chain+0x106>
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	1e5a      	subs	r2, r3, #1
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	791b      	ldrb	r3, [r3, #4]
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	711a      	strb	r2, [r3, #4]
 8005e4c:	e007      	b.n	8005e5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <create_chain+0x122>
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e58:	e000      	b.n	8005e5c <create_chain+0x124>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e5e:	69fb      	ldr	r3, [r7, #28]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	0a5b      	lsrs	r3, r3, #9
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	8952      	ldrh	r2, [r2, #10]
 8005e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1d1a      	adds	r2, r3, #4
 8005e92:	613a      	str	r2, [r7, #16]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <clmt_clust+0x3a>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e010      	b.n	8005ec4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d307      	bcc.n	8005eba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005eb8:	e7e9      	b.n	8005e8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005eba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ee6:	d204      	bcs.n	8005ef2 <dir_sdi+0x22>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e063      	b.n	8005fbe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <dir_sdi+0x46>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d902      	bls.n	8005f16 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10c      	bne.n	8005f36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	8912      	ldrh	r2, [r2, #8]
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d301      	bcc.n	8005f2c <dir_sdi+0x5c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e048      	b.n	8005fbe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	61da      	str	r2, [r3, #28]
 8005f34:	e029      	b.n	8005f8a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	895b      	ldrh	r3, [r3, #10]
 8005f3a:	025b      	lsls	r3, r3, #9
 8005f3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f3e:	e019      	b.n	8005f74 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6979      	ldr	r1, [r7, #20]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fd00 	bl	800594a <get_fat>
 8005f4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f52:	d101      	bne.n	8005f58 <dir_sdi+0x88>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e032      	b.n	8005fbe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d904      	bls.n	8005f68 <dir_sdi+0x98>
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d301      	bcc.n	8005f6c <dir_sdi+0x9c>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e028      	b.n	8005fbe <dir_sdi+0xee>
			ofs -= csz;
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d2e1      	bcs.n	8005f40 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005f7c:	6979      	ldr	r1, [r7, #20]
 8005f7e:	6938      	ldr	r0, [r7, #16]
 8005f80:	f7ff fcc4 	bl	800590c <clust2sect>
 8005f84:	4602      	mov	r2, r0
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <dir_sdi+0xcc>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e010      	b.n	8005fbe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	0a5b      	lsrs	r3, r3, #9
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	3320      	adds	r3, #32
 8005fdc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <dir_next+0x28>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fec:	d301      	bcc.n	8005ff2 <dir_next+0x2c>
 8005fee:	2304      	movs	r3, #4
 8005ff0:	e0aa      	b.n	8006148 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8098 	bne.w	800612e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	8912      	ldrh	r2, [r2, #8]
 8006018:	4293      	cmp	r3, r2
 800601a:	f0c0 8088 	bcc.w	800612e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	61da      	str	r2, [r3, #28]
 8006024:	2304      	movs	r3, #4
 8006026:	e08f      	b.n	8006148 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	0a5b      	lsrs	r3, r3, #9
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	8952      	ldrh	r2, [r2, #10]
 8006030:	3a01      	subs	r2, #1
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d17a      	bne.n	800612e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7ff fc82 	bl	800594a <get_fat>
 8006046:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d801      	bhi.n	8006052 <dir_next+0x8c>
 800604e:	2302      	movs	r3, #2
 8006050:	e07a      	b.n	8006148 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006058:	d101      	bne.n	800605e <dir_next+0x98>
 800605a:	2301      	movs	r3, #1
 800605c:	e074      	b.n	8006148 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	429a      	cmp	r2, r3
 8006066:	d358      	bcc.n	800611a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	61da      	str	r2, [r3, #28]
 8006074:	2304      	movs	r3, #4
 8006076:	e067      	b.n	8006148 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7ff fe59 	bl	8005d38 <create_chain>
 8006086:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <dir_next+0xcc>
 800608e:	2307      	movs	r3, #7
 8006090:	e05a      	b.n	8006148 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <dir_next+0xd6>
 8006098:	2302      	movs	r3, #2
 800609a:	e055      	b.n	8006148 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a2:	d101      	bne.n	80060a8 <dir_next+0xe2>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e04f      	b.n	8006148 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fb4f 	bl	800574c <sync_window>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <dir_next+0xf2>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e047      	b.n	8006148 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3330      	adds	r3, #48	; 0x30
 80060bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff f979 	bl	80053ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	6979      	ldr	r1, [r7, #20]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff fc1c 	bl	800590c <clust2sect>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80060da:	e012      	b.n	8006102 <dir_next+0x13c>
						fs->wflag = 1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff fb32 	bl	800574c <sync_window>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <dir_next+0x12c>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e02a      	b.n	8006148 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3301      	adds	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	62da      	str	r2, [r3, #44]	; 0x2c
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	895b      	ldrh	r3, [r3, #10]
 8006106:	461a      	mov	r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4293      	cmp	r3, r2
 800610c:	d3e6      	bcc.n	80060dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad2      	subs	r2, r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff fbf2 	bl	800590c <clust2sect>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	441a      	add	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006160:	2100      	movs	r1, #0
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff feb4 	bl	8005ed0 <dir_sdi>
 8006168:	4603      	mov	r3, r0
 800616a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d12b      	bne.n	80061ca <dir_alloc+0x7a>
		n = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4619      	mov	r1, r3
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fb29 	bl	80057d4 <move_window>
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11d      	bne.n	80061c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2be5      	cmp	r3, #229	; 0xe5
 8006194:	d004      	beq.n	80061a0 <dir_alloc+0x50>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d107      	bne.n	80061b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	3301      	adds	r3, #1
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d102      	bne.n	80061b4 <dir_alloc+0x64>
 80061ae:	e00c      	b.n	80061ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ff05 	bl	8005fc6 <dir_next>
 80061bc:	4603      	mov	r3, r0
 80061be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0d7      	beq.n	8006176 <dir_alloc+0x26>
 80061c6:	e000      	b.n	80061ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80061c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d101      	bne.n	80061d4 <dir_alloc+0x84>
 80061d0:	2307      	movs	r3, #7
 80061d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	331a      	adds	r3, #26
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff f841 	bl	8005274 <ld_word>
 80061f2:	4603      	mov	r3, r0
 80061f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d109      	bne.n	8006212 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	3314      	adds	r3, #20
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f836 	bl	8005274 <ld_word>
 8006208:	4603      	mov	r3, r0
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006212:	68fb      	ldr	r3, [r7, #12]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	331a      	adds	r3, #26
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	b292      	uxth	r2, r2
 8006230:	4611      	mov	r1, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff f859 	bl	80052ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d109      	bne.n	8006254 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f103 0214 	add.w	r2, r3, #20
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	b29b      	uxth	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f7ff f84b 	bl	80052ea <st_word>
	}
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800626a:	2100      	movs	r1, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fe2f 	bl	8005ed0 <dir_sdi>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <dir_find+0x24>
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	e03e      	b.n	80062fe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	4619      	mov	r1, r3
 8006286:	6938      	ldr	r0, [r7, #16]
 8006288:	f7ff faa4 	bl	80057d4 <move_window>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d12f      	bne.n	80062f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <dir_find+0x4e>
 80062a4:	2304      	movs	r3, #4
 80062a6:	75fb      	strb	r3, [r7, #23]
 80062a8:	e028      	b.n	80062fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	330b      	adds	r3, #11
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	330b      	adds	r3, #11
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <dir_find+0x86>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a18      	ldr	r0, [r3, #32]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3324      	adds	r3, #36	; 0x24
 80062d4:	220b      	movs	r2, #11
 80062d6:	4619      	mov	r1, r3
 80062d8:	f7ff f88a 	bl	80053f0 <mem_cmp>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fe6e 	bl	8005fc6 <dir_next>
 80062ea:	4603      	mov	r3, r0
 80062ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0c5      	beq.n	8006280 <dir_find+0x24>
 80062f4:	e002      	b.n	80062fc <dir_find+0xa0>
		if (res != FR_OK) break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062fa:	bf00      	nop

	return res;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006314:	2101      	movs	r1, #1
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff ff1a 	bl	8006150 <dir_alloc>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d11c      	bne.n	8006360 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4619      	mov	r1, r3
 800632c:	68b8      	ldr	r0, [r7, #8]
 800632e:	f7ff fa51 	bl	80057d4 <move_window>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d111      	bne.n	8006360 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	2220      	movs	r2, #32
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff f838 	bl	80053ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a18      	ldr	r0, [r3, #32]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3324      	adds	r3, #36	; 0x24
 8006352:	220b      	movs	r2, #11
 8006354:	4619      	mov	r1, r3
 8006356:	f7ff f80f 	bl	8005378 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2201      	movs	r2, #1
 800635e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3324      	adds	r3, #36	; 0x24
 8006380:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006382:	220b      	movs	r2, #11
 8006384:	2120      	movs	r1, #32
 8006386:	68b8      	ldr	r0, [r7, #8]
 8006388:	f7ff f817 	bl	80053ba <mem_set>
	si = i = 0; ni = 8;
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	2308      	movs	r3, #8
 8006396:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	61fa      	str	r2, [r7, #28]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80063a6:	7efb      	ldrb	r3, [r7, #27]
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d94e      	bls.n	800644a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80063ac:	7efb      	ldrb	r3, [r7, #27]
 80063ae:	2b2f      	cmp	r3, #47	; 0x2f
 80063b0:	d006      	beq.n	80063c0 <create_name+0x54>
 80063b2:	7efb      	ldrb	r3, [r7, #27]
 80063b4:	2b5c      	cmp	r3, #92	; 0x5c
 80063b6:	d110      	bne.n	80063da <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80063b8:	e002      	b.n	80063c0 <create_name+0x54>
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	3301      	adds	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b2f      	cmp	r3, #47	; 0x2f
 80063ca:	d0f6      	beq.n	80063ba <create_name+0x4e>
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b5c      	cmp	r3, #92	; 0x5c
 80063d6:	d0f0      	beq.n	80063ba <create_name+0x4e>
			break;
 80063d8:	e038      	b.n	800644c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80063da:	7efb      	ldrb	r3, [r7, #27]
 80063dc:	2b2e      	cmp	r3, #46	; 0x2e
 80063de:	d003      	beq.n	80063e8 <create_name+0x7c>
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d30c      	bcc.n	8006402 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b0b      	cmp	r3, #11
 80063ec:	d002      	beq.n	80063f4 <create_name+0x88>
 80063ee:	7efb      	ldrb	r3, [r7, #27]
 80063f0:	2b2e      	cmp	r3, #46	; 0x2e
 80063f2:	d001      	beq.n	80063f8 <create_name+0x8c>
 80063f4:	2306      	movs	r3, #6
 80063f6:	e044      	b.n	8006482 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80063f8:	2308      	movs	r3, #8
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	230b      	movs	r3, #11
 80063fe:	617b      	str	r3, [r7, #20]
			continue;
 8006400:	e022      	b.n	8006448 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006402:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006406:	2b00      	cmp	r3, #0
 8006408:	da04      	bge.n	8006414 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800640a:	7efb      	ldrb	r3, [r7, #27]
 800640c:	3b80      	subs	r3, #128	; 0x80
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <create_name+0x120>)
 8006410:	5cd3      	ldrb	r3, [r2, r3]
 8006412:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006414:	7efb      	ldrb	r3, [r7, #27]
 8006416:	4619      	mov	r1, r3
 8006418:	481d      	ldr	r0, [pc, #116]	; (8006490 <create_name+0x124>)
 800641a:	f7ff f810 	bl	800543e <chk_chr>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <create_name+0xbc>
 8006424:	2306      	movs	r3, #6
 8006426:	e02c      	b.n	8006482 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006428:	7efb      	ldrb	r3, [r7, #27]
 800642a:	2b60      	cmp	r3, #96	; 0x60
 800642c:	d905      	bls.n	800643a <create_name+0xce>
 800642e:	7efb      	ldrb	r3, [r7, #27]
 8006430:	2b7a      	cmp	r3, #122	; 0x7a
 8006432:	d802      	bhi.n	800643a <create_name+0xce>
 8006434:	7efb      	ldrb	r3, [r7, #27]
 8006436:	3b20      	subs	r3, #32
 8006438:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	613a      	str	r2, [r7, #16]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4413      	add	r3, r2
 8006444:	7efa      	ldrb	r2, [r7, #27]
 8006446:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006448:	e7a6      	b.n	8006398 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800644a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	441a      	add	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <create_name+0xf4>
 800645c:	2306      	movs	r3, #6
 800645e:	e010      	b.n	8006482 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2be5      	cmp	r3, #229	; 0xe5
 8006466:	d102      	bne.n	800646e <create_name+0x102>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2205      	movs	r2, #5
 800646c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800646e:	7efb      	ldrb	r3, [r7, #27]
 8006470:	2b20      	cmp	r3, #32
 8006472:	d801      	bhi.n	8006478 <create_name+0x10c>
 8006474:	2204      	movs	r2, #4
 8006476:	e000      	b.n	800647a <create_name+0x10e>
 8006478:	2200      	movs	r2, #0
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	330b      	adds	r3, #11
 800647e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006480:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	0800b598 	.word	0x0800b598
 8006490:	0800b4fc 	.word	0x0800b4fc

08006494 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064a8:	e002      	b.n	80064b0 <follow_path+0x1c>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b2f      	cmp	r3, #47	; 0x2f
 80064b6:	d0f8      	beq.n	80064aa <follow_path+0x16>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b5c      	cmp	r3, #92	; 0x5c
 80064be:	d0f4      	beq.n	80064aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2200      	movs	r2, #0
 80064c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b1f      	cmp	r3, #31
 80064cc:	d80a      	bhi.n	80064e4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2280      	movs	r2, #128	; 0x80
 80064d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fcf9 	bl	8005ed0 <dir_sdi>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
 80064e2:	e043      	b.n	800656c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064e4:	463b      	mov	r3, r7
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff3f 	bl	800636c <create_name>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d134      	bne.n	8006562 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff feaf 	bl	800625c <dir_find>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006508:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d127      	bne.n	8006566 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006516:	7afb      	ldrb	r3, [r7, #11]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d122      	bne.n	8006566 <follow_path+0xd2>
 8006520:	2305      	movs	r3, #5
 8006522:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006524:	e01f      	b.n	8006566 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d11c      	bne.n	800656a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	799b      	ldrb	r3, [r3, #6]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800653c:	2305      	movs	r3, #5
 800653e:	75fb      	strb	r3, [r7, #23]
 8006540:	e014      	b.n	800656c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006550:	4413      	add	r3, r2
 8006552:	4619      	mov	r1, r3
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff fe42 	bl	80061de <ld_clust>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006560:	e7c0      	b.n	80064e4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006562:	bf00      	nop
 8006564:	e002      	b.n	800656c <follow_path+0xd8>
				break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800656a:	bf00      	nop
			}
		}
	}

	return res;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006576:	b480      	push	{r7}
 8006578:	b087      	sub	sp, #28
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800657e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006582:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d031      	beq.n	80065f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e002      	b.n	800659a <get_ldnumber+0x24>
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3301      	adds	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d903      	bls.n	80065aa <get_ldnumber+0x34>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b3a      	cmp	r3, #58	; 0x3a
 80065a8:	d1f4      	bne.n	8006594 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b3a      	cmp	r3, #58	; 0x3a
 80065b0:	d11c      	bne.n	80065ec <get_ldnumber+0x76>
			tp = *path;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	60fa      	str	r2, [r7, #12]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	3b30      	subs	r3, #48	; 0x30
 80065c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b09      	cmp	r3, #9
 80065c8:	d80e      	bhi.n	80065e8 <get_ldnumber+0x72>
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d10a      	bne.n	80065e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <get_ldnumber+0x72>
					vol = (int)i;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3301      	adds	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	e002      	b.n	80065f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80065f0:	693b      	ldr	r3, [r7, #16]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	70da      	strb	r2, [r3, #3]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff f8da 	bl	80057d4 <move_window>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <check_fs+0x2a>
 8006626:	2304      	movs	r3, #4
 8006628:	e038      	b.n	800669c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3330      	adds	r3, #48	; 0x30
 800662e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe fe1e 	bl	8005274 <ld_word>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <check_fs+0x48>
 8006644:	2303      	movs	r3, #3
 8006646:	e029      	b.n	800669c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800664e:	2be9      	cmp	r3, #233	; 0xe9
 8006650:	d009      	beq.n	8006666 <check_fs+0x66>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006658:	2beb      	cmp	r3, #235	; 0xeb
 800665a:	d11e      	bne.n	800669a <check_fs+0x9a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006662:	2b90      	cmp	r3, #144	; 0x90
 8006664:	d119      	bne.n	800669a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3330      	adds	r3, #48	; 0x30
 800666a:	3336      	adds	r3, #54	; 0x36
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fe19 	bl	80052a4 <ld_dword>
 8006672:	4603      	mov	r3, r0
 8006674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006678:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <check_fs+0xa4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <check_fs+0x82>
 800667e:	2300      	movs	r3, #0
 8006680:	e00c      	b.n	800669c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3330      	adds	r3, #48	; 0x30
 8006686:	3352      	adds	r3, #82	; 0x52
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fe0b 	bl	80052a4 <ld_dword>
 800668e:	4603      	mov	r3, r0
 8006690:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <check_fs+0xa8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <check_fs+0x9a>
 8006696:	2300      	movs	r3, #0
 8006698:	e000      	b.n	800669c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800669a:	2302      	movs	r3, #2
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	00544146 	.word	0x00544146
 80066a8:	33544146 	.word	0x33544146

080066ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b096      	sub	sp, #88	; 0x58
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff ff58 	bl	8006576 <get_ldnumber>
 80066c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da01      	bge.n	80066d2 <find_volume+0x26>
 80066ce:	230b      	movs	r3, #11
 80066d0:	e22d      	b.n	8006b2e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066d2:	4aa1      	ldr	r2, [pc, #644]	; (8006958 <find_volume+0x2ac>)
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <find_volume+0x3a>
 80066e2:	230c      	movs	r3, #12
 80066e4:	e223      	b.n	8006b2e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01a      	beq.n	8006732 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fd19 	bl	8005138 <disk_status>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800670c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <find_volume+0x82>
 800671e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800672a:	230a      	movs	r3, #10
 800672c:	e1ff      	b.n	8006b2e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800672e:	2300      	movs	r3, #0
 8006730:	e1fd      	b.n	8006b2e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673a:	b2da      	uxtb	r2, r3
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fd11 	bl	800516c <disk_initialize>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800675c:	2303      	movs	r3, #3
 800675e:	e1e6      	b.n	8006b2e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d007      	beq.n	8006776 <find_volume+0xca>
 8006766:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006772:	230a      	movs	r3, #10
 8006774:	e1db      	b.n	8006b2e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800677a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800677c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800677e:	f7ff ff3f 	bl	8006600 <check_fs>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800678c:	2b02      	cmp	r3, #2
 800678e:	d149      	bne.n	8006824 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006790:	2300      	movs	r3, #0
 8006792:	643b      	str	r3, [r7, #64]	; 0x40
 8006794:	e01e      	b.n	80067d4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80067a4:	4413      	add	r3, r2
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	3304      	adds	r3, #4
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <find_volume+0x114>
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	3308      	adds	r3, #8
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fd74 	bl	80052a4 <ld_dword>
 80067bc:	4602      	mov	r2, r0
 80067be:	e000      	b.n	80067c2 <find_volume+0x116>
 80067c0:	2200      	movs	r2, #0
 80067c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	3358      	adds	r3, #88	; 0x58
 80067c8:	443b      	add	r3, r7
 80067ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d0:	3301      	adds	r3, #1
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d9dd      	bls.n	8006796 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80067da:	2300      	movs	r3, #0
 80067dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <find_volume+0x13e>
 80067e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e6:	3b01      	subs	r3, #1
 80067e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80067ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	3358      	adds	r3, #88	; 0x58
 80067f0:	443b      	add	r3, r7
 80067f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80067f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <find_volume+0x15e>
 80067fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006802:	f7ff fefd 	bl	8006600 <check_fs>
 8006806:	4603      	mov	r3, r0
 8006808:	e000      	b.n	800680c <find_volume+0x160>
 800680a:	2303      	movs	r3, #3
 800680c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006814:	2b01      	cmp	r3, #1
 8006816:	d905      	bls.n	8006824 <find_volume+0x178>
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	3301      	adds	r3, #1
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	2b03      	cmp	r3, #3
 8006822:	d9e2      	bls.n	80067ea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006828:	2b04      	cmp	r3, #4
 800682a:	d101      	bne.n	8006830 <find_volume+0x184>
 800682c:	2301      	movs	r3, #1
 800682e:	e17e      	b.n	8006b2e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006834:	2b01      	cmp	r3, #1
 8006836:	d901      	bls.n	800683c <find_volume+0x190>
 8006838:	230d      	movs	r3, #13
 800683a:	e178      	b.n	8006b2e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	3330      	adds	r3, #48	; 0x30
 8006840:	330b      	adds	r3, #11
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fd16 	bl	8005274 <ld_word>
 8006848:	4603      	mov	r3, r0
 800684a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684e:	d001      	beq.n	8006854 <find_volume+0x1a8>
 8006850:	230d      	movs	r3, #13
 8006852:	e16c      	b.n	8006b2e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	3330      	adds	r3, #48	; 0x30
 8006858:	3316      	adds	r3, #22
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fd0a 	bl	8005274 <ld_word>
 8006860:	4603      	mov	r3, r0
 8006862:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <find_volume+0x1cc>
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	3330      	adds	r3, #48	; 0x30
 800686e:	3324      	adds	r3, #36	; 0x24
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fd17 	bl	80052a4 <ld_dword>
 8006876:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800687c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	789b      	ldrb	r3, [r3, #2]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d005      	beq.n	800689c <find_volume+0x1f0>
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	789b      	ldrb	r3, [r3, #2]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d001      	beq.n	800689c <find_volume+0x1f0>
 8006898:	230d      	movs	r3, #13
 800689a:	e148      	b.n	8006b2e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	789b      	ldrb	r3, [r3, #2]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a4:	fb02 f303 	mul.w	r3, r2, r3
 80068a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	895b      	ldrh	r3, [r3, #10]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <find_volume+0x224>
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	895b      	ldrh	r3, [r3, #10]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	895b      	ldrh	r3, [r3, #10]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <find_volume+0x228>
 80068d0:	230d      	movs	r3, #13
 80068d2:	e12c      	b.n	8006b2e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	3330      	adds	r3, #48	; 0x30
 80068d8:	3311      	adds	r3, #17
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fcca 	bl	8005274 <ld_word>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	891b      	ldrh	r3, [r3, #8]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <find_volume+0x24e>
 80068f6:	230d      	movs	r3, #13
 80068f8:	e119      	b.n	8006b2e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	3330      	adds	r3, #48	; 0x30
 80068fe:	3313      	adds	r3, #19
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fcb7 	bl	8005274 <ld_word>
 8006906:	4603      	mov	r3, r0
 8006908:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800690a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <find_volume+0x272>
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	3330      	adds	r3, #48	; 0x30
 8006914:	3320      	adds	r3, #32
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fcc4 	bl	80052a4 <ld_dword>
 800691c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	3330      	adds	r3, #48	; 0x30
 8006922:	330e      	adds	r3, #14
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fca5 	bl	8005274 <ld_word>
 800692a:	4603      	mov	r3, r0
 800692c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800692e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <find_volume+0x28c>
 8006934:	230d      	movs	r3, #13
 8006936:	e0fa      	b.n	8006b2e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006938:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800693a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693c:	4413      	add	r3, r2
 800693e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006940:	8912      	ldrh	r2, [r2, #8]
 8006942:	0912      	lsrs	r2, r2, #4
 8006944:	b292      	uxth	r2, r2
 8006946:	4413      	add	r3, r2
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800694a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	429a      	cmp	r2, r3
 8006950:	d204      	bcs.n	800695c <find_volume+0x2b0>
 8006952:	230d      	movs	r3, #13
 8006954:	e0eb      	b.n	8006b2e <find_volume+0x482>
 8006956:	bf00      	nop
 8006958:	20002b70 	.word	0x20002b70
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800695c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006964:	8952      	ldrh	r2, [r2, #10]
 8006966:	fbb3 f3f2 	udiv	r3, r3, r2
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <find_volume+0x2ca>
 8006972:	230d      	movs	r3, #13
 8006974:	e0db      	b.n	8006b2e <find_volume+0x482>
		fmt = FS_FAT32;
 8006976:	2303      	movs	r3, #3
 8006978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006982:	4293      	cmp	r3, r2
 8006984:	d802      	bhi.n	800698c <find_volume+0x2e0>
 8006986:	2302      	movs	r3, #2
 8006988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006992:	4293      	cmp	r3, r2
 8006994:	d802      	bhi.n	800699c <find_volume+0x2f0>
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	1c9a      	adds	r2, r3, #2
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069a8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ae:	441a      	add	r2, r3
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80069b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	441a      	add	r2, r3
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80069be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d11e      	bne.n	8006a04 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	3330      	adds	r3, #48	; 0x30
 80069ca:	332a      	adds	r3, #42	; 0x2a
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fc51 	bl	8005274 <ld_word>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <find_volume+0x330>
 80069d8:	230d      	movs	r3, #13
 80069da:	e0a8      	b.n	8006b2e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	891b      	ldrh	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <find_volume+0x33c>
 80069e4:	230d      	movs	r3, #13
 80069e6:	e0a2      	b.n	8006b2e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	3330      	adds	r3, #48	; 0x30
 80069ec:	332c      	adds	r3, #44	; 0x2c
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fc58 	bl	80052a4 <ld_dword>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	647b      	str	r3, [r7, #68]	; 0x44
 8006a02:	e01f      	b.n	8006a44 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	891b      	ldrh	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <find_volume+0x364>
 8006a0c:	230d      	movs	r3, #13
 8006a0e:	e08e      	b.n	8006b2e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a16:	441a      	add	r2, r3
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d103      	bne.n	8006a2c <find_volume+0x380>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	e00a      	b.n	8006a42 <find_volume+0x396>
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	695a      	ldr	r2, [r3, #20]
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	085a      	lsrs	r2, r3, #1
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a42:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a4e:	0a5b      	lsrs	r3, r3, #9
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d201      	bcs.n	8006a58 <find_volume+0x3ac>
 8006a54:	230d      	movs	r3, #13
 8006a56:	e06a      	b.n	8006b2e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a5e:	611a      	str	r2, [r3, #16]
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d149      	bne.n	8006b0a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	3330      	adds	r3, #48	; 0x30
 8006a7a:	3330      	adds	r3, #48	; 0x30
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe fbf9 	bl	8005274 <ld_word>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d140      	bne.n	8006b0a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a90:	f7fe fea0 	bl	80057d4 <move_window>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d137      	bne.n	8006b0a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	3330      	adds	r3, #48	; 0x30
 8006aa4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fbe3 	bl	8005274 <ld_word>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d127      	bne.n	8006b0a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	3330      	adds	r3, #48	; 0x30
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fbf0 	bl	80052a4 <ld_dword>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <find_volume+0x48c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d11e      	bne.n	8006b0a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	3330      	adds	r3, #48	; 0x30
 8006ad0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe fbe5 	bl	80052a4 <ld_dword>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <find_volume+0x490>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	3330      	adds	r3, #48	; 0x30
 8006ae6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fbda 	bl	80052a4 <ld_dword>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	3330      	adds	r3, #48	; 0x30
 8006afa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fbd0 	bl	80052a4 <ld_dword>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006b10:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <find_volume+0x494>)
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	3301      	adds	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <find_volume+0x494>)
 8006b1c:	801a      	strh	r2, [r3, #0]
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <find_volume+0x494>)
 8006b20:	881a      	ldrh	r2, [r3, #0]
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b28:	f7fe fdec 	bl	8005704 <clear_lock>
#endif
	return FR_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3758      	adds	r7, #88	; 0x58
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	41615252 	.word	0x41615252
 8006b3c:	61417272 	.word	0x61417272
 8006b40:	20002b74 	.word	0x20002b74

08006b44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b4e:	2309      	movs	r3, #9
 8006b50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01c      	beq.n	8006b92 <validate+0x4e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d018      	beq.n	8006b92 <validate+0x4e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d013      	beq.n	8006b92 <validate+0x4e>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	889a      	ldrh	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d10c      	bne.n	8006b92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fada 	bl	8005138 <disk_status>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <validate+0x4e>
			res = FR_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <validate+0x5a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	e000      	b.n	8006ba0 <validate+0x5c>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	6013      	str	r3, [r2, #0]
	return res;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006bc2:	f107 0310 	add.w	r3, r7, #16
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fcd5 	bl	8006576 <get_ldnumber>
 8006bcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da01      	bge.n	8006bd8 <f_mount+0x28>
 8006bd4:	230b      	movs	r3, #11
 8006bd6:	e02b      	b.n	8006c30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006bd8:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <f_mount+0x88>)
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006be8:	69b8      	ldr	r0, [r7, #24]
 8006bea:	f7fe fd8b 	bl	8005704 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	490d      	ldr	r1, [pc, #52]	; (8006c38 <f_mount+0x88>)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <f_mount+0x66>
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <f_mount+0x6a>
 8006c16:	2300      	movs	r3, #0
 8006c18:	e00a      	b.n	8006c30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c1a:	f107 010c 	add.w	r1, r7, #12
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	2200      	movs	r2, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fd41 	bl	80066ac <find_volume>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3720      	adds	r7, #32
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20002b70 	.word	0x20002b70

08006c3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b098      	sub	sp, #96	; 0x60
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <f_open+0x18>
 8006c50:	2309      	movs	r3, #9
 8006c52:	e1ad      	b.n	8006fb0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006c5c:	79fa      	ldrb	r2, [r7, #7]
 8006c5e:	f107 0110 	add.w	r1, r7, #16
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff fd20 	bl	80066ac <find_volume>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 8191 	bne.w	8006f9e <f_open+0x362>
		dj.obj.fs = fs;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	f107 0314 	add.w	r3, r7, #20
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fc03 	bl	8006494 <follow_path>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11a      	bne.n	8006cd2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006c9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da03      	bge.n	8006cae <f_open+0x72>
				res = FR_INVALID_NAME;
 8006ca6:	2306      	movs	r3, #6
 8006ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cac:	e011      	b.n	8006cd2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fbd4 	bl	8005474 <chk_lock>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	f003 031c 	and.w	r3, r3, #28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d07f      	beq.n	8006ddc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d10e      	bne.n	8006d0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006cec:	f7fe fc1e 	bl	800552c <enq_lock>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <f_open+0xc8>
 8006cf6:	f107 0314 	add.w	r3, r7, #20
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fb03 	bl	8006306 <dir_register>
 8006d00:	4603      	mov	r3, r0
 8006d02:	e000      	b.n	8006d06 <f_open+0xca>
 8006d04:	2312      	movs	r3, #18
 8006d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	71fb      	strb	r3, [r7, #7]
 8006d12:	e010      	b.n	8006d36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d14:	7ebb      	ldrb	r3, [r7, #26]
 8006d16:	f003 0311 	and.w	r3, r3, #17
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <f_open+0xea>
					res = FR_DENIED;
 8006d1e:	2307      	movs	r3, #7
 8006d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d24:	e007      	b.n	8006d36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <f_open+0xfa>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d168      	bne.n	8006e10 <f_open+0x1d4>
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d063      	beq.n	8006e10 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006d48:	f7fd fcbe 	bl	80046c8 <get_fattime>
 8006d4c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	330e      	adds	r3, #14
 8006d52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fae3 	bl	8005320 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	3316      	adds	r3, #22
 8006d5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fadd 	bl	8005320 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	330b      	adds	r3, #11
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fa32 	bl	80061de <ld_clust>
 8006d7a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d80:	2200      	movs	r2, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fa4a 	bl	800621c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	331c      	adds	r3, #28
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fac6 	bl	8005320 <st_dword>
					fs->wflag = 1;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2201      	movs	r2, #1
 8006d98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d037      	beq.n	8006e10 <f_open+0x1d4>
						dw = fs->winsect;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006da6:	f107 0314 	add.w	r3, r7, #20
 8006daa:	2200      	movs	r2, #0
 8006dac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe ff5d 	bl	8005c6e <remove_chain>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d126      	bne.n	8006e10 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fd04 	bl	80057d4 <move_window>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dd6:	3a01      	subs	r2, #1
 8006dd8:	60da      	str	r2, [r3, #12]
 8006dda:	e019      	b.n	8006e10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d115      	bne.n	8006e10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006de4:	7ebb      	ldrb	r3, [r7, #26]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006dee:	2304      	movs	r3, #4
 8006df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006df4:	e00c      	b.n	8006e10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <f_open+0x1d4>
 8006e00:	7ebb      	ldrb	r3, [r7, #26]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <f_open+0x1d4>
						res = FR_DENIED;
 8006e0a:	2307      	movs	r3, #7
 8006e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d128      	bne.n	8006e6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bf14      	ite	ne
 8006e42:	2301      	movne	r3, #1
 8006e44:	2300      	moveq	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f107 0314 	add.w	r3, r7, #20
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fb8d 	bl	8005570 <inc_lock>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <f_open+0x22e>
 8006e64:	2302      	movs	r3, #2
 8006e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 8095 	bne.w	8006f9e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff f9af 	bl	80061de <ld_clust>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	331c      	adds	r3, #28
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fa0a 	bl	80052a4 <ld_dword>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	88da      	ldrh	r2, [r3, #6]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	79fa      	ldrb	r2, [r7, #7]
 8006eae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3330      	adds	r3, #48	; 0x30
 8006ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fa74 	bl	80053ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d060      	beq.n	8006f9e <f_open+0x362>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d05c      	beq.n	8006f9e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	895b      	ldrh	r3, [r3, #10]
 8006ef0:	025b      	lsls	r3, r3, #9
 8006ef2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	657b      	str	r3, [r7, #84]	; 0x54
 8006f00:	e016      	b.n	8006f30 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fd1f 	bl	800594a <get_fat>
 8006f0c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d802      	bhi.n	8006f1a <f_open+0x2de>
 8006f14:	2302      	movs	r3, #2
 8006f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f20:	d102      	bne.n	8006f28 <f_open+0x2ec>
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d103      	bne.n	8006f40 <f_open+0x304>
 8006f38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d8e0      	bhi.n	8006f02 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d127      	bne.n	8006f9e <f_open+0x362>
 8006f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d022      	beq.n	8006f9e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fcd5 	bl	800590c <clust2sect>
 8006f62:	6478      	str	r0, [r7, #68]	; 0x44
 8006f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <f_open+0x336>
						res = FR_INT_ERR;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f70:	e015      	b.n	8006f9e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f74:	0a5a      	lsrs	r2, r3, #9
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	441a      	add	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	7858      	ldrb	r0, [r3, #1]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f7fe f913 	bl	80051b8 <disk_read>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <f_open+0x362>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <f_open+0x370>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006fac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3760      	adds	r7, #96	; 0x60
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f107 0214 	add.w	r2, r7, #20
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fdb3 	bl	8006b44 <validate>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <f_read+0x44>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	7d5b      	ldrb	r3, [r3, #21]
 8006ff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <f_read+0x4a>
 8006ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007000:	e115      	b.n	800722e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7d1b      	ldrb	r3, [r3, #20]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <f_read+0x5a>
 800700e:	2307      	movs	r3, #7
 8007010:	e10d      	b.n	800722e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	429a      	cmp	r2, r3
 8007024:	f240 80fe 	bls.w	8007224 <f_read+0x26c>
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800702c:	e0fa      	b.n	8007224 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 80c6 	bne.w	80071c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	8952      	ldrh	r2, [r2, #10]
 8007046:	3a01      	subs	r2, #1
 8007048:	4013      	ands	r3, r2
 800704a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d12f      	bne.n	80070b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
 8007060:	e013      	b.n	800708a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7fe fef9 	bl	8005e68 <clmt_clust>
 8007076:	6338      	str	r0, [r7, #48]	; 0x30
 8007078:	e007      	b.n	800708a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f7fe fc61 	bl	800594a <get_fat>
 8007088:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	2b01      	cmp	r3, #1
 800708e:	d804      	bhi.n	800709a <f_read+0xe2>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2202      	movs	r2, #2
 8007094:	755a      	strb	r2, [r3, #21]
 8007096:	2302      	movs	r3, #2
 8007098:	e0c9      	b.n	800722e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070a0:	d104      	bne.n	80070ac <f_read+0xf4>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	755a      	strb	r2, [r3, #21]
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0c0      	b.n	800722e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe fc26 	bl	800590c <clust2sect>
 80070c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <f_read+0x11a>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2202      	movs	r2, #2
 80070cc:	755a      	strb	r2, [r3, #21]
 80070ce:	2302      	movs	r3, #2
 80070d0:	e0ad      	b.n	800722e <f_read+0x276>
			sect += csect;
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	0a5b      	lsrs	r3, r3, #9
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d039      	beq.n	800715a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	4413      	add	r3, r2
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	8952      	ldrh	r2, [r2, #10]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d905      	bls.n	8007100 <f_read+0x148>
					cc = fs->csize - csect;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	895b      	ldrh	r3, [r3, #10]
 80070f8:	461a      	mov	r2, r3
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	7858      	ldrb	r0, [r3, #1]
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800710a:	f7fe f855 	bl	80051b8 <disk_read>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <f_read+0x166>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	755a      	strb	r2, [r3, #21]
 800711a:	2301      	movs	r3, #1
 800711c:	e087      	b.n	800722e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	7d1b      	ldrb	r3, [r3, #20]
 8007122:	b25b      	sxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	da14      	bge.n	8007152 <f_read+0x19a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a1a      	ldr	r2, [r3, #32]
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007132:	429a      	cmp	r2, r3
 8007134:	d90d      	bls.n	8007152 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	025b      	lsls	r3, r3, #9
 8007140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007142:	18d0      	adds	r0, r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3330      	adds	r3, #48	; 0x30
 8007148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714c:	4619      	mov	r1, r3
 800714e:	f7fe f913 	bl	8005378 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	025b      	lsls	r3, r3, #9
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007158:	e050      	b.n	80071fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	d02e      	beq.n	80071c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7d1b      	ldrb	r3, [r3, #20]
 8007168:	b25b      	sxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	da18      	bge.n	80071a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	7858      	ldrb	r0, [r3, #1]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1a      	ldr	r2, [r3, #32]
 800717c:	2301      	movs	r3, #1
 800717e:	f7fe f83b 	bl	80051f8 <disk_write>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d004      	beq.n	8007192 <f_read+0x1da>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	755a      	strb	r2, [r3, #21]
 800718e:	2301      	movs	r3, #1
 8007190:	e04d      	b.n	800722e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7d1b      	ldrb	r3, [r3, #20]
 8007196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	7858      	ldrb	r0, [r3, #1]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071aa:	2301      	movs	r3, #1
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	f7fe f803 	bl	80051b8 <disk_read>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d004      	beq.n	80071c2 <f_read+0x20a>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	755a      	strb	r2, [r3, #21]
 80071be:	2301      	movs	r3, #1
 80071c0:	e035      	b.n	800722e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80071d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d901      	bls.n	80071e2 <f_read+0x22a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f0:	4413      	add	r3, r2
 80071f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f4:	4619      	mov	r1, r3
 80071f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071f8:	f7fe f8be 	bl	8005378 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80071fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	4413      	add	r3, r2
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699a      	ldr	r2, [r3, #24]
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	441a      	add	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	619a      	str	r2, [r3, #24]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	441a      	add	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f47f af01 	bne.w	800702e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3738      	adds	r7, #56	; 0x38
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b08c      	sub	sp, #48	; 0x30
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f107 0210 	add.w	r2, r7, #16
 8007254:	4611      	mov	r1, r2
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fc74 	bl	8006b44 <validate>
 800725c:	4603      	mov	r3, r0
 800725e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007266:	2b00      	cmp	r3, #0
 8007268:	d107      	bne.n	800727a <f_write+0x44>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	7d5b      	ldrb	r3, [r3, #21]
 800726e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <f_write+0x4a>
 800727a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800727e:	e14b      	b.n	8007518 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	7d1b      	ldrb	r3, [r3, #20]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <f_write+0x5a>
 800728c:	2307      	movs	r3, #7
 800728e:	e143      	b.n	8007518 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	441a      	add	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	f080 812d 	bcs.w	80074fc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	43db      	mvns	r3, r3
 80072a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80072aa:	e127      	b.n	80074fc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 80e3 	bne.w	8007480 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	0a5b      	lsrs	r3, r3, #9
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	8952      	ldrh	r2, [r2, #10]
 80072c4:	3a01      	subs	r2, #1
 80072c6:	4013      	ands	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d143      	bne.n	8007358 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10c      	bne.n	80072f2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11a      	bne.n	800731a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fd25 	bl	8005d38 <create_chain>
 80072ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80072f0:	e013      	b.n	800731a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	4619      	mov	r1, r3
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7fe fdb1 	bl	8005e68 <clmt_clust>
 8007306:	62b8      	str	r0, [r7, #40]	; 0x28
 8007308:	e007      	b.n	800731a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fe fd10 	bl	8005d38 <create_chain>
 8007318:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80f2 	beq.w	8007506 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	2b01      	cmp	r3, #1
 8007326:	d104      	bne.n	8007332 <f_write+0xfc>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2202      	movs	r2, #2
 800732c:	755a      	strb	r2, [r3, #21]
 800732e:	2302      	movs	r3, #2
 8007330:	e0f2      	b.n	8007518 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007338:	d104      	bne.n	8007344 <f_write+0x10e>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	755a      	strb	r2, [r3, #21]
 8007340:	2301      	movs	r3, #1
 8007342:	e0e9      	b.n	8007518 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007348:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d102      	bne.n	8007358 <f_write+0x122>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007356:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	7d1b      	ldrb	r3, [r3, #20]
 800735c:	b25b      	sxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	da18      	bge.n	8007394 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	7858      	ldrb	r0, [r3, #1]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	2301      	movs	r3, #1
 8007372:	f7fd ff41 	bl	80051f8 <disk_write>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <f_write+0x150>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	755a      	strb	r2, [r3, #21]
 8007382:	2301      	movs	r3, #1
 8007384:	e0c8      	b.n	8007518 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	7d1b      	ldrb	r3, [r3, #20]
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	b2da      	uxtb	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fe fab5 	bl	800590c <clust2sect>
 80073a2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <f_write+0x17e>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2202      	movs	r2, #2
 80073ae:	755a      	strb	r2, [r3, #21]
 80073b0:	2302      	movs	r3, #2
 80073b2:	e0b1      	b.n	8007518 <f_write+0x2e2>
			sect += csect;
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	4413      	add	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	0a5b      	lsrs	r3, r3, #9
 80073c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d03c      	beq.n	8007442 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	4413      	add	r3, r2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	8952      	ldrh	r2, [r2, #10]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d905      	bls.n	80073e2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	895b      	ldrh	r3, [r3, #10]
 80073da:	461a      	mov	r2, r3
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	7858      	ldrb	r0, [r3, #1]
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	f7fd ff04 	bl	80051f8 <disk_write>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <f_write+0x1ca>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	755a      	strb	r2, [r3, #21]
 80073fc:	2301      	movs	r3, #1
 80073fe:	e08b      	b.n	8007518 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a1a      	ldr	r2, [r3, #32]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	429a      	cmp	r2, r3
 800740c:	d915      	bls.n	800743a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1a      	ldr	r2, [r3, #32]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007426:	4619      	mov	r1, r3
 8007428:	f7fd ffa6 	bl	8005378 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007434:	b2da      	uxtb	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	025b      	lsls	r3, r3, #9
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007440:	e03f      	b.n	80074c2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	429a      	cmp	r2, r3
 800744a:	d016      	beq.n	800747a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007454:	429a      	cmp	r2, r3
 8007456:	d210      	bcs.n	800747a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	7858      	ldrb	r0, [r3, #1]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007462:	2301      	movs	r3, #1
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	f7fd fea7 	bl	80051b8 <disk_read>
 800746a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	755a      	strb	r2, [r3, #21]
 8007476:	2301      	movs	r3, #1
 8007478:	e04e      	b.n	8007518 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800748e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d901      	bls.n	800749a <f_write+0x264>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a8:	4413      	add	r3, r2
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	69f9      	ldr	r1, [r7, #28]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd ff62 	bl	8005378 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7d1b      	ldrb	r3, [r3, #20]
 80074b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	4413      	add	r3, r2
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	619a      	str	r2, [r3, #24]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	429a      	cmp	r2, r3
 80074e0:	bf38      	it	cc
 80074e2:	461a      	movcc	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	60da      	str	r2, [r3, #12]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	441a      	add	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f47f aed4 	bne.w	80072ac <f_write+0x76>
 8007504:	e000      	b.n	8007508 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007506:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	7d1b      	ldrb	r3, [r3, #20]
 800750c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007510:	b2da      	uxtb	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3730      	adds	r7, #48	; 0x30
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f107 0208 	add.w	r2, r7, #8
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fb07 	bl	8006b44 <validate>
 8007536:	4603      	mov	r3, r0
 8007538:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d168      	bne.n	8007612 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7d1b      	ldrb	r3, [r3, #20]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d062      	beq.n	8007612 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7d1b      	ldrb	r3, [r3, #20]
 8007550:	b25b      	sxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	da15      	bge.n	8007582 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	7858      	ldrb	r0, [r3, #1]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1a      	ldr	r2, [r3, #32]
 8007564:	2301      	movs	r3, #1
 8007566:	f7fd fe47 	bl	80051f8 <disk_write>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <f_sync+0x54>
 8007570:	2301      	movs	r3, #1
 8007572:	e04f      	b.n	8007614 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7d1b      	ldrb	r3, [r3, #20]
 8007578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757c:	b2da      	uxtb	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007582:	f7fd f8a1 	bl	80046c8 <get_fattime>
 8007586:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7fe f91f 	bl	80057d4 <move_window>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d138      	bne.n	8007612 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	330b      	adds	r3, #11
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	330b      	adds	r3, #11
 80075b0:	f042 0220 	orr.w	r2, r2, #32
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	461a      	mov	r2, r3
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	f7fe fe2a 	bl	800621c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f103 021c 	add.w	r2, r3, #28
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7fd fea3 	bl	8005320 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3316      	adds	r3, #22
 80075de:	6939      	ldr	r1, [r7, #16]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fd fe9d 	bl	8005320 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3312      	adds	r3, #18
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fe7c 	bl	80052ea <st_word>
					fs->wflag = 1;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2201      	movs	r2, #1
 80075f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe f918 	bl	8005830 <sync_fs>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7d1b      	ldrb	r3, [r3, #20]
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	b2da      	uxtb	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007612:	7dfb      	ldrb	r3, [r7, #23]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ff7b 	bl	8007520 <f_sync>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d118      	bne.n	8007666 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f107 0208 	add.w	r2, r7, #8
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fa81 	bl	8006b44 <validate>
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10c      	bne.n	8007666 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe f81b 	bl	800568c <dec_lock>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b092      	sub	sp, #72	; 0x48
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800767c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007680:	f107 030c 	add.w	r3, r7, #12
 8007684:	2200      	movs	r2, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f810 	bl	80066ac <find_volume>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007696:	2b00      	cmp	r3, #0
 8007698:	f040 8099 	bne.w	80077ce <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800769c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	3b02      	subs	r3, #2
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d804      	bhi.n	80076ba <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e089      	b.n	80077ce <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d128      	bne.n	8007718 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80076c6:	2302      	movs	r3, #2
 80076c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80076ce:	f107 0314 	add.w	r3, r7, #20
 80076d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe f938 	bl	800594a <get_fat>
 80076da:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e2:	d103      	bne.n	80076ec <f_getfree+0x7c>
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076ea:	e063      	b.n	80077b4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d103      	bne.n	80076fa <f_getfree+0x8a>
 80076f2:	2302      	movs	r3, #2
 80076f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076f8:	e05c      	b.n	80077b4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <f_getfree+0x96>
 8007700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007702:	3301      	adds	r3, #1
 8007704:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007708:	3301      	adds	r3, #1
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007712:	429a      	cmp	r2, r3
 8007714:	d3db      	bcc.n	80076ce <f_getfree+0x5e>
 8007716:	e04d      	b.n	80077b4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
 8007728:	2300      	movs	r3, #0
 800772a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	2b00      	cmp	r3, #0
 8007730:	d113      	bne.n	800775a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	63ba      	str	r2, [r7, #56]	; 0x38
 800773a:	4619      	mov	r1, r3
 800773c:	f7fe f84a 	bl	80057d4 <move_window>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800774a:	2b00      	cmp	r3, #0
 800774c:	d131      	bne.n	80077b2 <f_getfree+0x142>
							p = fs->win;
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	3330      	adds	r3, #48	; 0x30
 8007752:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d10f      	bne.n	8007782 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007764:	f7fd fd86 	bl	8005274 <ld_word>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <f_getfree+0x104>
 800776e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007770:	3301      	adds	r3, #1
 8007772:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	3302      	adds	r3, #2
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777c:	3b02      	subs	r3, #2
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
 8007780:	e010      	b.n	80077a4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007784:	f7fd fd8e 	bl	80052a4 <ld_dword>
 8007788:	4603      	mov	r3, r0
 800778a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <f_getfree+0x128>
 8007792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007794:	3301      	adds	r3, #1
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	3304      	adds	r3, #4
 800779c:	633b      	str	r3, [r7, #48]	; 0x30
 800779e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a0:	3b04      	subs	r3, #4
 80077a2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80077a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a6:	3b01      	subs	r3, #1
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1bd      	bne.n	800772c <f_getfree+0xbc>
 80077b0:	e000      	b.n	80077b4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80077b2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077b8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077be:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	791a      	ldrb	r2, [r3, #4]
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80077ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3748      	adds	r7, #72	; 0x48
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b088      	sub	sp, #32
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80077ee:	e01b      	b.n	8007828 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	f107 0114 	add.w	r1, r7, #20
 80077f8:	2201      	movs	r2, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fbdc 	bl	8006fb8 <f_read>
		if (rc != 1) break;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d116      	bne.n	8007834 <f_gets+0x5a>
		c = s[0];
 8007806:	7d3b      	ldrb	r3, [r7, #20]
 8007808:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	2b0d      	cmp	r3, #13
 800780e:	d100      	bne.n	8007812 <f_gets+0x38>
 8007810:	e00a      	b.n	8007828 <f_gets+0x4e>
		*p++ = c;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	61ba      	str	r2, [r7, #24]
 8007818:	7dfa      	ldrb	r2, [r7, #23]
 800781a:	701a      	strb	r2, [r3, #0]
		n++;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	3301      	adds	r3, #1
 8007820:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b0a      	cmp	r3, #10
 8007826:	d007      	beq.n	8007838 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3b01      	subs	r3, #1
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	429a      	cmp	r2, r3
 8007830:	dbde      	blt.n	80077f0 <f_gets+0x16>
 8007832:	e002      	b.n	800783a <f_gets+0x60>
		if (rc != 1) break;
 8007834:	bf00      	nop
 8007836:	e000      	b.n	800783a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007838:	bf00      	nop
	}
	*p = 0;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <f_gets+0x70>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	e000      	b.n	800784c <f_gets+0x72>
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007862:	2301      	movs	r3, #1
 8007864:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800786a:	4b1f      	ldr	r3, [pc, #124]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 800786c:	7a5b      	ldrb	r3, [r3, #9]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d131      	bne.n	80078d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007874:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 8007876:	7a5b      	ldrb	r3, [r3, #9]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 800787e:	2100      	movs	r1, #0
 8007880:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007882:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 8007884:	7a5b      	ldrb	r3, [r3, #9]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 8007894:	7a5b      	ldrb	r3, [r3, #9]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 800789c:	4413      	add	r3, r2
 800789e:	79fa      	ldrb	r2, [r7, #7]
 80078a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 80078a4:	7a5b      	ldrb	r3, [r3, #9]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	b2d1      	uxtb	r1, r2
 80078ac:	4a0e      	ldr	r2, [pc, #56]	; (80078e8 <FATFS_LinkDriverEx+0x94>)
 80078ae:	7251      	strb	r1, [r2, #9]
 80078b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80078b2:	7dbb      	ldrb	r3, [r7, #22]
 80078b4:	3330      	adds	r3, #48	; 0x30
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	3301      	adds	r3, #1
 80078c0:	223a      	movs	r2, #58	; 0x3a
 80078c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	3302      	adds	r3, #2
 80078c8:	222f      	movs	r2, #47	; 0x2f
 80078ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	3303      	adds	r3, #3
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20002b98 	.word	0x20002b98

080078ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80078f6:	2200      	movs	r2, #0
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff ffaa 	bl	8007854 <FATFS_LinkDriverEx>
 8007900:	4603      	mov	r3, r0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8007910:	4b10      	ldr	r3, [pc, #64]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 8007912:	2200      	movs	r2, #0
 8007914:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007916:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 8007918:	2201      	movs	r2, #1
 800791a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800791c:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 800791e:	4a0e      	ldr	r2, [pc, #56]	; (8007958 <MX_PDM2PCM_Init+0x4c>)
 8007920:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 8007924:	2202      	movs	r2, #2
 8007926:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 800792a:	2202      	movs	r2, #2
 800792c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800792e:	4809      	ldr	r0, [pc, #36]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 8007930:	f001 fd66 	bl	8009400 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007934:	4b09      	ldr	r3, [pc, #36]	; (800795c <MX_PDM2PCM_Init+0x50>)
 8007936:	2202      	movs	r2, #2
 8007938:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <MX_PDM2PCM_Init+0x50>)
 800793c:	2210      	movs	r2, #16
 800793e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <MX_PDM2PCM_Init+0x50>)
 8007942:	2200      	movs	r2, #0
 8007944:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007946:	4905      	ldr	r1, [pc, #20]	; (800795c <MX_PDM2PCM_Init+0x50>)
 8007948:	4802      	ldr	r0, [pc, #8]	; (8007954 <MX_PDM2PCM_Init+0x48>)
 800794a:	f001 fde3 	bl	8009514 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800794e:	bf00      	nop
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20002ba4 	.word	0x20002ba4
 8007958:	7d70a3d6 	.word	0x7d70a3d6
 800795c:	20002bf0 	.word	0x20002bf0

08007960 <D16_GENERIC>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	b089      	sub	sp, #36	; 0x24
 8007966:	68d4      	ldr	r4, [r2, #12]
 8007968:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800796a:	6993      	ldr	r3, [r2, #24]
 800796c:	9407      	str	r4, [sp, #28]
 800796e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007970:	9306      	str	r3, [sp, #24]
 8007972:	9402      	str	r4, [sp, #8]
 8007974:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007978:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800797c:	69d3      	ldr	r3, [r2, #28]
 800797e:	6896      	ldr	r6, [r2, #8]
 8007980:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007982:	9103      	str	r1, [sp, #12]
 8007984:	2d00      	cmp	r5, #0
 8007986:	d066      	beq.n	8007a56 <D16_GENERIC+0xf6>
 8007988:	f004 0510 	and.w	r5, r4, #16
 800798c:	f004 0420 	and.w	r4, r4, #32
 8007990:	9504      	str	r5, [sp, #16]
 8007992:	4938      	ldr	r1, [pc, #224]	; (8007a74 <D16_GENERIC+0x114>)
 8007994:	9405      	str	r4, [sp, #20]
 8007996:	f04f 0e00 	mov.w	lr, #0
 800799a:	4635      	mov	r5, r6
 800799c:	e04f      	b.n	8007a3e <D16_GENERIC+0xde>
 800799e:	5d87      	ldrb	r7, [r0, r6]
 80079a0:	7804      	ldrb	r4, [r0, #0]
 80079a2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80079a6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80079aa:	b2e6      	uxtb	r6, r4
 80079ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80079b0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80079b4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80079b8:	4433      	add	r3, r6
 80079ba:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80079be:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80079c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80079ca:	0aa3      	lsrs	r3, r4, #10
 80079cc:	4c2a      	ldr	r4, [pc, #168]	; (8007a78 <D16_GENERIC+0x118>)
 80079ce:	fb26 5404 	smlad	r4, r6, r4, r5
 80079d2:	4d2a      	ldr	r5, [pc, #168]	; (8007a7c <D16_GENERIC+0x11c>)
 80079d4:	fb26 f505 	smuad	r5, r6, r5
 80079d8:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80079dc:	eb04 080a 	add.w	r8, r4, sl
 80079e0:	eba8 080b 	sub.w	r8, r8, fp
 80079e4:	4646      	mov	r6, r8
 80079e6:	17f7      	asrs	r7, r6, #31
 80079e8:	e9cd 6700 	strd	r6, r7, [sp]
 80079ec:	9e04      	ldr	r6, [sp, #16]
 80079ee:	f10e 0c01 	add.w	ip, lr, #1
 80079f2:	b16e      	cbz	r6, 8007a10 <D16_GENERIC+0xb0>
 80079f4:	6a16      	ldr	r6, [r2, #32]
 80079f6:	9f01      	ldr	r7, [sp, #4]
 80079f8:	fba8 8906 	umull	r8, r9, r8, r6
 80079fc:	fb06 9907 	mla	r9, r6, r7, r9
 8007a00:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8007a04:	f149 0900 	adc.w	r9, r9, #0
 8007a08:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007a0c:	46a3      	mov	fp, r4
 8007a0e:	4654      	mov	r4, sl
 8007a10:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007a12:	9f02      	ldr	r7, [sp, #8]
 8007a14:	0424      	lsls	r4, r4, #16
 8007a16:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007a1a:	f04f 0900 	mov.w	r9, #0
 8007a1e:	fb0e fe06 	mul.w	lr, lr, r6
 8007a22:	fbc7 8904 	smlal	r8, r9, r7, r4
 8007a26:	9e03      	ldr	r6, [sp, #12]
 8007a28:	464f      	mov	r7, r9
 8007a2a:	10bc      	asrs	r4, r7, #2
 8007a2c:	f304 040f 	ssat	r4, #16, r4
 8007a30:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8007a34:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007a36:	fa1f fe8c 	uxth.w	lr, ip
 8007a3a:	4574      	cmp	r4, lr
 8007a3c:	d90a      	bls.n	8007a54 <D16_GENERIC+0xf4>
 8007a3e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007a40:	2c01      	cmp	r4, #1
 8007a42:	b2e6      	uxtb	r6, r4
 8007a44:	d1ab      	bne.n	800799e <D16_GENERIC+0x3e>
 8007a46:	9e05      	ldr	r6, [sp, #20]
 8007a48:	f850 4b02 	ldr.w	r4, [r0], #2
 8007a4c:	2e00      	cmp	r6, #0
 8007a4e:	d0ac      	beq.n	80079aa <D16_GENERIC+0x4a>
 8007a50:	ba64      	rev16	r4, r4
 8007a52:	e7aa      	b.n	80079aa <D16_GENERIC+0x4a>
 8007a54:	462e      	mov	r6, r5
 8007a56:	9907      	ldr	r1, [sp, #28]
 8007a58:	61d3      	str	r3, [r2, #28]
 8007a5a:	9b06      	ldr	r3, [sp, #24]
 8007a5c:	6096      	str	r6, [r2, #8]
 8007a5e:	2000      	movs	r0, #0
 8007a60:	60d1      	str	r1, [r2, #12]
 8007a62:	f8c2 a010 	str.w	sl, [r2, #16]
 8007a66:	f8c2 b014 	str.w	fp, [r2, #20]
 8007a6a:	6193      	str	r3, [r2, #24]
 8007a6c:	b009      	add	sp, #36	; 0x24
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	bf00      	nop
 8007a74:	20000000 	.word	0x20000000
 8007a78:	00030001 	.word	0x00030001
 8007a7c:	00010003 	.word	0x00010003

08007a80 <D24_GENERIC>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007a86:	6993      	ldr	r3, [r2, #24]
 8007a88:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007a8a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007a8e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8007a92:	6894      	ldr	r4, [r2, #8]
 8007a94:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8007a98:	b089      	sub	sp, #36	; 0x24
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	9503      	str	r5, [sp, #12]
 8007a9e:	69d3      	ldr	r3, [r2, #28]
 8007aa0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007aa2:	9104      	str	r1, [sp, #16]
 8007aa4:	2e00      	cmp	r6, #0
 8007aa6:	f000 8096 	beq.w	8007bd6 <D24_GENERIC+0x156>
 8007aaa:	f005 0610 	and.w	r6, r5, #16
 8007aae:	f005 0520 	and.w	r5, r5, #32
 8007ab2:	4954      	ldr	r1, [pc, #336]	; (8007c04 <D24_GENERIC+0x184>)
 8007ab4:	9605      	str	r6, [sp, #20]
 8007ab6:	9506      	str	r5, [sp, #24]
 8007ab8:	f04f 0e00 	mov.w	lr, #0
 8007abc:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ac0:	e06a      	b.n	8007b98 <D24_GENERIC+0x118>
 8007ac2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007ac6:	f810 8007 	ldrb.w	r8, [r0, r7]
 8007aca:	f890 c000 	ldrb.w	ip, [r0]
 8007ace:	042d      	lsls	r5, r5, #16
 8007ad0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007ad4:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8007ad8:	44ac      	add	ip, r5
 8007ada:	4438      	add	r0, r7
 8007adc:	fa5f f68c 	uxtb.w	r6, ip
 8007ae0:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8007ae4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007ae8:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8007aec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007af0:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8007af4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007af8:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8007afc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007b00:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007b04:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007b08:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007b0c:	4d3e      	ldr	r5, [pc, #248]	; (8007c08 <D24_GENERIC+0x188>)
 8007b0e:	fb26 b705 	smlad	r7, r6, r5, fp
 8007b12:	4d3e      	ldr	r5, [pc, #248]	; (8007c0c <D24_GENERIC+0x18c>)
 8007b14:	fb26 4b05 	smlad	fp, r6, r5, r4
 8007b18:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8007b1c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8007b20:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8007b24:	2401      	movs	r4, #1
 8007b26:	fb26 f604 	smuad	r6, r6, r4
 8007b2a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8007b2e:	9f02      	ldr	r7, [sp, #8]
 8007b30:	eb0e 0c04 	add.w	ip, lr, r4
 8007b34:	eb08 0406 	add.w	r4, r8, r6
 8007b38:	eb05 060a 	add.w	r6, r5, sl
 8007b3c:	1bf6      	subs	r6, r6, r7
 8007b3e:	4637      	mov	r7, r6
 8007b40:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007b44:	e9cd 7800 	strd	r7, r8, [sp]
 8007b48:	9f05      	ldr	r7, [sp, #20]
 8007b4a:	b177      	cbz	r7, 8007b6a <D24_GENERIC+0xea>
 8007b4c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007b50:	9502      	str	r5, [sp, #8]
 8007b52:	fba6 9a08 	umull	r9, sl, r6, r8
 8007b56:	9e01      	ldr	r6, [sp, #4]
 8007b58:	fb08 aa06 	mla	sl, r8, r6, sl
 8007b5c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8007b60:	f14a 0700 	adc.w	r7, sl, #0
 8007b64:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007b68:	4655      	mov	r5, sl
 8007b6a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007b6c:	9f03      	ldr	r7, [sp, #12]
 8007b6e:	03ad      	lsls	r5, r5, #14
 8007b70:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007b74:	f04f 0900 	mov.w	r9, #0
 8007b78:	fb0e fe06 	mul.w	lr, lr, r6
 8007b7c:	fbc7 8905 	smlal	r8, r9, r7, r5
 8007b80:	9e04      	ldr	r6, [sp, #16]
 8007b82:	464f      	mov	r7, r9
 8007b84:	10bd      	asrs	r5, r7, #2
 8007b86:	f305 050f 	ssat	r5, #16, r5
 8007b8a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8007b8e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007b90:	fa1f fe8c 	uxth.w	lr, ip
 8007b94:	4575      	cmp	r5, lr
 8007b96:	d91c      	bls.n	8007bd2 <D24_GENERIC+0x152>
 8007b98:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007b9a:	b2ef      	uxtb	r7, r5
 8007b9c:	2d01      	cmp	r5, #1
 8007b9e:	b23e      	sxth	r6, r7
 8007ba0:	d18f      	bne.n	8007ac2 <D24_GENERIC+0x42>
 8007ba2:	9d06      	ldr	r5, [sp, #24]
 8007ba4:	b15d      	cbz	r5, 8007bbe <D24_GENERIC+0x13e>
 8007ba6:	f01e 0f01 	tst.w	lr, #1
 8007baa:	d122      	bne.n	8007bf2 <D24_GENERIC+0x172>
 8007bac:	7805      	ldrb	r5, [r0, #0]
 8007bae:	78c7      	ldrb	r7, [r0, #3]
 8007bb0:	7846      	ldrb	r6, [r0, #1]
 8007bb2:	022d      	lsls	r5, r5, #8
 8007bb4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8007bb8:	44b4      	add	ip, r6
 8007bba:	3002      	adds	r0, #2
 8007bbc:	e78e      	b.n	8007adc <D24_GENERIC+0x5c>
 8007bbe:	7846      	ldrb	r6, [r0, #1]
 8007bc0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8007bc4:	f810 5b03 	ldrb.w	r5, [r0], #3
 8007bc8:	0236      	lsls	r6, r6, #8
 8007bca:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8007bce:	44ac      	add	ip, r5
 8007bd0:	e784      	b.n	8007adc <D24_GENERIC+0x5c>
 8007bd2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007bd6:	61d3      	str	r3, [r2, #28]
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	6094      	str	r4, [r2, #8]
 8007bdc:	2000      	movs	r0, #0
 8007bde:	f8c2 b00c 	str.w	fp, [r2, #12]
 8007be2:	f8c2 a010 	str.w	sl, [r2, #16]
 8007be6:	f8c2 9014 	str.w	r9, [r2, #20]
 8007bea:	6193      	str	r3, [r2, #24]
 8007bec:	b009      	add	sp, #36	; 0x24
 8007bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf2:	78c5      	ldrb	r5, [r0, #3]
 8007bf4:	7887      	ldrb	r7, [r0, #2]
 8007bf6:	f810 6b04 	ldrb.w	r6, [r0], #4
 8007bfa:	022d      	lsls	r5, r5, #8
 8007bfc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8007c00:	44b4      	add	ip, r6
 8007c02:	e76b      	b.n	8007adc <D24_GENERIC+0x5c>
 8007c04:	20000000 	.word	0x20000000
 8007c08:	00030001 	.word	0x00030001
 8007c0c:	00060007 	.word	0x00060007

08007c10 <D32_GENERIC>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007c16:	6993      	ldr	r3, [r2, #24]
 8007c18:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007c1a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007c1e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8007c22:	69d6      	ldr	r6, [r2, #28]
 8007c24:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8007c28:	b089      	sub	sp, #36	; 0x24
 8007c2a:	9307      	str	r3, [sp, #28]
 8007c2c:	9403      	str	r4, [sp, #12]
 8007c2e:	6893      	ldr	r3, [r2, #8]
 8007c30:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007c32:	9104      	str	r1, [sp, #16]
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	f000 809f 	beq.w	8007d78 <D32_GENERIC+0x168>
 8007c3a:	f004 0510 	and.w	r5, r4, #16
 8007c3e:	f004 0420 	and.w	r4, r4, #32
 8007c42:	9505      	str	r5, [sp, #20]
 8007c44:	4953      	ldr	r1, [pc, #332]	; (8007d94 <D32_GENERIC+0x184>)
 8007c46:	9406      	str	r4, [sp, #24]
 8007c48:	f04f 0c00 	mov.w	ip, #0
 8007c4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c50:	461d      	mov	r5, r3
 8007c52:	4617      	mov	r7, r2
 8007c54:	e077      	b.n	8007d46 <D32_GENERIC+0x136>
 8007c56:	f818 3003 	ldrb.w	r3, [r8, r3]
 8007c5a:	f810 800e 	ldrb.w	r8, [r0, lr]
 8007c5e:	f810 e002 	ldrb.w	lr, [r0, r2]
 8007c62:	7800      	ldrb	r0, [r0, #0]
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007c6a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8007c6e:	4403      	add	r3, r0
 8007c70:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8007c74:	b2dc      	uxtb	r4, r3
 8007c76:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c7a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8007c7e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007c82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c86:	0e1b      	lsrs	r3, r3, #24
 8007c88:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8007c8c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8007c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c94:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8007c98:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8007c9c:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8007ca0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8007ca4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007ca8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007cac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007cb0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8007cb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007cb8:	4b37      	ldr	r3, [pc, #220]	; (8007d98 <D32_GENERIC+0x188>)
 8007cba:	fb22 b403 	smlad	r4, r2, r3, fp
 8007cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cc2:	fb2e 4803 	smlad	r8, lr, r3, r4
 8007cc6:	4b35      	ldr	r3, [pc, #212]	; (8007d9c <D32_GENERIC+0x18c>)
 8007cc8:	fb22 5503 	smlad	r5, r2, r3, r5
 8007ccc:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <D32_GENERIC+0x190>)
 8007cce:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	fb22 f203 	smuad	r2, r2, r3
 8007cd8:	4b32      	ldr	r3, [pc, #200]	; (8007da4 <D32_GENERIC+0x194>)
 8007cda:	fb2e 2503 	smlad	r5, lr, r3, r2
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8007ce4:	eb04 080a 	add.w	r8, r4, sl
 8007ce8:	eba8 0803 	sub.w	r8, r8, r3
 8007cec:	4642      	mov	r2, r8
 8007cee:	17d3      	asrs	r3, r2, #31
 8007cf0:	e9cd 2300 	strd	r2, r3, [sp]
 8007cf4:	9b05      	ldr	r3, [sp, #20]
 8007cf6:	f10c 0e01 	add.w	lr, ip, #1
 8007cfa:	b16b      	cbz	r3, 8007d18 <D32_GENERIC+0x108>
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	9402      	str	r4, [sp, #8]
 8007d02:	fba8 8902 	umull	r8, r9, r8, r2
 8007d06:	fb02 9903 	mla	r9, r2, r3, r9
 8007d0a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8007d0e:	f149 0900 	adc.w	r9, r9, #0
 8007d12:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007d16:	4654      	mov	r4, sl
 8007d18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d1a:	9a04      	ldr	r2, [sp, #16]
 8007d1c:	fb0c fc03 	mul.w	ip, ip, r3
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	0364      	lsls	r4, r4, #13
 8007d24:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007d28:	f04f 0900 	mov.w	r9, #0
 8007d2c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007d30:	464b      	mov	r3, r9
 8007d32:	109b      	asrs	r3, r3, #2
 8007d34:	f303 030f 	ssat	r3, #16, r3
 8007d38:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8007d3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d3e:	fa1f fc8e 	uxth.w	ip, lr
 8007d42:	4563      	cmp	r3, ip
 8007d44:	d914      	bls.n	8007d70 <D32_GENERIC+0x160>
 8007d46:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8007d48:	b2e2      	uxtb	r2, r4
 8007d4a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8007d4e:	eb00 080e 	add.w	r8, r0, lr
 8007d52:	4253      	negs	r3, r2
 8007d54:	2c01      	cmp	r4, #1
 8007d56:	eb08 0403 	add.w	r4, r8, r3
 8007d5a:	f47f af7c 	bne.w	8007c56 <D32_GENERIC+0x46>
 8007d5e:	1d02      	adds	r2, r0, #4
 8007d60:	6803      	ldr	r3, [r0, #0]
 8007d62:	9806      	ldr	r0, [sp, #24]
 8007d64:	b110      	cbz	r0, 8007d6c <D32_GENERIC+0x15c>
 8007d66:	ba5b      	rev16	r3, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	e783      	b.n	8007c74 <D32_GENERIC+0x64>
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	e781      	b.n	8007c74 <D32_GENERIC+0x64>
 8007d70:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007d74:	462b      	mov	r3, r5
 8007d76:	463a      	mov	r2, r7
 8007d78:	6093      	str	r3, [r2, #8]
 8007d7a:	9b07      	ldr	r3, [sp, #28]
 8007d7c:	f8c2 b00c 	str.w	fp, [r2, #12]
 8007d80:	2000      	movs	r0, #0
 8007d82:	61d6      	str	r6, [r2, #28]
 8007d84:	f8c2 a010 	str.w	sl, [r2, #16]
 8007d88:	f8c2 9014 	str.w	r9, [r2, #20]
 8007d8c:	6193      	str	r3, [r2, #24]
 8007d8e:	b009      	add	sp, #36	; 0x24
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	20000000 	.word	0x20000000
 8007d98:	00060003 	.word	0x00060003
 8007d9c:	000a000c 	.word	0x000a000c
 8007da0:	000c000a 	.word	0x000c000a
 8007da4:	00030006 	.word	0x00030006

08007da8 <D48_GENERIC>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	b089      	sub	sp, #36	; 0x24
 8007dae:	6953      	ldr	r3, [r2, #20]
 8007db0:	68d4      	ldr	r4, [r2, #12]
 8007db2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007db4:	9302      	str	r3, [sp, #8]
 8007db6:	9400      	str	r4, [sp, #0]
 8007db8:	6993      	ldr	r3, [r2, #24]
 8007dba:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007dbc:	9307      	str	r3, [sp, #28]
 8007dbe:	9403      	str	r4, [sp, #12]
 8007dc0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007dc4:	69d6      	ldr	r6, [r2, #28]
 8007dc6:	6893      	ldr	r3, [r2, #8]
 8007dc8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007dca:	9104      	str	r1, [sp, #16]
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	f000 80c5 	beq.w	8007f5c <D48_GENERIC+0x1b4>
 8007dd2:	f004 0510 	and.w	r5, r4, #16
 8007dd6:	f004 0420 	and.w	r4, r4, #32
 8007dda:	4967      	ldr	r1, [pc, #412]	; (8007f78 <D48_GENERIC+0x1d0>)
 8007ddc:	9505      	str	r5, [sp, #20]
 8007dde:	9406      	str	r4, [sp, #24]
 8007de0:	f04f 0c00 	mov.w	ip, #0
 8007de4:	4657      	mov	r7, sl
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	e09c      	b.n	8007f24 <D48_GENERIC+0x17c>
 8007dea:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8007dee:	f810 b009 	ldrb.w	fp, [r0, r9]
 8007df2:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8007df6:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8007dfa:	7800      	ldrb	r0, [r0, #0]
 8007dfc:	0424      	lsls	r4, r4, #16
 8007dfe:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007e02:	f818 4005 	ldrb.w	r4, [r8, r5]
 8007e06:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8007e0a:	44a8      	add	r8, r5
 8007e0c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8007e10:	eb0b 0500 	add.w	r5, fp, r0
 8007e14:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8007e18:	fa5f f885 	uxtb.w	r8, r5
 8007e1c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8007e20:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8007e24:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8007e28:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8007e2c:	0e2d      	lsrs	r5, r5, #24
 8007e2e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8007e32:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8007e36:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8007e3a:	b2e6      	uxtb	r6, r4
 8007e3c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8007e40:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007e44:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8007e48:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007e4c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8007e50:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8007e54:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007e58:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8007e5c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007e60:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007e64:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8007e68:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007e6c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007e70:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007e74:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8007e78:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8007e7c:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8007e80:	4c3e      	ldr	r4, [pc, #248]	; (8007f7c <D48_GENERIC+0x1d4>)
 8007e82:	9d00      	ldr	r5, [sp, #0]
 8007e84:	fb2a 5404 	smlad	r4, sl, r4, r5
 8007e88:	4d3d      	ldr	r5, [pc, #244]	; (8007f80 <D48_GENERIC+0x1d8>)
 8007e8a:	fb28 4405 	smlad	r4, r8, r5, r4
 8007e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e92:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8007e96:	4c3b      	ldr	r4, [pc, #236]	; (8007f84 <D48_GENERIC+0x1dc>)
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	fb2a 3304 	smlad	r3, sl, r4, r3
 8007e9e:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007ea2:	fb28 3304 	smlad	r3, r8, r4, r3
 8007ea6:	4c38      	ldr	r4, [pc, #224]	; (8007f88 <D48_GENERIC+0x1e0>)
 8007ea8:	fb2e 3304 	smlad	r3, lr, r4, r3
 8007eac:	2501      	movs	r5, #1
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	fb2a fa05 	smuad	sl, sl, r5
 8007eb4:	4b35      	ldr	r3, [pc, #212]	; (8007f8c <D48_GENERIC+0x1e4>)
 8007eb6:	fb28 a803 	smlad	r8, r8, r3, sl
 8007eba:	4b35      	ldr	r3, [pc, #212]	; (8007f90 <D48_GENERIC+0x1e8>)
 8007ebc:	fb2e 8303 	smlad	r3, lr, r3, r8
 8007ec0:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	eb04 0807 	add.w	r8, r4, r7
 8007ecc:	eba8 0803 	sub.w	r8, r8, r3
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	4465      	add	r5, ip
 8007ed4:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8007ed8:	b163      	cbz	r3, 8007ef4 <D48_GENERIC+0x14c>
 8007eda:	6a17      	ldr	r7, [r2, #32]
 8007edc:	9402      	str	r4, [sp, #8]
 8007ede:	fba8 8907 	umull	r8, r9, r8, r7
 8007ee2:	fb07 990b 	mla	r9, r7, fp, r9
 8007ee6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8007eea:	f149 0900 	adc.w	r9, r9, #0
 8007eee:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8007ef2:	463c      	mov	r4, r7
 8007ef4:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	02e4      	lsls	r4, r4, #11
 8007efc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007f00:	f04f 0900 	mov.w	r9, #0
 8007f04:	fb0c fc0e 	mul.w	ip, ip, lr
 8007f08:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8007f12:	f304 040f 	ssat	r4, #16, r4
 8007f16:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8007f1a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007f1c:	fa1f fc85 	uxth.w	ip, r5
 8007f20:	4564      	cmp	r4, ip
 8007f22:	d919      	bls.n	8007f58 <D48_GENERIC+0x1b0>
 8007f24:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007f26:	fa5f fe84 	uxtb.w	lr, r4
 8007f2a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8007f2e:	f1ce 0500 	rsb	r5, lr, #0
 8007f32:	eb00 0b09 	add.w	fp, r0, r9
 8007f36:	eb0b 0a05 	add.w	sl, fp, r5
 8007f3a:	2c01      	cmp	r4, #1
 8007f3c:	eb0a 0809 	add.w	r8, sl, r9
 8007f40:	f47f af53 	bne.w	8007dea <D48_GENERIC+0x42>
 8007f44:	9b06      	ldr	r3, [sp, #24]
 8007f46:	6805      	ldr	r5, [r0, #0]
 8007f48:	6844      	ldr	r4, [r0, #4]
 8007f4a:	3006      	adds	r0, #6
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f43f af63 	beq.w	8007e18 <D48_GENERIC+0x70>
 8007f52:	ba6d      	rev16	r5, r5
 8007f54:	ba64      	rev16	r4, r4
 8007f56:	e75f      	b.n	8007e18 <D48_GENERIC+0x70>
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	46ba      	mov	sl, r7
 8007f5c:	6093      	str	r3, [r2, #8]
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	60d3      	str	r3, [r2, #12]
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	6153      	str	r3, [r2, #20]
 8007f66:	9b07      	ldr	r3, [sp, #28]
 8007f68:	61d6      	str	r6, [r2, #28]
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f8c2 a010 	str.w	sl, [r2, #16]
 8007f70:	6193      	str	r3, [r2, #24]
 8007f72:	b009      	add	sp, #36	; 0x24
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	20000000 	.word	0x20000000
 8007f7c:	000f000a 	.word	0x000f000a
 8007f80:	00060003 	.word	0x00060003
 8007f84:	00150019 	.word	0x00150019
 8007f88:	00190015 	.word	0x00190015
 8007f8c:	00030006 	.word	0x00030006
 8007f90:	000a000f 	.word	0x000a000f

08007f94 <D64_GENERIC>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	b089      	sub	sp, #36	; 0x24
 8007f9a:	6913      	ldr	r3, [r2, #16]
 8007f9c:	6895      	ldr	r5, [r2, #8]
 8007f9e:	9303      	str	r3, [sp, #12]
 8007fa0:	9501      	str	r5, [sp, #4]
 8007fa2:	6953      	ldr	r3, [r2, #20]
 8007fa4:	68d5      	ldr	r5, [r2, #12]
 8007fa6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	9500      	str	r5, [sp, #0]
 8007fac:	6993      	ldr	r3, [r2, #24]
 8007fae:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007fb0:	9307      	str	r3, [sp, #28]
 8007fb2:	9505      	str	r5, [sp, #20]
 8007fb4:	69d3      	ldr	r3, [r2, #28]
 8007fb6:	9106      	str	r1, [sp, #24]
 8007fb8:	2c00      	cmp	r4, #0
 8007fba:	f000 80d9 	beq.w	8008170 <D64_GENERIC+0x1dc>
 8007fbe:	6a11      	ldr	r1, [r2, #32]
 8007fc0:	9102      	str	r1, [sp, #8]
 8007fc2:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80081b0 <D64_GENERIC+0x21c>
 8007fc6:	f04f 0c00 	mov.w	ip, #0
 8007fca:	4681      	mov	r9, r0
 8007fcc:	e0c1      	b.n	8008152 <D64_GENERIC+0x1be>
 8007fce:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8007fd2:	4274      	negs	r4, r6
 8007fd4:	eb09 0708 	add.w	r7, r9, r8
 8007fd8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007fdc:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8007fe0:	5d38      	ldrb	r0, [r7, r4]
 8007fe2:	5d29      	ldrb	r1, [r5, r4]
 8007fe4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007fe8:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007fec:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007ff0:	f899 7000 	ldrb.w	r7, [r9]
 8007ff4:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8007ff8:	4425      	add	r5, r4
 8007ffa:	0409      	lsls	r1, r1, #16
 8007ffc:	0400      	lsls	r0, r0, #16
 8007ffe:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8008002:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008006:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800800a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800800e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8008012:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8008016:	4459      	add	r1, fp
 8008018:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800801c:	4438      	add	r0, r7
 800801e:	b2c5      	uxtb	r5, r0
 8008020:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008024:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8008028:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800802c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8008030:	0e00      	lsrs	r0, r0, #24
 8008032:	eb03 0806 	add.w	r8, r3, r6
 8008036:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800803a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800803e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008042:	b2c8      	uxtb	r0, r1
 8008044:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008048:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800804c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8008050:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8008054:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008058:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800805c:	0e09      	lsrs	r1, r1, #24
 800805e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8008062:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8008066:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800806a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800806e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8008072:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008076:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800807a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800807e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008082:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008086:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800808a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800808e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008092:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008096:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800809a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800809e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80080a2:	0a8b      	lsrs	r3, r1, #10
 80080a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80080a8:	4939      	ldr	r1, [pc, #228]	; (8008190 <D64_GENERIC+0x1fc>)
 80080aa:	9c00      	ldr	r4, [sp, #0]
 80080ac:	fb28 4101 	smlad	r1, r8, r1, r4
 80080b0:	4c38      	ldr	r4, [pc, #224]	; (8008194 <D64_GENERIC+0x200>)
 80080b2:	fb27 1104 	smlad	r1, r7, r4, r1
 80080b6:	4c38      	ldr	r4, [pc, #224]	; (8008198 <D64_GENERIC+0x204>)
 80080b8:	fb20 1104 	smlad	r1, r0, r4, r1
 80080bc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80080c0:	fb2a 1106 	smlad	r1, sl, r6, r1
 80080c4:	4c35      	ldr	r4, [pc, #212]	; (800819c <D64_GENERIC+0x208>)
 80080c6:	9d01      	ldr	r5, [sp, #4]
 80080c8:	fb28 5404 	smlad	r4, r8, r4, r5
 80080cc:	4d33      	ldr	r5, [pc, #204]	; (800819c <D64_GENERIC+0x208>)
 80080ce:	fb2a 4415 	smladx	r4, sl, r5, r4
 80080d2:	4d33      	ldr	r5, [pc, #204]	; (80081a0 <D64_GENERIC+0x20c>)
 80080d4:	fb27 4405 	smlad	r4, r7, r5, r4
 80080d8:	fb20 4415 	smladx	r4, r0, r5, r4
 80080dc:	2501      	movs	r5, #1
 80080de:	9400      	str	r4, [sp, #0]
 80080e0:	fb28 f805 	smuad	r8, r8, r5
 80080e4:	4c2f      	ldr	r4, [pc, #188]	; (80081a4 <D64_GENERIC+0x210>)
 80080e6:	fb27 8704 	smlad	r7, r7, r4, r8
 80080ea:	4c2f      	ldr	r4, [pc, #188]	; (80081a8 <D64_GENERIC+0x214>)
 80080ec:	fb20 7004 	smlad	r0, r0, r4, r7
 80080f0:	4c2e      	ldr	r4, [pc, #184]	; (80081ac <D64_GENERIC+0x218>)
 80080f2:	fb2a 0004 	smlad	r0, sl, r4, r0
 80080f6:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80080fa:	9902      	ldr	r1, [sp, #8]
 80080fc:	9001      	str	r0, [sp, #4]
 80080fe:	b189      	cbz	r1, 8008124 <D64_GENERIC+0x190>
 8008100:	9803      	ldr	r0, [sp, #12]
 8008102:	9c04      	ldr	r4, [sp, #16]
 8008104:	9604      	str	r6, [sp, #16]
 8008106:	4430      	add	r0, r6
 8008108:	1b00      	subs	r0, r0, r4
 800810a:	17c5      	asrs	r5, r0, #31
 800810c:	460f      	mov	r7, r1
 800810e:	fba0 0101 	umull	r0, r1, r0, r1
 8008112:	fb07 1105 	mla	r1, r7, r5, r1
 8008116:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800811a:	f141 0100 	adc.w	r1, r1, #0
 800811e:	0049      	lsls	r1, r1, #1
 8008120:	9103      	str	r1, [sp, #12]
 8008122:	460e      	mov	r6, r1
 8008124:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8008126:	9905      	ldr	r1, [sp, #20]
 8008128:	9806      	ldr	r0, [sp, #24]
 800812a:	02b6      	lsls	r6, r6, #10
 800812c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008130:	f04f 0800 	mov.w	r8, #0
 8008134:	fb0c f404 	mul.w	r4, ip, r4
 8008138:	fbc1 7806 	smlal	r7, r8, r1, r6
 800813c:	4641      	mov	r1, r8
 800813e:	1089      	asrs	r1, r1, #2
 8008140:	f301 010f 	ssat	r1, #16, r1
 8008144:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8008148:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800814a:	f10c 0c01 	add.w	ip, ip, #1
 800814e:	4561      	cmp	r1, ip
 8008150:	dd0e      	ble.n	8008170 <D64_GENERIC+0x1dc>
 8008152:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8008154:	2e01      	cmp	r6, #1
 8008156:	f47f af3a 	bne.w	8007fce <D64_GENERIC+0x3a>
 800815a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800815c:	06b4      	lsls	r4, r6, #26
 800815e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008162:	f109 0908 	add.w	r9, r9, #8
 8008166:	f57f af5a 	bpl.w	800801e <D64_GENERIC+0x8a>
 800816a:	ba40      	rev16	r0, r0
 800816c:	ba49      	rev16	r1, r1
 800816e:	e756      	b.n	800801e <D64_GENERIC+0x8a>
 8008170:	61d3      	str	r3, [r2, #28]
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	9901      	ldr	r1, [sp, #4]
 8008176:	6113      	str	r3, [r2, #16]
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	6091      	str	r1, [r2, #8]
 800817c:	6153      	str	r3, [r2, #20]
 800817e:	9900      	ldr	r1, [sp, #0]
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	60d1      	str	r1, [r2, #12]
 8008184:	2000      	movs	r0, #0
 8008186:	6193      	str	r3, [r2, #24]
 8008188:	b009      	add	sp, #36	; 0x24
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	bf00      	nop
 8008190:	001c0015 	.word	0x001c0015
 8008194:	000f000a 	.word	0x000f000a
 8008198:	00060003 	.word	0x00060003
 800819c:	0024002a 	.word	0x0024002a
 80081a0:	002e0030 	.word	0x002e0030
 80081a4:	00030006 	.word	0x00030006
 80081a8:	000a000f 	.word	0x000a000f
 80081ac:	0015001c 	.word	0x0015001c
 80081b0:	20000000 	.word	0x20000000

080081b4 <D80_GENERIC>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	b08b      	sub	sp, #44	; 0x2c
 80081ba:	6914      	ldr	r4, [r2, #16]
 80081bc:	9404      	str	r4, [sp, #16]
 80081be:	6954      	ldr	r4, [r2, #20]
 80081c0:	9405      	str	r4, [sp, #20]
 80081c2:	6994      	ldr	r4, [r2, #24]
 80081c4:	9409      	str	r4, [sp, #36]	; 0x24
 80081c6:	6894      	ldr	r4, [r2, #8]
 80081c8:	9402      	str	r4, [sp, #8]
 80081ca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80081cc:	68d4      	ldr	r4, [r2, #12]
 80081ce:	9401      	str	r4, [sp, #4]
 80081d0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80081d2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80081d6:	9406      	str	r4, [sp, #24]
 80081d8:	9107      	str	r1, [sp, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 810f 	beq.w	80083fe <D80_GENERIC+0x24a>
 80081e0:	6a13      	ldr	r3, [r2, #32]
 80081e2:	9308      	str	r3, [sp, #32]
 80081e4:	2300      	movs	r3, #0
 80081e6:	9200      	str	r2, [sp, #0]
 80081e8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8008450 <D80_GENERIC+0x29c>
 80081ec:	f8cd b00c 	str.w	fp, [sp, #12]
 80081f0:	461a      	mov	r2, r3
 80081f2:	e0ed      	b.n	80083d0 <D80_GENERIC+0x21c>
 80081f4:	fa5f fc8c 	uxtb.w	ip, ip
 80081f8:	fa0f f48c 	sxth.w	r4, ip
 80081fc:	0066      	lsls	r6, r4, #1
 80081fe:	eb06 0804 	add.w	r8, r6, r4
 8008202:	f1cc 0500 	rsb	r5, ip, #0
 8008206:	eb00 0108 	add.w	r1, r0, r8
 800820a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800820e:	194b      	adds	r3, r1, r5
 8008210:	5d49      	ldrb	r1, [r1, r5]
 8008212:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008216:	f813 b004 	ldrb.w	fp, [r3, r4]
 800821a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800821e:	f890 8000 	ldrb.w	r8, [r0]
 8008222:	eb03 0e04 	add.w	lr, r3, r4
 8008226:	eb0e 0705 	add.w	r7, lr, r5
 800822a:	0409      	lsls	r1, r1, #16
 800822c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8008230:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8008234:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008238:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800823c:	eb0a 0004 	add.w	r0, sl, r4
 8008240:	041b      	lsls	r3, r3, #16
 8008242:	f81a a004 	ldrb.w	sl, [sl, r4]
 8008246:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800824a:	5d44      	ldrb	r4, [r0, r5]
 800824c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008250:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8008254:	4428      	add	r0, r5
 8008256:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800825a:	4441      	add	r1, r8
 800825c:	4430      	add	r0, r6
 800825e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8008262:	441f      	add	r7, r3
 8008264:	b2cd      	uxtb	r5, r1
 8008266:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800826a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800826e:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008278:	0e09      	lsrs	r1, r1, #24
 800827a:	4433      	add	r3, r6
 800827c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8008280:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8008284:	b2fd      	uxtb	r5, r7
 8008286:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800828a:	469b      	mov	fp, r3
 800828c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8008290:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8008294:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8008298:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800829c:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80082a0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80082a4:	0e3b      	lsrs	r3, r7, #24
 80082a6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80082aa:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80082ae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80082b2:	fa5f fe84 	uxtb.w	lr, r4
 80082b6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80082ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80082be:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80082c2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80082c6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80082ca:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80082ce:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80082d2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80082d6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80082da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082de:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80082e2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80082e6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80082ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80082ee:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80082f2:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80082f6:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80082fa:	0aa3      	lsrs	r3, r4, #10
 80082fc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008300:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008304:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008308:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800830c:	9303      	str	r3, [sp, #12]
 800830e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8008312:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8008316:	4b42      	ldr	r3, [pc, #264]	; (8008420 <D80_GENERIC+0x26c>)
 8008318:	9901      	ldr	r1, [sp, #4]
 800831a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800831e:	4941      	ldr	r1, [pc, #260]	; (8008424 <D80_GENERIC+0x270>)
 8008320:	fb28 3301 	smlad	r3, r8, r1, r3
 8008324:	4940      	ldr	r1, [pc, #256]	; (8008428 <D80_GENERIC+0x274>)
 8008326:	fb2c 3301 	smlad	r3, ip, r1, r3
 800832a:	4940      	ldr	r1, [pc, #256]	; (800842c <D80_GENERIC+0x278>)
 800832c:	fb27 3301 	smlad	r3, r7, r1, r3
 8008330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008334:	fb2e 3301 	smlad	r3, lr, r1, r3
 8008338:	493d      	ldr	r1, [pc, #244]	; (8008430 <D80_GENERIC+0x27c>)
 800833a:	9c02      	ldr	r4, [sp, #8]
 800833c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8008340:	493c      	ldr	r1, [pc, #240]	; (8008434 <D80_GENERIC+0x280>)
 8008342:	fb28 4401 	smlad	r4, r8, r1, r4
 8008346:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800834a:	fb2c 4101 	smlad	r1, ip, r1, r4
 800834e:	4c3a      	ldr	r4, [pc, #232]	; (8008438 <D80_GENERIC+0x284>)
 8008350:	fb27 1104 	smlad	r1, r7, r4, r1
 8008354:	4c39      	ldr	r4, [pc, #228]	; (800843c <D80_GENERIC+0x288>)
 8008356:	fb2e 1104 	smlad	r1, lr, r4, r1
 800835a:	9101      	str	r1, [sp, #4]
 800835c:	2101      	movs	r1, #1
 800835e:	fb2b fb01 	smuad	fp, fp, r1
 8008362:	4937      	ldr	r1, [pc, #220]	; (8008440 <D80_GENERIC+0x28c>)
 8008364:	fb28 b801 	smlad	r8, r8, r1, fp
 8008368:	4d36      	ldr	r5, [pc, #216]	; (8008444 <D80_GENERIC+0x290>)
 800836a:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800836e:	4d36      	ldr	r5, [pc, #216]	; (8008448 <D80_GENERIC+0x294>)
 8008370:	fb27 c705 	smlad	r7, r7, r5, ip
 8008374:	4d35      	ldr	r5, [pc, #212]	; (800844c <D80_GENERIC+0x298>)
 8008376:	fb2e 7105 	smlad	r1, lr, r5, r7
 800837a:	9102      	str	r1, [sp, #8]
 800837c:	9908      	ldr	r1, [sp, #32]
 800837e:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8008382:	b181      	cbz	r1, 80083a6 <D80_GENERIC+0x1f2>
 8008384:	9c04      	ldr	r4, [sp, #16]
 8008386:	9d05      	ldr	r5, [sp, #20]
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	441c      	add	r4, r3
 800838c:	1b64      	subs	r4, r4, r5
 800838e:	17e7      	asrs	r7, r4, #31
 8008390:	fba4 4501 	umull	r4, r5, r4, r1
 8008394:	fb01 5507 	mla	r5, r1, r7, r5
 8008398:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800839c:	f145 0500 	adc.w	r5, r5, #0
 80083a0:	0069      	lsls	r1, r5, #1
 80083a2:	9104      	str	r1, [sp, #16]
 80083a4:	460b      	mov	r3, r1
 80083a6:	9e00      	ldr	r6, [sp, #0]
 80083a8:	9f06      	ldr	r7, [sp, #24]
 80083aa:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80083ac:	025b      	lsls	r3, r3, #9
 80083ae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80083b2:	2500      	movs	r5, #0
 80083b4:	fb02 f101 	mul.w	r1, r2, r1
 80083b8:	fbc7 4503 	smlal	r4, r5, r7, r3
 80083bc:	9c07      	ldr	r4, [sp, #28]
 80083be:	10ab      	asrs	r3, r5, #2
 80083c0:	f303 030f 	ssat	r3, #16, r3
 80083c4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80083c8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80083ca:	3201      	adds	r2, #1
 80083cc:	4293      	cmp	r3, r2
 80083ce:	dd13      	ble.n	80083f8 <D80_GENERIC+0x244>
 80083d0:	9b00      	ldr	r3, [sp, #0]
 80083d2:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80083d6:	f1bc 0f01 	cmp.w	ip, #1
 80083da:	f47f af0b 	bne.w	80081f4 <D80_GENERIC+0x40>
 80083de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e0:	6884      	ldr	r4, [r0, #8]
 80083e2:	069b      	lsls	r3, r3, #26
 80083e4:	e890 0082 	ldmia.w	r0, {r1, r7}
 80083e8:	f100 000a 	add.w	r0, r0, #10
 80083ec:	f57f af3a 	bpl.w	8008264 <D80_GENERIC+0xb0>
 80083f0:	ba49      	rev16	r1, r1
 80083f2:	ba7f      	rev16	r7, r7
 80083f4:	ba64      	rev16	r4, r4
 80083f6:	e735      	b.n	8008264 <D80_GENERIC+0xb0>
 80083f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80083fc:	4632      	mov	r2, r6
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	6093      	str	r3, [r2, #8]
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	60d3      	str	r3, [r2, #12]
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	6113      	str	r3, [r2, #16]
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	6153      	str	r3, [r2, #20]
 800840e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008410:	f8c2 b01c 	str.w	fp, [r2, #28]
 8008414:	2000      	movs	r0, #0
 8008416:	6193      	str	r3, [r2, #24]
 8008418:	b00b      	add	sp, #44	; 0x2c
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	bf00      	nop
 8008420:	002d0024 	.word	0x002d0024
 8008424:	001c0015 	.word	0x001c0015
 8008428:	000f000a 	.word	0x000f000a
 800842c:	00060003 	.word	0x00060003
 8008430:	0037003f 	.word	0x0037003f
 8008434:	00450049 	.word	0x00450049
 8008438:	00490045 	.word	0x00490045
 800843c:	003f0037 	.word	0x003f0037
 8008440:	00030006 	.word	0x00030006
 8008444:	000a000f 	.word	0x000a000f
 8008448:	0015001c 	.word	0x0015001c
 800844c:	0024002d 	.word	0x0024002d
 8008450:	20000000 	.word	0x20000000

08008454 <D128_GENERIC>:
 8008454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	b093      	sub	sp, #76	; 0x4c
 800845a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800845c:	9005      	str	r0, [sp, #20]
 800845e:	4610      	mov	r0, r2
 8008460:	9201      	str	r2, [sp, #4]
 8008462:	6912      	ldr	r2, [r2, #16]
 8008464:	920c      	str	r2, [sp, #48]	; 0x30
 8008466:	4602      	mov	r2, r0
 8008468:	6940      	ldr	r0, [r0, #20]
 800846a:	900d      	str	r0, [sp, #52]	; 0x34
 800846c:	4610      	mov	r0, r2
 800846e:	4614      	mov	r4, r2
 8008470:	6992      	ldr	r2, [r2, #24]
 8008472:	9211      	str	r2, [sp, #68]	; 0x44
 8008474:	69c2      	ldr	r2, [r0, #28]
 8008476:	9202      	str	r2, [sp, #8]
 8008478:	68e2      	ldr	r2, [r4, #12]
 800847a:	6880      	ldr	r0, [r0, #8]
 800847c:	9203      	str	r2, [sp, #12]
 800847e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008480:	9004      	str	r0, [sp, #16]
 8008482:	920e      	str	r2, [sp, #56]	; 0x38
 8008484:	910f      	str	r1, [sp, #60]	; 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 819b 	beq.w	80087c2 <D128_GENERIC+0x36e>
 800848c:	6a23      	ldr	r3, [r4, #32]
 800848e:	9310      	str	r3, [sp, #64]	; 0x40
 8008490:	2300      	movs	r3, #0
 8008492:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800883c <D128_GENERIC+0x3e8>
 8008496:	9306      	str	r3, [sp, #24]
 8008498:	e17a      	b.n	8008790 <D128_GENERIC+0x33c>
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	9d05      	ldr	r5, [sp, #20]
 800849e:	b214      	sxth	r4, r2
 80084a0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80084a4:	4250      	negs	r0, r2
 80084a6:	eb05 010a 	add.w	r1, r5, sl
 80084aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084ae:	eb01 0800 	add.w	r8, r1, r0
 80084b2:	eb0b 0c04 	add.w	ip, fp, r4
 80084b6:	eb08 070c 	add.w	r7, r8, ip
 80084ba:	183b      	adds	r3, r7, r0
 80084bc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80084c0:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80084c4:	eb0e 0604 	add.w	r6, lr, r4
 80084c8:	9307      	str	r3, [sp, #28]
 80084ca:	1833      	adds	r3, r6, r0
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	462b      	mov	r3, r5
 80084d0:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80084d4:	f8cd a020 	str.w	sl, [sp, #32]
 80084d8:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80084dc:	f813 c002 	ldrb.w	ip, [r3, r2]
 80084e0:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80084e4:	5c3a      	ldrb	r2, [r7, r0]
 80084e6:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80084ea:	781f      	ldrb	r7, [r3, #0]
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	9d05      	ldr	r5, [sp, #20]
 80084f0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80084f4:	5c09      	ldrb	r1, [r1, r0]
 80084f6:	9709      	str	r7, [sp, #36]	; 0x24
 80084f8:	9307      	str	r3, [sp, #28]
 80084fa:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 80084fe:	5c33      	ldrb	r3, [r6, r0]
 8008500:	0412      	lsls	r2, r2, #16
 8008502:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8008506:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800850a:	9d08      	ldr	r5, [sp, #32]
 800850c:	eb06 0a04 	add.w	sl, r6, r4
 8008510:	0409      	lsls	r1, r1, #16
 8008512:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8008516:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800851a:	5d36      	ldrb	r6, [r6, r4]
 800851c:	9c05      	ldr	r4, [sp, #20]
 800851e:	042d      	lsls	r5, r5, #16
 8008520:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8008524:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8008528:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800852c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8008530:	eb0a 0c00 	add.w	ip, sl, r0
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800853a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800853e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8008542:	9d07      	ldr	r5, [sp, #28]
 8008544:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8008548:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800854c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800854e:	4458      	add	r0, fp
 8008550:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8008554:	9005      	str	r0, [sp, #20]
 8008556:	4439      	add	r1, r7
 8008558:	442a      	add	r2, r5
 800855a:	44b2      	add	sl, r6
 800855c:	1918      	adds	r0, r3, r4
 800855e:	b2cb      	uxtb	r3, r1
 8008560:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008564:	9e02      	ldr	r6, [sp, #8]
 8008566:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800856a:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800856e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8008572:	441e      	add	r6, r3
 8008574:	0e09      	lsrs	r1, r1, #24
 8008576:	4633      	mov	r3, r6
 8008578:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800857c:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8008580:	b2d4      	uxtb	r4, r2
 8008582:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008586:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800858a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800858e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008592:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008596:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800859a:	0e12      	lsrs	r2, r2, #24
 800859c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80085a0:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80085a4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80085a8:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80085ac:	9702      	str	r7, [sp, #8]
 80085ae:	b2c2      	uxtb	r2, r0
 80085b0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80085b4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80085b8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80085bc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80085c0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80085c4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80085c8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80085cc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80085d0:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80085d4:	0e00      	lsrs	r0, r0, #24
 80085d6:	fa5f f68a 	uxtb.w	r6, sl
 80085da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085de:	9309      	str	r3, [sp, #36]	; 0x24
 80085e0:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80085e4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80085e8:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80085ec:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80085f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80085f4:	950a      	str	r5, [sp, #40]	; 0x28
 80085f6:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80085fa:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80085fe:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008602:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008606:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800860a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800860e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008610:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008616:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800861a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008624:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	f8cd c008 	str.w	ip, [sp, #8]
 800862e:	4694      	mov	ip, r2
 8008630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008632:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008636:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800863a:	9a02      	ldr	r2, [sp, #8]
 800863c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008640:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008644:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800864a:	f8cd a020 	str.w	sl, [sp, #32]
 800864e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008652:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008656:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800865a:	9b07      	ldr	r3, [sp, #28]
 800865c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008660:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8008664:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8008668:	9a08      	ldr	r2, [sp, #32]
 800866a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800866e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008672:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008676:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800867a:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800867e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008682:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008686:	0a96      	lsrs	r6, r2, #10
 8008688:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800868c:	9602      	str	r6, [sp, #8]
 800868e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008692:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8008696:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800869a:	4e53      	ldr	r6, [pc, #332]	; (80087e8 <D128_GENERIC+0x394>)
 800869c:	9f03      	ldr	r7, [sp, #12]
 800869e:	fb2c 7606 	smlad	r6, ip, r6, r7
 80086a2:	4f52      	ldr	r7, [pc, #328]	; (80087ec <D128_GENERIC+0x398>)
 80086a4:	fb2a 6607 	smlad	r6, sl, r7, r6
 80086a8:	4f51      	ldr	r7, [pc, #324]	; (80087f0 <D128_GENERIC+0x39c>)
 80086aa:	fb21 6607 	smlad	r6, r1, r7, r6
 80086ae:	4f51      	ldr	r7, [pc, #324]	; (80087f4 <D128_GENERIC+0x3a0>)
 80086b0:	fb24 6607 	smlad	r6, r4, r7, r6
 80086b4:	4f50      	ldr	r7, [pc, #320]	; (80087f8 <D128_GENERIC+0x3a4>)
 80086b6:	fb28 6607 	smlad	r6, r8, r7, r6
 80086ba:	4f50      	ldr	r7, [pc, #320]	; (80087fc <D128_GENERIC+0x3a8>)
 80086bc:	fb20 6607 	smlad	r6, r0, r7, r6
 80086c0:	4f4f      	ldr	r7, [pc, #316]	; (8008800 <D128_GENERIC+0x3ac>)
 80086c2:	fb23 6607 	smlad	r6, r3, r7, r6
 80086c6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80086ca:	fb25 6607 	smlad	r6, r5, r7, r6
 80086ce:	4f4d      	ldr	r7, [pc, #308]	; (8008804 <D128_GENERIC+0x3b0>)
 80086d0:	9a04      	ldr	r2, [sp, #16]
 80086d2:	fb2c 2e07 	smlad	lr, ip, r7, r2
 80086d6:	4a4c      	ldr	r2, [pc, #304]	; (8008808 <D128_GENERIC+0x3b4>)
 80086d8:	fb2a ee02 	smlad	lr, sl, r2, lr
 80086dc:	4f4b      	ldr	r7, [pc, #300]	; (800880c <D128_GENERIC+0x3b8>)
 80086de:	fb21 ee07 	smlad	lr, r1, r7, lr
 80086e2:	4f4b      	ldr	r7, [pc, #300]	; (8008810 <D128_GENERIC+0x3bc>)
 80086e4:	fb24 ee07 	smlad	lr, r4, r7, lr
 80086e8:	4f4a      	ldr	r7, [pc, #296]	; (8008814 <D128_GENERIC+0x3c0>)
 80086ea:	fb28 ee07 	smlad	lr, r8, r7, lr
 80086ee:	4f4a      	ldr	r7, [pc, #296]	; (8008818 <D128_GENERIC+0x3c4>)
 80086f0:	fb20 ee07 	smlad	lr, r0, r7, lr
 80086f4:	4f49      	ldr	r7, [pc, #292]	; (800881c <D128_GENERIC+0x3c8>)
 80086f6:	fb23 e707 	smlad	r7, r3, r7, lr
 80086fa:	f8df e144 	ldr.w	lr, [pc, #324]	; 8008840 <D128_GENERIC+0x3ec>
 80086fe:	fb25 720e 	smlad	r2, r5, lr, r7
 8008702:	f04f 0b01 	mov.w	fp, #1
 8008706:	9203      	str	r2, [sp, #12]
 8008708:	fb2c fb0b 	smuad	fp, ip, fp
 800870c:	4f44      	ldr	r7, [pc, #272]	; (8008820 <D128_GENERIC+0x3cc>)
 800870e:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008712:	4f44      	ldr	r7, [pc, #272]	; (8008824 <D128_GENERIC+0x3d0>)
 8008714:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008718:	4f43      	ldr	r7, [pc, #268]	; (8008828 <D128_GENERIC+0x3d4>)
 800871a:	fb24 aa07 	smlad	sl, r4, r7, sl
 800871e:	4f43      	ldr	r7, [pc, #268]	; (800882c <D128_GENERIC+0x3d8>)
 8008720:	fb28 a707 	smlad	r7, r8, r7, sl
 8008724:	4a42      	ldr	r2, [pc, #264]	; (8008830 <D128_GENERIC+0x3dc>)
 8008726:	fb20 7702 	smlad	r7, r0, r2, r7
 800872a:	4a42      	ldr	r2, [pc, #264]	; (8008834 <D128_GENERIC+0x3e0>)
 800872c:	fb23 7702 	smlad	r7, r3, r2, r7
 8008730:	4b41      	ldr	r3, [pc, #260]	; (8008838 <D128_GENERIC+0x3e4>)
 8008732:	fb25 7303 	smlad	r3, r5, r3, r7
 8008736:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800873e:	b185      	cbz	r5, 8008762 <D128_GENERIC+0x30e>
 8008740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008742:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008744:	960d      	str	r6, [sp, #52]	; 0x34
 8008746:	4432      	add	r2, r6
 8008748:	1a52      	subs	r2, r2, r1
 800874a:	17d1      	asrs	r1, r2, #31
 800874c:	fba2 2305 	umull	r2, r3, r2, r5
 8008750:	fb05 3301 	mla	r3, r5, r1, r3
 8008754:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008758:	f143 0300 	adc.w	r3, r3, #0
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	930c      	str	r3, [sp, #48]	; 0x30
 8008760:	461e      	mov	r6, r3
 8008762:	9801      	ldr	r0, [sp, #4]
 8008764:	9c06      	ldr	r4, [sp, #24]
 8008766:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8008768:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800876a:	01f6      	lsls	r6, r6, #7
 800876c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008770:	2300      	movs	r3, #0
 8008772:	fbc5 2306 	smlal	r2, r3, r5, r6
 8008776:	fb04 f101 	mul.w	r1, r4, r1
 800877a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800877c:	109b      	asrs	r3, r3, #2
 800877e:	f303 030f 	ssat	r3, #16, r3
 8008782:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8008786:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8008788:	1c62      	adds	r2, r4, #1
 800878a:	4293      	cmp	r3, r2
 800878c:	9206      	str	r2, [sp, #24]
 800878e:	dd18      	ble.n	80087c2 <D128_GENERIC+0x36e>
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008794:	2a01      	cmp	r2, #1
 8008796:	f47f ae80 	bne.w	800849a <D128_GENERIC+0x46>
 800879a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879c:	9d05      	ldr	r5, [sp, #20]
 800879e:	069b      	lsls	r3, r3, #26
 80087a0:	6829      	ldr	r1, [r5, #0]
 80087a2:	686a      	ldr	r2, [r5, #4]
 80087a4:	68a8      	ldr	r0, [r5, #8]
 80087a6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80087aa:	f105 0410 	add.w	r4, r5, #16
 80087ae:	d506      	bpl.n	80087be <D128_GENERIC+0x36a>
 80087b0:	ba49      	rev16	r1, r1
 80087b2:	ba52      	rev16	r2, r2
 80087b4:	ba40      	rev16	r0, r0
 80087b6:	fa9a fa9a 	rev16.w	sl, sl
 80087ba:	9405      	str	r4, [sp, #20]
 80087bc:	e6cf      	b.n	800855e <D128_GENERIC+0x10a>
 80087be:	9405      	str	r4, [sp, #20]
 80087c0:	e6cd      	b.n	800855e <D128_GENERIC+0x10a>
 80087c2:	9a01      	ldr	r2, [sp, #4]
 80087c4:	9904      	ldr	r1, [sp, #16]
 80087c6:	6091      	str	r1, [r2, #8]
 80087c8:	9903      	ldr	r1, [sp, #12]
 80087ca:	60d1      	str	r1, [r2, #12]
 80087cc:	9b02      	ldr	r3, [sp, #8]
 80087ce:	61d3      	str	r3, [r2, #28]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4613      	mov	r3, r2
 80087d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d6:	610a      	str	r2, [r1, #16]
 80087d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087da:	6159      	str	r1, [r3, #20]
 80087dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087de:	6199      	str	r1, [r3, #24]
 80087e0:	2000      	movs	r0, #0
 80087e2:	b013      	add	sp, #76	; 0x4c
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	00780069 	.word	0x00780069
 80087ec:	005b004e 	.word	0x005b004e
 80087f0:	00420037 	.word	0x00420037
 80087f4:	002d0024 	.word	0x002d0024
 80087f8:	001c0015 	.word	0x001c0015
 80087fc:	000f000a 	.word	0x000f000a
 8008800:	00060003 	.word	0x00060003
 8008804:	00880096 	.word	0x00880096
 8008808:	00a200ac 	.word	0x00a200ac
 800880c:	00b400ba 	.word	0x00b400ba
 8008810:	00be00c0 	.word	0x00be00c0
 8008814:	00c000be 	.word	0x00c000be
 8008818:	00ba00b4 	.word	0x00ba00b4
 800881c:	00ac00a2 	.word	0x00ac00a2
 8008820:	00030006 	.word	0x00030006
 8008824:	000a000f 	.word	0x000a000f
 8008828:	0015001c 	.word	0x0015001c
 800882c:	0024002d 	.word	0x0024002d
 8008830:	00370042 	.word	0x00370042
 8008834:	004e005b 	.word	0x004e005b
 8008838:	00690078 	.word	0x00690078
 800883c:	20000000 	.word	0x20000000
 8008840:	00960088 	.word	0x00960088

08008844 <D16_1CH_HTONS_VOL_HP>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	4691      	mov	r9, r2
 800884a:	b083      	sub	sp, #12
 800884c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800884e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008852:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	4680      	mov	r8, r0
 800885a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800885e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008862:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008866:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800886a:	9401      	str	r4, [sp, #4]
 800886c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8008870:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8008874:	2a00      	cmp	r2, #0
 8008876:	d04e      	beq.n	8008916 <D16_1CH_HTONS_VOL_HP+0xd2>
 8008878:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8008924 <D16_1CH_HTONS_VOL_HP+0xe0>
 800887c:	1e8c      	subs	r4, r1, #2
 800887e:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8008882:	f858 2b02 	ldr.w	r2, [r8], #2
 8008886:	ba52      	rev16	r2, r2
 8008888:	b2d6      	uxtb	r6, r2
 800888a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800888e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8008892:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008896:	4413      	add	r3, r2
 8008898:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800889c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80088a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80088a8:	0a93      	lsrs	r3, r2, #10
 80088aa:	4a1c      	ldr	r2, [pc, #112]	; (800891c <D16_1CH_HTONS_VOL_HP+0xd8>)
 80088ac:	fb21 5202 	smlad	r2, r1, r2, r5
 80088b0:	4d1b      	ldr	r5, [pc, #108]	; (8008920 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80088b2:	fb21 f505 	smuad	r5, r1, r5
 80088b6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80088ba:	4410      	add	r0, r2
 80088bc:	1bc0      	subs	r0, r0, r7
 80088be:	17c7      	asrs	r7, r0, #31
 80088c0:	fba0 010e 	umull	r0, r1, r0, lr
 80088c4:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80088c8:	fb0e 1107 	mla	r1, lr, r7, r1
 80088cc:	f141 0100 	adc.w	r1, r1, #0
 80088d0:	0448      	lsls	r0, r1, #17
 80088d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80088d6:	2700      	movs	r7, #0
 80088d8:	fbc0 670a 	smlal	r6, r7, r0, sl
 80088dc:	45d8      	cmp	r8, fp
 80088de:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80088e2:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80088e6:	4617      	mov	r7, r2
 80088e8:	f301 010f 	ssat	r1, #16, r1
 80088ec:	f824 1f02 	strh.w	r1, [r4, #2]!
 80088f0:	d1c7      	bne.n	8008882 <D16_1CH_HTONS_VOL_HP+0x3e>
 80088f2:	9901      	ldr	r1, [sp, #4]
 80088f4:	f8c9 301c 	str.w	r3, [r9, #28]
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	f8c9 0010 	str.w	r0, [r9, #16]
 80088fe:	2000      	movs	r0, #0
 8008900:	f8c9 5008 	str.w	r5, [r9, #8]
 8008904:	f8c9 100c 	str.w	r1, [r9, #12]
 8008908:	f8c9 2014 	str.w	r2, [r9, #20]
 800890c:	f8c9 3018 	str.w	r3, [r9, #24]
 8008910:	b003      	add	sp, #12
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008916:	463a      	mov	r2, r7
 8008918:	4621      	mov	r1, r4
 800891a:	e7eb      	b.n	80088f4 <D16_1CH_HTONS_VOL_HP+0xb0>
 800891c:	00030001 	.word	0x00030001
 8008920:	00010003 	.word	0x00010003
 8008924:	20000000 	.word	0x20000000

08008928 <D24_1CH_HTONS_VOL_HP>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	b089      	sub	sp, #36	; 0x24
 800892e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008930:	6996      	ldr	r6, [r2, #24]
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8008936:	9207      	str	r2, [sp, #28]
 8008938:	6915      	ldr	r5, [r2, #16]
 800893a:	6954      	ldr	r4, [r2, #20]
 800893c:	9606      	str	r6, [sp, #24]
 800893e:	6893      	ldr	r3, [r2, #8]
 8008940:	69d6      	ldr	r6, [r2, #28]
 8008942:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8008946:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800894a:	9a04      	ldr	r2, [sp, #16]
 800894c:	9705      	str	r7, [sp, #20]
 800894e:	2a00      	cmp	r2, #0
 8008950:	d07e      	beq.n	8008a50 <D24_1CH_HTONS_VOL_HP+0x128>
 8008952:	f1a1 0b02 	sub.w	fp, r1, #2
 8008956:	2700      	movs	r7, #0
 8008958:	46a8      	mov	r8, r5
 800895a:	f8cd b004 	str.w	fp, [sp, #4]
 800895e:	4655      	mov	r5, sl
 8008960:	46e3      	mov	fp, ip
 8008962:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8008a5c <D24_1CH_HTONS_VOL_HP+0x134>
 8008966:	46ba      	mov	sl, r7
 8008968:	469c      	mov	ip, r3
 800896a:	e055      	b.n	8008a18 <D24_1CH_HTONS_VOL_HP+0xf0>
 800896c:	7802      	ldrb	r2, [r0, #0]
 800896e:	78c3      	ldrb	r3, [r0, #3]
 8008970:	7841      	ldrb	r1, [r0, #1]
 8008972:	0212      	lsls	r2, r2, #8
 8008974:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8008978:	440b      	add	r3, r1
 800897a:	3002      	adds	r0, #2
 800897c:	b2d9      	uxtb	r1, r3
 800897e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008982:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8008986:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800898a:	0c1b      	lsrs	r3, r3, #16
 800898c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008990:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008994:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8008998:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800899c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80089a0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80089a4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80089a8:	4a2a      	ldr	r2, [pc, #168]	; (8008a54 <D24_1CH_HTONS_VOL_HP+0x12c>)
 80089aa:	fb23 b102 	smlad	r1, r3, r2, fp
 80089ae:	4a2a      	ldr	r2, [pc, #168]	; (8008a58 <D24_1CH_HTONS_VOL_HP+0x130>)
 80089b0:	fb23 cb02 	smlad	fp, r3, r2, ip
 80089b4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80089b8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80089bc:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80089c0:	2201      	movs	r2, #1
 80089c2:	fb23 f702 	smuad	r7, r3, r2
 80089c6:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80089ca:	eb01 0208 	add.w	r2, r1, r8
 80089ce:	1b12      	subs	r2, r2, r4
 80089d0:	17d4      	asrs	r4, r2, #31
 80089d2:	fba2 2305 	umull	r2, r3, r2, r5
 80089d6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80089da:	fb05 3304 	mla	r3, r5, r4, r3
 80089de:	f143 0300 	adc.w	r3, r3, #0
 80089e2:	9c05      	ldr	r4, [sp, #20]
 80089e4:	03da      	lsls	r2, r3, #15
 80089e6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	fbc4 8902 	smlal	r8, r9, r4, r2
 80089f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80089f6:	9a01      	ldr	r2, [sp, #4]
 80089f8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	109b      	asrs	r3, r3, #2
 8008a00:	f303 030f 	ssat	r3, #16, r3
 8008a04:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008a08:	9b04      	ldr	r3, [sp, #16]
 8008a0a:	9201      	str	r2, [sp, #4]
 8008a0c:	f10a 0a01 	add.w	sl, sl, #1
 8008a10:	459a      	cmp	sl, r3
 8008a12:	44bc      	add	ip, r7
 8008a14:	460c      	mov	r4, r1
 8008a16:	d00b      	beq.n	8008a30 <D24_1CH_HTONS_VOL_HP+0x108>
 8008a18:	f01a 0f01 	tst.w	sl, #1
 8008a1c:	d0a6      	beq.n	800896c <D24_1CH_HTONS_VOL_HP+0x44>
 8008a1e:	78c2      	ldrb	r2, [r0, #3]
 8008a20:	7883      	ldrb	r3, [r0, #2]
 8008a22:	f810 1b04 	ldrb.w	r1, [r0], #4
 8008a26:	0212      	lsls	r2, r2, #8
 8008a28:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8008a2c:	440b      	add	r3, r1
 8008a2e:	e7a5      	b.n	800897c <D24_1CH_HTONS_VOL_HP+0x54>
 8008a30:	4663      	mov	r3, ip
 8008a32:	4645      	mov	r5, r8
 8008a34:	46dc      	mov	ip, fp
 8008a36:	9807      	ldr	r0, [sp, #28]
 8008a38:	6141      	str	r1, [r0, #20]
 8008a3a:	9906      	ldr	r1, [sp, #24]
 8008a3c:	6083      	str	r3, [r0, #8]
 8008a3e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8008a42:	61c6      	str	r6, [r0, #28]
 8008a44:	6105      	str	r5, [r0, #16]
 8008a46:	6181      	str	r1, [r0, #24]
 8008a48:	2000      	movs	r0, #0
 8008a4a:	b009      	add	sp, #36	; 0x24
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	4621      	mov	r1, r4
 8008a52:	e7f0      	b.n	8008a36 <D24_1CH_HTONS_VOL_HP+0x10e>
 8008a54:	00030001 	.word	0x00030001
 8008a58:	00060007 	.word	0x00060007
 8008a5c:	20000000 	.word	0x20000000

08008a60 <D32_1CH_HTONS_VOL_HP>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	4692      	mov	sl, r2
 8008a66:	b087      	sub	sp, #28
 8008a68:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008a6a:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008a6e:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	f8da 4010 	ldr.w	r4, [sl, #16]
 8008a78:	f8da 8014 	ldr.w	r8, [sl, #20]
 8008a7c:	f8da 601c 	ldr.w	r6, [sl, #28]
 8008a80:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008a84:	f8da e00c 	ldr.w	lr, [sl, #12]
 8008a88:	9501      	str	r5, [sp, #4]
 8008a8a:	f8da c020 	ldr.w	ip, [sl, #32]
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d07b      	beq.n	8008b8a <D32_1CH_HTONS_VOL_HP+0x12a>
 8008a92:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008a96:	4f3e      	ldr	r7, [pc, #248]	; (8008b90 <D32_1CH_HTONS_VOL_HP+0x130>)
 8008a98:	f8cd c00c 	str.w	ip, [sp, #12]
 8008a9c:	9202      	str	r2, [sp, #8]
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	46a1      	mov	r9, r4
 8008aa2:	4684      	mov	ip, r0
 8008aa4:	f8cd a014 	str.w	sl, [sp, #20]
 8008aa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008aac:	ba49      	rev16	r1, r1
 8008aae:	b2c8      	uxtb	r0, r1
 8008ab0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008ab4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8008ab8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008abc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008ac0:	0e09      	lsrs	r1, r1, #24
 8008ac2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008ac6:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8008aca:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008ace:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8008ad2:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8008ad6:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8008ada:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008ade:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8008ae2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008ae6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008aea:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8008aee:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8008af2:	4a28      	ldr	r2, [pc, #160]	; (8008b94 <D32_1CH_HTONS_VOL_HP+0x134>)
 8008af4:	fb20 e202 	smlad	r2, r0, r2, lr
 8008af8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008afc:	fb2a 2101 	smlad	r1, sl, r1, r2
 8008b00:	4a25      	ldr	r2, [pc, #148]	; (8008b98 <D32_1CH_HTONS_VOL_HP+0x138>)
 8008b02:	fb20 3302 	smlad	r3, r0, r2, r3
 8008b06:	4a25      	ldr	r2, [pc, #148]	; (8008b9c <D32_1CH_HTONS_VOL_HP+0x13c>)
 8008b08:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	fb20 f003 	smuad	r0, r0, r3
 8008b12:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <D32_1CH_HTONS_VOL_HP+0x140>)
 8008b14:	fb2a 0303 	smlad	r3, sl, r3, r0
 8008b18:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8008b1c:	9c03      	ldr	r4, [sp, #12]
 8008b1e:	eb02 0009 	add.w	r0, r2, r9
 8008b22:	eba0 0008 	sub.w	r0, r0, r8
 8008b26:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8008b2a:	fba0 0104 	umull	r0, r1, r0, r4
 8008b2e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008b32:	fb04 110b 	mla	r1, r4, fp, r1
 8008b36:	f141 0100 	adc.w	r1, r1, #0
 8008b3a:	9c01      	ldr	r4, [sp, #4]
 8008b3c:	0388      	lsls	r0, r1, #14
 8008b3e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	fbc0 8904 	smlal	r8, r9, r0, r4
 8008b4a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8008b4e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8008b52:	f300 000f 	ssat	r0, #16, r0
 8008b56:	9902      	ldr	r1, [sp, #8]
 8008b58:	f825 0b02 	strh.w	r0, [r5], #2
 8008b5c:	428d      	cmp	r5, r1
 8008b5e:	4690      	mov	r8, r2
 8008b60:	d1a2      	bne.n	8008aa8 <D32_1CH_HTONS_VOL_HP+0x48>
 8008b62:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008b66:	464c      	mov	r4, r9
 8008b68:	f8ca 3008 	str.w	r3, [sl, #8]
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	f8ca e00c 	str.w	lr, [sl, #12]
 8008b72:	2000      	movs	r0, #0
 8008b74:	f8ca 601c 	str.w	r6, [sl, #28]
 8008b78:	f8ca 4010 	str.w	r4, [sl, #16]
 8008b7c:	f8ca 2014 	str.w	r2, [sl, #20]
 8008b80:	f8ca 3018 	str.w	r3, [sl, #24]
 8008b84:	b007      	add	sp, #28
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	e7ec      	b.n	8008b68 <D32_1CH_HTONS_VOL_HP+0x108>
 8008b8e:	bf00      	nop
 8008b90:	20000000 	.word	0x20000000
 8008b94:	00060003 	.word	0x00060003
 8008b98:	000a000c 	.word	0x000a000c
 8008b9c:	000c000a 	.word	0x000c000a
 8008ba0:	00030006 	.word	0x00030006

08008ba4 <D48_1CH_HTONS_VOL_HP>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	4613      	mov	r3, r2
 8008baa:	461c      	mov	r4, r3
 8008bac:	b087      	sub	sp, #28
 8008bae:	4625      	mov	r5, r4
 8008bb0:	4626      	mov	r6, r4
 8008bb2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8008bb4:	9205      	str	r2, [sp, #20]
 8008bb6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008bb8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8008bbc:	9501      	str	r5, [sp, #4]
 8008bbe:	4680      	mov	r8, r0
 8008bc0:	6a35      	ldr	r5, [r6, #32]
 8008bc2:	6918      	ldr	r0, [r3, #16]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8008bcc:	68a3      	ldr	r3, [r4, #8]
 8008bce:	9502      	str	r5, [sp, #8]
 8008bd0:	68e4      	ldr	r4, [r4, #12]
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	f000 808c 	beq.w	8008cf0 <D48_1CH_HTONS_VOL_HP+0x14c>
 8008bd8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008bdc:	4d45      	ldr	r5, [pc, #276]	; (8008cf4 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008bde:	9203      	str	r2, [sp, #12]
 8008be0:	468c      	mov	ip, r1
 8008be2:	e898 0044 	ldmia.w	r8, {r2, r6}
 8008be6:	f108 0806 	add.w	r8, r8, #6
 8008bea:	ba52      	rev16	r2, r2
 8008bec:	ba76      	rev16	r6, r6
 8008bee:	b2d7      	uxtb	r7, r2
 8008bf0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008bf4:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8008bf8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8008bfc:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8008c00:	0e12      	lsrs	r2, r2, #24
 8008c02:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8008c06:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8008c0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008c0e:	fa5f fb86 	uxtb.w	fp, r6
 8008c12:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008c16:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8008c1a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008c1e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8008c22:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8008c26:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008c2a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8008c2e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008c32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008c3a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8008c3e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008c42:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c46:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008c4a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8008c4e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8008c52:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8008c56:	4a28      	ldr	r2, [pc, #160]	; (8008cf8 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008c58:	fb2a 4202 	smlad	r2, sl, r2, r4
 8008c5c:	4927      	ldr	r1, [pc, #156]	; (8008cfc <D48_1CH_HTONS_VOL_HP+0x158>)
 8008c5e:	fb27 2201 	smlad	r2, r7, r1, r2
 8008c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008c66:	fb26 2201 	smlad	r2, r6, r1, r2
 8008c6a:	4925      	ldr	r1, [pc, #148]	; (8008d00 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008c6c:	fb2a 3401 	smlad	r4, sl, r1, r3
 8008c70:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008c74:	fb27 4403 	smlad	r4, r7, r3, r4
 8008c78:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008c7a:	fb26 4403 	smlad	r4, r6, r3, r4
 8008c7e:	2101      	movs	r1, #1
 8008c80:	fb2a fa01 	smuad	sl, sl, r1
 8008c84:	4b20      	ldr	r3, [pc, #128]	; (8008d08 <D48_1CH_HTONS_VOL_HP+0x164>)
 8008c86:	fb27 a703 	smlad	r7, r7, r3, sl
 8008c8a:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <D48_1CH_HTONS_VOL_HP+0x168>)
 8008c8c:	fb26 7303 	smlad	r3, r6, r3, r7
 8008c90:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8008c94:	9e02      	ldr	r6, [sp, #8]
 8008c96:	9f01      	ldr	r7, [sp, #4]
 8008c98:	4410      	add	r0, r2
 8008c9a:	eba0 0009 	sub.w	r0, r0, r9
 8008c9e:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8008ca2:	fba0 0106 	umull	r0, r1, r0, r6
 8008ca6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008caa:	fb06 110a 	mla	r1, r6, sl, r1
 8008cae:	f141 0100 	adc.w	r1, r1, #0
 8008cb2:	0308      	lsls	r0, r1, #12
 8008cb4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008cb8:	f04f 0a00 	mov.w	sl, #0
 8008cbc:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8008cc0:	4657      	mov	r7, sl
 8008cc2:	10b8      	asrs	r0, r7, #2
 8008cc4:	f300 000f 	ssat	r0, #16, r0
 8008cc8:	f82c 0b02 	strh.w	r0, [ip], #2
 8008ccc:	0048      	lsls	r0, r1, #1
 8008cce:	9903      	ldr	r1, [sp, #12]
 8008cd0:	458c      	cmp	ip, r1
 8008cd2:	4691      	mov	r9, r2
 8008cd4:	d185      	bne.n	8008be2 <D48_1CH_HTONS_VOL_HP+0x3e>
 8008cd6:	9d05      	ldr	r5, [sp, #20]
 8008cd8:	616a      	str	r2, [r5, #20]
 8008cda:	9a04      	ldr	r2, [sp, #16]
 8008cdc:	6128      	str	r0, [r5, #16]
 8008cde:	2000      	movs	r0, #0
 8008ce0:	60ab      	str	r3, [r5, #8]
 8008ce2:	60ec      	str	r4, [r5, #12]
 8008ce4:	f8c5 e01c 	str.w	lr, [r5, #28]
 8008ce8:	61aa      	str	r2, [r5, #24]
 8008cea:	b007      	add	sp, #28
 8008cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf0:	464a      	mov	r2, r9
 8008cf2:	e7f0      	b.n	8008cd6 <D48_1CH_HTONS_VOL_HP+0x132>
 8008cf4:	20000000 	.word	0x20000000
 8008cf8:	000f000a 	.word	0x000f000a
 8008cfc:	00060003 	.word	0x00060003
 8008d00:	00150019 	.word	0x00150019
 8008d04:	00190015 	.word	0x00190015
 8008d08:	00030006 	.word	0x00030006
 8008d0c:	000a000f 	.word	0x000a000f

08008d10 <D64_1CH_HTONS_VOL_HP>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	b089      	sub	sp, #36	; 0x24
 8008d16:	4614      	mov	r4, r2
 8008d18:	9207      	str	r2, [sp, #28]
 8008d1a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008d1c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8008d20:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8008d24:	6992      	ldr	r2, [r2, #24]
 8008d26:	9206      	str	r2, [sp, #24]
 8008d28:	68e2      	ldr	r2, [r4, #12]
 8008d2a:	9201      	str	r2, [sp, #4]
 8008d2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008d2e:	9203      	str	r2, [sp, #12]
 8008d30:	6a22      	ldr	r2, [r4, #32]
 8008d32:	69e5      	ldr	r5, [r4, #28]
 8008d34:	68a6      	ldr	r6, [r4, #8]
 8008d36:	9204      	str	r2, [sp, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80b0 	beq.w	8008e9e <D64_1CH_HTONS_VOL_HP+0x18e>
 8008d3e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008d42:	4f58      	ldr	r7, [pc, #352]	; (8008ea4 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008d44:	9305      	str	r3, [sp, #20]
 8008d46:	9102      	str	r1, [sp, #8]
 8008d48:	f850 2b08 	ldr.w	r2, [r0], #8
 8008d4c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008d50:	ba52      	rev16	r2, r2
 8008d52:	fa93 f993 	rev16.w	r9, r3
 8008d56:	b2d4      	uxtb	r4, r2
 8008d58:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008d5c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8008d60:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008d64:	9901      	ldr	r1, [sp, #4]
 8008d66:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008d6a:	0e12      	lsrs	r2, r2, #24
 8008d6c:	44ab      	add	fp, r5
 8008d6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d72:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8008d76:	fa5f f289 	uxtb.w	r2, r9
 8008d7a:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8008d7e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8008d82:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8008d86:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008d8a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008d8e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8008d92:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8008d96:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008d9a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008d9e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8008da2:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8008da6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8008daa:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008dae:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8008db2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008db6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008dba:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008dc6:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8008dca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008dce:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8008dd2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008dd6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008dda:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8008dde:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008de2:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8008de6:	4b30      	ldr	r3, [pc, #192]	; (8008ea8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008de8:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008dec:	492f      	ldr	r1, [pc, #188]	; (8008eac <D64_1CH_HTONS_VOL_HP+0x19c>)
 8008dee:	fb24 3301 	smlad	r3, r4, r1, r3
 8008df2:	492f      	ldr	r1, [pc, #188]	; (8008eb0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8008df4:	fb22 3301 	smlad	r3, r2, r1, r3
 8008df8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008dfc:	fb2e 390a 	smlad	r9, lr, sl, r3
 8008e00:	4b2c      	ldr	r3, [pc, #176]	; (8008eb4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8008e02:	fb2b 6603 	smlad	r6, fp, r3, r6
 8008e06:	fb2e 6613 	smladx	r6, lr, r3, r6
 8008e0a:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8008e0c:	fb24 6603 	smlad	r6, r4, r3, r6
 8008e10:	fb22 6313 	smladx	r3, r2, r3, r6
 8008e14:	f04f 0a01 	mov.w	sl, #1
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	fb2b fb0a 	smuad	fp, fp, sl
 8008e1e:	4b27      	ldr	r3, [pc, #156]	; (8008ebc <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8008e20:	fb24 ba03 	smlad	sl, r4, r3, fp
 8008e24:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8008e26:	fb22 a203 	smlad	r2, r2, r3, sl
 8008e2a:	4b26      	ldr	r3, [pc, #152]	; (8008ec4 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8008e2c:	fb2e 2603 	smlad	r6, lr, r3, r2
 8008e30:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8008e34:	eb0a 020c 	add.w	r2, sl, ip
 8008e38:	9c04      	ldr	r4, [sp, #16]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	eba2 0208 	sub.w	r2, r2, r8
 8008e40:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008e44:	fba2 2304 	umull	r2, r3, r2, r4
 8008e48:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008e4c:	fb04 3309 	mla	r3, r4, r9, r3
 8008e50:	f143 0300 	adc.w	r3, r3, #0
 8008e54:	02da      	lsls	r2, r3, #11
 8008e56:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008e5a:	f04f 0900 	mov.w	r9, #0
 8008e5e:	fbc1 8902 	smlal	r8, r9, r1, r2
 8008e62:	9902      	ldr	r1, [sp, #8]
 8008e64:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8008e68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e6c:	f302 020f 	ssat	r2, #16, r2
 8008e70:	9b05      	ldr	r3, [sp, #20]
 8008e72:	f821 2b02 	strh.w	r2, [r1], #2
 8008e76:	4299      	cmp	r1, r3
 8008e78:	9102      	str	r1, [sp, #8]
 8008e7a:	46d0      	mov	r8, sl
 8008e7c:	f47f af64 	bne.w	8008d48 <D64_1CH_HTONS_VOL_HP+0x38>
 8008e80:	9a07      	ldr	r2, [sp, #28]
 8008e82:	9901      	ldr	r1, [sp, #4]
 8008e84:	60d1      	str	r1, [r2, #12]
 8008e86:	9906      	ldr	r1, [sp, #24]
 8008e88:	6096      	str	r6, [r2, #8]
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	61d5      	str	r5, [r2, #28]
 8008e8e:	f8c2 c010 	str.w	ip, [r2, #16]
 8008e92:	f8c2 a014 	str.w	sl, [r2, #20]
 8008e96:	6191      	str	r1, [r2, #24]
 8008e98:	b009      	add	sp, #36	; 0x24
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	46c2      	mov	sl, r8
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	e7ee      	b.n	8008e82 <D64_1CH_HTONS_VOL_HP+0x172>
 8008ea4:	20000000 	.word	0x20000000
 8008ea8:	001c0015 	.word	0x001c0015
 8008eac:	000f000a 	.word	0x000f000a
 8008eb0:	00060003 	.word	0x00060003
 8008eb4:	0024002a 	.word	0x0024002a
 8008eb8:	002e0030 	.word	0x002e0030
 8008ebc:	00030006 	.word	0x00030006
 8008ec0:	000a000f 	.word	0x000a000f
 8008ec4:	0015001c 	.word	0x0015001c

08008ec8 <D80_1CH_HTONS_VOL_HP>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	4613      	mov	r3, r2
 8008ece:	b089      	sub	sp, #36	; 0x24
 8008ed0:	4686      	mov	lr, r0
 8008ed2:	6918      	ldr	r0, [r3, #16]
 8008ed4:	9000      	str	r0, [sp, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	461c      	mov	r4, r3
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	9302      	str	r3, [sp, #8]
 8008ede:	6983      	ldr	r3, [r0, #24]
 8008ee0:	9306      	str	r3, [sp, #24]
 8008ee2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8008ee6:	69c3      	ldr	r3, [r0, #28]
 8008ee8:	68c0      	ldr	r0, [r0, #12]
 8008eea:	9207      	str	r2, [sp, #28]
 8008eec:	9001      	str	r0, [sp, #4]
 8008eee:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008ef0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008ef2:	9003      	str	r0, [sp, #12]
 8008ef4:	6a20      	ldr	r0, [r4, #32]
 8008ef6:	9004      	str	r0, [sp, #16]
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	f000 80d2 	beq.w	80090a2 <D80_1CH_HTONS_VOL_HP+0x1da>
 8008efe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008f02:	4869      	ldr	r0, [pc, #420]	; (80090a8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008f04:	9205      	str	r2, [sp, #20]
 8008f06:	461c      	mov	r4, r3
 8008f08:	f8de 5000 	ldr.w	r5, [lr]
 8008f0c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008f10:	f8de 3008 	ldr.w	r3, [lr, #8]
 8008f14:	f10e 0e0a 	add.w	lr, lr, #10
 8008f18:	ba6d      	rev16	r5, r5
 8008f1a:	ba52      	rev16	r2, r2
 8008f1c:	fa93 fb93 	rev16.w	fp, r3
 8008f20:	b2ee      	uxtb	r6, r5
 8008f22:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8008f26:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8008f2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008f2e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8008f32:	eb04 0a07 	add.w	sl, r4, r7
 8008f36:	0e2d      	lsrs	r5, r5, #24
 8008f38:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8008f3c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8008f40:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8008f44:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8008f48:	b2d5      	uxtb	r5, r2
 8008f4a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008f4e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8008f52:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008f56:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008f5a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008f5e:	0e12      	lsrs	r2, r2, #24
 8008f60:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8008f64:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8008f68:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008f6c:	fa5f f48b 	uxtb.w	r4, fp
 8008f70:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008f74:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8008f78:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008f7c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8008f80:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8008f84:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008f88:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008f8c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8008f90:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f94:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008f98:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008f9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008fa0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008fa4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008fa8:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8008fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fb0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8008fb4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008fb8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008fbc:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8008fc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008fc4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8008fc8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008fcc:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8008fd0:	4d36      	ldr	r5, [pc, #216]	; (80090ac <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008fd2:	9f01      	ldr	r7, [sp, #4]
 8008fd4:	fb23 7505 	smlad	r5, r3, r5, r7
 8008fd8:	4f35      	ldr	r7, [pc, #212]	; (80090b0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008fda:	fb29 5507 	smlad	r5, r9, r7, r5
 8008fde:	4f35      	ldr	r7, [pc, #212]	; (80090b4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008fe0:	fb28 5507 	smlad	r5, r8, r7, r5
 8008fe4:	4f34      	ldr	r7, [pc, #208]	; (80090b8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008fe6:	fb22 5507 	smlad	r5, r2, r7, r5
 8008fea:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008fee:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8008ff2:	4d32      	ldr	r5, [pc, #200]	; (80090bc <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008ff4:	fb23 cc05 	smlad	ip, r3, r5, ip
 8008ff8:	4d31      	ldr	r5, [pc, #196]	; (80090c0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008ffa:	fb29 cc05 	smlad	ip, r9, r5, ip
 8008ffe:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8009002:	fb28 c505 	smlad	r5, r8, r5, ip
 8009006:	4f2f      	ldr	r7, [pc, #188]	; (80090c4 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8009008:	fb22 5507 	smlad	r5, r2, r7, r5
 800900c:	4f2e      	ldr	r7, [pc, #184]	; (80090c8 <D80_1CH_HTONS_VOL_HP+0x200>)
 800900e:	fb26 5507 	smlad	r5, r6, r7, r5
 8009012:	f04f 0a01 	mov.w	sl, #1
 8009016:	9501      	str	r5, [sp, #4]
 8009018:	fb23 fa0a 	smuad	sl, r3, sl
 800901c:	4b2b      	ldr	r3, [pc, #172]	; (80090cc <D80_1CH_HTONS_VOL_HP+0x204>)
 800901e:	fb29 a903 	smlad	r9, r9, r3, sl
 8009022:	4d2b      	ldr	r5, [pc, #172]	; (80090d0 <D80_1CH_HTONS_VOL_HP+0x208>)
 8009024:	fb28 9805 	smlad	r8, r8, r5, r9
 8009028:	4d2a      	ldr	r5, [pc, #168]	; (80090d4 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800902a:	fb22 8205 	smlad	r2, r2, r5, r8
 800902e:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <D80_1CH_HTONS_VOL_HP+0x210>)
 8009030:	fb26 2c03 	smlad	ip, r6, r3, r2
 8009034:	9b00      	ldr	r3, [sp, #0]
 8009036:	9d04      	ldr	r5, [sp, #16]
 8009038:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800903c:	4453      	add	r3, sl
 800903e:	461a      	mov	r2, r3
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	f8cd a008 	str.w	sl, [sp, #8]
 8009046:	1ad2      	subs	r2, r2, r3
 8009048:	17d7      	asrs	r7, r2, #31
 800904a:	fba2 2305 	umull	r2, r3, r2, r5
 800904e:	fb05 3307 	mla	r3, r5, r7, r3
 8009052:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009056:	f143 0300 	adc.w	r3, r3, #0
 800905a:	9d03      	ldr	r5, [sp, #12]
 800905c:	029a      	lsls	r2, r3, #10
 800905e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009062:	2700      	movs	r7, #0
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	fbc5 6702 	smlal	r6, r7, r5, r2
 800906a:	10ba      	asrs	r2, r7, #2
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	f302 020f 	ssat	r2, #16, r2
 8009072:	9b05      	ldr	r3, [sp, #20]
 8009074:	f821 2b02 	strh.w	r2, [r1], #2
 8009078:	4299      	cmp	r1, r3
 800907a:	f47f af45 	bne.w	8008f08 <D80_1CH_HTONS_VOL_HP+0x40>
 800907e:	4623      	mov	r3, r4
 8009080:	9907      	ldr	r1, [sp, #28]
 8009082:	9801      	ldr	r0, [sp, #4]
 8009084:	60c8      	str	r0, [r1, #12]
 8009086:	9a00      	ldr	r2, [sp, #0]
 8009088:	f8c1 c008 	str.w	ip, [r1, #8]
 800908c:	4608      	mov	r0, r1
 800908e:	61cb      	str	r3, [r1, #28]
 8009090:	610a      	str	r2, [r1, #16]
 8009092:	f8c1 a014 	str.w	sl, [r1, #20]
 8009096:	9906      	ldr	r1, [sp, #24]
 8009098:	6181      	str	r1, [r0, #24]
 800909a:	2000      	movs	r0, #0
 800909c:	b009      	add	sp, #36	; 0x24
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80090a6:	e7eb      	b.n	8009080 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80090a8:	20000000 	.word	0x20000000
 80090ac:	002d0024 	.word	0x002d0024
 80090b0:	001c0015 	.word	0x001c0015
 80090b4:	000f000a 	.word	0x000f000a
 80090b8:	00060003 	.word	0x00060003
 80090bc:	0037003f 	.word	0x0037003f
 80090c0:	00450049 	.word	0x00450049
 80090c4:	00490045 	.word	0x00490045
 80090c8:	003f0037 	.word	0x003f0037
 80090cc:	00030006 	.word	0x00030006
 80090d0:	000a000f 	.word	0x000a000f
 80090d4:	0015001c 	.word	0x0015001c
 80090d8:	0024002d 	.word	0x0024002d

080090dc <D128_1CH_HTONS_VOL_HP>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	b093      	sub	sp, #76	; 0x4c
 80090e2:	4614      	mov	r4, r2
 80090e4:	9211      	str	r2, [sp, #68]	; 0x44
 80090e6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80090e8:	6912      	ldr	r2, [r2, #16]
 80090ea:	9203      	str	r2, [sp, #12]
 80090ec:	4622      	mov	r2, r4
 80090ee:	4615      	mov	r5, r2
 80090f0:	6964      	ldr	r4, [r4, #20]
 80090f2:	9406      	str	r4, [sp, #24]
 80090f4:	4614      	mov	r4, r2
 80090f6:	6992      	ldr	r2, [r2, #24]
 80090f8:	9210      	str	r2, [sp, #64]	; 0x40
 80090fa:	68ea      	ldr	r2, [r5, #12]
 80090fc:	9204      	str	r2, [sp, #16]
 80090fe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8009100:	69e6      	ldr	r6, [r4, #28]
 8009102:	920d      	str	r2, [sp, #52]	; 0x34
 8009104:	68a4      	ldr	r4, [r4, #8]
 8009106:	6a2a      	ldr	r2, [r5, #32]
 8009108:	9405      	str	r4, [sp, #20]
 800910a:	920e      	str	r2, [sp, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8145 	beq.w	800939c <D128_1CH_HTONS_VOL_HP+0x2c0>
 8009112:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009116:	930f      	str	r3, [sp, #60]	; 0x3c
 8009118:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80093f8 <D128_1CH_HTONS_VOL_HP+0x31c>
 800911c:	9107      	str	r1, [sp, #28]
 800911e:	f100 0310 	add.w	r3, r0, #16
 8009122:	4699      	mov	r9, r3
 8009124:	f1a9 0110 	sub.w	r1, r9, #16
 8009128:	c90e      	ldmia	r1, {r1, r2, r3}
 800912a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800912e:	ba49      	rev16	r1, r1
 8009130:	ba52      	rev16	r2, r2
 8009132:	ba5b      	rev16	r3, r3
 8009134:	fa90 fa90 	rev16.w	sl, r0
 8009138:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800913c:	b2cc      	uxtb	r4, r1
 800913e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8009142:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009146:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800914a:	0e09      	lsrs	r1, r1, #24
 800914c:	4426      	add	r6, r4
 800914e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8009152:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8009156:	b2d0      	uxtb	r0, r2
 8009158:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800915c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8009160:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009164:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8009168:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800916c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009170:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009174:	0e12      	lsrs	r2, r2, #24
 8009176:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800917a:	9701      	str	r7, [sp, #4]
 800917c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8009180:	4627      	mov	r7, r4
 8009182:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009186:	9702      	str	r7, [sp, #8]
 8009188:	b2da      	uxtb	r2, r3
 800918a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800918e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8009192:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8009196:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800919a:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800919e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80091a2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80091a6:	0e1b      	lsrs	r3, r3, #24
 80091a8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80091ac:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80091b0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80091b4:	fa5f f38a 	uxtb.w	r3, sl
 80091b8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80091bc:	960a      	str	r6, [sp, #40]	; 0x28
 80091be:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80091c2:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80091c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80091ca:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80091ce:	950b      	str	r5, [sp, #44]	; 0x2c
 80091d0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80091d4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80091d8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80091dc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80091e0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80091e4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80091e8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80091ec:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80091f0:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80091f4:	9308      	str	r3, [sp, #32]
 80091f6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80091fa:	9b01      	ldr	r3, [sp, #4]
 80091fc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009200:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009204:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009208:	9b02      	ldr	r3, [sp, #8]
 800920a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	9b08      	ldr	r3, [sp, #32]
 8009212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800921a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800921e:	950c      	str	r5, [sp, #48]	; 0x30
 8009220:	461d      	mov	r5, r3
 8009222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009224:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009228:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800922c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8009230:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	9b02      	ldr	r3, [sp, #8]
 8009238:	9202      	str	r2, [sp, #8]
 800923a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800923c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800923e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009242:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800924a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800924e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009252:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009256:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	9f01      	ldr	r7, [sp, #4]
 800925e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009262:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009266:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800926a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800926e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009272:	46be      	mov	lr, r7
 8009274:	0a96      	lsrs	r6, r2, #10
 8009276:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800927a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800927e:	4f49      	ldr	r7, [pc, #292]	; (80093a4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009280:	9a04      	ldr	r2, [sp, #16]
 8009282:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8009286:	4a48      	ldr	r2, [pc, #288]	; (80093a8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8009288:	fb2a ee02 	smlad	lr, sl, r2, lr
 800928c:	4a47      	ldr	r2, [pc, #284]	; (80093ac <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800928e:	fb21 ee02 	smlad	lr, r1, r2, lr
 8009292:	4a47      	ldr	r2, [pc, #284]	; (80093b0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8009294:	fb24 ee02 	smlad	lr, r4, r2, lr
 8009298:	4a46      	ldr	r2, [pc, #280]	; (80093b4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800929a:	9f02      	ldr	r7, [sp, #8]
 800929c:	fb27 ee02 	smlad	lr, r7, r2, lr
 80092a0:	4a45      	ldr	r2, [pc, #276]	; (80093b8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80092a2:	fb20 ee02 	smlad	lr, r0, r2, lr
 80092a6:	4a45      	ldr	r2, [pc, #276]	; (80093bc <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80092a8:	fb23 e702 	smlad	r7, r3, r2, lr
 80092ac:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80092b0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80092b4:	9f01      	ldr	r7, [sp, #4]
 80092b6:	4a42      	ldr	r2, [pc, #264]	; (80093c0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80092b8:	46bc      	mov	ip, r7
 80092ba:	9f05      	ldr	r7, [sp, #20]
 80092bc:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80092c0:	4a40      	ldr	r2, [pc, #256]	; (80093c4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80092c2:	fb2a cc02 	smlad	ip, sl, r2, ip
 80092c6:	4f40      	ldr	r7, [pc, #256]	; (80093c8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80092c8:	fb21 cc07 	smlad	ip, r1, r7, ip
 80092cc:	4f3f      	ldr	r7, [pc, #252]	; (80093cc <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80092ce:	fb24 cc07 	smlad	ip, r4, r7, ip
 80092d2:	4f3f      	ldr	r7, [pc, #252]	; (80093d0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80092d4:	9a02      	ldr	r2, [sp, #8]
 80092d6:	fb22 cc07 	smlad	ip, r2, r7, ip
 80092da:	4f3e      	ldr	r7, [pc, #248]	; (80093d4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80092dc:	fb20 cc07 	smlad	ip, r0, r7, ip
 80092e0:	4f3d      	ldr	r7, [pc, #244]	; (80093d8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80092e2:	fb23 c707 	smlad	r7, r3, r7, ip
 80092e6:	f8df c114 	ldr.w	ip, [pc, #276]	; 80093fc <D128_1CH_HTONS_VOL_HP+0x320>
 80092ea:	fb25 720c 	smlad	r2, r5, ip, r7
 80092ee:	f04f 0b01 	mov.w	fp, #1
 80092f2:	9204      	str	r2, [sp, #16]
 80092f4:	9f01      	ldr	r7, [sp, #4]
 80092f6:	fb27 fb0b 	smuad	fp, r7, fp
 80092fa:	4f38      	ldr	r7, [pc, #224]	; (80093dc <D128_1CH_HTONS_VOL_HP+0x300>)
 80092fc:	fb2a ba07 	smlad	sl, sl, r7, fp
 8009300:	4f37      	ldr	r7, [pc, #220]	; (80093e0 <D128_1CH_HTONS_VOL_HP+0x304>)
 8009302:	fb21 aa07 	smlad	sl, r1, r7, sl
 8009306:	4f37      	ldr	r7, [pc, #220]	; (80093e4 <D128_1CH_HTONS_VOL_HP+0x308>)
 8009308:	fb24 aa07 	smlad	sl, r4, r7, sl
 800930c:	4f36      	ldr	r7, [pc, #216]	; (80093e8 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800930e:	9a02      	ldr	r2, [sp, #8]
 8009310:	fb22 a707 	smlad	r7, r2, r7, sl
 8009314:	4a35      	ldr	r2, [pc, #212]	; (80093ec <D128_1CH_HTONS_VOL_HP+0x310>)
 8009316:	fb20 7702 	smlad	r7, r0, r2, r7
 800931a:	4a35      	ldr	r2, [pc, #212]	; (80093f0 <D128_1CH_HTONS_VOL_HP+0x314>)
 800931c:	fb23 7702 	smlad	r7, r3, r2, r7
 8009320:	4b34      	ldr	r3, [pc, #208]	; (80093f4 <D128_1CH_HTONS_VOL_HP+0x318>)
 8009322:	fb25 7303 	smlad	r3, r5, r3, r7
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800932c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8009330:	4473      	add	r3, lr
 8009332:	461a      	mov	r2, r3
 8009334:	9b06      	ldr	r3, [sp, #24]
 8009336:	f8cd e018 	str.w	lr, [sp, #24]
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	17d1      	asrs	r1, r2, #31
 800933e:	fba2 2304 	umull	r2, r3, r2, r4
 8009342:	fb04 3301 	mla	r3, r4, r1, r3
 8009346:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800934a:	f143 0300 	adc.w	r3, r3, #0
 800934e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009350:	021a      	lsls	r2, r3, #8
 8009352:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009356:	2100      	movs	r1, #0
 8009358:	fbc4 0102 	smlal	r0, r1, r4, r2
 800935c:	108a      	asrs	r2, r1, #2
 800935e:	9907      	ldr	r1, [sp, #28]
 8009360:	f302 020f 	ssat	r2, #16, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	f821 2b02 	strh.w	r2, [r1], #2
 800936a:	9303      	str	r3, [sp, #12]
 800936c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800936e:	9107      	str	r1, [sp, #28]
 8009370:	4299      	cmp	r1, r3
 8009372:	f109 0910 	add.w	r9, r9, #16
 8009376:	f47f aed5 	bne.w	8009124 <D128_1CH_HTONS_VOL_HP+0x48>
 800937a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800937c:	9905      	ldr	r1, [sp, #20]
 800937e:	6091      	str	r1, [r2, #8]
 8009380:	9904      	ldr	r1, [sp, #16]
 8009382:	60d1      	str	r1, [r2, #12]
 8009384:	4613      	mov	r3, r2
 8009386:	61d6      	str	r6, [r2, #28]
 8009388:	9910      	ldr	r1, [sp, #64]	; 0x40
 800938a:	9a03      	ldr	r2, [sp, #12]
 800938c:	611a      	str	r2, [r3, #16]
 800938e:	2000      	movs	r0, #0
 8009390:	f8c3 e014 	str.w	lr, [r3, #20]
 8009394:	6199      	str	r1, [r3, #24]
 8009396:	b013      	add	sp, #76	; 0x4c
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	f8dd e018 	ldr.w	lr, [sp, #24]
 80093a0:	e7eb      	b.n	800937a <D128_1CH_HTONS_VOL_HP+0x29e>
 80093a2:	bf00      	nop
 80093a4:	00780069 	.word	0x00780069
 80093a8:	005b004e 	.word	0x005b004e
 80093ac:	00420037 	.word	0x00420037
 80093b0:	002d0024 	.word	0x002d0024
 80093b4:	001c0015 	.word	0x001c0015
 80093b8:	000f000a 	.word	0x000f000a
 80093bc:	00060003 	.word	0x00060003
 80093c0:	00880096 	.word	0x00880096
 80093c4:	00a200ac 	.word	0x00a200ac
 80093c8:	00b400ba 	.word	0x00b400ba
 80093cc:	00be00c0 	.word	0x00be00c0
 80093d0:	00c000be 	.word	0x00c000be
 80093d4:	00ba00b4 	.word	0x00ba00b4
 80093d8:	00ac00a2 	.word	0x00ac00a2
 80093dc:	00030006 	.word	0x00030006
 80093e0:	000a000f 	.word	0x000a000f
 80093e4:	0015001c 	.word	0x0015001c
 80093e8:	0024002d 	.word	0x0024002d
 80093ec:	00370042 	.word	0x00370042
 80093f0:	004e005b 	.word	0x004e005b
 80093f4:	00690078 	.word	0x00690078
 80093f8:	20000000 	.word	0x20000000
 80093fc:	00960088 	.word	0x00960088

08009400 <PDM_Filter_Init>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	2240      	movs	r2, #64	; 0x40
 8009404:	4604      	mov	r4, r0
 8009406:	2100      	movs	r1, #0
 8009408:	300c      	adds	r0, #12
 800940a:	f000 fc11 	bl	8009c30 <memset>
 800940e:	493b      	ldr	r1, [pc, #236]	; (80094fc <PDM_Filter_Init+0xfc>)
 8009410:	483b      	ldr	r0, [pc, #236]	; (8009500 <PDM_Filter_Init+0x100>)
 8009412:	f000 f98d 	bl	8009730 <CRC_Lock>
 8009416:	8822      	ldrh	r2, [r4, #0]
 8009418:	8963      	ldrh	r3, [r4, #10]
 800941a:	4938      	ldr	r1, [pc, #224]	; (80094fc <PDM_Filter_Init+0xfc>)
 800941c:	8925      	ldrh	r5, [r4, #8]
 800941e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8009420:	2801      	cmp	r0, #1
 8009422:	f04f 0300 	mov.w	r3, #0
 8009426:	bf18      	it	ne
 8009428:	2100      	movne	r1, #0
 800942a:	2a01      	cmp	r2, #1
 800942c:	6461      	str	r1, [r4, #68]	; 0x44
 800942e:	86e5      	strh	r5, [r4, #54]	; 0x36
 8009430:	61a3      	str	r3, [r4, #24]
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	6163      	str	r3, [r4, #20]
 8009436:	60e3      	str	r3, [r4, #12]
 8009438:	6263      	str	r3, [r4, #36]	; 0x24
 800943a:	61e3      	str	r3, [r4, #28]
 800943c:	6223      	str	r3, [r4, #32]
 800943e:	6423      	str	r3, [r4, #64]	; 0x40
 8009440:	d918      	bls.n	8009474 <PDM_Filter_Init+0x74>
 8009442:	2003      	movs	r0, #3
 8009444:	2302      	movs	r3, #2
 8009446:	8862      	ldrh	r2, [r4, #2]
 8009448:	2a01      	cmp	r2, #1
 800944a:	d91d      	bls.n	8009488 <PDM_Filter_Init+0x88>
 800944c:	2140      	movs	r1, #64	; 0x40
 800944e:	2300      	movs	r3, #0
 8009450:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009452:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8009456:	6862      	ldr	r2, [r4, #4]
 8009458:	bf04      	itt	eq
 800945a:	6421      	streq	r1, [r4, #64]	; 0x40
 800945c:	460b      	moveq	r3, r1
 800945e:	b11a      	cbz	r2, 8009468 <PDM_Filter_Init+0x68>
 8009460:	f043 0310 	orr.w	r3, r3, #16
 8009464:	6423      	str	r3, [r4, #64]	; 0x40
 8009466:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009468:	2200      	movs	r2, #0
 800946a:	8722      	strh	r2, [r4, #56]	; 0x38
 800946c:	b908      	cbnz	r0, 8009472 <PDM_Filter_Init+0x72>
 800946e:	3380      	adds	r3, #128	; 0x80
 8009470:	6423      	str	r3, [r4, #64]	; 0x40
 8009472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009474:	4d23      	ldr	r5, [pc, #140]	; (8009504 <PDM_Filter_Init+0x104>)
 8009476:	d010      	beq.n	800949a <PDM_Filter_Init+0x9a>
 8009478:	782a      	ldrb	r2, [r5, #0]
 800947a:	2a01      	cmp	r2, #1
 800947c:	d027      	beq.n	80094ce <PDM_Filter_Init+0xce>
 800947e:	8862      	ldrh	r2, [r4, #2]
 8009480:	2a01      	cmp	r2, #1
 8009482:	f04f 0001 	mov.w	r0, #1
 8009486:	d8e1      	bhi.n	800944c <PDM_Filter_Init+0x4c>
 8009488:	d001      	beq.n	800948e <PDM_Filter_Init+0x8e>
 800948a:	4618      	mov	r0, r3
 800948c:	e7de      	b.n	800944c <PDM_Filter_Init+0x4c>
 800948e:	2220      	movs	r2, #32
 8009490:	4618      	mov	r0, r3
 8009492:	6422      	str	r2, [r4, #64]	; 0x40
 8009494:	4613      	mov	r3, r2
 8009496:	2160      	movs	r1, #96	; 0x60
 8009498:	e7da      	b.n	8009450 <PDM_Filter_Init+0x50>
 800949a:	7829      	ldrb	r1, [r5, #0]
 800949c:	2900      	cmp	r1, #0
 800949e:	d1ee      	bne.n	800947e <PDM_Filter_Init+0x7e>
 80094a0:	4919      	ldr	r1, [pc, #100]	; (8009508 <PDM_Filter_Init+0x108>)
 80094a2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8009510 <PDM_Filter_Init+0x110>
 80094a6:	4f19      	ldr	r7, [pc, #100]	; (800950c <PDM_Filter_Init+0x10c>)
 80094a8:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80094ac:	684a      	ldr	r2, [r1, #4]
 80094ae:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80094b2:	ea02 0007 	and.w	r0, r2, r7
 80094b6:	4303      	orrs	r3, r0
 80094b8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80094bc:	4413      	add	r3, r2
 80094be:	f841 3f04 	str.w	r3, [r1, #4]!
 80094c2:	428e      	cmp	r6, r1
 80094c4:	d1f2      	bne.n	80094ac <PDM_Filter_Init+0xac>
 80094c6:	2001      	movs	r0, #1
 80094c8:	7028      	strb	r0, [r5, #0]
 80094ca:	2300      	movs	r3, #0
 80094cc:	e7bb      	b.n	8009446 <PDM_Filter_Init+0x46>
 80094ce:	490e      	ldr	r1, [pc, #56]	; (8009508 <PDM_Filter_Init+0x108>)
 80094d0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8009510 <PDM_Filter_Init+0x110>
 80094d4:	4f0d      	ldr	r7, [pc, #52]	; (800950c <PDM_Filter_Init+0x10c>)
 80094d6:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80094da:	684a      	ldr	r2, [r1, #4]
 80094dc:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80094e0:	ea02 0007 	and.w	r0, r2, r7
 80094e4:	4303      	orrs	r3, r0
 80094e6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80094ea:	4413      	add	r3, r2
 80094ec:	f841 3f04 	str.w	r3, [r1, #4]!
 80094f0:	428e      	cmp	r6, r1
 80094f2:	d1f2      	bne.n	80094da <PDM_Filter_Init+0xda>
 80094f4:	2300      	movs	r3, #0
 80094f6:	702b      	strb	r3, [r5, #0]
 80094f8:	e7c1      	b.n	800947e <PDM_Filter_Init+0x7e>
 80094fa:	bf00      	nop
 80094fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8009500:	f407a5c2 	.word	0xf407a5c2
 8009504:	2000049c 	.word	0x2000049c
 8009508:	1ffffffc 	.word	0x1ffffffc
 800950c:	000ffc00 	.word	0x000ffc00
 8009510:	3ff00000 	.word	0x3ff00000

08009514 <PDM_Filter_setConfig>:
 8009514:	4b66      	ldr	r3, [pc, #408]	; (80096b0 <PDM_Filter_setConfig+0x19c>)
 8009516:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009518:	429a      	cmp	r2, r3
 800951a:	d001      	beq.n	8009520 <PDM_Filter_setConfig+0xc>
 800951c:	2004      	movs	r0, #4
 800951e:	4770      	bx	lr
 8009520:	b530      	push	{r4, r5, lr}
 8009522:	880a      	ldrh	r2, [r1, #0]
 8009524:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009526:	ed2d 8b04 	vpush	{d8-d9}
 800952a:	4604      	mov	r4, r0
 800952c:	460d      	mov	r5, r1
 800952e:	1e51      	subs	r1, r2, #1
 8009530:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8009534:	2906      	cmp	r1, #6
 8009536:	b083      	sub	sp, #12
 8009538:	6420      	str	r0, [r4, #64]	; 0x40
 800953a:	d91a      	bls.n	8009572 <PDM_Filter_setConfig+0x5e>
 800953c:	2008      	movs	r0, #8
 800953e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8009542:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009546:	4299      	cmp	r1, r3
 8009548:	d07e      	beq.n	8009648 <PDM_Filter_setConfig+0x134>
 800954a:	f113 0f0c 	cmn.w	r3, #12
 800954e:	da2a      	bge.n	80095a6 <PDM_Filter_setConfig+0x92>
 8009550:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009554:	3040      	adds	r0, #64	; 0x40
 8009556:	80ab      	strh	r3, [r5, #4]
 8009558:	8622      	strh	r2, [r4, #48]	; 0x30
 800955a:	886b      	ldrh	r3, [r5, #2]
 800955c:	8663      	strh	r3, [r4, #50]	; 0x32
 800955e:	b920      	cbnz	r0, 800956a <PDM_Filter_setConfig+0x56>
 8009560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009566:	6423      	str	r3, [r4, #64]	; 0x40
 8009568:	2000      	movs	r0, #0
 800956a:	b003      	add	sp, #12
 800956c:	ecbd 8b04 	vpop	{d8-d9}
 8009570:	bd30      	pop	{r4, r5, pc}
 8009572:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8009574:	4291      	cmp	r1, r2
 8009576:	d06c      	beq.n	8009652 <PDM_Filter_setConfig+0x13e>
 8009578:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800957c:	f023 0301 	bic.w	r3, r3, #1
 8009580:	4313      	orrs	r3, r2
 8009582:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8009586:	6423      	str	r3, [r4, #64]	; 0x40
 8009588:	2970      	cmp	r1, #112	; 0x70
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009592:	d066      	beq.n	8009662 <PDM_Filter_setConfig+0x14e>
 8009594:	2b06      	cmp	r3, #6
 8009596:	f200 8089 	bhi.w	80096ac <PDM_Filter_setConfig+0x198>
 800959a:	e8df f003 	tbb	[pc, r3]
 800959e:	4f52      	.short	0x4f52
 80095a0:	3d43494c 	.word	0x3d43494c
 80095a4:	46          	.byte	0x46
 80095a5:	00          	.byte	0x00
 80095a6:	2b33      	cmp	r3, #51	; 0x33
 80095a8:	dc32      	bgt.n	8009610 <PDM_Filter_setConfig+0xfc>
 80095aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80095ac:	f002 020f 	and.w	r2, r2, #15
 80095b0:	3a01      	subs	r2, #1
 80095b2:	2a06      	cmp	r2, #6
 80095b4:	d872      	bhi.n	800969c <PDM_Filter_setConfig+0x188>
 80095b6:	493f      	ldr	r1, [pc, #252]	; (80096b4 <PDM_Filter_setConfig+0x1a0>)
 80095b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80095bc:	ed92 9a00 	vldr	s18, [r2]
 80095c0:	ed92 8a07 	vldr	s16, [r2, #28]
 80095c4:	9001      	str	r0, [sp, #4]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095ce:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80095d2:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80095d6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80095da:	f001 fa6a 	bl	800aab2 <powf>
 80095de:	eddf 0a36 	vldr	s1, [pc, #216]	; 80096b8 <PDM_Filter_setConfig+0x1a4>
 80095e2:	eef0 8a40 	vmov.f32	s17, s0
 80095e6:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80095ea:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80095ee:	f001 fa60 	bl	800aab2 <powf>
 80095f2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80095f6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80095fa:	f001 fabf 	bl	800ab7c <roundf>
 80095fe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009602:	88ab      	ldrh	r3, [r5, #4]
 8009604:	882a      	ldrh	r2, [r5, #0]
 8009606:	9801      	ldr	r0, [sp, #4]
 8009608:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800960c:	8723      	strh	r3, [r4, #56]	; 0x38
 800960e:	e7a3      	b.n	8009558 <PDM_Filter_setConfig+0x44>
 8009610:	2333      	movs	r3, #51	; 0x33
 8009612:	3040      	adds	r0, #64	; 0x40
 8009614:	80ab      	strh	r3, [r5, #4]
 8009616:	e79f      	b.n	8009558 <PDM_Filter_setConfig+0x44>
 8009618:	4b28      	ldr	r3, [pc, #160]	; (80096bc <PDM_Filter_setConfig+0x1a8>)
 800961a:	64a3      	str	r3, [r4, #72]	; 0x48
 800961c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009620:	2000      	movs	r0, #0
 8009622:	e792      	b.n	800954a <PDM_Filter_setConfig+0x36>
 8009624:	4b26      	ldr	r3, [pc, #152]	; (80096c0 <PDM_Filter_setConfig+0x1ac>)
 8009626:	64a3      	str	r3, [r4, #72]	; 0x48
 8009628:	e7f8      	b.n	800961c <PDM_Filter_setConfig+0x108>
 800962a:	4b26      	ldr	r3, [pc, #152]	; (80096c4 <PDM_Filter_setConfig+0x1b0>)
 800962c:	64a3      	str	r3, [r4, #72]	; 0x48
 800962e:	e7f5      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009630:	4b25      	ldr	r3, [pc, #148]	; (80096c8 <PDM_Filter_setConfig+0x1b4>)
 8009632:	64a3      	str	r3, [r4, #72]	; 0x48
 8009634:	e7f2      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009636:	4b25      	ldr	r3, [pc, #148]	; (80096cc <PDM_Filter_setConfig+0x1b8>)
 8009638:	64a3      	str	r3, [r4, #72]	; 0x48
 800963a:	e7ef      	b.n	800961c <PDM_Filter_setConfig+0x108>
 800963c:	4b24      	ldr	r3, [pc, #144]	; (80096d0 <PDM_Filter_setConfig+0x1bc>)
 800963e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009640:	e7ec      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009642:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <PDM_Filter_setConfig+0x1c0>)
 8009644:	64a3      	str	r3, [r4, #72]	; 0x48
 8009646:	e7e9      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009648:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800964a:	4291      	cmp	r1, r2
 800964c:	f47f af7d 	bne.w	800954a <PDM_Filter_setConfig+0x36>
 8009650:	e783      	b.n	800955a <PDM_Filter_setConfig+0x46>
 8009652:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009656:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800965a:	4299      	cmp	r1, r3
 800965c:	d023      	beq.n	80096a6 <PDM_Filter_setConfig+0x192>
 800965e:	2000      	movs	r0, #0
 8009660:	e773      	b.n	800954a <PDM_Filter_setConfig+0x36>
 8009662:	2b06      	cmp	r3, #6
 8009664:	d822      	bhi.n	80096ac <PDM_Filter_setConfig+0x198>
 8009666:	e8df f003 	tbb	[pc, r3]
 800966a:	1316      	.short	0x1316
 800966c:	070a0d10 	.word	0x070a0d10
 8009670:	04          	.byte	0x04
 8009671:	00          	.byte	0x00
 8009672:	4b19      	ldr	r3, [pc, #100]	; (80096d8 <PDM_Filter_setConfig+0x1c4>)
 8009674:	64a3      	str	r3, [r4, #72]	; 0x48
 8009676:	e7d1      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009678:	4b18      	ldr	r3, [pc, #96]	; (80096dc <PDM_Filter_setConfig+0x1c8>)
 800967a:	64a3      	str	r3, [r4, #72]	; 0x48
 800967c:	e7ce      	b.n	800961c <PDM_Filter_setConfig+0x108>
 800967e:	4b18      	ldr	r3, [pc, #96]	; (80096e0 <PDM_Filter_setConfig+0x1cc>)
 8009680:	64a3      	str	r3, [r4, #72]	; 0x48
 8009682:	e7cb      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009684:	4b17      	ldr	r3, [pc, #92]	; (80096e4 <PDM_Filter_setConfig+0x1d0>)
 8009686:	64a3      	str	r3, [r4, #72]	; 0x48
 8009688:	e7c8      	b.n	800961c <PDM_Filter_setConfig+0x108>
 800968a:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <PDM_Filter_setConfig+0x1d4>)
 800968c:	64a3      	str	r3, [r4, #72]	; 0x48
 800968e:	e7c5      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009690:	4b16      	ldr	r3, [pc, #88]	; (80096ec <PDM_Filter_setConfig+0x1d8>)
 8009692:	64a3      	str	r3, [r4, #72]	; 0x48
 8009694:	e7c2      	b.n	800961c <PDM_Filter_setConfig+0x108>
 8009696:	4b16      	ldr	r3, [pc, #88]	; (80096f0 <PDM_Filter_setConfig+0x1dc>)
 8009698:	64a3      	str	r3, [r4, #72]	; 0x48
 800969a:	e7bf      	b.n	800961c <PDM_Filter_setConfig+0x108>
 800969c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80096f4 <PDM_Filter_setConfig+0x1e0>
 80096a0:	eeb0 9a48 	vmov.f32	s18, s16
 80096a4:	e78e      	b.n	80095c4 <PDM_Filter_setConfig+0xb0>
 80096a6:	886b      	ldrh	r3, [r5, #2]
 80096a8:	8663      	strh	r3, [r4, #50]	; 0x32
 80096aa:	e759      	b.n	8009560 <PDM_Filter_setConfig+0x4c>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e746      	b.n	800953e <PDM_Filter_setConfig+0x2a>
 80096b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80096b4:	0800b540 	.word	0x0800b540
 80096b8:	42000000 	.word	0x42000000
 80096bc:	08007a81 	.word	0x08007a81
 80096c0:	08007961 	.word	0x08007961
 80096c4:	08007c11 	.word	0x08007c11
 80096c8:	08008455 	.word	0x08008455
 80096cc:	080081b5 	.word	0x080081b5
 80096d0:	08007f95 	.word	0x08007f95
 80096d4:	08007da9 	.word	0x08007da9
 80096d8:	08008a61 	.word	0x08008a61
 80096dc:	08008929 	.word	0x08008929
 80096e0:	08008845 	.word	0x08008845
 80096e4:	080090dd 	.word	0x080090dd
 80096e8:	08008ec9 	.word	0x08008ec9
 80096ec:	08008d11 	.word	0x08008d11
 80096f0:	08008ba5 	.word	0x08008ba5
 80096f4:	00000000 	.word	0x00000000

080096f8 <PDM_Filter>:
 80096f8:	b410      	push	{r4}
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <PDM_Filter+0x34>)
 80096fc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80096fe:	429c      	cmp	r4, r3
 8009700:	d003      	beq.n	800970a <PDM_Filter+0x12>
 8009702:	2004      	movs	r0, #4
 8009704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800970c:	05dc      	lsls	r4, r3, #23
 800970e:	d407      	bmi.n	8009720 <PDM_Filter+0x28>
 8009710:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009714:	bf14      	ite	ne
 8009716:	2020      	movne	r0, #32
 8009718:	2030      	moveq	r0, #48	; 0x30
 800971a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009726:	320c      	adds	r2, #12
 8009728:	4718      	bx	r3
 800972a:	bf00      	nop
 800972c:	b5e8b5cd 	.word	0xb5e8b5cd

08009730 <CRC_Lock>:
 8009730:	4a17      	ldr	r2, [pc, #92]	; (8009790 <CRC_Lock+0x60>)
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	b410      	push	{r4}
 8009736:	f023 0301 	bic.w	r3, r3, #1
 800973a:	4c16      	ldr	r4, [pc, #88]	; (8009794 <CRC_Lock+0x64>)
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	b933      	cbnz	r3, 8009750 <CRC_Lock+0x20>
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <CRC_Lock+0x68>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800974e:	d00f      	beq.n	8009770 <CRC_Lock+0x40>
 8009750:	4a12      	ldr	r2, [pc, #72]	; (800979c <CRC_Lock+0x6c>)
 8009752:	2301      	movs	r3, #1
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	6813      	ldr	r3, [r2, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1fc      	bne.n	8009756 <CRC_Lock+0x26>
 800975c:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <CRC_Lock+0x70>)
 800975e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009762:	6018      	str	r0, [r3, #0]
 8009764:	6818      	ldr	r0, [r3, #0]
 8009766:	1a08      	subs	r0, r1, r0
 8009768:	fab0 f080 	clz	r0, r0
 800976c:	0940      	lsrs	r0, r0, #5
 800976e:	4770      	bx	lr
 8009770:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <CRC_Lock+0x74>)
 8009772:	2301      	movs	r3, #1
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1fc      	bne.n	8009776 <CRC_Lock+0x46>
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <CRC_Lock+0x78>)
 800977e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009782:	6018      	str	r0, [r3, #0]
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	1a40      	subs	r0, r0, r1
 8009788:	fab0 f080 	clz	r0, r0
 800978c:	0940      	lsrs	r0, r0, #5
 800978e:	4770      	bx	lr
 8009790:	e0002000 	.word	0xe0002000
 8009794:	e0042000 	.word	0xe0042000
 8009798:	5c001000 	.word	0x5c001000
 800979c:	40023008 	.word	0x40023008
 80097a0:	40023000 	.word	0x40023000
 80097a4:	58024c08 	.word	0x58024c08
 80097a8:	58024c00 	.word	0x58024c00

080097ac <std>:
 80097ac:	2300      	movs	r3, #0
 80097ae:	b510      	push	{r4, lr}
 80097b0:	4604      	mov	r4, r0
 80097b2:	e9c0 3300 	strd	r3, r3, [r0]
 80097b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ba:	6083      	str	r3, [r0, #8]
 80097bc:	8181      	strh	r1, [r0, #12]
 80097be:	6643      	str	r3, [r0, #100]	; 0x64
 80097c0:	81c2      	strh	r2, [r0, #14]
 80097c2:	6183      	str	r3, [r0, #24]
 80097c4:	4619      	mov	r1, r3
 80097c6:	2208      	movs	r2, #8
 80097c8:	305c      	adds	r0, #92	; 0x5c
 80097ca:	f000 fa31 	bl	8009c30 <memset>
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <std+0x58>)
 80097d0:	6263      	str	r3, [r4, #36]	; 0x24
 80097d2:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <std+0x5c>)
 80097d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <std+0x60>)
 80097d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <std+0x64>)
 80097dc:	6323      	str	r3, [r4, #48]	; 0x30
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <std+0x68>)
 80097e0:	6224      	str	r4, [r4, #32]
 80097e2:	429c      	cmp	r4, r3
 80097e4:	d006      	beq.n	80097f4 <std+0x48>
 80097e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097ea:	4294      	cmp	r4, r2
 80097ec:	d002      	beq.n	80097f4 <std+0x48>
 80097ee:	33d0      	adds	r3, #208	; 0xd0
 80097f0:	429c      	cmp	r4, r3
 80097f2:	d105      	bne.n	8009800 <std+0x54>
 80097f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097fc:	f000 ba90 	b.w	8009d20 <__retarget_lock_init_recursive>
 8009800:	bd10      	pop	{r4, pc}
 8009802:	bf00      	nop
 8009804:	08009a0d 	.word	0x08009a0d
 8009808:	08009a2f 	.word	0x08009a2f
 800980c:	08009a67 	.word	0x08009a67
 8009810:	08009a8b 	.word	0x08009a8b
 8009814:	20002bf8 	.word	0x20002bf8

08009818 <stdio_exit_handler>:
 8009818:	4a02      	ldr	r2, [pc, #8]	; (8009824 <stdio_exit_handler+0xc>)
 800981a:	4903      	ldr	r1, [pc, #12]	; (8009828 <stdio_exit_handler+0x10>)
 800981c:	4803      	ldr	r0, [pc, #12]	; (800982c <stdio_exit_handler+0x14>)
 800981e:	f000 b869 	b.w	80098f4 <_fwalk_sglue>
 8009822:	bf00      	nop
 8009824:	20000424 	.word	0x20000424
 8009828:	0800a87d 	.word	0x0800a87d
 800982c:	20000430 	.word	0x20000430

08009830 <cleanup_stdio>:
 8009830:	6841      	ldr	r1, [r0, #4]
 8009832:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <cleanup_stdio+0x34>)
 8009834:	4299      	cmp	r1, r3
 8009836:	b510      	push	{r4, lr}
 8009838:	4604      	mov	r4, r0
 800983a:	d001      	beq.n	8009840 <cleanup_stdio+0x10>
 800983c:	f001 f81e 	bl	800a87c <_fflush_r>
 8009840:	68a1      	ldr	r1, [r4, #8]
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <cleanup_stdio+0x38>)
 8009844:	4299      	cmp	r1, r3
 8009846:	d002      	beq.n	800984e <cleanup_stdio+0x1e>
 8009848:	4620      	mov	r0, r4
 800984a:	f001 f817 	bl	800a87c <_fflush_r>
 800984e:	68e1      	ldr	r1, [r4, #12]
 8009850:	4b06      	ldr	r3, [pc, #24]	; (800986c <cleanup_stdio+0x3c>)
 8009852:	4299      	cmp	r1, r3
 8009854:	d004      	beq.n	8009860 <cleanup_stdio+0x30>
 8009856:	4620      	mov	r0, r4
 8009858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985c:	f001 b80e 	b.w	800a87c <_fflush_r>
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	20002bf8 	.word	0x20002bf8
 8009868:	20002c60 	.word	0x20002c60
 800986c:	20002cc8 	.word	0x20002cc8

08009870 <global_stdio_init.part.0>:
 8009870:	b510      	push	{r4, lr}
 8009872:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <global_stdio_init.part.0+0x30>)
 8009874:	4c0b      	ldr	r4, [pc, #44]	; (80098a4 <global_stdio_init.part.0+0x34>)
 8009876:	4a0c      	ldr	r2, [pc, #48]	; (80098a8 <global_stdio_init.part.0+0x38>)
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	4620      	mov	r0, r4
 800987c:	2200      	movs	r2, #0
 800987e:	2104      	movs	r1, #4
 8009880:	f7ff ff94 	bl	80097ac <std>
 8009884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009888:	2201      	movs	r2, #1
 800988a:	2109      	movs	r1, #9
 800988c:	f7ff ff8e 	bl	80097ac <std>
 8009890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009894:	2202      	movs	r2, #2
 8009896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989a:	2112      	movs	r1, #18
 800989c:	f7ff bf86 	b.w	80097ac <std>
 80098a0:	20002d30 	.word	0x20002d30
 80098a4:	20002bf8 	.word	0x20002bf8
 80098a8:	08009819 	.word	0x08009819

080098ac <__sfp_lock_acquire>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__sfp_lock_acquire+0x8>)
 80098ae:	f000 ba38 	b.w	8009d22 <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	20002d39 	.word	0x20002d39

080098b8 <__sfp_lock_release>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sfp_lock_release+0x8>)
 80098ba:	f000 ba33 	b.w	8009d24 <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	20002d39 	.word	0x20002d39

080098c4 <__sinit>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	f7ff fff0 	bl	80098ac <__sfp_lock_acquire>
 80098cc:	6a23      	ldr	r3, [r4, #32]
 80098ce:	b11b      	cbz	r3, 80098d8 <__sinit+0x14>
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	f7ff bff0 	b.w	80098b8 <__sfp_lock_release>
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <__sinit+0x28>)
 80098da:	6223      	str	r3, [r4, #32]
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <__sinit+0x2c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1f5      	bne.n	80098d0 <__sinit+0xc>
 80098e4:	f7ff ffc4 	bl	8009870 <global_stdio_init.part.0>
 80098e8:	e7f2      	b.n	80098d0 <__sinit+0xc>
 80098ea:	bf00      	nop
 80098ec:	08009831 	.word	0x08009831
 80098f0:	20002d30 	.word	0x20002d30

080098f4 <_fwalk_sglue>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	4607      	mov	r7, r0
 80098fa:	4688      	mov	r8, r1
 80098fc:	4614      	mov	r4, r2
 80098fe:	2600      	movs	r6, #0
 8009900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009904:	f1b9 0901 	subs.w	r9, r9, #1
 8009908:	d505      	bpl.n	8009916 <_fwalk_sglue+0x22>
 800990a:	6824      	ldr	r4, [r4, #0]
 800990c:	2c00      	cmp	r4, #0
 800990e:	d1f7      	bne.n	8009900 <_fwalk_sglue+0xc>
 8009910:	4630      	mov	r0, r6
 8009912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d907      	bls.n	800992c <_fwalk_sglue+0x38>
 800991c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009920:	3301      	adds	r3, #1
 8009922:	d003      	beq.n	800992c <_fwalk_sglue+0x38>
 8009924:	4629      	mov	r1, r5
 8009926:	4638      	mov	r0, r7
 8009928:	47c0      	blx	r8
 800992a:	4306      	orrs	r6, r0
 800992c:	3568      	adds	r5, #104	; 0x68
 800992e:	e7e9      	b.n	8009904 <_fwalk_sglue+0x10>

08009930 <iprintf>:
 8009930:	b40f      	push	{r0, r1, r2, r3}
 8009932:	b507      	push	{r0, r1, r2, lr}
 8009934:	4906      	ldr	r1, [pc, #24]	; (8009950 <iprintf+0x20>)
 8009936:	ab04      	add	r3, sp, #16
 8009938:	6808      	ldr	r0, [r1, #0]
 800993a:	f853 2b04 	ldr.w	r2, [r3], #4
 800993e:	6881      	ldr	r1, [r0, #8]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	f000 fc6b 	bl	800a21c <_vfiprintf_r>
 8009946:	b003      	add	sp, #12
 8009948:	f85d eb04 	ldr.w	lr, [sp], #4
 800994c:	b004      	add	sp, #16
 800994e:	4770      	bx	lr
 8009950:	2000047c 	.word	0x2000047c

08009954 <_puts_r>:
 8009954:	6a03      	ldr	r3, [r0, #32]
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	6884      	ldr	r4, [r0, #8]
 800995a:	4605      	mov	r5, r0
 800995c:	460e      	mov	r6, r1
 800995e:	b90b      	cbnz	r3, 8009964 <_puts_r+0x10>
 8009960:	f7ff ffb0 	bl	80098c4 <__sinit>
 8009964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009966:	07db      	lsls	r3, r3, #31
 8009968:	d405      	bmi.n	8009976 <_puts_r+0x22>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	0598      	lsls	r0, r3, #22
 800996e:	d402      	bmi.n	8009976 <_puts_r+0x22>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f9d6 	bl	8009d22 <__retarget_lock_acquire_recursive>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	0719      	lsls	r1, r3, #28
 800997a:	d513      	bpl.n	80099a4 <_puts_r+0x50>
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	b18b      	cbz	r3, 80099a4 <_puts_r+0x50>
 8009980:	3e01      	subs	r6, #1
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009988:	3b01      	subs	r3, #1
 800998a:	60a3      	str	r3, [r4, #8]
 800998c:	b9e9      	cbnz	r1, 80099ca <_puts_r+0x76>
 800998e:	2b00      	cmp	r3, #0
 8009990:	da2e      	bge.n	80099f0 <_puts_r+0x9c>
 8009992:	4622      	mov	r2, r4
 8009994:	210a      	movs	r1, #10
 8009996:	4628      	mov	r0, r5
 8009998:	f000 f8b4 	bl	8009b04 <__swbuf_r>
 800999c:	3001      	adds	r0, #1
 800999e:	d007      	beq.n	80099b0 <_puts_r+0x5c>
 80099a0:	250a      	movs	r5, #10
 80099a2:	e007      	b.n	80099b4 <_puts_r+0x60>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f8ea 	bl	8009b80 <__swsetup_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0e7      	beq.n	8009980 <_puts_r+0x2c>
 80099b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80099b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b6:	07da      	lsls	r2, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_puts_r+0x72>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	059b      	lsls	r3, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_puts_r+0x72>
 80099c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c2:	f000 f9af 	bl	8009d24 <__retarget_lock_release_recursive>
 80099c6:	4628      	mov	r0, r5
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da04      	bge.n	80099d8 <_puts_r+0x84>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	dc06      	bgt.n	80099e2 <_puts_r+0x8e>
 80099d4:	290a      	cmp	r1, #10
 80099d6:	d004      	beq.n	80099e2 <_puts_r+0x8e>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	7019      	strb	r1, [r3, #0]
 80099e0:	e7cf      	b.n	8009982 <_puts_r+0x2e>
 80099e2:	4622      	mov	r2, r4
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 f88d 	bl	8009b04 <__swbuf_r>
 80099ea:	3001      	adds	r0, #1
 80099ec:	d1c9      	bne.n	8009982 <_puts_r+0x2e>
 80099ee:	e7df      	b.n	80099b0 <_puts_r+0x5c>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	250a      	movs	r5, #10
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	701d      	strb	r5, [r3, #0]
 80099fa:	e7db      	b.n	80099b4 <_puts_r+0x60>

080099fc <puts>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <puts+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f7ff bfa7 	b.w	8009954 <_puts_r>
 8009a06:	bf00      	nop
 8009a08:	2000047c 	.word	0x2000047c

08009a0c <__sread>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	460c      	mov	r4, r1
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	f000 f936 	bl	8009c84 <_read_r>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	bfab      	itete	ge
 8009a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a20:	181b      	addge	r3, r3, r0
 8009a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a26:	bfac      	ite	ge
 8009a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a2a:	81a3      	strhlt	r3, [r4, #12]
 8009a2c:	bd10      	pop	{r4, pc}

08009a2e <__swrite>:
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	461f      	mov	r7, r3
 8009a34:	898b      	ldrh	r3, [r1, #12]
 8009a36:	05db      	lsls	r3, r3, #23
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	d505      	bpl.n	8009a4c <__swrite+0x1e>
 8009a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a44:	2302      	movs	r3, #2
 8009a46:	2200      	movs	r2, #0
 8009a48:	f000 f90a 	bl	8009c60 <_lseek_r>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	4632      	mov	r2, r6
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	f000 b921 	b.w	8009ca8 <_write_r>

08009a66 <__sseek>:
 8009a66:	b510      	push	{r4, lr}
 8009a68:	460c      	mov	r4, r1
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	f000 f8f7 	bl	8009c60 <_lseek_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	bf15      	itete	ne
 8009a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a82:	81a3      	strheq	r3, [r4, #12]
 8009a84:	bf18      	it	ne
 8009a86:	81a3      	strhne	r3, [r4, #12]
 8009a88:	bd10      	pop	{r4, pc}

08009a8a <__sclose>:
 8009a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8e:	f000 b8d7 	b.w	8009c40 <_close_r>

08009a92 <_vsniprintf_r>:
 8009a92:	b530      	push	{r4, r5, lr}
 8009a94:	4614      	mov	r4, r2
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	b09b      	sub	sp, #108	; 0x6c
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	da05      	bge.n	8009aac <_vsniprintf_r+0x1a>
 8009aa0:	238b      	movs	r3, #139	; 0x8b
 8009aa2:	6003      	str	r3, [r0, #0]
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aa8:	b01b      	add	sp, #108	; 0x6c
 8009aaa:	bd30      	pop	{r4, r5, pc}
 8009aac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009ab0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ab4:	bf14      	ite	ne
 8009ab6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009aba:	4623      	moveq	r3, r4
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ac4:	9100      	str	r1, [sp, #0]
 8009ac6:	9104      	str	r1, [sp, #16]
 8009ac8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009acc:	4669      	mov	r1, sp
 8009ace:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ad0:	f000 fa7c 	bl	8009fcc <_svfiprintf_r>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	bfbc      	itt	lt
 8009ad8:	238b      	movlt	r3, #139	; 0x8b
 8009ada:	602b      	strlt	r3, [r5, #0]
 8009adc:	2c00      	cmp	r4, #0
 8009ade:	d0e3      	beq.n	8009aa8 <_vsniprintf_r+0x16>
 8009ae0:	9b00      	ldr	r3, [sp, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	e7df      	b.n	8009aa8 <_vsniprintf_r+0x16>

08009ae8 <vsniprintf>:
 8009ae8:	b507      	push	{r0, r1, r2, lr}
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	4613      	mov	r3, r2
 8009aee:	460a      	mov	r2, r1
 8009af0:	4601      	mov	r1, r0
 8009af2:	4803      	ldr	r0, [pc, #12]	; (8009b00 <vsniprintf+0x18>)
 8009af4:	6800      	ldr	r0, [r0, #0]
 8009af6:	f7ff ffcc 	bl	8009a92 <_vsniprintf_r>
 8009afa:	b003      	add	sp, #12
 8009afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b00:	2000047c 	.word	0x2000047c

08009b04 <__swbuf_r>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	460e      	mov	r6, r1
 8009b08:	4614      	mov	r4, r2
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	b118      	cbz	r0, 8009b16 <__swbuf_r+0x12>
 8009b0e:	6a03      	ldr	r3, [r0, #32]
 8009b10:	b90b      	cbnz	r3, 8009b16 <__swbuf_r+0x12>
 8009b12:	f7ff fed7 	bl	80098c4 <__sinit>
 8009b16:	69a3      	ldr	r3, [r4, #24]
 8009b18:	60a3      	str	r3, [r4, #8]
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	071a      	lsls	r2, r3, #28
 8009b1e:	d525      	bpl.n	8009b6c <__swbuf_r+0x68>
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	b31b      	cbz	r3, 8009b6c <__swbuf_r+0x68>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	6922      	ldr	r2, [r4, #16]
 8009b28:	1a98      	subs	r0, r3, r2
 8009b2a:	6963      	ldr	r3, [r4, #20]
 8009b2c:	b2f6      	uxtb	r6, r6
 8009b2e:	4283      	cmp	r3, r0
 8009b30:	4637      	mov	r7, r6
 8009b32:	dc04      	bgt.n	8009b3e <__swbuf_r+0x3a>
 8009b34:	4621      	mov	r1, r4
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fea0 	bl	800a87c <_fflush_r>
 8009b3c:	b9e0      	cbnz	r0, 8009b78 <__swbuf_r+0x74>
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	60a3      	str	r3, [r4, #8]
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	701e      	strb	r6, [r3, #0]
 8009b4c:	6962      	ldr	r2, [r4, #20]
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d004      	beq.n	8009b5e <__swbuf_r+0x5a>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	07db      	lsls	r3, r3, #31
 8009b58:	d506      	bpl.n	8009b68 <__swbuf_r+0x64>
 8009b5a:	2e0a      	cmp	r6, #10
 8009b5c:	d104      	bne.n	8009b68 <__swbuf_r+0x64>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4628      	mov	r0, r5
 8009b62:	f000 fe8b 	bl	800a87c <_fflush_r>
 8009b66:	b938      	cbnz	r0, 8009b78 <__swbuf_r+0x74>
 8009b68:	4638      	mov	r0, r7
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f806 	bl	8009b80 <__swsetup_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0d5      	beq.n	8009b24 <__swbuf_r+0x20>
 8009b78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b7c:	e7f4      	b.n	8009b68 <__swbuf_r+0x64>
	...

08009b80 <__swsetup_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <__swsetup_r+0xac>)
 8009b84:	4605      	mov	r5, r0
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	460c      	mov	r4, r1
 8009b8a:	b118      	cbz	r0, 8009b94 <__swsetup_r+0x14>
 8009b8c:	6a03      	ldr	r3, [r0, #32]
 8009b8e:	b90b      	cbnz	r3, 8009b94 <__swsetup_r+0x14>
 8009b90:	f7ff fe98 	bl	80098c4 <__sinit>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b9a:	0718      	lsls	r0, r3, #28
 8009b9c:	d422      	bmi.n	8009be4 <__swsetup_r+0x64>
 8009b9e:	06d9      	lsls	r1, r3, #27
 8009ba0:	d407      	bmi.n	8009bb2 <__swsetup_r+0x32>
 8009ba2:	2309      	movs	r3, #9
 8009ba4:	602b      	str	r3, [r5, #0]
 8009ba6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb0:	e034      	b.n	8009c1c <__swsetup_r+0x9c>
 8009bb2:	0758      	lsls	r0, r3, #29
 8009bb4:	d512      	bpl.n	8009bdc <__swsetup_r+0x5c>
 8009bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bb8:	b141      	cbz	r1, 8009bcc <__swsetup_r+0x4c>
 8009bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	d002      	beq.n	8009bc8 <__swsetup_r+0x48>
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 f8b0 	bl	8009d28 <_free_r>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	6363      	str	r3, [r4, #52]	; 0x34
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	6063      	str	r3, [r4, #4]
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	6023      	str	r3, [r4, #0]
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f043 0308 	orr.w	r3, r3, #8
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	b94b      	cbnz	r3, 8009bfc <__swsetup_r+0x7c>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf2:	d003      	beq.n	8009bfc <__swsetup_r+0x7c>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f000 fe8e 	bl	800a918 <__smakebuf_r>
 8009bfc:	89a0      	ldrh	r0, [r4, #12]
 8009bfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c02:	f010 0301 	ands.w	r3, r0, #1
 8009c06:	d00a      	beq.n	8009c1e <__swsetup_r+0x9e>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60a3      	str	r3, [r4, #8]
 8009c0c:	6963      	ldr	r3, [r4, #20]
 8009c0e:	425b      	negs	r3, r3
 8009c10:	61a3      	str	r3, [r4, #24]
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	b943      	cbnz	r3, 8009c28 <__swsetup_r+0xa8>
 8009c16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c1a:	d1c4      	bne.n	8009ba6 <__swsetup_r+0x26>
 8009c1c:	bd38      	pop	{r3, r4, r5, pc}
 8009c1e:	0781      	lsls	r1, r0, #30
 8009c20:	bf58      	it	pl
 8009c22:	6963      	ldrpl	r3, [r4, #20]
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	e7f4      	b.n	8009c12 <__swsetup_r+0x92>
 8009c28:	2000      	movs	r0, #0
 8009c2a:	e7f7      	b.n	8009c1c <__swsetup_r+0x9c>
 8009c2c:	2000047c 	.word	0x2000047c

08009c30 <memset>:
 8009c30:	4402      	add	r2, r0
 8009c32:	4603      	mov	r3, r0
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d100      	bne.n	8009c3a <memset+0xa>
 8009c38:	4770      	bx	lr
 8009c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3e:	e7f9      	b.n	8009c34 <memset+0x4>

08009c40 <_close_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	4d06      	ldr	r5, [pc, #24]	; (8009c5c <_close_r+0x1c>)
 8009c44:	2300      	movs	r3, #0
 8009c46:	4604      	mov	r4, r0
 8009c48:	4608      	mov	r0, r1
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	f7f7 fa0b 	bl	8001066 <_close>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_close_r+0x1a>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_close_r+0x1a>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20002d34 	.word	0x20002d34

08009c60 <_lseek_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	; (8009c80 <_lseek_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7f7 fa20 	bl	80010b4 <_lseek>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_lseek_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_lseek_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20002d34 	.word	0x20002d34

08009c84 <_read_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d07      	ldr	r5, [pc, #28]	; (8009ca4 <_read_r+0x20>)
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4608      	mov	r0, r1
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	602a      	str	r2, [r5, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	f7f7 f9ca 	bl	800102c <_read>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_read_r+0x1e>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_read_r+0x1e>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20002d34 	.word	0x20002d34

08009ca8 <_write_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d07      	ldr	r5, [pc, #28]	; (8009cc8 <_write_r+0x20>)
 8009cac:	4604      	mov	r4, r0
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f6 ff90 	bl	8000bdc <_write>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_write_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_write_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20002d34 	.word	0x20002d34

08009ccc <__errno>:
 8009ccc:	4b01      	ldr	r3, [pc, #4]	; (8009cd4 <__errno+0x8>)
 8009cce:	6818      	ldr	r0, [r3, #0]
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	2000047c 	.word	0x2000047c

08009cd8 <__libc_init_array>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	4d0d      	ldr	r5, [pc, #52]	; (8009d10 <__libc_init_array+0x38>)
 8009cdc:	4c0d      	ldr	r4, [pc, #52]	; (8009d14 <__libc_init_array+0x3c>)
 8009cde:	1b64      	subs	r4, r4, r5
 8009ce0:	10a4      	asrs	r4, r4, #2
 8009ce2:	2600      	movs	r6, #0
 8009ce4:	42a6      	cmp	r6, r4
 8009ce6:	d109      	bne.n	8009cfc <__libc_init_array+0x24>
 8009ce8:	4d0b      	ldr	r5, [pc, #44]	; (8009d18 <__libc_init_array+0x40>)
 8009cea:	4c0c      	ldr	r4, [pc, #48]	; (8009d1c <__libc_init_array+0x44>)
 8009cec:	f001 fac8 	bl	800b280 <_init>
 8009cf0:	1b64      	subs	r4, r4, r5
 8009cf2:	10a4      	asrs	r4, r4, #2
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	42a6      	cmp	r6, r4
 8009cf8:	d105      	bne.n	8009d06 <__libc_init_array+0x2e>
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d00:	4798      	blx	r3
 8009d02:	3601      	adds	r6, #1
 8009d04:	e7ee      	b.n	8009ce4 <__libc_init_array+0xc>
 8009d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d0a:	4798      	blx	r3
 8009d0c:	3601      	adds	r6, #1
 8009d0e:	e7f2      	b.n	8009cf6 <__libc_init_array+0x1e>
 8009d10:	0800b66c 	.word	0x0800b66c
 8009d14:	0800b66c 	.word	0x0800b66c
 8009d18:	0800b66c 	.word	0x0800b66c
 8009d1c:	0800b670 	.word	0x0800b670

08009d20 <__retarget_lock_init_recursive>:
 8009d20:	4770      	bx	lr

08009d22 <__retarget_lock_acquire_recursive>:
 8009d22:	4770      	bx	lr

08009d24 <__retarget_lock_release_recursive>:
 8009d24:	4770      	bx	lr
	...

08009d28 <_free_r>:
 8009d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	d044      	beq.n	8009db8 <_free_r+0x90>
 8009d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d32:	9001      	str	r0, [sp, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f1a1 0404 	sub.w	r4, r1, #4
 8009d3a:	bfb8      	it	lt
 8009d3c:	18e4      	addlt	r4, r4, r3
 8009d3e:	f000 f8df 	bl	8009f00 <__malloc_lock>
 8009d42:	4a1e      	ldr	r2, [pc, #120]	; (8009dbc <_free_r+0x94>)
 8009d44:	9801      	ldr	r0, [sp, #4]
 8009d46:	6813      	ldr	r3, [r2, #0]
 8009d48:	b933      	cbnz	r3, 8009d58 <_free_r+0x30>
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	6014      	str	r4, [r2, #0]
 8009d4e:	b003      	add	sp, #12
 8009d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d54:	f000 b8da 	b.w	8009f0c <__malloc_unlock>
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d908      	bls.n	8009d6e <_free_r+0x46>
 8009d5c:	6825      	ldr	r5, [r4, #0]
 8009d5e:	1961      	adds	r1, r4, r5
 8009d60:	428b      	cmp	r3, r1
 8009d62:	bf01      	itttt	eq
 8009d64:	6819      	ldreq	r1, [r3, #0]
 8009d66:	685b      	ldreq	r3, [r3, #4]
 8009d68:	1949      	addeq	r1, r1, r5
 8009d6a:	6021      	streq	r1, [r4, #0]
 8009d6c:	e7ed      	b.n	8009d4a <_free_r+0x22>
 8009d6e:	461a      	mov	r2, r3
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	b10b      	cbz	r3, 8009d78 <_free_r+0x50>
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	d9fa      	bls.n	8009d6e <_free_r+0x46>
 8009d78:	6811      	ldr	r1, [r2, #0]
 8009d7a:	1855      	adds	r5, r2, r1
 8009d7c:	42a5      	cmp	r5, r4
 8009d7e:	d10b      	bne.n	8009d98 <_free_r+0x70>
 8009d80:	6824      	ldr	r4, [r4, #0]
 8009d82:	4421      	add	r1, r4
 8009d84:	1854      	adds	r4, r2, r1
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	6011      	str	r1, [r2, #0]
 8009d8a:	d1e0      	bne.n	8009d4e <_free_r+0x26>
 8009d8c:	681c      	ldr	r4, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	6053      	str	r3, [r2, #4]
 8009d92:	440c      	add	r4, r1
 8009d94:	6014      	str	r4, [r2, #0]
 8009d96:	e7da      	b.n	8009d4e <_free_r+0x26>
 8009d98:	d902      	bls.n	8009da0 <_free_r+0x78>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	e7d6      	b.n	8009d4e <_free_r+0x26>
 8009da0:	6825      	ldr	r5, [r4, #0]
 8009da2:	1961      	adds	r1, r4, r5
 8009da4:	428b      	cmp	r3, r1
 8009da6:	bf04      	itt	eq
 8009da8:	6819      	ldreq	r1, [r3, #0]
 8009daa:	685b      	ldreq	r3, [r3, #4]
 8009dac:	6063      	str	r3, [r4, #4]
 8009dae:	bf04      	itt	eq
 8009db0:	1949      	addeq	r1, r1, r5
 8009db2:	6021      	streq	r1, [r4, #0]
 8009db4:	6054      	str	r4, [r2, #4]
 8009db6:	e7ca      	b.n	8009d4e <_free_r+0x26>
 8009db8:	b003      	add	sp, #12
 8009dba:	bd30      	pop	{r4, r5, pc}
 8009dbc:	20002d3c 	.word	0x20002d3c

08009dc0 <sbrk_aligned>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4e0e      	ldr	r6, [pc, #56]	; (8009dfc <sbrk_aligned+0x3c>)
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	6831      	ldr	r1, [r6, #0]
 8009dc8:	4605      	mov	r5, r0
 8009dca:	b911      	cbnz	r1, 8009dd2 <sbrk_aligned+0x12>
 8009dcc:	f000 fe1c 	bl	800aa08 <_sbrk_r>
 8009dd0:	6030      	str	r0, [r6, #0]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 fe17 	bl	800aa08 <_sbrk_r>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d00a      	beq.n	8009df4 <sbrk_aligned+0x34>
 8009dde:	1cc4      	adds	r4, r0, #3
 8009de0:	f024 0403 	bic.w	r4, r4, #3
 8009de4:	42a0      	cmp	r0, r4
 8009de6:	d007      	beq.n	8009df8 <sbrk_aligned+0x38>
 8009de8:	1a21      	subs	r1, r4, r0
 8009dea:	4628      	mov	r0, r5
 8009dec:	f000 fe0c 	bl	800aa08 <_sbrk_r>
 8009df0:	3001      	adds	r0, #1
 8009df2:	d101      	bne.n	8009df8 <sbrk_aligned+0x38>
 8009df4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009df8:	4620      	mov	r0, r4
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	20002d40 	.word	0x20002d40

08009e00 <_malloc_r>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	1ccd      	adds	r5, r1, #3
 8009e06:	f025 0503 	bic.w	r5, r5, #3
 8009e0a:	3508      	adds	r5, #8
 8009e0c:	2d0c      	cmp	r5, #12
 8009e0e:	bf38      	it	cc
 8009e10:	250c      	movcc	r5, #12
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	4607      	mov	r7, r0
 8009e16:	db01      	blt.n	8009e1c <_malloc_r+0x1c>
 8009e18:	42a9      	cmp	r1, r5
 8009e1a:	d905      	bls.n	8009e28 <_malloc_r+0x28>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	2600      	movs	r6, #0
 8009e22:	4630      	mov	r0, r6
 8009e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009efc <_malloc_r+0xfc>
 8009e2c:	f000 f868 	bl	8009f00 <__malloc_lock>
 8009e30:	f8d8 3000 	ldr.w	r3, [r8]
 8009e34:	461c      	mov	r4, r3
 8009e36:	bb5c      	cbnz	r4, 8009e90 <_malloc_r+0x90>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	f7ff ffc0 	bl	8009dc0 <sbrk_aligned>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	4604      	mov	r4, r0
 8009e44:	d155      	bne.n	8009ef2 <_malloc_r+0xf2>
 8009e46:	f8d8 4000 	ldr.w	r4, [r8]
 8009e4a:	4626      	mov	r6, r4
 8009e4c:	2e00      	cmp	r6, #0
 8009e4e:	d145      	bne.n	8009edc <_malloc_r+0xdc>
 8009e50:	2c00      	cmp	r4, #0
 8009e52:	d048      	beq.n	8009ee6 <_malloc_r+0xe6>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	4631      	mov	r1, r6
 8009e58:	4638      	mov	r0, r7
 8009e5a:	eb04 0903 	add.w	r9, r4, r3
 8009e5e:	f000 fdd3 	bl	800aa08 <_sbrk_r>
 8009e62:	4581      	cmp	r9, r0
 8009e64:	d13f      	bne.n	8009ee6 <_malloc_r+0xe6>
 8009e66:	6821      	ldr	r1, [r4, #0]
 8009e68:	1a6d      	subs	r5, r5, r1
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff ffa7 	bl	8009dc0 <sbrk_aligned>
 8009e72:	3001      	adds	r0, #1
 8009e74:	d037      	beq.n	8009ee6 <_malloc_r+0xe6>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	442b      	add	r3, r5
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d038      	beq.n	8009ef6 <_malloc_r+0xf6>
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	42a2      	cmp	r2, r4
 8009e88:	d12b      	bne.n	8009ee2 <_malloc_r+0xe2>
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	e00f      	b.n	8009eb0 <_malloc_r+0xb0>
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	1b52      	subs	r2, r2, r5
 8009e94:	d41f      	bmi.n	8009ed6 <_malloc_r+0xd6>
 8009e96:	2a0b      	cmp	r2, #11
 8009e98:	d917      	bls.n	8009eca <_malloc_r+0xca>
 8009e9a:	1961      	adds	r1, r4, r5
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	6025      	str	r5, [r4, #0]
 8009ea0:	bf18      	it	ne
 8009ea2:	6059      	strne	r1, [r3, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	bf08      	it	eq
 8009ea8:	f8c8 1000 	streq.w	r1, [r8]
 8009eac:	5162      	str	r2, [r4, r5]
 8009eae:	604b      	str	r3, [r1, #4]
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f104 060b 	add.w	r6, r4, #11
 8009eb6:	f000 f829 	bl	8009f0c <__malloc_unlock>
 8009eba:	f026 0607 	bic.w	r6, r6, #7
 8009ebe:	1d23      	adds	r3, r4, #4
 8009ec0:	1af2      	subs	r2, r6, r3
 8009ec2:	d0ae      	beq.n	8009e22 <_malloc_r+0x22>
 8009ec4:	1b9b      	subs	r3, r3, r6
 8009ec6:	50a3      	str	r3, [r4, r2]
 8009ec8:	e7ab      	b.n	8009e22 <_malloc_r+0x22>
 8009eca:	42a3      	cmp	r3, r4
 8009ecc:	6862      	ldr	r2, [r4, #4]
 8009ece:	d1dd      	bne.n	8009e8c <_malloc_r+0x8c>
 8009ed0:	f8c8 2000 	str.w	r2, [r8]
 8009ed4:	e7ec      	b.n	8009eb0 <_malloc_r+0xb0>
 8009ed6:	4623      	mov	r3, r4
 8009ed8:	6864      	ldr	r4, [r4, #4]
 8009eda:	e7ac      	b.n	8009e36 <_malloc_r+0x36>
 8009edc:	4634      	mov	r4, r6
 8009ede:	6876      	ldr	r6, [r6, #4]
 8009ee0:	e7b4      	b.n	8009e4c <_malloc_r+0x4c>
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	e7cc      	b.n	8009e80 <_malloc_r+0x80>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	603b      	str	r3, [r7, #0]
 8009eea:	4638      	mov	r0, r7
 8009eec:	f000 f80e 	bl	8009f0c <__malloc_unlock>
 8009ef0:	e797      	b.n	8009e22 <_malloc_r+0x22>
 8009ef2:	6025      	str	r5, [r4, #0]
 8009ef4:	e7dc      	b.n	8009eb0 <_malloc_r+0xb0>
 8009ef6:	605b      	str	r3, [r3, #4]
 8009ef8:	deff      	udf	#255	; 0xff
 8009efa:	bf00      	nop
 8009efc:	20002d3c 	.word	0x20002d3c

08009f00 <__malloc_lock>:
 8009f00:	4801      	ldr	r0, [pc, #4]	; (8009f08 <__malloc_lock+0x8>)
 8009f02:	f7ff bf0e 	b.w	8009d22 <__retarget_lock_acquire_recursive>
 8009f06:	bf00      	nop
 8009f08:	20002d38 	.word	0x20002d38

08009f0c <__malloc_unlock>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	; (8009f14 <__malloc_unlock+0x8>)
 8009f0e:	f7ff bf09 	b.w	8009d24 <__retarget_lock_release_recursive>
 8009f12:	bf00      	nop
 8009f14:	20002d38 	.word	0x20002d38

08009f18 <__ssputs_r>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	688e      	ldr	r6, [r1, #8]
 8009f1e:	461f      	mov	r7, r3
 8009f20:	42be      	cmp	r6, r7
 8009f22:	680b      	ldr	r3, [r1, #0]
 8009f24:	4682      	mov	sl, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4690      	mov	r8, r2
 8009f2a:	d82c      	bhi.n	8009f86 <__ssputs_r+0x6e>
 8009f2c:	898a      	ldrh	r2, [r1, #12]
 8009f2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f32:	d026      	beq.n	8009f82 <__ssputs_r+0x6a>
 8009f34:	6965      	ldr	r5, [r4, #20]
 8009f36:	6909      	ldr	r1, [r1, #16]
 8009f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f3c:	eba3 0901 	sub.w	r9, r3, r1
 8009f40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f44:	1c7b      	adds	r3, r7, #1
 8009f46:	444b      	add	r3, r9
 8009f48:	106d      	asrs	r5, r5, #1
 8009f4a:	429d      	cmp	r5, r3
 8009f4c:	bf38      	it	cc
 8009f4e:	461d      	movcc	r5, r3
 8009f50:	0553      	lsls	r3, r2, #21
 8009f52:	d527      	bpl.n	8009fa4 <__ssputs_r+0x8c>
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7ff ff53 	bl	8009e00 <_malloc_r>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	b360      	cbz	r0, 8009fb8 <__ssputs_r+0xa0>
 8009f5e:	6921      	ldr	r1, [r4, #16]
 8009f60:	464a      	mov	r2, r9
 8009f62:	f000 fd61 	bl	800aa28 <memcpy>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6126      	str	r6, [r4, #16]
 8009f74:	6165      	str	r5, [r4, #20]
 8009f76:	444e      	add	r6, r9
 8009f78:	eba5 0509 	sub.w	r5, r5, r9
 8009f7c:	6026      	str	r6, [r4, #0]
 8009f7e:	60a5      	str	r5, [r4, #8]
 8009f80:	463e      	mov	r6, r7
 8009f82:	42be      	cmp	r6, r7
 8009f84:	d900      	bls.n	8009f88 <__ssputs_r+0x70>
 8009f86:	463e      	mov	r6, r7
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	f000 fcff 	bl	800a990 <memmove>
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	1b9b      	subs	r3, r3, r6
 8009f96:	60a3      	str	r3, [r4, #8]
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	4433      	add	r3, r6
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	462a      	mov	r2, r5
 8009fa6:	f000 fd4d 	bl	800aa44 <_realloc_r>
 8009faa:	4606      	mov	r6, r0
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d1e0      	bne.n	8009f72 <__ssputs_r+0x5a>
 8009fb0:	6921      	ldr	r1, [r4, #16]
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	f7ff feb8 	bl	8009d28 <_free_r>
 8009fb8:	230c      	movs	r3, #12
 8009fba:	f8ca 3000 	str.w	r3, [sl]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fca:	e7e9      	b.n	8009fa0 <__ssputs_r+0x88>

08009fcc <_svfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	4698      	mov	r8, r3
 8009fd2:	898b      	ldrh	r3, [r1, #12]
 8009fd4:	061b      	lsls	r3, r3, #24
 8009fd6:	b09d      	sub	sp, #116	; 0x74
 8009fd8:	4607      	mov	r7, r0
 8009fda:	460d      	mov	r5, r1
 8009fdc:	4614      	mov	r4, r2
 8009fde:	d50e      	bpl.n	8009ffe <_svfiprintf_r+0x32>
 8009fe0:	690b      	ldr	r3, [r1, #16]
 8009fe2:	b963      	cbnz	r3, 8009ffe <_svfiprintf_r+0x32>
 8009fe4:	2140      	movs	r1, #64	; 0x40
 8009fe6:	f7ff ff0b 	bl	8009e00 <_malloc_r>
 8009fea:	6028      	str	r0, [r5, #0]
 8009fec:	6128      	str	r0, [r5, #16]
 8009fee:	b920      	cbnz	r0, 8009ffa <_svfiprintf_r+0x2e>
 8009ff0:	230c      	movs	r3, #12
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ff8:	e0d0      	b.n	800a19c <_svfiprintf_r+0x1d0>
 8009ffa:	2340      	movs	r3, #64	; 0x40
 8009ffc:	616b      	str	r3, [r5, #20]
 8009ffe:	2300      	movs	r3, #0
 800a000:	9309      	str	r3, [sp, #36]	; 0x24
 800a002:	2320      	movs	r3, #32
 800a004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a008:	f8cd 800c 	str.w	r8, [sp, #12]
 800a00c:	2330      	movs	r3, #48	; 0x30
 800a00e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1b4 <_svfiprintf_r+0x1e8>
 800a012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a016:	f04f 0901 	mov.w	r9, #1
 800a01a:	4623      	mov	r3, r4
 800a01c:	469a      	mov	sl, r3
 800a01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a022:	b10a      	cbz	r2, 800a028 <_svfiprintf_r+0x5c>
 800a024:	2a25      	cmp	r2, #37	; 0x25
 800a026:	d1f9      	bne.n	800a01c <_svfiprintf_r+0x50>
 800a028:	ebba 0b04 	subs.w	fp, sl, r4
 800a02c:	d00b      	beq.n	800a046 <_svfiprintf_r+0x7a>
 800a02e:	465b      	mov	r3, fp
 800a030:	4622      	mov	r2, r4
 800a032:	4629      	mov	r1, r5
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff ff6f 	bl	8009f18 <__ssputs_r>
 800a03a:	3001      	adds	r0, #1
 800a03c:	f000 80a9 	beq.w	800a192 <_svfiprintf_r+0x1c6>
 800a040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a042:	445a      	add	r2, fp
 800a044:	9209      	str	r2, [sp, #36]	; 0x24
 800a046:	f89a 3000 	ldrb.w	r3, [sl]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 80a1 	beq.w	800a192 <_svfiprintf_r+0x1c6>
 800a050:	2300      	movs	r3, #0
 800a052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a05a:	f10a 0a01 	add.w	sl, sl, #1
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a066:	931a      	str	r3, [sp, #104]	; 0x68
 800a068:	4654      	mov	r4, sl
 800a06a:	2205      	movs	r2, #5
 800a06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a070:	4850      	ldr	r0, [pc, #320]	; (800a1b4 <_svfiprintf_r+0x1e8>)
 800a072:	f7f6 f8bd 	bl	80001f0 <memchr>
 800a076:	9a04      	ldr	r2, [sp, #16]
 800a078:	b9d8      	cbnz	r0, 800a0b2 <_svfiprintf_r+0xe6>
 800a07a:	06d0      	lsls	r0, r2, #27
 800a07c:	bf44      	itt	mi
 800a07e:	2320      	movmi	r3, #32
 800a080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a084:	0711      	lsls	r1, r2, #28
 800a086:	bf44      	itt	mi
 800a088:	232b      	movmi	r3, #43	; 0x2b
 800a08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a08e:	f89a 3000 	ldrb.w	r3, [sl]
 800a092:	2b2a      	cmp	r3, #42	; 0x2a
 800a094:	d015      	beq.n	800a0c2 <_svfiprintf_r+0xf6>
 800a096:	9a07      	ldr	r2, [sp, #28]
 800a098:	4654      	mov	r4, sl
 800a09a:	2000      	movs	r0, #0
 800a09c:	f04f 0c0a 	mov.w	ip, #10
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a6:	3b30      	subs	r3, #48	; 0x30
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d94d      	bls.n	800a148 <_svfiprintf_r+0x17c>
 800a0ac:	b1b0      	cbz	r0, 800a0dc <_svfiprintf_r+0x110>
 800a0ae:	9207      	str	r2, [sp, #28]
 800a0b0:	e014      	b.n	800a0dc <_svfiprintf_r+0x110>
 800a0b2:	eba0 0308 	sub.w	r3, r0, r8
 800a0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	46a2      	mov	sl, r4
 800a0c0:	e7d2      	b.n	800a068 <_svfiprintf_r+0x9c>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	1d19      	adds	r1, r3, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	9103      	str	r1, [sp, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bfbb      	ittet	lt
 800a0ce:	425b      	neglt	r3, r3
 800a0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0d4:	9307      	strge	r3, [sp, #28]
 800a0d6:	9307      	strlt	r3, [sp, #28]
 800a0d8:	bfb8      	it	lt
 800a0da:	9204      	strlt	r2, [sp, #16]
 800a0dc:	7823      	ldrb	r3, [r4, #0]
 800a0de:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e0:	d10c      	bne.n	800a0fc <_svfiprintf_r+0x130>
 800a0e2:	7863      	ldrb	r3, [r4, #1]
 800a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e6:	d134      	bne.n	800a152 <_svfiprintf_r+0x186>
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	9203      	str	r2, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfb8      	it	lt
 800a0f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0f8:	3402      	adds	r4, #2
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a1c4 <_svfiprintf_r+0x1f8>
 800a100:	7821      	ldrb	r1, [r4, #0]
 800a102:	2203      	movs	r2, #3
 800a104:	4650      	mov	r0, sl
 800a106:	f7f6 f873 	bl	80001f0 <memchr>
 800a10a:	b138      	cbz	r0, 800a11c <_svfiprintf_r+0x150>
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	eba0 000a 	sub.w	r0, r0, sl
 800a112:	2240      	movs	r2, #64	; 0x40
 800a114:	4082      	lsls	r2, r0
 800a116:	4313      	orrs	r3, r2
 800a118:	3401      	adds	r4, #1
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a120:	4825      	ldr	r0, [pc, #148]	; (800a1b8 <_svfiprintf_r+0x1ec>)
 800a122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a126:	2206      	movs	r2, #6
 800a128:	f7f6 f862 	bl	80001f0 <memchr>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d038      	beq.n	800a1a2 <_svfiprintf_r+0x1d6>
 800a130:	4b22      	ldr	r3, [pc, #136]	; (800a1bc <_svfiprintf_r+0x1f0>)
 800a132:	bb1b      	cbnz	r3, 800a17c <_svfiprintf_r+0x1b0>
 800a134:	9b03      	ldr	r3, [sp, #12]
 800a136:	3307      	adds	r3, #7
 800a138:	f023 0307 	bic.w	r3, r3, #7
 800a13c:	3308      	adds	r3, #8
 800a13e:	9303      	str	r3, [sp, #12]
 800a140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a142:	4433      	add	r3, r6
 800a144:	9309      	str	r3, [sp, #36]	; 0x24
 800a146:	e768      	b.n	800a01a <_svfiprintf_r+0x4e>
 800a148:	fb0c 3202 	mla	r2, ip, r2, r3
 800a14c:	460c      	mov	r4, r1
 800a14e:	2001      	movs	r0, #1
 800a150:	e7a6      	b.n	800a0a0 <_svfiprintf_r+0xd4>
 800a152:	2300      	movs	r3, #0
 800a154:	3401      	adds	r4, #1
 800a156:	9305      	str	r3, [sp, #20]
 800a158:	4619      	mov	r1, r3
 800a15a:	f04f 0c0a 	mov.w	ip, #10
 800a15e:	4620      	mov	r0, r4
 800a160:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a164:	3a30      	subs	r2, #48	; 0x30
 800a166:	2a09      	cmp	r2, #9
 800a168:	d903      	bls.n	800a172 <_svfiprintf_r+0x1a6>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0c6      	beq.n	800a0fc <_svfiprintf_r+0x130>
 800a16e:	9105      	str	r1, [sp, #20]
 800a170:	e7c4      	b.n	800a0fc <_svfiprintf_r+0x130>
 800a172:	fb0c 2101 	mla	r1, ip, r1, r2
 800a176:	4604      	mov	r4, r0
 800a178:	2301      	movs	r3, #1
 800a17a:	e7f0      	b.n	800a15e <_svfiprintf_r+0x192>
 800a17c:	ab03      	add	r3, sp, #12
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	462a      	mov	r2, r5
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <_svfiprintf_r+0x1f4>)
 800a184:	a904      	add	r1, sp, #16
 800a186:	4638      	mov	r0, r7
 800a188:	f3af 8000 	nop.w
 800a18c:	1c42      	adds	r2, r0, #1
 800a18e:	4606      	mov	r6, r0
 800a190:	d1d6      	bne.n	800a140 <_svfiprintf_r+0x174>
 800a192:	89ab      	ldrh	r3, [r5, #12]
 800a194:	065b      	lsls	r3, r3, #25
 800a196:	f53f af2d 	bmi.w	8009ff4 <_svfiprintf_r+0x28>
 800a19a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19c:	b01d      	add	sp, #116	; 0x74
 800a19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <_svfiprintf_r+0x1f4>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f000 f9bd 	bl	800a52c <_printf_i>
 800a1b2:	e7eb      	b.n	800a18c <_svfiprintf_r+0x1c0>
 800a1b4:	0800b618 	.word	0x0800b618
 800a1b8:	0800b622 	.word	0x0800b622
 800a1bc:	00000000 	.word	0x00000000
 800a1c0:	08009f19 	.word	0x08009f19
 800a1c4:	0800b61e 	.word	0x0800b61e

0800a1c8 <__sfputc_r>:
 800a1c8:	6893      	ldr	r3, [r2, #8]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	b410      	push	{r4}
 800a1d0:	6093      	str	r3, [r2, #8]
 800a1d2:	da08      	bge.n	800a1e6 <__sfputc_r+0x1e>
 800a1d4:	6994      	ldr	r4, [r2, #24]
 800a1d6:	42a3      	cmp	r3, r4
 800a1d8:	db01      	blt.n	800a1de <__sfputc_r+0x16>
 800a1da:	290a      	cmp	r1, #10
 800a1dc:	d103      	bne.n	800a1e6 <__sfputc_r+0x1e>
 800a1de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1e2:	f7ff bc8f 	b.w	8009b04 <__swbuf_r>
 800a1e6:	6813      	ldr	r3, [r2, #0]
 800a1e8:	1c58      	adds	r0, r3, #1
 800a1ea:	6010      	str	r0, [r2, #0]
 800a1ec:	7019      	strb	r1, [r3, #0]
 800a1ee:	4608      	mov	r0, r1
 800a1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <__sfputs_r>:
 800a1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	4614      	mov	r4, r2
 800a1fe:	18d5      	adds	r5, r2, r3
 800a200:	42ac      	cmp	r4, r5
 800a202:	d101      	bne.n	800a208 <__sfputs_r+0x12>
 800a204:	2000      	movs	r0, #0
 800a206:	e007      	b.n	800a218 <__sfputs_r+0x22>
 800a208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20c:	463a      	mov	r2, r7
 800a20e:	4630      	mov	r0, r6
 800a210:	f7ff ffda 	bl	800a1c8 <__sfputc_r>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d1f3      	bne.n	800a200 <__sfputs_r+0xa>
 800a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a21c <_vfiprintf_r>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	460d      	mov	r5, r1
 800a222:	b09d      	sub	sp, #116	; 0x74
 800a224:	4614      	mov	r4, r2
 800a226:	4698      	mov	r8, r3
 800a228:	4606      	mov	r6, r0
 800a22a:	b118      	cbz	r0, 800a234 <_vfiprintf_r+0x18>
 800a22c:	6a03      	ldr	r3, [r0, #32]
 800a22e:	b90b      	cbnz	r3, 800a234 <_vfiprintf_r+0x18>
 800a230:	f7ff fb48 	bl	80098c4 <__sinit>
 800a234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a236:	07d9      	lsls	r1, r3, #31
 800a238:	d405      	bmi.n	800a246 <_vfiprintf_r+0x2a>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	059a      	lsls	r2, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_vfiprintf_r+0x2a>
 800a240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a242:	f7ff fd6e 	bl	8009d22 <__retarget_lock_acquire_recursive>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	071b      	lsls	r3, r3, #28
 800a24a:	d501      	bpl.n	800a250 <_vfiprintf_r+0x34>
 800a24c:	692b      	ldr	r3, [r5, #16]
 800a24e:	b99b      	cbnz	r3, 800a278 <_vfiprintf_r+0x5c>
 800a250:	4629      	mov	r1, r5
 800a252:	4630      	mov	r0, r6
 800a254:	f7ff fc94 	bl	8009b80 <__swsetup_r>
 800a258:	b170      	cbz	r0, 800a278 <_vfiprintf_r+0x5c>
 800a25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25c:	07dc      	lsls	r4, r3, #31
 800a25e:	d504      	bpl.n	800a26a <_vfiprintf_r+0x4e>
 800a260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a264:	b01d      	add	sp, #116	; 0x74
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	0598      	lsls	r0, r3, #22
 800a26e:	d4f7      	bmi.n	800a260 <_vfiprintf_r+0x44>
 800a270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a272:	f7ff fd57 	bl	8009d24 <__retarget_lock_release_recursive>
 800a276:	e7f3      	b.n	800a260 <_vfiprintf_r+0x44>
 800a278:	2300      	movs	r3, #0
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	2320      	movs	r3, #32
 800a27e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a282:	f8cd 800c 	str.w	r8, [sp, #12]
 800a286:	2330      	movs	r3, #48	; 0x30
 800a288:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a43c <_vfiprintf_r+0x220>
 800a28c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a290:	f04f 0901 	mov.w	r9, #1
 800a294:	4623      	mov	r3, r4
 800a296:	469a      	mov	sl, r3
 800a298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_vfiprintf_r+0x86>
 800a29e:	2a25      	cmp	r2, #37	; 0x25
 800a2a0:	d1f9      	bne.n	800a296 <_vfiprintf_r+0x7a>
 800a2a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a6:	d00b      	beq.n	800a2c0 <_vfiprintf_r+0xa4>
 800a2a8:	465b      	mov	r3, fp
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ffa1 	bl	800a1f6 <__sfputs_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f000 80a9 	beq.w	800a40c <_vfiprintf_r+0x1f0>
 800a2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2bc:	445a      	add	r2, fp
 800a2be:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 80a1 	beq.w	800a40c <_vfiprintf_r+0x1f0>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d4:	f10a 0a01 	add.w	sl, sl, #1
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2e2:	4654      	mov	r4, sl
 800a2e4:	2205      	movs	r2, #5
 800a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ea:	4854      	ldr	r0, [pc, #336]	; (800a43c <_vfiprintf_r+0x220>)
 800a2ec:	f7f5 ff80 	bl	80001f0 <memchr>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	b9d8      	cbnz	r0, 800a32c <_vfiprintf_r+0x110>
 800a2f4:	06d1      	lsls	r1, r2, #27
 800a2f6:	bf44      	itt	mi
 800a2f8:	2320      	movmi	r3, #32
 800a2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fe:	0713      	lsls	r3, r2, #28
 800a300:	bf44      	itt	mi
 800a302:	232b      	movmi	r3, #43	; 0x2b
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a308:	f89a 3000 	ldrb.w	r3, [sl]
 800a30c:	2b2a      	cmp	r3, #42	; 0x2a
 800a30e:	d015      	beq.n	800a33c <_vfiprintf_r+0x120>
 800a310:	9a07      	ldr	r2, [sp, #28]
 800a312:	4654      	mov	r4, sl
 800a314:	2000      	movs	r0, #0
 800a316:	f04f 0c0a 	mov.w	ip, #10
 800a31a:	4621      	mov	r1, r4
 800a31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a320:	3b30      	subs	r3, #48	; 0x30
 800a322:	2b09      	cmp	r3, #9
 800a324:	d94d      	bls.n	800a3c2 <_vfiprintf_r+0x1a6>
 800a326:	b1b0      	cbz	r0, 800a356 <_vfiprintf_r+0x13a>
 800a328:	9207      	str	r2, [sp, #28]
 800a32a:	e014      	b.n	800a356 <_vfiprintf_r+0x13a>
 800a32c:	eba0 0308 	sub.w	r3, r0, r8
 800a330:	fa09 f303 	lsl.w	r3, r9, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	46a2      	mov	sl, r4
 800a33a:	e7d2      	b.n	800a2e2 <_vfiprintf_r+0xc6>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	1d19      	adds	r1, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfbb      	ittet	lt
 800a348:	425b      	neglt	r3, r3
 800a34a:	f042 0202 	orrlt.w	r2, r2, #2
 800a34e:	9307      	strge	r3, [sp, #28]
 800a350:	9307      	strlt	r3, [sp, #28]
 800a352:	bfb8      	it	lt
 800a354:	9204      	strlt	r2, [sp, #16]
 800a356:	7823      	ldrb	r3, [r4, #0]
 800a358:	2b2e      	cmp	r3, #46	; 0x2e
 800a35a:	d10c      	bne.n	800a376 <_vfiprintf_r+0x15a>
 800a35c:	7863      	ldrb	r3, [r4, #1]
 800a35e:	2b2a      	cmp	r3, #42	; 0x2a
 800a360:	d134      	bne.n	800a3cc <_vfiprintf_r+0x1b0>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9203      	str	r2, [sp, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bfb8      	it	lt
 800a36e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a372:	3402      	adds	r4, #2
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a44c <_vfiprintf_r+0x230>
 800a37a:	7821      	ldrb	r1, [r4, #0]
 800a37c:	2203      	movs	r2, #3
 800a37e:	4650      	mov	r0, sl
 800a380:	f7f5 ff36 	bl	80001f0 <memchr>
 800a384:	b138      	cbz	r0, 800a396 <_vfiprintf_r+0x17a>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	eba0 000a 	sub.w	r0, r0, sl
 800a38c:	2240      	movs	r2, #64	; 0x40
 800a38e:	4082      	lsls	r2, r0
 800a390:	4313      	orrs	r3, r2
 800a392:	3401      	adds	r4, #1
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39a:	4829      	ldr	r0, [pc, #164]	; (800a440 <_vfiprintf_r+0x224>)
 800a39c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3a0:	2206      	movs	r2, #6
 800a3a2:	f7f5 ff25 	bl	80001f0 <memchr>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d03f      	beq.n	800a42a <_vfiprintf_r+0x20e>
 800a3aa:	4b26      	ldr	r3, [pc, #152]	; (800a444 <_vfiprintf_r+0x228>)
 800a3ac:	bb1b      	cbnz	r3, 800a3f6 <_vfiprintf_r+0x1da>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	3307      	adds	r3, #7
 800a3b2:	f023 0307 	bic.w	r3, r3, #7
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3bc:	443b      	add	r3, r7
 800a3be:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c0:	e768      	b.n	800a294 <_vfiprintf_r+0x78>
 800a3c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	e7a6      	b.n	800a31a <_vfiprintf_r+0xfe>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	3401      	adds	r4, #1
 800a3d0:	9305      	str	r3, [sp, #20]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	f04f 0c0a 	mov.w	ip, #10
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3de:	3a30      	subs	r2, #48	; 0x30
 800a3e0:	2a09      	cmp	r2, #9
 800a3e2:	d903      	bls.n	800a3ec <_vfiprintf_r+0x1d0>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0c6      	beq.n	800a376 <_vfiprintf_r+0x15a>
 800a3e8:	9105      	str	r1, [sp, #20]
 800a3ea:	e7c4      	b.n	800a376 <_vfiprintf_r+0x15a>
 800a3ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e7f0      	b.n	800a3d8 <_vfiprintf_r+0x1bc>
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	4b12      	ldr	r3, [pc, #72]	; (800a448 <_vfiprintf_r+0x22c>)
 800a3fe:	a904      	add	r1, sp, #16
 800a400:	4630      	mov	r0, r6
 800a402:	f3af 8000 	nop.w
 800a406:	4607      	mov	r7, r0
 800a408:	1c78      	adds	r0, r7, #1
 800a40a:	d1d6      	bne.n	800a3ba <_vfiprintf_r+0x19e>
 800a40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	d405      	bmi.n	800a41e <_vfiprintf_r+0x202>
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	059a      	lsls	r2, r3, #22
 800a416:	d402      	bmi.n	800a41e <_vfiprintf_r+0x202>
 800a418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41a:	f7ff fc83 	bl	8009d24 <__retarget_lock_release_recursive>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	065b      	lsls	r3, r3, #25
 800a422:	f53f af1d 	bmi.w	800a260 <_vfiprintf_r+0x44>
 800a426:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a428:	e71c      	b.n	800a264 <_vfiprintf_r+0x48>
 800a42a:	ab03      	add	r3, sp, #12
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	462a      	mov	r2, r5
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <_vfiprintf_r+0x22c>)
 800a432:	a904      	add	r1, sp, #16
 800a434:	4630      	mov	r0, r6
 800a436:	f000 f879 	bl	800a52c <_printf_i>
 800a43a:	e7e4      	b.n	800a406 <_vfiprintf_r+0x1ea>
 800a43c:	0800b618 	.word	0x0800b618
 800a440:	0800b622 	.word	0x0800b622
 800a444:	00000000 	.word	0x00000000
 800a448:	0800a1f7 	.word	0x0800a1f7
 800a44c:	0800b61e 	.word	0x0800b61e

0800a450 <_printf_common>:
 800a450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	4616      	mov	r6, r2
 800a456:	4699      	mov	r9, r3
 800a458:	688a      	ldr	r2, [r1, #8]
 800a45a:	690b      	ldr	r3, [r1, #16]
 800a45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a460:	4293      	cmp	r3, r2
 800a462:	bfb8      	it	lt
 800a464:	4613      	movlt	r3, r2
 800a466:	6033      	str	r3, [r6, #0]
 800a468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a46c:	4607      	mov	r7, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	b10a      	cbz	r2, 800a476 <_printf_common+0x26>
 800a472:	3301      	adds	r3, #1
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	0699      	lsls	r1, r3, #26
 800a47a:	bf42      	ittt	mi
 800a47c:	6833      	ldrmi	r3, [r6, #0]
 800a47e:	3302      	addmi	r3, #2
 800a480:	6033      	strmi	r3, [r6, #0]
 800a482:	6825      	ldr	r5, [r4, #0]
 800a484:	f015 0506 	ands.w	r5, r5, #6
 800a488:	d106      	bne.n	800a498 <_printf_common+0x48>
 800a48a:	f104 0a19 	add.w	sl, r4, #25
 800a48e:	68e3      	ldr	r3, [r4, #12]
 800a490:	6832      	ldr	r2, [r6, #0]
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	42ab      	cmp	r3, r5
 800a496:	dc26      	bgt.n	800a4e6 <_printf_common+0x96>
 800a498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a49c:	1e13      	subs	r3, r2, #0
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	bf18      	it	ne
 800a4a2:	2301      	movne	r3, #1
 800a4a4:	0692      	lsls	r2, r2, #26
 800a4a6:	d42b      	bmi.n	800a500 <_printf_common+0xb0>
 800a4a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	47c0      	blx	r8
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	d01e      	beq.n	800a4f4 <_printf_common+0xa4>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	6922      	ldr	r2, [r4, #16]
 800a4ba:	f003 0306 	and.w	r3, r3, #6
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	bf02      	ittt	eq
 800a4c2:	68e5      	ldreq	r5, [r4, #12]
 800a4c4:	6833      	ldreq	r3, [r6, #0]
 800a4c6:	1aed      	subeq	r5, r5, r3
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	bf0c      	ite	eq
 800a4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4d0:	2500      	movne	r5, #0
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	bfc4      	itt	gt
 800a4d6:	1a9b      	subgt	r3, r3, r2
 800a4d8:	18ed      	addgt	r5, r5, r3
 800a4da:	2600      	movs	r6, #0
 800a4dc:	341a      	adds	r4, #26
 800a4de:	42b5      	cmp	r5, r6
 800a4e0:	d11a      	bne.n	800a518 <_printf_common+0xc8>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	e008      	b.n	800a4f8 <_printf_common+0xa8>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4652      	mov	r2, sl
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	47c0      	blx	r8
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d103      	bne.n	800a4fc <_printf_common+0xac>
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	e7c6      	b.n	800a48e <_printf_common+0x3e>
 800a500:	18e1      	adds	r1, r4, r3
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	2030      	movs	r0, #48	; 0x30
 800a506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a50a:	4422      	add	r2, r4
 800a50c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a514:	3302      	adds	r3, #2
 800a516:	e7c7      	b.n	800a4a8 <_printf_common+0x58>
 800a518:	2301      	movs	r3, #1
 800a51a:	4622      	mov	r2, r4
 800a51c:	4649      	mov	r1, r9
 800a51e:	4638      	mov	r0, r7
 800a520:	47c0      	blx	r8
 800a522:	3001      	adds	r0, #1
 800a524:	d0e6      	beq.n	800a4f4 <_printf_common+0xa4>
 800a526:	3601      	adds	r6, #1
 800a528:	e7d9      	b.n	800a4de <_printf_common+0x8e>
	...

0800a52c <_printf_i>:
 800a52c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	7e0f      	ldrb	r7, [r1, #24]
 800a532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a534:	2f78      	cmp	r7, #120	; 0x78
 800a536:	4691      	mov	r9, r2
 800a538:	4680      	mov	r8, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	469a      	mov	sl, r3
 800a53e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a542:	d807      	bhi.n	800a554 <_printf_i+0x28>
 800a544:	2f62      	cmp	r7, #98	; 0x62
 800a546:	d80a      	bhi.n	800a55e <_printf_i+0x32>
 800a548:	2f00      	cmp	r7, #0
 800a54a:	f000 80d4 	beq.w	800a6f6 <_printf_i+0x1ca>
 800a54e:	2f58      	cmp	r7, #88	; 0x58
 800a550:	f000 80c0 	beq.w	800a6d4 <_printf_i+0x1a8>
 800a554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a55c:	e03a      	b.n	800a5d4 <_printf_i+0xa8>
 800a55e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a562:	2b15      	cmp	r3, #21
 800a564:	d8f6      	bhi.n	800a554 <_printf_i+0x28>
 800a566:	a101      	add	r1, pc, #4	; (adr r1, 800a56c <_printf_i+0x40>)
 800a568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a56c:	0800a5c5 	.word	0x0800a5c5
 800a570:	0800a5d9 	.word	0x0800a5d9
 800a574:	0800a555 	.word	0x0800a555
 800a578:	0800a555 	.word	0x0800a555
 800a57c:	0800a555 	.word	0x0800a555
 800a580:	0800a555 	.word	0x0800a555
 800a584:	0800a5d9 	.word	0x0800a5d9
 800a588:	0800a555 	.word	0x0800a555
 800a58c:	0800a555 	.word	0x0800a555
 800a590:	0800a555 	.word	0x0800a555
 800a594:	0800a555 	.word	0x0800a555
 800a598:	0800a6dd 	.word	0x0800a6dd
 800a59c:	0800a605 	.word	0x0800a605
 800a5a0:	0800a697 	.word	0x0800a697
 800a5a4:	0800a555 	.word	0x0800a555
 800a5a8:	0800a555 	.word	0x0800a555
 800a5ac:	0800a6ff 	.word	0x0800a6ff
 800a5b0:	0800a555 	.word	0x0800a555
 800a5b4:	0800a605 	.word	0x0800a605
 800a5b8:	0800a555 	.word	0x0800a555
 800a5bc:	0800a555 	.word	0x0800a555
 800a5c0:	0800a69f 	.word	0x0800a69f
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	1d1a      	adds	r2, r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	602a      	str	r2, [r5, #0]
 800a5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e09f      	b.n	800a718 <_printf_i+0x1ec>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	682b      	ldr	r3, [r5, #0]
 800a5dc:	0607      	lsls	r7, r0, #24
 800a5de:	f103 0104 	add.w	r1, r3, #4
 800a5e2:	6029      	str	r1, [r5, #0]
 800a5e4:	d501      	bpl.n	800a5ea <_printf_i+0xbe>
 800a5e6:	681e      	ldr	r6, [r3, #0]
 800a5e8:	e003      	b.n	800a5f2 <_printf_i+0xc6>
 800a5ea:	0646      	lsls	r6, r0, #25
 800a5ec:	d5fb      	bpl.n	800a5e6 <_printf_i+0xba>
 800a5ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	da03      	bge.n	800a5fe <_printf_i+0xd2>
 800a5f6:	232d      	movs	r3, #45	; 0x2d
 800a5f8:	4276      	negs	r6, r6
 800a5fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5fe:	485a      	ldr	r0, [pc, #360]	; (800a768 <_printf_i+0x23c>)
 800a600:	230a      	movs	r3, #10
 800a602:	e012      	b.n	800a62a <_printf_i+0xfe>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	1d19      	adds	r1, r3, #4
 800a60a:	6029      	str	r1, [r5, #0]
 800a60c:	0605      	lsls	r5, r0, #24
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0xe8>
 800a610:	681e      	ldr	r6, [r3, #0]
 800a612:	e002      	b.n	800a61a <_printf_i+0xee>
 800a614:	0641      	lsls	r1, r0, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0xe4>
 800a618:	881e      	ldrh	r6, [r3, #0]
 800a61a:	4853      	ldr	r0, [pc, #332]	; (800a768 <_printf_i+0x23c>)
 800a61c:	2f6f      	cmp	r7, #111	; 0x6f
 800a61e:	bf0c      	ite	eq
 800a620:	2308      	moveq	r3, #8
 800a622:	230a      	movne	r3, #10
 800a624:	2100      	movs	r1, #0
 800a626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a62a:	6865      	ldr	r5, [r4, #4]
 800a62c:	60a5      	str	r5, [r4, #8]
 800a62e:	2d00      	cmp	r5, #0
 800a630:	bfa2      	ittt	ge
 800a632:	6821      	ldrge	r1, [r4, #0]
 800a634:	f021 0104 	bicge.w	r1, r1, #4
 800a638:	6021      	strge	r1, [r4, #0]
 800a63a:	b90e      	cbnz	r6, 800a640 <_printf_i+0x114>
 800a63c:	2d00      	cmp	r5, #0
 800a63e:	d04b      	beq.n	800a6d8 <_printf_i+0x1ac>
 800a640:	4615      	mov	r5, r2
 800a642:	fbb6 f1f3 	udiv	r1, r6, r3
 800a646:	fb03 6711 	mls	r7, r3, r1, r6
 800a64a:	5dc7      	ldrb	r7, [r0, r7]
 800a64c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a650:	4637      	mov	r7, r6
 800a652:	42bb      	cmp	r3, r7
 800a654:	460e      	mov	r6, r1
 800a656:	d9f4      	bls.n	800a642 <_printf_i+0x116>
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d10b      	bne.n	800a674 <_printf_i+0x148>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	07de      	lsls	r6, r3, #31
 800a660:	d508      	bpl.n	800a674 <_printf_i+0x148>
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	6861      	ldr	r1, [r4, #4]
 800a666:	4299      	cmp	r1, r3
 800a668:	bfde      	ittt	le
 800a66a:	2330      	movle	r3, #48	; 0x30
 800a66c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a670:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a674:	1b52      	subs	r2, r2, r5
 800a676:	6122      	str	r2, [r4, #16]
 800a678:	f8cd a000 	str.w	sl, [sp]
 800a67c:	464b      	mov	r3, r9
 800a67e:	aa03      	add	r2, sp, #12
 800a680:	4621      	mov	r1, r4
 800a682:	4640      	mov	r0, r8
 800a684:	f7ff fee4 	bl	800a450 <_printf_common>
 800a688:	3001      	adds	r0, #1
 800a68a:	d14a      	bne.n	800a722 <_printf_i+0x1f6>
 800a68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a690:	b004      	add	sp, #16
 800a692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	f043 0320 	orr.w	r3, r3, #32
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	4833      	ldr	r0, [pc, #204]	; (800a76c <_printf_i+0x240>)
 800a6a0:	2778      	movs	r7, #120	; 0x78
 800a6a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	6829      	ldr	r1, [r5, #0]
 800a6aa:	061f      	lsls	r7, r3, #24
 800a6ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6b0:	d402      	bmi.n	800a6b8 <_printf_i+0x18c>
 800a6b2:	065f      	lsls	r7, r3, #25
 800a6b4:	bf48      	it	mi
 800a6b6:	b2b6      	uxthmi	r6, r6
 800a6b8:	07df      	lsls	r7, r3, #31
 800a6ba:	bf48      	it	mi
 800a6bc:	f043 0320 	orrmi.w	r3, r3, #32
 800a6c0:	6029      	str	r1, [r5, #0]
 800a6c2:	bf48      	it	mi
 800a6c4:	6023      	strmi	r3, [r4, #0]
 800a6c6:	b91e      	cbnz	r6, 800a6d0 <_printf_i+0x1a4>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	f023 0320 	bic.w	r3, r3, #32
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	e7a7      	b.n	800a624 <_printf_i+0xf8>
 800a6d4:	4824      	ldr	r0, [pc, #144]	; (800a768 <_printf_i+0x23c>)
 800a6d6:	e7e4      	b.n	800a6a2 <_printf_i+0x176>
 800a6d8:	4615      	mov	r5, r2
 800a6da:	e7bd      	b.n	800a658 <_printf_i+0x12c>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	6826      	ldr	r6, [r4, #0]
 800a6e0:	6961      	ldr	r1, [r4, #20]
 800a6e2:	1d18      	adds	r0, r3, #4
 800a6e4:	6028      	str	r0, [r5, #0]
 800a6e6:	0635      	lsls	r5, r6, #24
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	d501      	bpl.n	800a6f0 <_printf_i+0x1c4>
 800a6ec:	6019      	str	r1, [r3, #0]
 800a6ee:	e002      	b.n	800a6f6 <_printf_i+0x1ca>
 800a6f0:	0670      	lsls	r0, r6, #25
 800a6f2:	d5fb      	bpl.n	800a6ec <_printf_i+0x1c0>
 800a6f4:	8019      	strh	r1, [r3, #0]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	e7bc      	b.n	800a678 <_printf_i+0x14c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	1d1a      	adds	r2, r3, #4
 800a702:	602a      	str	r2, [r5, #0]
 800a704:	681d      	ldr	r5, [r3, #0]
 800a706:	6862      	ldr	r2, [r4, #4]
 800a708:	2100      	movs	r1, #0
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7f5 fd70 	bl	80001f0 <memchr>
 800a710:	b108      	cbz	r0, 800a716 <_printf_i+0x1ea>
 800a712:	1b40      	subs	r0, r0, r5
 800a714:	6060      	str	r0, [r4, #4]
 800a716:	6863      	ldr	r3, [r4, #4]
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	2300      	movs	r3, #0
 800a71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a720:	e7aa      	b.n	800a678 <_printf_i+0x14c>
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	462a      	mov	r2, r5
 800a726:	4649      	mov	r1, r9
 800a728:	4640      	mov	r0, r8
 800a72a:	47d0      	blx	sl
 800a72c:	3001      	adds	r0, #1
 800a72e:	d0ad      	beq.n	800a68c <_printf_i+0x160>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	079b      	lsls	r3, r3, #30
 800a734:	d413      	bmi.n	800a75e <_printf_i+0x232>
 800a736:	68e0      	ldr	r0, [r4, #12]
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	4298      	cmp	r0, r3
 800a73c:	bfb8      	it	lt
 800a73e:	4618      	movlt	r0, r3
 800a740:	e7a6      	b.n	800a690 <_printf_i+0x164>
 800a742:	2301      	movs	r3, #1
 800a744:	4632      	mov	r2, r6
 800a746:	4649      	mov	r1, r9
 800a748:	4640      	mov	r0, r8
 800a74a:	47d0      	blx	sl
 800a74c:	3001      	adds	r0, #1
 800a74e:	d09d      	beq.n	800a68c <_printf_i+0x160>
 800a750:	3501      	adds	r5, #1
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	9903      	ldr	r1, [sp, #12]
 800a756:	1a5b      	subs	r3, r3, r1
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dcf2      	bgt.n	800a742 <_printf_i+0x216>
 800a75c:	e7eb      	b.n	800a736 <_printf_i+0x20a>
 800a75e:	2500      	movs	r5, #0
 800a760:	f104 0619 	add.w	r6, r4, #25
 800a764:	e7f5      	b.n	800a752 <_printf_i+0x226>
 800a766:	bf00      	nop
 800a768:	0800b629 	.word	0x0800b629
 800a76c:	0800b63a 	.word	0x0800b63a

0800a770 <__sflush_r>:
 800a770:	898a      	ldrh	r2, [r1, #12]
 800a772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a776:	4605      	mov	r5, r0
 800a778:	0710      	lsls	r0, r2, #28
 800a77a:	460c      	mov	r4, r1
 800a77c:	d458      	bmi.n	800a830 <__sflush_r+0xc0>
 800a77e:	684b      	ldr	r3, [r1, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	dc05      	bgt.n	800a790 <__sflush_r+0x20>
 800a784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	dc02      	bgt.n	800a790 <__sflush_r+0x20>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a792:	2e00      	cmp	r6, #0
 800a794:	d0f9      	beq.n	800a78a <__sflush_r+0x1a>
 800a796:	2300      	movs	r3, #0
 800a798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a79c:	682f      	ldr	r7, [r5, #0]
 800a79e:	6a21      	ldr	r1, [r4, #32]
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	d032      	beq.n	800a80a <__sflush_r+0x9a>
 800a7a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	075a      	lsls	r2, r3, #29
 800a7aa:	d505      	bpl.n	800a7b8 <__sflush_r+0x48>
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	1ac0      	subs	r0, r0, r3
 800a7b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7b2:	b10b      	cbz	r3, 800a7b8 <__sflush_r+0x48>
 800a7b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7b6:	1ac0      	subs	r0, r0, r3
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7be:	6a21      	ldr	r1, [r4, #32]
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b0      	blx	r6
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	d106      	bne.n	800a7d8 <__sflush_r+0x68>
 800a7ca:	6829      	ldr	r1, [r5, #0]
 800a7cc:	291d      	cmp	r1, #29
 800a7ce:	d82b      	bhi.n	800a828 <__sflush_r+0xb8>
 800a7d0:	4a29      	ldr	r2, [pc, #164]	; (800a878 <__sflush_r+0x108>)
 800a7d2:	410a      	asrs	r2, r1
 800a7d4:	07d6      	lsls	r6, r2, #31
 800a7d6:	d427      	bmi.n	800a828 <__sflush_r+0xb8>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	6062      	str	r2, [r4, #4]
 800a7dc:	04d9      	lsls	r1, r3, #19
 800a7de:	6922      	ldr	r2, [r4, #16]
 800a7e0:	6022      	str	r2, [r4, #0]
 800a7e2:	d504      	bpl.n	800a7ee <__sflush_r+0x7e>
 800a7e4:	1c42      	adds	r2, r0, #1
 800a7e6:	d101      	bne.n	800a7ec <__sflush_r+0x7c>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b903      	cbnz	r3, 800a7ee <__sflush_r+0x7e>
 800a7ec:	6560      	str	r0, [r4, #84]	; 0x54
 800a7ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7f0:	602f      	str	r7, [r5, #0]
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	d0c9      	beq.n	800a78a <__sflush_r+0x1a>
 800a7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d002      	beq.n	800a804 <__sflush_r+0x94>
 800a7fe:	4628      	mov	r0, r5
 800a800:	f7ff fa92 	bl	8009d28 <_free_r>
 800a804:	2000      	movs	r0, #0
 800a806:	6360      	str	r0, [r4, #52]	; 0x34
 800a808:	e7c0      	b.n	800a78c <__sflush_r+0x1c>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4628      	mov	r0, r5
 800a80e:	47b0      	blx	r6
 800a810:	1c41      	adds	r1, r0, #1
 800a812:	d1c8      	bne.n	800a7a6 <__sflush_r+0x36>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0c5      	beq.n	800a7a6 <__sflush_r+0x36>
 800a81a:	2b1d      	cmp	r3, #29
 800a81c:	d001      	beq.n	800a822 <__sflush_r+0xb2>
 800a81e:	2b16      	cmp	r3, #22
 800a820:	d101      	bne.n	800a826 <__sflush_r+0xb6>
 800a822:	602f      	str	r7, [r5, #0]
 800a824:	e7b1      	b.n	800a78a <__sflush_r+0x1a>
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	e7ad      	b.n	800a78c <__sflush_r+0x1c>
 800a830:	690f      	ldr	r7, [r1, #16]
 800a832:	2f00      	cmp	r7, #0
 800a834:	d0a9      	beq.n	800a78a <__sflush_r+0x1a>
 800a836:	0793      	lsls	r3, r2, #30
 800a838:	680e      	ldr	r6, [r1, #0]
 800a83a:	bf08      	it	eq
 800a83c:	694b      	ldreq	r3, [r1, #20]
 800a83e:	600f      	str	r7, [r1, #0]
 800a840:	bf18      	it	ne
 800a842:	2300      	movne	r3, #0
 800a844:	eba6 0807 	sub.w	r8, r6, r7
 800a848:	608b      	str	r3, [r1, #8]
 800a84a:	f1b8 0f00 	cmp.w	r8, #0
 800a84e:	dd9c      	ble.n	800a78a <__sflush_r+0x1a>
 800a850:	6a21      	ldr	r1, [r4, #32]
 800a852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a854:	4643      	mov	r3, r8
 800a856:	463a      	mov	r2, r7
 800a858:	4628      	mov	r0, r5
 800a85a:	47b0      	blx	r6
 800a85c:	2800      	cmp	r0, #0
 800a85e:	dc06      	bgt.n	800a86e <__sflush_r+0xfe>
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a86c:	e78e      	b.n	800a78c <__sflush_r+0x1c>
 800a86e:	4407      	add	r7, r0
 800a870:	eba8 0800 	sub.w	r8, r8, r0
 800a874:	e7e9      	b.n	800a84a <__sflush_r+0xda>
 800a876:	bf00      	nop
 800a878:	dfbffffe 	.word	0xdfbffffe

0800a87c <_fflush_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	690b      	ldr	r3, [r1, #16]
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
 800a884:	b913      	cbnz	r3, 800a88c <_fflush_r+0x10>
 800a886:	2500      	movs	r5, #0
 800a888:	4628      	mov	r0, r5
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	b118      	cbz	r0, 800a896 <_fflush_r+0x1a>
 800a88e:	6a03      	ldr	r3, [r0, #32]
 800a890:	b90b      	cbnz	r3, 800a896 <_fflush_r+0x1a>
 800a892:	f7ff f817 	bl	80098c4 <__sinit>
 800a896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d0f3      	beq.n	800a886 <_fflush_r+0xa>
 800a89e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8a0:	07d0      	lsls	r0, r2, #31
 800a8a2:	d404      	bmi.n	800a8ae <_fflush_r+0x32>
 800a8a4:	0599      	lsls	r1, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_fflush_r+0x32>
 800a8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8aa:	f7ff fa3a 	bl	8009d22 <__retarget_lock_acquire_recursive>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	f7ff ff5d 	bl	800a770 <__sflush_r>
 800a8b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b8:	07da      	lsls	r2, r3, #31
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	d4e4      	bmi.n	800a888 <_fflush_r+0xc>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	059b      	lsls	r3, r3, #22
 800a8c2:	d4e1      	bmi.n	800a888 <_fflush_r+0xc>
 800a8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c6:	f7ff fa2d 	bl	8009d24 <__retarget_lock_release_recursive>
 800a8ca:	e7dd      	b.n	800a888 <_fflush_r+0xc>

0800a8cc <__swhatbuf_r>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	b096      	sub	sp, #88	; 0x58
 800a8d8:	4615      	mov	r5, r2
 800a8da:	461e      	mov	r6, r3
 800a8dc:	da0d      	bge.n	800a8fa <__swhatbuf_r+0x2e>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a8e4:	f04f 0100 	mov.w	r1, #0
 800a8e8:	bf0c      	ite	eq
 800a8ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a8ee:	2340      	movne	r3, #64	; 0x40
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	6031      	str	r1, [r6, #0]
 800a8f4:	602b      	str	r3, [r5, #0]
 800a8f6:	b016      	add	sp, #88	; 0x58
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
 800a8fa:	466a      	mov	r2, sp
 800a8fc:	f000 f862 	bl	800a9c4 <_fstat_r>
 800a900:	2800      	cmp	r0, #0
 800a902:	dbec      	blt.n	800a8de <__swhatbuf_r+0x12>
 800a904:	9901      	ldr	r1, [sp, #4]
 800a906:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a90a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a90e:	4259      	negs	r1, r3
 800a910:	4159      	adcs	r1, r3
 800a912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a916:	e7eb      	b.n	800a8f0 <__swhatbuf_r+0x24>

0800a918 <__smakebuf_r>:
 800a918:	898b      	ldrh	r3, [r1, #12]
 800a91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a91c:	079d      	lsls	r5, r3, #30
 800a91e:	4606      	mov	r6, r0
 800a920:	460c      	mov	r4, r1
 800a922:	d507      	bpl.n	800a934 <__smakebuf_r+0x1c>
 800a924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	6123      	str	r3, [r4, #16]
 800a92c:	2301      	movs	r3, #1
 800a92e:	6163      	str	r3, [r4, #20]
 800a930:	b002      	add	sp, #8
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	ab01      	add	r3, sp, #4
 800a936:	466a      	mov	r2, sp
 800a938:	f7ff ffc8 	bl	800a8cc <__swhatbuf_r>
 800a93c:	9900      	ldr	r1, [sp, #0]
 800a93e:	4605      	mov	r5, r0
 800a940:	4630      	mov	r0, r6
 800a942:	f7ff fa5d 	bl	8009e00 <_malloc_r>
 800a946:	b948      	cbnz	r0, 800a95c <__smakebuf_r+0x44>
 800a948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a94c:	059a      	lsls	r2, r3, #22
 800a94e:	d4ef      	bmi.n	800a930 <__smakebuf_r+0x18>
 800a950:	f023 0303 	bic.w	r3, r3, #3
 800a954:	f043 0302 	orr.w	r3, r3, #2
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	e7e3      	b.n	800a924 <__smakebuf_r+0xc>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	6020      	str	r0, [r4, #0]
 800a960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	9b00      	ldr	r3, [sp, #0]
 800a968:	6163      	str	r3, [r4, #20]
 800a96a:	9b01      	ldr	r3, [sp, #4]
 800a96c:	6120      	str	r0, [r4, #16]
 800a96e:	b15b      	cbz	r3, 800a988 <__smakebuf_r+0x70>
 800a970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a974:	4630      	mov	r0, r6
 800a976:	f000 f837 	bl	800a9e8 <_isatty_r>
 800a97a:	b128      	cbz	r0, 800a988 <__smakebuf_r+0x70>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f023 0303 	bic.w	r3, r3, #3
 800a982:	f043 0301 	orr.w	r3, r3, #1
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	431d      	orrs	r5, r3
 800a98c:	81a5      	strh	r5, [r4, #12]
 800a98e:	e7cf      	b.n	800a930 <__smakebuf_r+0x18>

0800a990 <memmove>:
 800a990:	4288      	cmp	r0, r1
 800a992:	b510      	push	{r4, lr}
 800a994:	eb01 0402 	add.w	r4, r1, r2
 800a998:	d902      	bls.n	800a9a0 <memmove+0x10>
 800a99a:	4284      	cmp	r4, r0
 800a99c:	4623      	mov	r3, r4
 800a99e:	d807      	bhi.n	800a9b0 <memmove+0x20>
 800a9a0:	1e43      	subs	r3, r0, #1
 800a9a2:	42a1      	cmp	r1, r4
 800a9a4:	d008      	beq.n	800a9b8 <memmove+0x28>
 800a9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ae:	e7f8      	b.n	800a9a2 <memmove+0x12>
 800a9b0:	4402      	add	r2, r0
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	428a      	cmp	r2, r1
 800a9b6:	d100      	bne.n	800a9ba <memmove+0x2a>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9c2:	e7f7      	b.n	800a9b4 <memmove+0x24>

0800a9c4 <_fstat_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d07      	ldr	r5, [pc, #28]	; (800a9e4 <_fstat_r+0x20>)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	f7f6 fb54 	bl	800107e <_fstat>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d102      	bne.n	800a9e0 <_fstat_r+0x1c>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	b103      	cbz	r3, 800a9e0 <_fstat_r+0x1c>
 800a9de:	6023      	str	r3, [r4, #0]
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20002d34 	.word	0x20002d34

0800a9e8 <_isatty_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d06      	ldr	r5, [pc, #24]	; (800aa04 <_isatty_r+0x1c>)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4608      	mov	r0, r1
 800a9f2:	602b      	str	r3, [r5, #0]
 800a9f4:	f7f6 fb53 	bl	800109e <_isatty>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_isatty_r+0x1a>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_isatty_r+0x1a>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20002d34 	.word	0x20002d34

0800aa08 <_sbrk_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d06      	ldr	r5, [pc, #24]	; (800aa24 <_sbrk_r+0x1c>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	602b      	str	r3, [r5, #0]
 800aa14:	f7f6 fb5c 	bl	80010d0 <_sbrk>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_sbrk_r+0x1a>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_sbrk_r+0x1a>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	20002d34 	.word	0x20002d34

0800aa28 <memcpy>:
 800aa28:	440a      	add	r2, r1
 800aa2a:	4291      	cmp	r1, r2
 800aa2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aa30:	d100      	bne.n	800aa34 <memcpy+0xc>
 800aa32:	4770      	bx	lr
 800aa34:	b510      	push	{r4, lr}
 800aa36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa3e:	4291      	cmp	r1, r2
 800aa40:	d1f9      	bne.n	800aa36 <memcpy+0xe>
 800aa42:	bd10      	pop	{r4, pc}

0800aa44 <_realloc_r>:
 800aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	4680      	mov	r8, r0
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	460e      	mov	r6, r1
 800aa4e:	b921      	cbnz	r1, 800aa5a <_realloc_r+0x16>
 800aa50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	4611      	mov	r1, r2
 800aa56:	f7ff b9d3 	b.w	8009e00 <_malloc_r>
 800aa5a:	b92a      	cbnz	r2, 800aa68 <_realloc_r+0x24>
 800aa5c:	f7ff f964 	bl	8009d28 <_free_r>
 800aa60:	4625      	mov	r5, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	f000 f81b 	bl	800aaa2 <_malloc_usable_size_r>
 800aa6c:	4284      	cmp	r4, r0
 800aa6e:	4607      	mov	r7, r0
 800aa70:	d802      	bhi.n	800aa78 <_realloc_r+0x34>
 800aa72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa76:	d812      	bhi.n	800aa9e <_realloc_r+0x5a>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	f7ff f9c0 	bl	8009e00 <_malloc_r>
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d0ed      	beq.n	800aa62 <_realloc_r+0x1e>
 800aa86:	42bc      	cmp	r4, r7
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	bf28      	it	cs
 800aa8e:	463a      	movcs	r2, r7
 800aa90:	f7ff ffca 	bl	800aa28 <memcpy>
 800aa94:	4631      	mov	r1, r6
 800aa96:	4640      	mov	r0, r8
 800aa98:	f7ff f946 	bl	8009d28 <_free_r>
 800aa9c:	e7e1      	b.n	800aa62 <_realloc_r+0x1e>
 800aa9e:	4635      	mov	r5, r6
 800aaa0:	e7df      	b.n	800aa62 <_realloc_r+0x1e>

0800aaa2 <_malloc_usable_size_r>:
 800aaa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa6:	1f18      	subs	r0, r3, #4
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bfbc      	itt	lt
 800aaac:	580b      	ldrlt	r3, [r1, r0]
 800aaae:	18c0      	addlt	r0, r0, r3
 800aab0:	4770      	bx	lr

0800aab2 <powf>:
 800aab2:	b508      	push	{r3, lr}
 800aab4:	ed2d 8b04 	vpush	{d8-d9}
 800aab8:	eeb0 8a60 	vmov.f32	s16, s1
 800aabc:	eeb0 9a40 	vmov.f32	s18, s0
 800aac0:	f000 f880 	bl	800abc4 <__ieee754_powf>
 800aac4:	eeb4 8a48 	vcmp.f32	s16, s16
 800aac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aacc:	eef0 8a40 	vmov.f32	s17, s0
 800aad0:	d63e      	bvs.n	800ab50 <powf+0x9e>
 800aad2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800aad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aada:	d112      	bne.n	800ab02 <powf+0x50>
 800aadc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae4:	d039      	beq.n	800ab5a <powf+0xa8>
 800aae6:	eeb0 0a48 	vmov.f32	s0, s16
 800aaea:	f000 f839 	bl	800ab60 <finitef>
 800aaee:	b378      	cbz	r0, 800ab50 <powf+0x9e>
 800aaf0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf8:	d52a      	bpl.n	800ab50 <powf+0x9e>
 800aafa:	f7ff f8e7 	bl	8009ccc <__errno>
 800aafe:	2322      	movs	r3, #34	; 0x22
 800ab00:	e014      	b.n	800ab2c <powf+0x7a>
 800ab02:	f000 f82d 	bl	800ab60 <finitef>
 800ab06:	b998      	cbnz	r0, 800ab30 <powf+0x7e>
 800ab08:	eeb0 0a49 	vmov.f32	s0, s18
 800ab0c:	f000 f828 	bl	800ab60 <finitef>
 800ab10:	b170      	cbz	r0, 800ab30 <powf+0x7e>
 800ab12:	eeb0 0a48 	vmov.f32	s0, s16
 800ab16:	f000 f823 	bl	800ab60 <finitef>
 800ab1a:	b148      	cbz	r0, 800ab30 <powf+0x7e>
 800ab1c:	eef4 8a68 	vcmp.f32	s17, s17
 800ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab24:	d7e9      	bvc.n	800aafa <powf+0x48>
 800ab26:	f7ff f8d1 	bl	8009ccc <__errno>
 800ab2a:	2321      	movs	r3, #33	; 0x21
 800ab2c:	6003      	str	r3, [r0, #0]
 800ab2e:	e00f      	b.n	800ab50 <powf+0x9e>
 800ab30:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ab34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab38:	d10a      	bne.n	800ab50 <powf+0x9e>
 800ab3a:	eeb0 0a49 	vmov.f32	s0, s18
 800ab3e:	f000 f80f 	bl	800ab60 <finitef>
 800ab42:	b128      	cbz	r0, 800ab50 <powf+0x9e>
 800ab44:	eeb0 0a48 	vmov.f32	s0, s16
 800ab48:	f000 f80a 	bl	800ab60 <finitef>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d1d4      	bne.n	800aafa <powf+0x48>
 800ab50:	eeb0 0a68 	vmov.f32	s0, s17
 800ab54:	ecbd 8b04 	vpop	{d8-d9}
 800ab58:	bd08      	pop	{r3, pc}
 800ab5a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ab5e:	e7f7      	b.n	800ab50 <powf+0x9e>

0800ab60 <finitef>:
 800ab60:	b082      	sub	sp, #8
 800ab62:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ab66:	9801      	ldr	r0, [sp, #4]
 800ab68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ab6c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ab70:	bfac      	ite	ge
 800ab72:	2000      	movge	r0, #0
 800ab74:	2001      	movlt	r0, #1
 800ab76:	b002      	add	sp, #8
 800ab78:	4770      	bx	lr
	...

0800ab7c <roundf>:
 800ab7c:	ee10 0a10 	vmov	r0, s0
 800ab80:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ab84:	3a7f      	subs	r2, #127	; 0x7f
 800ab86:	2a16      	cmp	r2, #22
 800ab88:	dc15      	bgt.n	800abb6 <roundf+0x3a>
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	da08      	bge.n	800aba0 <roundf+0x24>
 800ab8e:	3201      	adds	r2, #1
 800ab90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ab94:	d101      	bne.n	800ab9a <roundf+0x1e>
 800ab96:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ab9a:	ee00 3a10 	vmov	s0, r3
 800ab9e:	4770      	bx	lr
 800aba0:	4907      	ldr	r1, [pc, #28]	; (800abc0 <roundf+0x44>)
 800aba2:	4111      	asrs	r1, r2
 800aba4:	4208      	tst	r0, r1
 800aba6:	d0fa      	beq.n	800ab9e <roundf+0x22>
 800aba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abac:	4113      	asrs	r3, r2
 800abae:	4403      	add	r3, r0
 800abb0:	ea23 0301 	bic.w	r3, r3, r1
 800abb4:	e7f1      	b.n	800ab9a <roundf+0x1e>
 800abb6:	2a80      	cmp	r2, #128	; 0x80
 800abb8:	d1f1      	bne.n	800ab9e <roundf+0x22>
 800abba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800abbe:	4770      	bx	lr
 800abc0:	007fffff 	.word	0x007fffff

0800abc4 <__ieee754_powf>:
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	ee10 4a90 	vmov	r4, s1
 800abcc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800abd0:	ed2d 8b02 	vpush	{d8}
 800abd4:	ee10 7a10 	vmov	r7, s0
 800abd8:	eeb0 8a40 	vmov.f32	s16, s0
 800abdc:	eef0 8a60 	vmov.f32	s17, s1
 800abe0:	d10c      	bne.n	800abfc <__ieee754_powf+0x38>
 800abe2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800abe6:	007f      	lsls	r7, r7, #1
 800abe8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800abec:	f240 8292 	bls.w	800b114 <__ieee754_powf+0x550>
 800abf0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800abf4:	ecbd 8b02 	vpop	{d8}
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abfc:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800ac00:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ac04:	dcf4      	bgt.n	800abf0 <__ieee754_powf+0x2c>
 800ac06:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ac0a:	dd08      	ble.n	800ac1e <__ieee754_powf+0x5a>
 800ac0c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ac10:	d1ee      	bne.n	800abf0 <__ieee754_powf+0x2c>
 800ac12:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800ac16:	0064      	lsls	r4, r4, #1
 800ac18:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800ac1c:	e7e6      	b.n	800abec <__ieee754_powf+0x28>
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	da20      	bge.n	800ac64 <__ieee754_powf+0xa0>
 800ac22:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800ac26:	da2d      	bge.n	800ac84 <__ieee754_powf+0xc0>
 800ac28:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ac2c:	f2c0 827b 	blt.w	800b126 <__ieee754_powf+0x562>
 800ac30:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800ac34:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ac38:	fa48 f603 	asr.w	r6, r8, r3
 800ac3c:	fa06 f303 	lsl.w	r3, r6, r3
 800ac40:	4543      	cmp	r3, r8
 800ac42:	f040 8270 	bne.w	800b126 <__ieee754_powf+0x562>
 800ac46:	f006 0601 	and.w	r6, r6, #1
 800ac4a:	f1c6 0602 	rsb	r6, r6, #2
 800ac4e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ac52:	d11f      	bne.n	800ac94 <__ieee754_powf+0xd0>
 800ac54:	2c00      	cmp	r4, #0
 800ac56:	f280 8263 	bge.w	800b120 <__ieee754_powf+0x55c>
 800ac5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ac5e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ac62:	e7c7      	b.n	800abf4 <__ieee754_powf+0x30>
 800ac64:	2600      	movs	r6, #0
 800ac66:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ac6a:	d1f0      	bne.n	800ac4e <__ieee754_powf+0x8a>
 800ac6c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ac70:	f000 8250 	beq.w	800b114 <__ieee754_powf+0x550>
 800ac74:	dd08      	ble.n	800ac88 <__ieee754_powf+0xc4>
 800ac76:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800af7c <__ieee754_powf+0x3b8>
 800ac7a:	2c00      	cmp	r4, #0
 800ac7c:	bfa8      	it	ge
 800ac7e:	eeb0 0a68 	vmovge.f32	s0, s17
 800ac82:	e7b7      	b.n	800abf4 <__ieee754_powf+0x30>
 800ac84:	2602      	movs	r6, #2
 800ac86:	e7ee      	b.n	800ac66 <__ieee754_powf+0xa2>
 800ac88:	2c00      	cmp	r4, #0
 800ac8a:	f280 8246 	bge.w	800b11a <__ieee754_powf+0x556>
 800ac8e:	eeb1 0a68 	vneg.f32	s0, s17
 800ac92:	e7af      	b.n	800abf4 <__ieee754_powf+0x30>
 800ac94:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ac98:	d102      	bne.n	800aca0 <__ieee754_powf+0xdc>
 800ac9a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ac9e:	e7a9      	b.n	800abf4 <__ieee754_powf+0x30>
 800aca0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800aca4:	eeb0 0a48 	vmov.f32	s0, s16
 800aca8:	d107      	bne.n	800acba <__ieee754_powf+0xf6>
 800acaa:	2f00      	cmp	r7, #0
 800acac:	db05      	blt.n	800acba <__ieee754_powf+0xf6>
 800acae:	ecbd 8b02 	vpop	{d8}
 800acb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	f000 badf 	b.w	800b278 <__ieee754_sqrtf>
 800acba:	f000 fa4d 	bl	800b158 <fabsf>
 800acbe:	b125      	cbz	r5, 800acca <__ieee754_powf+0x106>
 800acc0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800acc4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800acc8:	d115      	bne.n	800acf6 <__ieee754_powf+0x132>
 800acca:	2c00      	cmp	r4, #0
 800accc:	bfbc      	itt	lt
 800acce:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800acd2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800acd6:	2f00      	cmp	r7, #0
 800acd8:	da8c      	bge.n	800abf4 <__ieee754_powf+0x30>
 800acda:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800acde:	4335      	orrs	r5, r6
 800ace0:	d104      	bne.n	800acec <__ieee754_powf+0x128>
 800ace2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ace6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800acea:	e783      	b.n	800abf4 <__ieee754_powf+0x30>
 800acec:	2e01      	cmp	r6, #1
 800acee:	d181      	bne.n	800abf4 <__ieee754_powf+0x30>
 800acf0:	eeb1 0a40 	vneg.f32	s0, s0
 800acf4:	e77e      	b.n	800abf4 <__ieee754_powf+0x30>
 800acf6:	0ff8      	lsrs	r0, r7, #31
 800acf8:	3801      	subs	r0, #1
 800acfa:	ea56 0300 	orrs.w	r3, r6, r0
 800acfe:	d104      	bne.n	800ad0a <__ieee754_powf+0x146>
 800ad00:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ad04:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ad08:	e774      	b.n	800abf4 <__ieee754_powf+0x30>
 800ad0a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ad0e:	dd73      	ble.n	800adf8 <__ieee754_powf+0x234>
 800ad10:	4b9b      	ldr	r3, [pc, #620]	; (800af80 <__ieee754_powf+0x3bc>)
 800ad12:	429d      	cmp	r5, r3
 800ad14:	dc08      	bgt.n	800ad28 <__ieee754_powf+0x164>
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	da0b      	bge.n	800ad32 <__ieee754_powf+0x16e>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	ecbd 8b02 	vpop	{d8}
 800ad20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	f000 baa2 	b.w	800b26c <__math_oflowf>
 800ad28:	4b96      	ldr	r3, [pc, #600]	; (800af84 <__ieee754_powf+0x3c0>)
 800ad2a:	429d      	cmp	r5, r3
 800ad2c:	dd08      	ble.n	800ad40 <__ieee754_powf+0x17c>
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	dcf3      	bgt.n	800ad1a <__ieee754_powf+0x156>
 800ad32:	2000      	movs	r0, #0
 800ad34:	ecbd 8b02 	vpop	{d8}
 800ad38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	f000 ba90 	b.w	800b260 <__math_uflowf>
 800ad40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad44:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad48:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800af88 <__ieee754_powf+0x3c4>
 800ad4c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ad50:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ad54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ad58:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ad5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ad60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad64:	eddf 7a89 	vldr	s15, [pc, #548]	; 800af8c <__ieee754_powf+0x3c8>
 800ad68:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ad6c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800af90 <__ieee754_powf+0x3cc>
 800ad70:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ad74:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800af94 <__ieee754_powf+0x3d0>
 800ad78:	eef0 6a67 	vmov.f32	s13, s15
 800ad7c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ad80:	ee16 3a90 	vmov	r3, s13
 800ad84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ad88:	f023 030f 	bic.w	r3, r3, #15
 800ad8c:	ee06 3a90 	vmov	s13, r3
 800ad90:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ad94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad98:	3e01      	subs	r6, #1
 800ad9a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ad9e:	4306      	orrs	r6, r0
 800ada0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ada4:	f024 040f 	bic.w	r4, r4, #15
 800ada8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800adac:	bf08      	it	eq
 800adae:	eeb0 8a47 	vmoveq.f32	s16, s14
 800adb2:	ee07 4a10 	vmov	s14, r4
 800adb6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800adba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800adc6:	ee07 4a10 	vmov	s14, r4
 800adca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adce:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800add2:	ee17 1a10 	vmov	r1, s14
 800add6:	2900      	cmp	r1, #0
 800add8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800addc:	f340 817c 	ble.w	800b0d8 <__ieee754_powf+0x514>
 800ade0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ade4:	f340 80f8 	ble.w	800afd8 <__ieee754_powf+0x414>
 800ade8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	bf4c      	ite	mi
 800adf2:	2001      	movmi	r0, #1
 800adf4:	2000      	movpl	r0, #0
 800adf6:	e791      	b.n	800ad1c <__ieee754_powf+0x158>
 800adf8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800adfc:	bf01      	itttt	eq
 800adfe:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800af98 <__ieee754_powf+0x3d4>
 800ae02:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ae06:	f06f 0317 	mvneq.w	r3, #23
 800ae0a:	ee17 5a90 	vmoveq	r5, s15
 800ae0e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800ae12:	bf18      	it	ne
 800ae14:	2300      	movne	r3, #0
 800ae16:	3a7f      	subs	r2, #127	; 0x7f
 800ae18:	441a      	add	r2, r3
 800ae1a:	4b60      	ldr	r3, [pc, #384]	; (800af9c <__ieee754_powf+0x3d8>)
 800ae1c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800ae20:	429d      	cmp	r5, r3
 800ae22:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800ae26:	dd06      	ble.n	800ae36 <__ieee754_powf+0x272>
 800ae28:	4b5d      	ldr	r3, [pc, #372]	; (800afa0 <__ieee754_powf+0x3dc>)
 800ae2a:	429d      	cmp	r5, r3
 800ae2c:	f340 80a4 	ble.w	800af78 <__ieee754_powf+0x3b4>
 800ae30:	3201      	adds	r2, #1
 800ae32:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ae36:	2500      	movs	r5, #0
 800ae38:	4b5a      	ldr	r3, [pc, #360]	; (800afa4 <__ieee754_powf+0x3e0>)
 800ae3a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ae3e:	ee07 1a10 	vmov	s14, r1
 800ae42:	edd3 5a00 	vldr	s11, [r3]
 800ae46:	4b58      	ldr	r3, [pc, #352]	; (800afa8 <__ieee754_powf+0x3e4>)
 800ae48:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ae4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae50:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ae54:	1049      	asrs	r1, r1, #1
 800ae56:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ae5a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ae5e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800ae62:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ae66:	ee07 1a90 	vmov	s15, r1
 800ae6a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ae6e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ae72:	ee15 7a10 	vmov	r7, s10
 800ae76:	401f      	ands	r7, r3
 800ae78:	ee06 7a90 	vmov	s13, r7
 800ae7c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ae80:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ae84:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ae88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ae8c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800afac <__ieee754_powf+0x3e8>
 800ae90:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800afb0 <__ieee754_powf+0x3ec>
 800ae94:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ae98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800afb4 <__ieee754_powf+0x3f0>
 800ae9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800aea0:	eddf 5a39 	vldr	s11, [pc, #228]	; 800af88 <__ieee754_powf+0x3c4>
 800aea4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800aea8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800afb8 <__ieee754_powf+0x3f4>
 800aeac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800aeb0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800afbc <__ieee754_powf+0x3f8>
 800aeb4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800aeb8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800aebc:	ee35 7a26 	vadd.f32	s14, s10, s13
 800aec0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800aec4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aec8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800aecc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800aed0:	eef0 5a67 	vmov.f32	s11, s15
 800aed4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800aed8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800aedc:	ee15 1a90 	vmov	r1, s11
 800aee0:	4019      	ands	r1, r3
 800aee2:	ee05 1a90 	vmov	s11, r1
 800aee6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800aeea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800aeee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800aef6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aefa:	eeb0 6a67 	vmov.f32	s12, s15
 800aefe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800af02:	ee16 1a10 	vmov	r1, s12
 800af06:	4019      	ands	r1, r3
 800af08:	ee07 1a10 	vmov	s14, r1
 800af0c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800af10:	ee06 1a10 	vmov	s12, r1
 800af14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af18:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800afc0 <__ieee754_powf+0x3fc>
 800af1c:	4929      	ldr	r1, [pc, #164]	; (800afc4 <__ieee754_powf+0x400>)
 800af1e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800afc8 <__ieee754_powf+0x404>
 800af22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af26:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800afcc <__ieee754_powf+0x408>
 800af2a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800af2e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800af32:	ed91 7a00 	vldr	s14, [r1]
 800af36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af3a:	ee07 2a10 	vmov	s14, r2
 800af3e:	eef0 6a67 	vmov.f32	s13, s15
 800af42:	4a23      	ldr	r2, [pc, #140]	; (800afd0 <__ieee754_powf+0x40c>)
 800af44:	eee6 6a25 	vfma.f32	s13, s12, s11
 800af48:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800af4c:	ed92 5a00 	vldr	s10, [r2]
 800af50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af54:	ee76 6a85 	vadd.f32	s13, s13, s10
 800af58:	ee76 6a87 	vadd.f32	s13, s13, s14
 800af5c:	ee16 2a90 	vmov	r2, s13
 800af60:	4013      	ands	r3, r2
 800af62:	ee06 3a90 	vmov	s13, r3
 800af66:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800af6a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800af6e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800af72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af76:	e70f      	b.n	800ad98 <__ieee754_powf+0x1d4>
 800af78:	2501      	movs	r5, #1
 800af7a:	e75d      	b.n	800ae38 <__ieee754_powf+0x274>
 800af7c:	00000000 	.word	0x00000000
 800af80:	3f7ffff3 	.word	0x3f7ffff3
 800af84:	3f800007 	.word	0x3f800007
 800af88:	3eaaaaab 	.word	0x3eaaaaab
 800af8c:	3fb8aa3b 	.word	0x3fb8aa3b
 800af90:	36eca570 	.word	0x36eca570
 800af94:	3fb8aa00 	.word	0x3fb8aa00
 800af98:	4b800000 	.word	0x4b800000
 800af9c:	001cc471 	.word	0x001cc471
 800afa0:	005db3d6 	.word	0x005db3d6
 800afa4:	0800b64c 	.word	0x0800b64c
 800afa8:	fffff000 	.word	0xfffff000
 800afac:	3e6c3255 	.word	0x3e6c3255
 800afb0:	3e53f142 	.word	0x3e53f142
 800afb4:	3e8ba305 	.word	0x3e8ba305
 800afb8:	3edb6db7 	.word	0x3edb6db7
 800afbc:	3f19999a 	.word	0x3f19999a
 800afc0:	3f76384f 	.word	0x3f76384f
 800afc4:	0800b65c 	.word	0x0800b65c
 800afc8:	3f763800 	.word	0x3f763800
 800afcc:	369dc3a0 	.word	0x369dc3a0
 800afd0:	0800b654 	.word	0x0800b654
 800afd4:	3338aa3c 	.word	0x3338aa3c
 800afd8:	f040 8093 	bne.w	800b102 <__ieee754_powf+0x53e>
 800afdc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800afd4 <__ieee754_powf+0x410>
 800afe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800afe4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800afe8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff0:	f73f aefa 	bgt.w	800ade8 <__ieee754_powf+0x224>
 800aff4:	15db      	asrs	r3, r3, #23
 800aff6:	3b7e      	subs	r3, #126	; 0x7e
 800aff8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800affc:	4118      	asrs	r0, r3
 800affe:	4408      	add	r0, r1
 800b000:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b004:	4a49      	ldr	r2, [pc, #292]	; (800b12c <__ieee754_powf+0x568>)
 800b006:	3b7f      	subs	r3, #127	; 0x7f
 800b008:	411a      	asrs	r2, r3
 800b00a:	4002      	ands	r2, r0
 800b00c:	ee07 2a10 	vmov	s14, r2
 800b010:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b014:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b018:	f1c3 0317 	rsb	r3, r3, #23
 800b01c:	4118      	asrs	r0, r3
 800b01e:	2900      	cmp	r1, #0
 800b020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b024:	bfb8      	it	lt
 800b026:	4240      	neglt	r0, r0
 800b028:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b02c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b130 <__ieee754_powf+0x56c>
 800b030:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800b134 <__ieee754_powf+0x570>
 800b034:	ee17 3a10 	vmov	r3, s14
 800b038:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b03c:	f023 030f 	bic.w	r3, r3, #15
 800b040:	ee07 3a10 	vmov	s14, r3
 800b044:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b048:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b04c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b050:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b138 <__ieee754_powf+0x574>
 800b054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b058:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800b05c:	eef0 6a67 	vmov.f32	s13, s15
 800b060:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b064:	eef0 5a66 	vmov.f32	s11, s13
 800b068:	eee7 5a46 	vfms.f32	s11, s14, s12
 800b06c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b070:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b074:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b13c <__ieee754_powf+0x578>
 800b078:	eddf 5a31 	vldr	s11, [pc, #196]	; 800b140 <__ieee754_powf+0x57c>
 800b07c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b080:	eddf 5a30 	vldr	s11, [pc, #192]	; 800b144 <__ieee754_powf+0x580>
 800b084:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b088:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b148 <__ieee754_powf+0x584>
 800b08c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b090:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b14c <__ieee754_powf+0x588>
 800b094:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b098:	eeb0 6a66 	vmov.f32	s12, s13
 800b09c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800b0a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0a4:	ee66 5a86 	vmul.f32	s11, s13, s12
 800b0a8:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b0ac:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800b0b0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800b0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b0bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0c0:	ee10 3a10 	vmov	r3, s0
 800b0c4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b0c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0cc:	da1f      	bge.n	800b10e <__ieee754_powf+0x54a>
 800b0ce:	f000 f84b 	bl	800b168 <scalbnf>
 800b0d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b0d6:	e58d      	b.n	800abf4 <__ieee754_powf+0x30>
 800b0d8:	4a1d      	ldr	r2, [pc, #116]	; (800b150 <__ieee754_powf+0x58c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	dd07      	ble.n	800b0ee <__ieee754_powf+0x52a>
 800b0de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e6:	bf4c      	ite	mi
 800b0e8:	2001      	movmi	r0, #1
 800b0ea:	2000      	movpl	r0, #0
 800b0ec:	e622      	b.n	800ad34 <__ieee754_powf+0x170>
 800b0ee:	d108      	bne.n	800b102 <__ieee754_powf+0x53e>
 800b0f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0f4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fc:	f6ff af7a 	blt.w	800aff4 <__ieee754_powf+0x430>
 800b100:	e7ed      	b.n	800b0de <__ieee754_powf+0x51a>
 800b102:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b106:	f73f af75 	bgt.w	800aff4 <__ieee754_powf+0x430>
 800b10a:	2000      	movs	r0, #0
 800b10c:	e78c      	b.n	800b028 <__ieee754_powf+0x464>
 800b10e:	ee00 3a10 	vmov	s0, r3
 800b112:	e7de      	b.n	800b0d2 <__ieee754_powf+0x50e>
 800b114:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b118:	e56c      	b.n	800abf4 <__ieee754_powf+0x30>
 800b11a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b154 <__ieee754_powf+0x590>
 800b11e:	e569      	b.n	800abf4 <__ieee754_powf+0x30>
 800b120:	eeb0 0a48 	vmov.f32	s0, s16
 800b124:	e566      	b.n	800abf4 <__ieee754_powf+0x30>
 800b126:	2600      	movs	r6, #0
 800b128:	e591      	b.n	800ac4e <__ieee754_powf+0x8a>
 800b12a:	bf00      	nop
 800b12c:	ff800000 	.word	0xff800000
 800b130:	3f317218 	.word	0x3f317218
 800b134:	3f317200 	.word	0x3f317200
 800b138:	35bfbe8c 	.word	0x35bfbe8c
 800b13c:	b5ddea0e 	.word	0xb5ddea0e
 800b140:	3331bb4c 	.word	0x3331bb4c
 800b144:	388ab355 	.word	0x388ab355
 800b148:	bb360b61 	.word	0xbb360b61
 800b14c:	3e2aaaab 	.word	0x3e2aaaab
 800b150:	43160000 	.word	0x43160000
 800b154:	00000000 	.word	0x00000000

0800b158 <fabsf>:
 800b158:	ee10 3a10 	vmov	r3, s0
 800b15c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b160:	ee00 3a10 	vmov	s0, r3
 800b164:	4770      	bx	lr
	...

0800b168 <scalbnf>:
 800b168:	ee10 3a10 	vmov	r3, s0
 800b16c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b170:	d02b      	beq.n	800b1ca <scalbnf+0x62>
 800b172:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b176:	d302      	bcc.n	800b17e <scalbnf+0x16>
 800b178:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b17c:	4770      	bx	lr
 800b17e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b182:	d123      	bne.n	800b1cc <scalbnf+0x64>
 800b184:	4b24      	ldr	r3, [pc, #144]	; (800b218 <scalbnf+0xb0>)
 800b186:	eddf 7a25 	vldr	s15, [pc, #148]	; 800b21c <scalbnf+0xb4>
 800b18a:	4298      	cmp	r0, r3
 800b18c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b190:	db17      	blt.n	800b1c2 <scalbnf+0x5a>
 800b192:	ee10 3a10 	vmov	r3, s0
 800b196:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b19a:	3a19      	subs	r2, #25
 800b19c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b1a0:	4288      	cmp	r0, r1
 800b1a2:	dd15      	ble.n	800b1d0 <scalbnf+0x68>
 800b1a4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b220 <scalbnf+0xb8>
 800b1a8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b224 <scalbnf+0xbc>
 800b1ac:	ee10 3a10 	vmov	r3, s0
 800b1b0:	eeb0 7a67 	vmov.f32	s14, s15
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	bfb8      	it	lt
 800b1b8:	eef0 7a66 	vmovlt.f32	s15, s13
 800b1bc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b1c0:	4770      	bx	lr
 800b1c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800b228 <scalbnf+0xc0>
 800b1c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b1ca:	4770      	bx	lr
 800b1cc:	0dd2      	lsrs	r2, r2, #23
 800b1ce:	e7e5      	b.n	800b19c <scalbnf+0x34>
 800b1d0:	4410      	add	r0, r2
 800b1d2:	28fe      	cmp	r0, #254	; 0xfe
 800b1d4:	dce6      	bgt.n	800b1a4 <scalbnf+0x3c>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	dd06      	ble.n	800b1e8 <scalbnf+0x80>
 800b1da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b1de:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b1e2:	ee00 3a10 	vmov	s0, r3
 800b1e6:	4770      	bx	lr
 800b1e8:	f110 0f16 	cmn.w	r0, #22
 800b1ec:	da09      	bge.n	800b202 <scalbnf+0x9a>
 800b1ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b228 <scalbnf+0xc0>
 800b1f2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800b22c <scalbnf+0xc4>
 800b1f6:	ee10 3a10 	vmov	r3, s0
 800b1fa:	eeb0 7a67 	vmov.f32	s14, s15
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	e7d9      	b.n	800b1b6 <scalbnf+0x4e>
 800b202:	3019      	adds	r0, #25
 800b204:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b208:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b20c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800b230 <scalbnf+0xc8>
 800b210:	ee07 3a90 	vmov	s15, r3
 800b214:	e7d7      	b.n	800b1c6 <scalbnf+0x5e>
 800b216:	bf00      	nop
 800b218:	ffff3cb0 	.word	0xffff3cb0
 800b21c:	4c000000 	.word	0x4c000000
 800b220:	7149f2ca 	.word	0x7149f2ca
 800b224:	f149f2ca 	.word	0xf149f2ca
 800b228:	0da24260 	.word	0x0da24260
 800b22c:	8da24260 	.word	0x8da24260
 800b230:	33000000 	.word	0x33000000

0800b234 <with_errnof>:
 800b234:	b513      	push	{r0, r1, r4, lr}
 800b236:	4604      	mov	r4, r0
 800b238:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b23c:	f7fe fd46 	bl	8009ccc <__errno>
 800b240:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b244:	6004      	str	r4, [r0, #0]
 800b246:	b002      	add	sp, #8
 800b248:	bd10      	pop	{r4, pc}

0800b24a <xflowf>:
 800b24a:	b130      	cbz	r0, 800b25a <xflowf+0x10>
 800b24c:	eef1 7a40 	vneg.f32	s15, s0
 800b250:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b254:	2022      	movs	r0, #34	; 0x22
 800b256:	f7ff bfed 	b.w	800b234 <with_errnof>
 800b25a:	eef0 7a40 	vmov.f32	s15, s0
 800b25e:	e7f7      	b.n	800b250 <xflowf+0x6>

0800b260 <__math_uflowf>:
 800b260:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b268 <__math_uflowf+0x8>
 800b264:	f7ff bff1 	b.w	800b24a <xflowf>
 800b268:	10000000 	.word	0x10000000

0800b26c <__math_oflowf>:
 800b26c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b274 <__math_oflowf+0x8>
 800b270:	f7ff bfeb 	b.w	800b24a <xflowf>
 800b274:	70000000 	.word	0x70000000

0800b278 <__ieee754_sqrtf>:
 800b278:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b27c:	4770      	bx	lr
	...

0800b280 <_init>:
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	bf00      	nop
 800b284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b286:	bc08      	pop	{r3}
 800b288:	469e      	mov	lr, r3
 800b28a:	4770      	bx	lr

0800b28c <_fini>:
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28e:	bf00      	nop
 800b290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b292:	bc08      	pop	{r3}
 800b294:	469e      	mov	lr, r3
 800b296:	4770      	bx	lr
