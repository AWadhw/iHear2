
N-Channel-Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beac  0800beac  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beb4  0800beb4  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beb4  0800beb4  0001beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb8  0800beb8  0001beb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0800bebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200004bc  0800c378  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e8c  0800c378  00020e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119a6  00000000  00000000  000205ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003311  00000000  00000000  00031f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00035268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1c  00000000  00000000  00036250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a81  00000000  00000000  00036e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166f4  00000000  00000000  000508ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d792  00000000  00000000  00066fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b04  00000000  00000000  000f4774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f9278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004bc 	.word	0x200004bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba38 	.word	0x0800ba38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c0 	.word	0x200004c0
 80001dc:	0800ba38 	.word	0x0800ba38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <sd_card_init>:
static uint8_t wav_file_header[44]={0x52, 0x49, 0x46, 0x46, 0xa4, 0xa9, 0x03, 0x00, 0x57 ,0x41, 0x56, 0x45, 0x66, 0x6d,
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0xbb, 0x80, 0x00, 0x00, 0xee, 0x02, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x80, 0xa9, 0x03, 0x00};

void sd_card_init()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//	mounting an sd card
	fres = f_mount(&FatFs, "", 1);
 8000590:	2201      	movs	r2, #1
 8000592:	4913      	ldr	r1, [pc, #76]	; (80005e0 <sd_card_init+0x54>)
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <sd_card_init+0x58>)
 8000596:	f006 ff0f 	bl	80073b8 <f_mount>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <sd_card_init+0x5c>)
 80005a0:	701a      	strb	r2, [r3, #0]
	if(fres != 0)
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <sd_card_init+0x5c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d014      	beq.n	80005d4 <sd_card_init+0x48>
	{
		myprintf("error in mounting an sd card: %d \n", fres);
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <sd_card_init+0x5c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <sd_card_init+0x60>)
 80005b2:	f000 f9b7 	bl	8000924 <myprintf>
		while (fres != FR_OK) {
 80005b6:	e008      	b.n	80005ca <sd_card_init+0x3e>
			fres = f_mount(&FatFs, "", 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <sd_card_init+0x54>)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <sd_card_init+0x58>)
 80005be:	f006 fefb 	bl	80073b8 <f_mount>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <sd_card_init+0x5c>)
 80005c8:	701a      	strb	r2, [r3, #0]
		while (fres != FR_OK) {
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <sd_card_init+0x5c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f2      	bne.n	80005b8 <sd_card_init+0x2c>
	}
	else
	{
		myprintf("succeded in mounting an sd card \n");
	}
}
 80005d2:	e002      	b.n	80005da <sd_card_init+0x4e>
		myprintf("succeded in mounting an sd card \n");
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <sd_card_init+0x64>)
 80005d6:	f000 f9a5 	bl	8000924 <myprintf>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800ba50 	.word	0x0800ba50
 80005e4:	200004dc 	.word	0x200004dc
 80005e8:	200004d9 	.word	0x200004d9
 80005ec:	0800ba54 	.word	0x0800ba54
 80005f0:	0800ba78 	.word	0x0800ba78

080005f4 <start_recording>:

void start_recording(uint32_t frequency)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 1; //TODO: check if 10
	int file_number_digits = file_counter;
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <start_recording+0x140>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <start_recording+0x144>)
 800060e:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b48      	ldr	r3, [pc, #288]	; (8000738 <start_recording+0x144>)
 8000618:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b45      	ldr	r3, [pc, #276]	; (8000738 <start_recording+0x144>)
 8000622:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	0e1b      	lsrs	r3, r3, #24
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <start_recording+0x144>)
 800062c:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <start_recording+0x144>)
 8000634:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <start_recording+0x144>)
 800063e:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <start_recording+0x144>)
 8000648:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	0e1b      	lsrs	r3, r3, #24
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b39      	ldr	r3, [pc, #228]	; (8000738 <start_recording+0x144>)
 8000652:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48; //48 is digit 0
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	4b39      	ldr	r3, [pc, #228]	; (800073c <start_recording+0x148>)
 8000658:	fb83 1302 	smull	r1, r3, r3, r2
 800065c:	1099      	asrs	r1, r3, #2
 800065e:	17d3      	asrs	r3, r2, #31
 8000660:	1ac9      	subs	r1, r1, r3
 8000662:	460b      	mov	r3, r1
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	1ad1      	subs	r1, r2, r3
 800066c:	b2cb      	uxtb	r3, r1
 800066e:	3330      	adds	r3, #48	; 0x30
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <start_recording+0x14c>)
 8000674:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <start_recording+0x148>)
 800067a:	fb82 1203 	smull	r1, r2, r2, r3
 800067e:	1092      	asrs	r2, r2, #2
 8000680:	17db      	asrs	r3, r3, #31
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4b2c      	ldr	r3, [pc, #176]	; (800073c <start_recording+0x148>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1099      	asrs	r1, r3, #2
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1ac9      	subs	r1, r1, r3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad1      	subs	r1, r2, r3
 800069e:	b2cb      	uxtb	r3, r1
 80006a0:	3330      	adds	r3, #48	; 0x30
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <start_recording+0x14c>)
 80006a6:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4a24      	ldr	r2, [pc, #144]	; (800073c <start_recording+0x148>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1092      	asrs	r2, r2, #2
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <start_recording+0x148>)
 80006bc:	fb83 1302 	smull	r1, r3, r3, r2
 80006c0:	1099      	asrs	r1, r3, #2
 80006c2:	17d3      	asrs	r3, r2, #31
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	1ad1      	subs	r1, r2, r3
 80006d0:	b2cb      	uxtb	r3, r1
 80006d2:	3330      	adds	r3, #48	; 0x30
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <start_recording+0x14c>)
 80006d8:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 80006da:	4919      	ldr	r1, [pc, #100]	; (8000740 <start_recording+0x14c>)
 80006dc:	4819      	ldr	r0, [pc, #100]	; (8000744 <start_recording+0x150>)
 80006de:	f009 fd03 	bl	800a0e8 <iprintf>
	myprintf("file name %s \n", file_name);
 80006e2:	4917      	ldr	r1, [pc, #92]	; (8000740 <start_recording+0x14c>)
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <start_recording+0x150>)
 80006e6:	f000 f91d 	bl	8000924 <myprintf>
	file_counter++;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <start_recording+0x140>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <start_recording+0x140>)
 80006f4:	701a      	strb	r2, [r3, #0]

	// creating a file
	fres = f_open(&fil ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 80006f6:	220a      	movs	r2, #10
 80006f8:	4911      	ldr	r1, [pc, #68]	; (8000740 <start_recording+0x14c>)
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <start_recording+0x154>)
 80006fc:	f006 fea2 	bl	8007444 <f_open>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <start_recording+0x158>)
 8000706:	701a      	strb	r2, [r3, #0]
	if(fres != 0)
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <start_recording+0x158>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d006      	beq.n	800071e <start_recording+0x12a>
	{
		myprintf("error in creating a file: %d \n", fres);
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <start_recording+0x158>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <start_recording+0x15c>)
 8000718:	f000 f904 	bl	8000924 <myprintf>
 800071c:	e002      	b.n	8000724 <start_recording+0x130>
	}
	else
	{
		myprintf("succeeded in opening a file \n");
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <start_recording+0x160>)
 8000720:	f000 f900 	bl	8000924 <myprintf>
	}
	wav_file_size = 0;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <start_recording+0x164>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000042c 	.word	0x2000042c
 8000738:	20000400 	.word	0x20000400
 800073c:	66666667 	.word	0x66666667
 8000740:	20000430 	.word	0x20000430
 8000744:	0800ba9c 	.word	0x0800ba9c
 8000748:	2000070c 	.word	0x2000070c
 800074c:	200004d9 	.word	0x200004d9
 8000750:	0800baac 	.word	0x0800baac
 8000754:	0800bacc 	.word	0x0800bacc
 8000758:	2000093c 	.word	0x2000093c

0800075c <dump_audio_content>:

void dump_audio_content(uint8_t *data, uint16_t data_size){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
	 //some variables for FatFs

	uint32_t temp_number;
	printf("w\n");
 8000768:	481c      	ldr	r0, [pc, #112]	; (80007dc <dump_audio_content+0x80>)
 800076a:	f009 fd23 	bl	800a1b4 <puts>
	if(first_access == 0) {
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <dump_audio_content+0x84>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d113      	bne.n	800079e <dump_audio_content+0x42>
		for(int i = 0; i < 44; i++){
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e00a      	b.n	8000792 <dump_audio_content+0x36>
			*(data + i) = wav_file_header[i];
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4918      	ldr	r1, [pc, #96]	; (80007e4 <dump_audio_content+0x88>)
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	440a      	add	r2, r1
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++){
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b2b      	cmp	r3, #43	; 0x2b
 8000796:	ddf1      	ble.n	800077c <dump_audio_content+0x20>
		}
		first_access = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <dump_audio_content+0x84>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
//	if(fres == FR_OK) {
//	myprintf("I was able to open 'audio.txt' for writing\r\n");
//	} else {
//	myprintf("f_open error In dump_audio :( (%i)\r\n", fres);
//	}
	fres = f_write(&fil,(void *)data, data_size,(UINT*)&temp_number);
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <dump_audio_content+0x8c>)
 80007a8:	f007 f80a 	bl	80077c0 <f_write>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <dump_audio_content+0x90>)
 80007b2:	701a      	strb	r2, [r3, #0]
//	for (int i = 0; i < 20; i++) {
//		myprintf("My data is: %x", (*data));
//	}
	if(fres != FR_OK) {
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <dump_audio_content+0x90>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <dump_audio_content+0x6c>
	//myprintf("Wrote %i bytes to '.lav'!\r\n", temp_number);
	myprintf("f_write error (%i)\r\n", fres);
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <dump_audio_content+0x90>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <dump_audio_content+0x94>)
 80007c4:	f000 f8ae 	bl	8000924 <myprintf>
	}

	wav_file_size += data_size;
 80007c8:	887a      	ldrh	r2, [r7, #2]
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <dump_audio_content+0x98>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <dump_audio_content+0x98>)
 80007d2:	6013      	str	r3, [r2, #0]

	//f_close(&fil);
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	0800baec 	.word	0x0800baec
 80007e0:	20000940 	.word	0x20000940
 80007e4:	20000400 	.word	0x20000400
 80007e8:	2000070c 	.word	0x2000070c
 80007ec:	200004d9 	.word	0x200004d9
 80007f0:	0800baf0 	.word	0x0800baf0
 80007f4:	2000093c 	.word	0x2000093c

080007f8 <stop_recording>:

void stop_recording() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	uint16_t temp_number;
		// updating data size sector
	wav_file_size -= 8;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <stop_recording+0xc0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3b08      	subs	r3, #8
 8000804:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <stop_recording+0xc0>)
 8000806:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <stop_recording+0xc0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <stop_recording+0xc4>)
 8000810:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <stop_recording+0xc0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <stop_recording+0xc4>)
 800081c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <stop_recording+0xc0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <stop_recording+0xc4>)
 8000828:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <stop_recording+0xc0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0e1b      	lsrs	r3, r3, #24
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <stop_recording+0xc4>)
 8000834:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <stop_recording+0xc0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b24      	subs	r3, #36	; 0x24
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <stop_recording+0xc0>)
 800083e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <stop_recording+0xc0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <stop_recording+0xc4>)
 8000848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <stop_recording+0xc0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <stop_recording+0xc4>)
 8000856:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <stop_recording+0xc0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <stop_recording+0xc4>)
 8000864:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <stop_recording+0xc0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0e1b      	lsrs	r3, r3, #24
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <stop_recording+0xc4>)
 8000872:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&fil, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <stop_recording+0xc8>)
 800087a:	f007 f9be 	bl	8007bfa <f_lseek>
	f_write(&fil,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	222c      	movs	r2, #44	; 0x2c
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <stop_recording+0xc4>)
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <stop_recording+0xc8>)
 8000886:	f006 ff9b 	bl	80077c0 <f_write>
	if(fres != FR_OK)
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <stop_recording+0xcc>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d005      	beq.n	800089e <stop_recording+0xa6>
	{
		printf("error in updating the first sector: %d \n", fres);
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <stop_recording+0xcc>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <stop_recording+0xd0>)
 800089a:	f009 fc25 	bl	800a0e8 <iprintf>
//		while(1);
	}

	f_close(&fil);
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <stop_recording+0xc8>)
 80008a0:	f007 f981 	bl	8007ba6 <f_close>
	first_access = 0;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <stop_recording+0xd4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	myprintf("Closing file now....");
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <stop_recording+0xd8>)
 80008ac:	f000 f83a 	bl	8000924 <myprintf>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000093c 	.word	0x2000093c
 80008bc:	20000400 	.word	0x20000400
 80008c0:	2000070c 	.word	0x2000070c
 80008c4:	200004d9 	.word	0x200004d9
 80008c8:	0800bb08 	.word	0x0800bb08
 80008cc:	20000940 	.word	0x20000940
 80008d0:	0800bb34 	.word	0x0800bb34

080008d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d013      	beq.n	8000914 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008fc:	e000      	b.n	8000900 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000900:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800090a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000924:	b40f      	push	{r0, r1, r2, r3}
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <myprintf+0x44>)
 800093c:	f009 fcb0 	bl	800a2a0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <myprintf+0x44>)
 8000942:	f7ff fc4d 	bl	80001e0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	b29a      	uxth	r2, r3
 800094e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000952:	4905      	ldr	r1, [pc, #20]	; (8000968 <myprintf+0x44>)
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <myprintf+0x48>)
 8000956:	f003 ff34 	bl	80047c2 <HAL_UART_Transmit>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000964:	b004      	add	sp, #16
 8000966:	4770      	bx	lr
 8000968:	20000b9c 	.word	0x20000b9c
 800096c:	20000a4c 	.word	0x20000a4c

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fd85 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f8ab 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f9db 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000982:	f000 f9b9 	bl	8000cf8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000986:	f000 f98d 	bl	8000ca4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 800098a:	f000 f927 	bl	8000bdc <MX_I2S2_Init>
  MX_CRC_Init();
 800098e:	f000 f909 	bl	8000ba4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000992:	f007 fb97 	bl	80080c4 <MX_PDM2PCM_Init>
  MX_SPI5_Init();
 8000996:	f000 f94f 	bl	8000c38 <MX_SPI5_Init>
  MX_FATFS_Init();
 800099a:	f004 fa87 	bl	8004eac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2); //size in bytes so we divide by 2
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <main+0x128>)
 80009a0:	f001 fee0 	bl	8002764 <HAL_I2S_DMAStop>
  //HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)dataIn_PDM, sizeof(dataIn_PDM)/2);
  HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a8:	f000 fdde 	bl	8001568 <HAL_Delay>
  /*BELOW ADDED FOR SD_CARD*/
  sd_card_init();
 80009ac:	f7ff fdee 	bl	800058c <sd_card_init>
  //PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
  //dump_audio_content((uint8_t*)processedData, WAV_WRITE_SAMPLE_COUNT);
  //sd_demo();
  /* USER CODE END 2 */
  start_stop_recording = 0;
 80009b0:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <main+0x12c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
  button_flag = 0;
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <main+0x130>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
  while (1)
  {
//	  printf("Hello World \n");
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_Delay(1000);
	  if(button_flag)
 80009bc:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <main+0x130>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d043      	beq.n	8000a4e <main+0xde>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009c6:	2120      	movs	r1, #32
 80009c8:	4836      	ldr	r0, [pc, #216]	; (8000aa4 <main+0x134>)
 80009ca:	f001 fc9c 	bl	8002306 <HAL_GPIO_TogglePin>
		  if(start_stop_recording) { //1
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <main+0x12c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d014      	beq.n	8000a02 <main+0x92>
			  HAL_I2S_DMAStop(&hi2s2);
 80009d8:	482f      	ldr	r0, [pc, #188]	; (8000a98 <main+0x128>)
 80009da:	f001 fec3 	bl	8002764 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <main+0x12c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 80009e4:	f7ff ff08 	bl	80007f8 <stop_recording>
			  half_i2s = 0;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <main+0x138>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <main+0x13c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
			  printf("stop recording \n");
 80009f4:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <main+0x140>)
 80009f6:	f009 fbdd 	bl	800a1b4 <puts>
			  myprintf("Stop recording \n");
 80009fa:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <main+0x144>)
 80009fc:	f7ff ff92 	bl	8000924 <myprintf>
 8000a00:	e022      	b.n	8000a48 <main+0xd8>
		  }
		  else {
			  start_stop_recording = 1;
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <main+0x12c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_48K);
 8000a08:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000a0c:	f7ff fdf2 	bl	80005f4 <start_recording>
			  printf("start recording \n");
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <main+0x148>)
 8000a12:	f009 fbcf 	bl	800a1b4 <puts>
			  myprintf("Start recording \n");
 8000a16:	4829      	ldr	r0, [pc, #164]	; (8000abc <main+0x14c>)
 8000a18:	f7ff ff84 	bl	8000924 <myprintf>
			  myprintf("start_recording %d and %d\n", half_i2s, full_i2s);
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <main+0x138>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <main+0x13c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <main+0x150>)
 8000a2e:	f7ff ff79 	bl	8000924 <myprintf>
			  uint32_t myArrSize = sizeof(dataIn_PDM);
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	607b      	str	r3, [r7, #4]
			  myprintf("The size of my array is: %i", myArrSize);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <main+0x154>)
 8000a3a:	f7ff ff73 	bl	8000924 <myprintf>
			  //HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)dataIn_PDM, sizeof(dataIn_PDM)/2);
			  HAL_I2S_Receive_DMA(&hi2s2, &dataIn_PDM[0], sizeof(dataIn_PDM)/2);
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	4921      	ldr	r1, [pc, #132]	; (8000ac8 <main+0x158>)
 8000a42:	4815      	ldr	r0, [pc, #84]	; (8000a98 <main+0x128>)
 8000a44:	f001 fdd2 	bl	80025ec <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <main+0x130>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
	  }
	  //myprintf("PDM Data is: %x", dataIn_PDM[0]);
	  if(start_stop_recording == 1 && half_i2s == 1) {
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <main+0x12c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10b      	bne.n	8000a70 <main+0x100>
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <main+0x138>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d106      	bne.n	8000a70 <main+0x100>
//		  PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
//		  myData = processedData[0];
		  dump_audio_content((uint8_t*)processedData, WAV_WRITE_SAMPLE_COUNT);
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	4819      	ldr	r0, [pc, #100]	; (8000acc <main+0x15c>)
 8000a66:	f7ff fe79 	bl	800075c <dump_audio_content>
		  half_i2s = 0;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <main+0x138>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s == 1) {
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <main+0x12c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d1a0      	bne.n	80009bc <main+0x4c>
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <main+0x13c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d19b      	bne.n	80009bc <main+0x4c>
//		  PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
//		  myData = processedData[0];
		  dump_audio_content((uint8_t*)processedData + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <main+0x160>)
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe67 	bl	800075c <dump_audio_content>
		  full_i2s = 0;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <main+0x13c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	  if(button_flag)
 8000a94:	e792      	b.n	80009bc <main+0x4c>
 8000a96:	bf00      	nop
 8000a98:	2000094c 	.word	0x2000094c
 8000a9c:	20000b97 	.word	0x20000b97
 8000aa0:	20000b96 	.word	0x20000b96
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	20000b94 	.word	0x20000b94
 8000aac:	20000b95 	.word	0x20000b95
 8000ab0:	0800bcb0 	.word	0x0800bcb0
 8000ab4:	0800bcc0 	.word	0x0800bcc0
 8000ab8:	0800bcd4 	.word	0x0800bcd4
 8000abc:	0800bce8 	.word	0x0800bce8
 8000ac0:	0800bcfc 	.word	0x0800bcfc
 8000ac4:	0800bd18 	.word	0x0800bd18
 8000ac8:	20000a90 	.word	0x20000a90
 8000acc:	20000b14 	.word	0x20000b14
 8000ad0:	20000b54 	.word	0x20000b54

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2230      	movs	r2, #48	; 0x30
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f009 fc80 	bl	800a3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <SystemClock_Config+0xc8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <SystemClock_Config+0xc8>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <SystemClock_Config+0xc8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <SystemClock_Config+0xcc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <SystemClock_Config+0xcc>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <SystemClock_Config+0xcc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b48:	2360      	movs	r3, #96	; 0x60
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 fbcb 	bl	80032f4 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b64:	f000 f9d4 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2103      	movs	r1, #3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fe2d 	bl	80037e4 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b90:	f000 f9be 	bl	8000f10 <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3750      	adds	r7, #80	; 0x50
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_CRC_Init+0x30>)
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <MX_CRC_Init+0x34>)
 8000bac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <MX_CRC_Init+0x30>)
 8000bb0:	f000 fe0f 	bl	80017d2 <HAL_CRC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000bba:	f000 f9a9 	bl	8000f10 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <MX_CRC_Init+0x30>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <MX_CRC_Init+0x30>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 0201 	orr.w	r2, r2, #1
 8000bcc:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000944 	.word	0x20000944
 8000bd8:	40023000 	.word	0x40023000

08000bdc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <MX_I2S2_Init+0x58>)
 8000be4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000be8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000c02:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c06:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_I2S2_Init+0x54>)
 8000c1c:	f001 fba6 	bl	800236c <HAL_I2S_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c26:	f000 f973 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000094c 	.word	0x2000094c
 8000c34:	40003800 	.word	0x40003800

08000c38 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <MX_SPI5_Init+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c68:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c6c:	2230      	movs	r2, #48	; 0x30
 8000c6e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c84:	220a      	movs	r2, #10
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_SPI5_Init+0x64>)
 8000c8a:	f003 f91b 	bl	8003ec4 <HAL_SPI_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c94:	f000 f93c 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200009f4 	.word	0x200009f4
 8000ca0:	40015000 	.word	0x40015000

08000ca4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MX_USART2_UART_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f003 fd24 	bl	8004728 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f000 f913 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000a4c 	.word	0x20000a4c
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DMA_Init+0x3c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <MX_DMA_Init+0x3c>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DMA_Init+0x3c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200e      	movs	r0, #14
 8000d20:	f000 fd21 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d24:	200e      	movs	r0, #14
 8000d26:	f000 fd3a 	bl	800179e <HAL_NVIC_EnableIRQ>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a3a      	ldr	r2, [pc, #232]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a33      	ldr	r2, [pc, #204]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <MX_GPIO_Init+0x108>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4820      	ldr	r0, [pc, #128]	; (8000e44 <MX_GPIO_Init+0x10c>)
 8000dc4:	f001 fa86 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2102      	movs	r1, #2
 8000dcc:	481e      	ldr	r0, [pc, #120]	; (8000e48 <MX_GPIO_Init+0x110>)
 8000dce:	f001 fa81 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	; (8000e4c <MX_GPIO_Init+0x114>)
 8000dea:	f001 f8ef 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dee:	2320      	movs	r3, #32
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MX_GPIO_Init+0x10c>)
 8000e06:	f001 f8e1 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_GPIO_Init+0x110>)
 8000e22:	f001 f8d3 	bl	8001fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2028      	movs	r0, #40	; 0x28
 8000e2c:	f000 fc9b 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e30:	2028      	movs	r0, #40	; 0x28
 8000e32:	f000 fcb4 	bl	800179e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800

08000e50 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	e009      	b.n	8000e76 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	60ba      	str	r2, [r7, #8]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fd32 	bl	80008d4 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbf1      	blt.n	8000e62 <_write+0x12>
	}
	return len;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	//sample_i2s = dataIn_PDM[0];
	pcmErr = PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_I2S_RxCpltCallback+0x44>)
 8000e92:	490f      	ldr	r1, [pc, #60]	; (8000ed0 <HAL_I2S_RxCpltCallback+0x48>)
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <HAL_I2S_RxCpltCallback+0x4c>)
 8000e96:	f009 f80b 	bl	8009eb0 <PDM_Filter>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_I2S_RxCpltCallback+0x50>)
 8000e9e:	6013      	str	r3, [r2, #0]
	if (pcmErr != 0) {
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_I2S_RxCpltCallback+0x50>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <HAL_I2S_RxCpltCallback+0x2c>
		myprintf("Error is: %i", pcmErr);
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_I2S_RxCpltCallback+0x50>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_I2S_RxCpltCallback+0x54>)
 8000eb0:	f7ff fd38 	bl	8000924 <myprintf>
	}

	//MX_PDM2PCM_Process(&data_i2s[0], &processedData[0]);
	myData = processedData[0];
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_I2S_RxCpltCallback+0x48>)
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_I2S_RxCpltCallback+0x58>)
 8000eba:	801a      	strh	r2, [r3, #0]
	full_i2s = 1;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_I2S_RxCpltCallback+0x5c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000cec 	.word	0x20000cec
 8000ed0:	20000b14 	.word	0x20000b14
 8000ed4:	20000a90 	.word	0x20000a90
 8000ed8:	20000b98 	.word	0x20000b98
 8000edc:	0800bd34 	.word	0x0800bd34
 8000ee0:	20000b10 	.word	0x20000b10
 8000ee4:	20000b95 	.word	0x20000b95

08000ee8 <HAL_GPIO_EXTI_Callback>:
//	}
	myData = processedData[0];
	half_i2s = 1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin) {
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef8:	d102      	bne.n	8000f00 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x24>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
	}
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000b96 	.word	0x20000b96

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f000 fbf8 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_CRC_MspInit+0x3c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10d      	bne.n	8000f9a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023000 	.word	0x40023000
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b090      	sub	sp, #64	; 0x40
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_I2S_MspInit+0x15c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	f040 808f 	bne.w	8001104 <HAL_I2S_MspInit+0x154>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8000fea:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000fee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fe11 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8001008:	f7ff ff82 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_I2S_MspInit+0x160>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a3e      	ldr	r2, [pc, #248]	; (8001110 <HAL_I2S_MspInit+0x160>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <HAL_I2S_MspInit+0x160>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_I2S_MspInit+0x160>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <HAL_I2S_MspInit+0x160>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_I2S_MspInit+0x160>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_I2S_MspInit+0x160>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a30      	ldr	r2, [pc, #192]	; (8001110 <HAL_I2S_MspInit+0x160>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <HAL_I2S_MspInit+0x160>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001060:	2308      	movs	r3, #8
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001070:	2305      	movs	r3, #5
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001078:	4619      	mov	r1, r3
 800107a:	4826      	ldr	r0, [pc, #152]	; (8001114 <HAL_I2S_MspInit+0x164>)
 800107c:	f000 ffa6 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001092:	2305      	movs	r3, #5
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	481e      	ldr	r0, [pc, #120]	; (8001118 <HAL_I2S_MspInit+0x168>)
 800109e:	f000 ff95 	bl	8001fcc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010a4:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_I2S_MspInit+0x170>)
 80010a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010ea:	f000 fb8f 	bl	800180c <HAL_DMA_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 80010f4:	f7ff ff0c 	bl	8000f10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_I2S_MspInit+0x16c>)
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_I2S_MspInit+0x16c>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3740      	adds	r7, #64	; 0x40
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40003800 	.word	0x40003800
 8001110:	40023800 	.word	0x40023800
 8001114:	40020800 	.word	0x40020800
 8001118:	40020400 	.word	0x40020400
 800111c:	20000994 	.word	0x20000994
 8001120:	40026058 	.word	0x40026058

08001124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <HAL_SPI_MspInit+0xc0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d14a      	bne.n	80011dc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_SPI_MspInit+0xc4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    PA12     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80011aa:	2306      	movs	r3, #6
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <HAL_SPI_MspInit+0xc8>)
 80011b6:	f000 ff09 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80011ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80011cc:	2306      	movs	r3, #6
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <HAL_SPI_MspInit+0xcc>)
 80011d8:	f000 fef8 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40015000 	.word	0x40015000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_UART_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12b      	bne.n	800126e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_UART_MspInit+0x88>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_UART_MspInit+0x88>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_UART_MspInit+0x88>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_UART_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_UART_MspInit+0x88>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_UART_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800124e:	230c      	movs	r3, #12
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_UART_MspInit+0x8c>)
 800126a:	f000 feaf 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40004400 	.word	0x40004400
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d0:	f000 f92a 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <DMA1_Stream3_IRQHandler+0x10>)
 80012de:	f000 fc0b 	bl	8001af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000994 	.word	0x20000994

080012ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f4:	f001 f822 	bl	800233c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135e:	605a      	str	r2, [r3, #4]
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f009 f858 	bl	800a484 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20020000 	.word	0x20020000
 8001400:	00000400 	.word	0x00000400
 8001404:	20000c9c 	.word	0x20000c9c
 8001408:	20000e90 	.word	0x20000e90

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopFillZerobss+0x26>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800145a:	f7ff ffd7 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f009 f817 	bl	800a490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff fa85 	bl	8000970 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8001474:	0800bebc 	.word	0x0800bebc
  ldr r2, =_sbss
 8001478:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 800147c:	20000e8c 	.word	0x20000e8c

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f94f 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fd30 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f967 	bl	80017ba <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f000 f92f 	bl	8001766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000043c 	.word	0x2000043c
 8001520:	20000444 	.word	0x20000444
 8001524:	20000440 	.word	0x20000440

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000444 	.word	0x20000444
 800154c:	20000ca0 	.word	0x20000ca0

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000ca0 	.word	0x20000ca0

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000444 	.word	0x20000444

080015b0 <__NVIC_SetPriorityGrouping>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <SysTick_Config>:
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001730:	f7ff ff8e 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff29 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff3e 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff8e 	bl	80016a4 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5d 	bl	8001650 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff31 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa2 	bl	800170c <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e00e      	b.n	8001802 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	795b      	ldrb	r3, [r3, #5]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fbb9 	bl	8000f6c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fe9a 	bl	8001550 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e099      	b.n	800195c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	e00f      	b.n	800186a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184a:	f7ff fe81 	bl	8001550 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b05      	cmp	r3, #5
 8001856:	d908      	bls.n	800186a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e078      	b.n	800195c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e8      	bne.n	800184a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_DMA_Init+0x158>)
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4313      	orrs	r3, r2
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0307 	bic.w	r3, r3, #7
 80018ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d117      	bne.n	800192e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fadf 	bl	8001ed4 <DMA_CheckFifoParam>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800192a:	2301      	movs	r3, #1
 800192c:	e016      	b.n	800195c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fa96 	bl	8001e68 <DMA_CalcBaseAndBitshift>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	223f      	movs	r2, #63	; 0x3f
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	f010803f 	.word	0xf010803f

08001968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_DMA_Start_IT+0x26>
 800198a:	2302      	movs	r3, #2
 800198c:	e040      	b.n	8001a10 <HAL_DMA_Start_IT+0xa8>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d12f      	bne.n	8001a02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fa28 	bl	8001e0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	223f      	movs	r2, #63	; 0x3f
 80019c2:	409a      	lsls	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0216 	orr.w	r2, r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0208 	orr.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e005      	b.n	8001a0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a26:	f7ff fd93 	bl	8001550 <HAL_GetTick>
 8001a2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d008      	beq.n	8001a4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e052      	b.n	8001af0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0216 	bic.w	r2, r2, #22
 8001a58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <HAL_DMA_Abort+0x62>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0208 	bic.w	r2, r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	e013      	b.n	8001ac4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9c:	f7ff fd58 	bl	8001550 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d90c      	bls.n	8001ac4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e015      	b.n	8001af0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e4      	bne.n	8001a9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	223f      	movs	r2, #63	; 0x3f
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b04:	4b8e      	ldr	r3, [pc, #568]	; (8001d40 <HAL_DMA_IRQHandler+0x248>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a8e      	ldr	r2, [pc, #568]	; (8001d44 <HAL_DMA_IRQHandler+0x24c>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	2208      	movs	r2, #8
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2208      	movs	r2, #8
 8001b52:	409a      	lsls	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	2201      	movs	r2, #1
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	2201      	movs	r2, #1
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d043      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03c      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
 8001c26:	e01f      	b.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
 8001c38:	e016      	b.n	8001c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0208 	bic.w	r2, r2, #8
 8001c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 808f 	beq.w	8001d98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8087 	beq.w	8001d98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2220      	movs	r2, #32
 8001c90:	409a      	lsls	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d136      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x1da>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	223f      	movs	r2, #63	; 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d07e      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
        }
        return;
 8001d0e:	e079      	b.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d031      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
 8001d3c:	e02c      	b.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
 8001d3e:	bf00      	nop
 8001d40:	2000043c 	.word	0x2000043c
 8001d44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d023      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e01e      	b.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10f      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0210 	bic.w	r2, r2, #16
 8001d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d032      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2205      	movs	r2, #5
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d307      	bcc.n	8001de0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f2      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x2cc>
 8001dde:	e000      	b.n	8001de2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001de0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e04:	bf00      	nop
    }
  }
}
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d108      	bne.n	8001e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e4a:	e007      	b.n	8001e5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3b10      	subs	r3, #16
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <DMA_CalcBaseAndBitshift+0x64>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d909      	bls.n	8001eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ea8:	e007      	b.n	8001eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab
 8001ed0:	0800bdd8 	.word	0x0800bdd8

08001ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11f      	bne.n	8001f2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d856      	bhi.n	8001fa2 <DMA_CheckFifoParam+0xce>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <DMA_CheckFifoParam+0x28>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f1f 	.word	0x08001f1f
 8001f04:	08001f0d 	.word	0x08001f0d
 8001f08:	08001fa3 	.word	0x08001fa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d046      	beq.n	8001fa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1c:	e043      	b.n	8001fa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f26:	d140      	bne.n	8001faa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2c:	e03d      	b.n	8001faa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f36:	d121      	bne.n	8001f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d837      	bhi.n	8001fae <DMA_CheckFifoParam+0xda>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <DMA_CheckFifoParam+0x70>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5b 	.word	0x08001f5b
 8001f4c:	08001f55 	.word	0x08001f55
 8001f50:	08001f6d 	.word	0x08001f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	e030      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d025      	beq.n	8001fb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6a:	e022      	b.n	8001fb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f74:	d11f      	bne.n	8001fb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7a:	e01c      	b.n	8001fb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d903      	bls.n	8001f8a <DMA_CheckFifoParam+0xb6>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d003      	beq.n	8001f90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f88:	e018      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8e:	e015      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00e      	beq.n	8001fba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa0:	e00b      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e00a      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e008      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e006      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e004      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
    }
  } 
  
  return status; 
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e159      	b.n	800229c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8148 	bne.w	8002296 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a2 	beq.w	8002296 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <HAL_GPIO_Init+0x2e8>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <HAL_GPIO_Init+0x2e8>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b54      	ldr	r3, [pc, #336]	; (80022b4 <HAL_GPIO_Init+0x2e8>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_GPIO_Init+0x2ec>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a49      	ldr	r2, [pc, #292]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d019      	beq.n	80021ce <HAL_GPIO_Init+0x202>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <HAL_GPIO_Init+0x2f4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0x1fe>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_GPIO_Init+0x2f8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_Init+0x1fa>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a46      	ldr	r2, [pc, #280]	; (80022c8 <HAL_GPIO_Init+0x2fc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x1f6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <HAL_GPIO_Init+0x300>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_Init+0x1f2>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e008      	b.n	80021d0 <HAL_GPIO_Init+0x204>
 80021be:	2307      	movs	r3, #7
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x204>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e004      	b.n	80021d0 <HAL_GPIO_Init+0x204>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_Init+0x204>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x204>
 80021ce:	2300      	movs	r3, #0
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f002 0203 	and.w	r2, r2, #3
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	4093      	lsls	r3, r2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e0:	4935      	ldr	r1, [pc, #212]	; (80022b8 <HAL_GPIO_Init+0x2ec>)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_GPIO_Init+0x304>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002212:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x304>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_GPIO_Init+0x304>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800223c:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <HAL_GPIO_Init+0x304>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_GPIO_Init+0x304>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x304>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_GPIO_Init+0x304>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002290:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_GPIO_Init+0x304>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b0f      	cmp	r3, #15
 80022a0:	f67f aea2 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40013800 	.word	0x40013800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020c00 	.word	0x40020c00
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	041a      	lsls	r2, r3, #16
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43d9      	mvns	r1, r3
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	400b      	ands	r3, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fdc4 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e128      	b.n	80025d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a90      	ldr	r2, [pc, #576]	; (80025d8 <HAL_I2S_Init+0x26c>)
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fe09 	bl	8000fb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023b4:	f023 030f 	bic.w	r3, r3, #15
 80023b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d060      	beq.n	800248c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80023d2:	2310      	movs	r3, #16
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e001      	b.n	80023dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023d8:	2320      	movs	r3, #32
 80023da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d802      	bhi.n	80023ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f001 fd0a 	bl	8003e04 <HAL_RCCEx_GetPeriphCLKFreq>
 80023f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fa:	d125      	bne.n	8002448 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d010      	beq.n	8002426 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	fbb2 f2f3 	udiv	r2, r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	3305      	adds	r3, #5
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e01f      	b.n	8002466 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	3305      	adds	r3, #5
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e00e      	b.n	8002466 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	3305      	adds	r3, #5
 8002464:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4a5c      	ldr	r2, [pc, #368]	; (80025dc <HAL_I2S_Init+0x270>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e003      	b.n	8002494 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800248c:	2302      	movs	r3, #2
 800248e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d902      	bls.n	80024a0 <HAL_I2S_Init+0x134>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	2bff      	cmp	r3, #255	; 0xff
 800249e:	d907      	bls.n	80024b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e08f      	b.n	80025d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	ea42 0103 	orr.w	r1, r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024ce:	f023 030f 	bic.w	r3, r3, #15
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6851      	ldr	r1, [r2, #4]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6892      	ldr	r2, [r2, #8]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68d2      	ldr	r2, [r2, #12]
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6992      	ldr	r2, [r2, #24]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d161      	bne.n	80025c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a38      	ldr	r2, [pc, #224]	; (80025e0 <HAL_I2S_Init+0x274>)
 8002500:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <HAL_I2S_Init+0x278>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_I2S_Init+0x1a4>
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_I2S_Init+0x27c>)
 800250e:	e001      	b.n	8002514 <HAL_I2S_Init+0x1a8>
 8002510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4932      	ldr	r1, [pc, #200]	; (80025e4 <HAL_I2S_Init+0x278>)
 800251c:	428a      	cmp	r2, r1
 800251e:	d101      	bne.n	8002524 <HAL_I2S_Init+0x1b8>
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_I2S_Init+0x27c>)
 8002522:	e001      	b.n	8002528 <HAL_I2S_Init+0x1bc>
 8002524:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002528:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800252c:	f023 030f 	bic.w	r3, r3, #15
 8002530:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <HAL_I2S_Init+0x278>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_I2S_Init+0x1d4>
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_I2S_Init+0x27c>)
 800253e:	e001      	b.n	8002544 <HAL_I2S_Init+0x1d8>
 8002540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002544:	2202      	movs	r2, #2
 8002546:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <HAL_I2S_Init+0x278>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_I2S_Init+0x1ea>
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_I2S_Init+0x27c>)
 8002554:	e001      	b.n	800255a <HAL_I2S_Init+0x1ee>
 8002556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002566:	d003      	beq.n	8002570 <HAL_I2S_Init+0x204>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e001      	b.n	800257c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002586:	4313      	orrs	r3, r2
 8002588:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002590:	4313      	orrs	r3, r2
 8002592:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800259a:	4313      	orrs	r3, r2
 800259c:	b29a      	uxth	r2, r3
 800259e:	897b      	ldrh	r3, [r7, #10]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_I2S_Init+0x278>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_I2S_Init+0x24c>
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_I2S_Init+0x27c>)
 80025b6:	e001      	b.n	80025bc <HAL_I2S_Init+0x250>
 80025b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025bc:	897a      	ldrh	r2, [r7, #10]
 80025be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3720      	adds	r7, #32
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	08002cb9 	.word	0x08002cb9
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	08002e41 	.word	0x08002e41
 80025e4:	40003800 	.word	0x40003800
 80025e8:	40003400 	.word	0x40003400

080025ec <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_I2S_Receive_DMA+0x1a>
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0a1      	b.n	800274e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_I2S_Receive_DMA+0x2e>
 8002616:	2302      	movs	r3, #2
 8002618:	e099      	b.n	800274e <HAL_I2S_Receive_DMA+0x162>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d005      	beq.n	800263a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	e089      	b.n	800274e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2204      	movs	r2, #4
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d002      	beq.n	8002666 <HAL_I2S_Receive_DMA+0x7a>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10a      	bne.n	800267c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	865a      	strh	r2, [r3, #50]	; 0x32
 800267a:	e005      	b.n	8002688 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	4a32      	ldr	r2, [pc, #200]	; (8002758 <HAL_I2S_Receive_DMA+0x16c>)
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	4a31      	ldr	r2, [pc, #196]	; (800275c <HAL_I2S_Receive_DMA+0x170>)
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	4a30      	ldr	r2, [pc, #192]	; (8002760 <HAL_I2S_Receive_DMA+0x174>)
 800269e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ae:	d10a      	bne.n	80026c6 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	4619      	mov	r1, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80026dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80026de:	f7ff f943 	bl	8001968 <HAL_DMA_Start_IT>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00f      	beq.n	8002708 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f043 0208 	orr.w	r2, r3, #8
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e022      	b.n	800274e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002724:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	08002b97 	.word	0x08002b97
 800275c:	08002b55 	.word	0x08002b55
 8002760:	08002bb3 	.word	0x08002bb3

08002764 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002778:	d004      	beq.n	8002784 <HAL_I2S_DMAStop+0x20>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80d1 	bne.w	8002926 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00f      	beq.n	80027ac <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f941 	bl	8001a18 <HAL_DMA_Abort>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f043 0208 	orr.w	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	2201      	movs	r2, #1
 80027b0:	2102      	movs	r1, #2
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb0a 	bl	8002dcc <I2S_WaitFlagStateUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80027d6:	2364      	movs	r3, #100	; 0x64
 80027d8:	2200      	movs	r2, #0
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 faf5 	bl	8002dcc <I2S_WaitFlagStateUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0202 	bic.w	r2, r2, #2
 800282c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b05      	cmp	r3, #5
 8002838:	f040 8165 	bne.w	8002b06 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00f      	beq.n	8002864 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f8e5 	bl	8001a18 <HAL_DMA_Abort>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f043 0208 	orr.w	r2, r3, #8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a8a      	ldr	r2, [pc, #552]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_I2S_DMAStop+0x10e>
 800286e:	4b8a      	ldr	r3, [pc, #552]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002870:	e001      	b.n	8002876 <HAL_I2S_DMAStop+0x112>
 8002872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4985      	ldr	r1, [pc, #532]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 800287e:	428b      	cmp	r3, r1
 8002880:	d101      	bne.n	8002886 <HAL_I2S_DMAStop+0x122>
 8002882:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002884:	e001      	b.n	800288a <HAL_I2S_DMAStop+0x126>
 8002886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a7e      	ldr	r2, [pc, #504]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_I2S_DMAStop+0x13e>
 800289e:	4b7e      	ldr	r3, [pc, #504]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 80028a0:	e001      	b.n	80028a6 <HAL_I2S_DMAStop+0x142>
 80028a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a79      	ldr	r2, [pc, #484]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_I2S_DMAStop+0x154>
 80028b4:	4b78      	ldr	r3, [pc, #480]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 80028b6:	e001      	b.n	80028bc <HAL_I2S_DMAStop+0x158>
 80028b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_I2S_DMAStop+0x16c>
 80028cc:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 80028ce:	e001      	b.n	80028d4 <HAL_I2S_DMAStop+0x170>
 80028d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	496e      	ldr	r1, [pc, #440]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 80028dc:	428b      	cmp	r3, r1
 80028de:	d101      	bne.n	80028e4 <HAL_I2S_DMAStop+0x180>
 80028e0:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 80028e2:	e001      	b.n	80028e8 <HAL_I2S_DMAStop+0x184>
 80028e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800290e:	e0fa      	b.n	8002b06 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_I2S_DMAStop+0x1ba>
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 800291c:	e001      	b.n	8002922 <HAL_I2S_DMAStop+0x1be>
 800291e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002922:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002924:	e0ef      	b.n	8002b06 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800292e:	d005      	beq.n	800293c <HAL_I2S_DMAStop+0x1d8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002938:	f040 80e5 	bne.w	8002b06 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00f      	beq.n	8002964 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f865 	bl	8001a18 <HAL_DMA_Abort>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f043 0208 	orr.w	r2, r3, #8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b05      	cmp	r3, #5
 800296e:	f040 809a 	bne.w	8002aa6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00f      	beq.n	800299a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f84a 	bl	8001a18 <HAL_DMA_Abort>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f043 0208 	orr.w	r2, r3, #8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800299a:	f7fe fdd9 	bl	8001550 <HAL_GetTick>
 800299e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80029a0:	e012      	b.n	80029c8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80029a2:	f7fe fdd5 	bl	8001550 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d90b      	bls.n	80029c8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a31      	ldr	r2, [pc, #196]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_I2S_DMAStop+0x272>
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 80029d4:	e001      	b.n	80029da <HAL_I2S_DMAStop+0x276>
 80029d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d1de      	bne.n	80029a2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80029e4:	e012      	b.n	8002a0c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80029e6:	f7fe fdb3 	bl	8001550 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d90b      	bls.n	8002a0c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_I2S_DMAStop+0x2b6>
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002a18:	e001      	b.n	8002a1e <HAL_I2S_DMAStop+0x2ba>
 8002a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d0de      	beq.n	80029e6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_I2S_DMAStop+0x2d2>
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002a34:	e001      	b.n	8002a3a <HAL_I2S_DMAStop+0x2d6>
 8002a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4914      	ldr	r1, [pc, #80]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002a42:	428b      	cmp	r3, r1
 8002a44:	d101      	bne.n	8002a4a <HAL_I2S_DMAStop+0x2e6>
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002a48:	e001      	b.n	8002a4e <HAL_I2S_DMAStop+0x2ea>
 8002a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a52:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_I2S_DMAStop+0x302>
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002a64:	e001      	b.n	8002a6a <HAL_I2S_DMAStop+0x306>
 8002a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_I2S_DMAStop+0x31a>
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002a7c:	e001      	b.n	8002a82 <HAL_I2S_DMAStop+0x31e>
 8002a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4902      	ldr	r1, [pc, #8]	; (8002a94 <HAL_I2S_DMAStop+0x330>)
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d106      	bne.n	8002a9c <HAL_I2S_DMAStop+0x338>
 8002a8e:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <HAL_I2S_DMAStop+0x334>)
 8002a90:	e006      	b.n	8002aa0 <HAL_I2S_DMAStop+0x33c>
 8002a92:	bf00      	nop
 8002a94:	40003800 	.word	0x40003800
 8002a98:	40003400 	.word	0x40003400
 8002a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa0:	f022 0202 	bic.w	r2, r2, #2
 8002aa4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d10c      	bne.n	8002b00 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e002      	b.n	8002b06 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10e      	bne.n	8002b88 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7fe f97d 	bl	8000e88 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff ffc1 	bl	8002b2c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0203 	bic.w	r2, r2, #3
 8002bce:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0208 	orr.w	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff ffa5 	bl	8002b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	1c9a      	adds	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10e      	bne.n	8002c52 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c42:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff63 	bl	8002b18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10e      	bne.n	8002cb0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ca0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe f8ec 	bl	8000e88 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d13a      	bne.n	8002d4a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d109      	bne.n	8002cf2 <I2S_IRQHandler+0x3a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d102      	bne.n	8002cf2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffb4 	bl	8002c5a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d126      	bne.n	8002d4a <I2S_IRQHandler+0x92>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d11f      	bne.n	8002d4a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d18:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fefb 	bl	8002b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d136      	bne.n	8002dc4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d109      	bne.n	8002d74 <I2S_IRQHandler+0xbc>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b80      	cmp	r3, #128	; 0x80
 8002d6c:	d102      	bne.n	8002d74 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff45 	bl	8002bfe <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d122      	bne.n	8002dc4 <I2S_IRQHandler+0x10c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d11b      	bne.n	8002dc4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d9a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f043 0204 	orr.w	r2, r3, #4
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff febe 	bl	8002b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ddc:	f7fe fbb8 	bl	8001550 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002de2:	e018      	b.n	8002e16 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dea:	d014      	beq.n	8002e16 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002dec:	f7fe fbb0 	bl	8001550 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d902      	bls.n	8002e02 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1d7      	bne.n	8002de4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a92      	ldr	r2, [pc, #584]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e5a:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e5c:	e001      	b.n	8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a8b      	ldr	r2, [pc, #556]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002e78:	4b8a      	ldr	r3, [pc, #552]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e7a:	e001      	b.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8c:	d004      	beq.n	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 8099 	bne.w	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d107      	bne.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f925 	bl	80030fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9c8 	bl	800325c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d13a      	bne.n	8002f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d035      	beq.n	8002f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002eea:	4b6e      	ldr	r3, [pc, #440]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eec:	e001      	b.n	8002ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4969      	ldr	r1, [pc, #420]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002efa:	428b      	cmp	r3, r1
 8002efc:	d101      	bne.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f00:	e001      	b.n	8002f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fdfa 	bl	8002b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	f040 80c3 	bne.w	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80bd 	beq.w	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a49      	ldr	r2, [pc, #292]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002f7e:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f80:	e001      	b.n	8002f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4944      	ldr	r1, [pc, #272]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f8e:	428b      	cmp	r3, r1
 8002f90:	d101      	bne.n	8002f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f94:	e001      	b.n	8002f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fdbc 	bl	8002b40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fc8:	e089      	b.n	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d107      	bne.n	8002fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8be 	bl	8003160 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8fd 	bl	80031f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d12f      	bne.n	8003068 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02a      	beq.n	8003068 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003020:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800302e:	e001      	b.n	8003034 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4919      	ldr	r1, [pc, #100]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800303c:	428b      	cmp	r3, r1
 800303e:	d101      	bne.n	8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003042:	e001      	b.n	8003048 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003048:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800304c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fd6c 	bl	8002b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b08      	cmp	r3, #8
 8003070:	d136      	bne.n	80030e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d031      	beq.n	80030e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003088:	e001      	b.n	800308e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800308a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4902      	ldr	r1, [pc, #8]	; (80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003096:	428b      	cmp	r3, r1
 8003098:	d106      	bne.n	80030a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800309a:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800309c:	e006      	b.n	80030ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800309e:	bf00      	nop
 80030a0:	40003800 	.word	0x40003800
 80030a4:	40003400 	.word	0x40003400
 80030a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff fd32 	bl	8002b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030dc:	e000      	b.n	80030e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030de:	bf00      	nop
}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c99      	adds	r1, r3, #2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6251      	str	r1, [r2, #36]	; 0x24
 800310e:	881a      	ldrh	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800313c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ffc9 	bl	80030e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c99      	adds	r1, r3, #2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6251      	str	r1, [r2, #36]	; 0x24
 8003172:	8819      	ldrh	r1, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <I2SEx_TxISR_I2SExt+0x90>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <I2SEx_TxISR_I2SExt+0x22>
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <I2SEx_TxISR_I2SExt+0x94>)
 8003180:	e001      	b.n	8003186 <I2SEx_TxISR_I2SExt+0x26>
 8003182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003186:	460a      	mov	r2, r1
 8003188:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d121      	bne.n	80031e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <I2SEx_TxISR_I2SExt+0x90>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <I2SEx_TxISR_I2SExt+0x50>
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <I2SEx_TxISR_I2SExt+0x94>)
 80031ae:	e001      	b.n	80031b4 <I2SEx_TxISR_I2SExt+0x54>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	490d      	ldr	r1, [pc, #52]	; (80031f0 <I2SEx_TxISR_I2SExt+0x90>)
 80031bc:	428b      	cmp	r3, r1
 80031be:	d101      	bne.n	80031c4 <I2SEx_TxISR_I2SExt+0x64>
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <I2SEx_TxISR_I2SExt+0x94>)
 80031c2:	e001      	b.n	80031c8 <I2SEx_TxISR_I2SExt+0x68>
 80031c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff81 	bl	80030e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40003800 	.word	0x40003800
 80031f4:	40003400 	.word	0x40003400

080031f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68d8      	ldr	r0, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	1c99      	adds	r1, r3, #2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003210:	b282      	uxth	r2, r0
 8003212:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d113      	bne.n	8003254 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800323a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff4a 	bl	80030e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a20      	ldr	r2, [pc, #128]	; (80032ec <I2SEx_RxISR_I2SExt+0x90>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <I2SEx_RxISR_I2SExt+0x16>
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <I2SEx_RxISR_I2SExt+0x94>)
 8003270:	e001      	b.n	8003276 <I2SEx_RxISR_I2SExt+0x1a>
 8003272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003276:	68d8      	ldr	r0, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	1c99      	adds	r1, r3, #2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003282:	b282      	uxth	r2, r0
 8003284:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d121      	bne.n	80032e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <I2SEx_RxISR_I2SExt+0x90>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <I2SEx_RxISR_I2SExt+0x50>
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <I2SEx_RxISR_I2SExt+0x94>)
 80032aa:	e001      	b.n	80032b0 <I2SEx_RxISR_I2SExt+0x54>
 80032ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	490d      	ldr	r1, [pc, #52]	; (80032ec <I2SEx_RxISR_I2SExt+0x90>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d101      	bne.n	80032c0 <I2SEx_RxISR_I2SExt+0x64>
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <I2SEx_RxISR_I2SExt+0x94>)
 80032be:	e001      	b.n	80032c4 <I2SEx_RxISR_I2SExt+0x68>
 80032c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff03 	bl	80030e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40003800 	.word	0x40003800
 80032f0:	40003400 	.word	0x40003400

080032f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e267      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d075      	beq.n	80033fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b04      	cmp	r3, #4
 800331c:	d00c      	beq.n	8003338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b85      	ldr	r3, [pc, #532]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	2b08      	cmp	r3, #8
 8003328:	d112      	bne.n	8003350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4b82      	ldr	r3, [pc, #520]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003336:	d10b      	bne.n	8003350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	4b7e      	ldr	r3, [pc, #504]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05b      	beq.n	80033fc <HAL_RCC_OscConfig+0x108>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d157      	bne.n	80033fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e242      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d106      	bne.n	8003368 <HAL_RCC_OscConfig+0x74>
 800335a:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a75      	ldr	r2, [pc, #468]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x98>
 8003372:	4b70      	ldr	r3, [pc, #448]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6f      	ldr	r2, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6d      	ldr	r3, [pc, #436]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6c      	ldr	r2, [pc, #432]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xb0>
 800338c:	4b69      	ldr	r3, [pc, #420]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a68      	ldr	r2, [pc, #416]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b66      	ldr	r3, [pc, #408]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a65      	ldr	r2, [pc, #404]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe f8d0 	bl	8001550 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe f8cc 	bl	8001550 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e207      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5b      	ldr	r3, [pc, #364]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xc0>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe f8bc 	bl	8001550 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe f8b8 	bl	8001550 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1f3      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b51      	ldr	r3, [pc, #324]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0xe8>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b44      	ldr	r3, [pc, #272]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x152>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c7      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4937      	ldr	r1, [pc, #220]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <HAL_RCC_OscConfig+0x244>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe f871 	bl	8001550 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe f86d 	bl	8001550 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a8      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4925      	ldr	r1, [pc, #148]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x244>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe f850 	bl	8001550 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe f84c 	bl	8001550 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e187      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d036      	beq.n	800354c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_RCC_OscConfig+0x248>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe f830 	bl	8001550 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe f82c 	bl	8001550 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e167      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_OscConfig+0x240>)
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x200>
 8003512:	e01b      	b.n	800354c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x248>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fe f819 	bl	8001550 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	e00e      	b.n	8003540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe f815 	bl	8001550 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d907      	bls.n	8003540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e150      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
 8003534:	40023800 	.word	0x40023800
 8003538:	42470000 	.word	0x42470000
 800353c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ea      	bne.n	8003522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8097 	beq.w	8003688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b81      	ldr	r3, [pc, #516]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a7c      	ldr	r2, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b77      	ldr	r3, [pc, #476]	; (8003768 <HAL_RCC_OscConfig+0x474>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d118      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003596:	4b74      	ldr	r3, [pc, #464]	; (8003768 <HAL_RCC_OscConfig+0x474>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a73      	ldr	r2, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x474>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fd ffd5 	bl	8001550 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fd ffd1 	bl	8001550 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e10c      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCC_OscConfig+0x474>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x2ea>
 80035d0:	4b64      	ldr	r3, [pc, #400]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a63      	ldr	r2, [pc, #396]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	e01c      	b.n	8003618 <HAL_RCC_OscConfig+0x324>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x30c>
 80035e6:	4b5f      	ldr	r3, [pc, #380]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a5e      	ldr	r2, [pc, #376]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a5b      	ldr	r2, [pc, #364]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x324>
 8003600:	4b58      	ldr	r3, [pc, #352]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a57      	ldr	r2, [pc, #348]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	4b55      	ldr	r3, [pc, #340]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003612:	f023 0304 	bic.w	r3, r3, #4
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd ff96 	bl	8001550 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd ff92 	bl	8001550 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e0cb      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ee      	beq.n	8003628 <HAL_RCC_OscConfig+0x334>
 800364a:	e014      	b.n	8003676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364c:	f7fd ff80 	bl	8001550 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd ff7c 	bl	8001550 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0b5      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ee      	bne.n	8003654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4a38      	ldr	r2, [pc, #224]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a1 	beq.w	80037d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d05c      	beq.n	8003758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d141      	bne.n	800372a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b31      	ldr	r3, [pc, #196]	; (800376c <HAL_RCC_OscConfig+0x478>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fd ff50 	bl	8001550 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd ff4c 	bl	8001550 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e087      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	491b      	ldr	r1, [pc, #108]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x478>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fd ff25 	bl	8001550 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd ff21 	bl	8001550 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e05c      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x416>
 8003728:	e054      	b.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_RCC_OscConfig+0x478>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd ff0e 	bl	8001550 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003738:	f7fd ff0a 	bl	8001550 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e045      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_OscConfig+0x470>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x444>
 8003756:	e03d      	b.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d107      	bne.n	8003770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e038      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
 8003764:	40023800 	.word	0x40023800
 8003768:	40007000 	.word	0x40007000
 800376c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x4ec>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d028      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d121      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d11a      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a0:	4013      	ands	r3, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d111      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	3b01      	subs	r3, #1
 80037ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800

080037e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0cc      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b68      	ldr	r3, [pc, #416]	; (800399c <HAL_RCC_ClockConfig+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d90c      	bls.n	8003820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b65      	ldr	r3, [pc, #404]	; (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b63      	ldr	r3, [pc, #396]	; (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0b8      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003838:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800385a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	494d      	ldr	r1, [pc, #308]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d044      	beq.n	8003904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d119      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e07f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e067      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4934      	ldr	r1, [pc, #208]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d4:	f7fd fe3c 	bl	8001550 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fd fe38 	bl	8001550 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d20c      	bcs.n	800392c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e032      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4916      	ldr	r1, [pc, #88]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	490e      	ldr	r1, [pc, #56]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800396a:	f000 f821 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490a      	ldr	r1, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fd9c 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023c00 	.word	0x40023c00
 80039a0:	40023800 	.word	0x40023800
 80039a4:	0800bdc0 	.word	0x0800bdc0
 80039a8:	2000043c 	.word	0x2000043c
 80039ac:	20000440 	.word	0x20000440

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b094      	sub	sp, #80	; 0x50
 80039b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
 80039bc:	2300      	movs	r3, #0
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	2300      	movs	r3, #0
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c8:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d00d      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x40>
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	f200 80e1 	bhi.w	8003b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x3a>
 80039e2:	e0db      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b73      	ldr	r3, [pc, #460]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039e8:	e0db      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ea:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ee:	e0d8      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fa:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a22:	4622      	mov	r2, r4
 8003a24:	462b      	mov	r3, r5
 8003a26:	f04f 0000 	mov.w	r0, #0
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	0159      	lsls	r1, r3, #5
 8003a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a34:	0150      	lsls	r0, r2, #5
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	1a51      	subs	r1, r2, r1
 8003a3e:	6139      	str	r1, [r7, #16]
 8003a40:	4629      	mov	r1, r5
 8003a42:	eb63 0301 	sbc.w	r3, r3, r1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a54:	4659      	mov	r1, fp
 8003a56:	018b      	lsls	r3, r1, #6
 8003a58:	4651      	mov	r1, sl
 8003a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5e:	4651      	mov	r1, sl
 8003a60:	018a      	lsls	r2, r1, #6
 8003a62:	4651      	mov	r1, sl
 8003a64:	ebb2 0801 	subs.w	r8, r2, r1
 8003a68:	4659      	mov	r1, fp
 8003a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	462b      	mov	r3, r5
 8003a90:	eb49 0303 	adc.w	r3, r9, r3
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	024b      	lsls	r3, r1, #9
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aac:	4621      	mov	r1, r4
 8003aae:	024a      	lsls	r2, r1, #9
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac0:	f7fc fbe6 	bl	8000290 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003acc:	e058      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4611      	mov	r1, r2
 8003ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	0159      	lsls	r1, r3, #5
 8003af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afa:	0150      	lsls	r0, r2, #5
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4641      	mov	r1, r8
 8003b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b06:	4649      	mov	r1, r9
 8003b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b20:	ebb2 040a 	subs.w	r4, r2, sl
 8003b24:	eb63 050b 	sbc.w	r5, r3, fp
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	00eb      	lsls	r3, r5, #3
 8003b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b36:	00e2      	lsls	r2, r4, #3
 8003b38:	4614      	mov	r4, r2
 8003b3a:	461d      	mov	r5, r3
 8003b3c:	4643      	mov	r3, r8
 8003b3e:	18e3      	adds	r3, r4, r3
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	464b      	mov	r3, r9
 8003b44:	eb45 0303 	adc.w	r3, r5, r3
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b56:	4629      	mov	r1, r5
 8003b58:	028b      	lsls	r3, r1, #10
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b60:	4621      	mov	r1, r4
 8003b62:	028a      	lsls	r2, r1, #10
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	61fa      	str	r2, [r7, #28]
 8003b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b74:	f7fc fb8c 	bl	8000290 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3750      	adds	r7, #80	; 0x50
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	007a1200 	.word	0x007a1200

08003bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	2000043c 	.word	0x2000043c

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a9b      	lsrs	r3, r3, #10
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	0800bdd0 	.word	0x0800bdd0

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c00:	f7ff ffdc 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	0800bdd0 	.word	0x0800bdd0

08003c24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d038      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c4c:	4b68      	ldr	r3, [pc, #416]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c52:	f7fd fc7d 	bl	8001550 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c5a:	f7fd fc79 	bl	8001550 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e0bd      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c6c:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	071b      	lsls	r3, r3, #28
 8003c8a:	495a      	ldr	r1, [pc, #360]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c92:	4b57      	ldr	r3, [pc, #348]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c98:	f7fd fc5a 	bl	8001550 <HAL_GetTick>
 8003c9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ca0:	f7fd fc56 	bl	8001550 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e09a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8083 	beq.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	4a47      	ldr	r2, [pc, #284]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6413      	str	r3, [r2, #64]	; 0x40
 8003cdc:	4b45      	ldr	r3, [pc, #276]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ce8:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fd fc2c 	bl	8001550 <HAL_GetTick>
 8003cf8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fd fc28 	bl	8001550 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e06c      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d0e:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02f      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d028      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d38:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d40:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d4e:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d114      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fd fbf6 	bl	8001550 <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd fbf2 	bl	8001550 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e034      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	4911      	ldr	r1, [pc, #68]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dbe:	6093      	str	r3, [r2, #8]
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	4909      	ldr	r1, [pc, #36]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7d1a      	ldrb	r2, [r3, #20]
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003de4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	42470068 	.word	0x42470068
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	42470e40 	.word	0x42470e40
 8003e00:	424711e0 	.word	0x424711e0

08003e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d140      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d131      	bne.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e3a:	617b      	str	r3, [r7, #20]
          break;
 8003e3c:	e031      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e56:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	e008      	b.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	0f1b      	lsrs	r3, r3, #28
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
          break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
          break;
 8003ea0:	bf00      	nop
        }
      }
      break;
 8003ea2:	bf00      	nop
    }
  }
  return frequency;
 8003ea4:	697b      	ldr	r3, [r7, #20]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00bb8000 	.word	0x00bb8000
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	00f42400 	.word	0x00f42400

08003ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e07b      	b.n	8003fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d108      	bne.n	8003ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee6:	d009      	beq.n	8003efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
 8003eee:	e005      	b.n	8003efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd f904 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	ea42 0103 	orr.w	r1, r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0104 	and.w	r1, r3, #4
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	f003 0210 	and.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b088      	sub	sp, #32
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_SPI_Transmit+0x22>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e126      	b.n	8004246 <HAL_SPI_Transmit+0x270>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004000:	f7fd faa6 	bl	8001550 <HAL_GetTick>
 8004004:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800401a:	e10b      	b.n	8004234 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_SPI_Transmit+0x52>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800402c:	e102      	b.n	8004234 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2203      	movs	r2, #3
 8004032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d10f      	bne.n	8004096 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004084:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004094:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d007      	beq.n	80040b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040bc:	d14b      	bne.n	8004156 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_Transmit+0xf6>
 80040c6:	8afb      	ldrh	r3, [r7, #22]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d13e      	bne.n	800414a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	881a      	ldrh	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	1c9a      	adds	r2, r3, #2
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040f0:	e02b      	b.n	800414a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d112      	bne.n	8004126 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	881a      	ldrh	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	1c9a      	adds	r2, r3, #2
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	86da      	strh	r2, [r3, #54]	; 0x36
 8004124:	e011      	b.n	800414a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004126:	f7fd fa13 	bl	8001550 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d803      	bhi.n	800413e <HAL_SPI_Transmit+0x168>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800413c:	d102      	bne.n	8004144 <HAL_SPI_Transmit+0x16e>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004148:	e074      	b.n	8004234 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ce      	bne.n	80040f2 <HAL_SPI_Transmit+0x11c>
 8004154:	e04c      	b.n	80041f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Transmit+0x18e>
 800415e:	8afb      	ldrh	r3, [r7, #22]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d140      	bne.n	80041e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800418a:	e02c      	b.n	80041e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d113      	bne.n	80041c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	86da      	strh	r2, [r3, #54]	; 0x36
 80041c0:	e011      	b.n	80041e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c2:	f7fd f9c5 	bl	8001550 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <HAL_SPI_Transmit+0x204>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Transmit+0x20a>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041e4:	e026      	b.n	8004234 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1cd      	bne.n	800418c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	6839      	ldr	r1, [r7, #0]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa55 	bl	80046a4 <SPI_EndRxTxTransaction>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e000      	b.n	8004234 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004232:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004244:	7ffb      	ldrb	r3, [r7, #31]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b08c      	sub	sp, #48	; 0x30
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800425c:	2301      	movs	r3, #1
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x26>
 8004270:	2302      	movs	r3, #2
 8004272:	e18a      	b.n	800458a <HAL_SPI_TransmitReceive+0x33c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800427c:	f7fd f968 	bl	8001550 <HAL_GetTick>
 8004280:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800429a:	2b01      	cmp	r3, #1
 800429c:	d00f      	beq.n	80042be <HAL_SPI_TransmitReceive+0x70>
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a4:	d107      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x68>
 80042ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042bc:	e15b      	b.n	8004576 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x82>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x82>
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042d6:	e14e      	b.n	8004576 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d003      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2205      	movs	r2, #5
 80042e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	887a      	ldrh	r2, [r7, #2]
 8004302:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	887a      	ldrh	r2, [r7, #2]
 800430e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d007      	beq.n	8004340 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	d178      	bne.n	800443c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x10a>
 8004352:	8b7b      	ldrh	r3, [r7, #26]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d166      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800437c:	e053      	b.n	8004426 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d11b      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x176>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x176>
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d113      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	1c9a      	adds	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d119      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x1b8>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d014      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	b292      	uxth	r2, r2
 80043e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004406:	f7fd f8a3 	bl	8001550 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004412:	429a      	cmp	r2, r3
 8004414:	d807      	bhi.n	8004426 <HAL_SPI_TransmitReceive+0x1d8>
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441c:	d003      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004424:	e0a7      	b.n	8004576 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1a6      	bne.n	800437e <HAL_SPI_TransmitReceive+0x130>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1a1      	bne.n	800437e <HAL_SPI_TransmitReceive+0x130>
 800443a:	e07c      	b.n	8004536 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SPI_TransmitReceive+0x1fc>
 8004444:	8b7b      	ldrh	r3, [r7, #26]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d16b      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004470:	e057      	b.n	8004522 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b02      	cmp	r3, #2
 800447e:	d11c      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x26c>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <HAL_SPI_TransmitReceive+0x26c>
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d114      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d119      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x2ae>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d014      	beq.n	80044fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044f8:	2301      	movs	r3, #1
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044fc:	f7fd f828 	bl	8001550 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004508:	429a      	cmp	r2, r3
 800450a:	d803      	bhi.n	8004514 <HAL_SPI_TransmitReceive+0x2c6>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004512:	d102      	bne.n	800451a <HAL_SPI_TransmitReceive+0x2cc>
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004520:	e029      	b.n	8004576 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1a2      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x224>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d19d      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f8b2 	bl	80046a4 <SPI_EndRxTxTransaction>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004552:	e010      	b.n	8004576 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	e000      	b.n	8004576 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004574:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a4:	f7fc ffd4 	bl	8001550 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b4:	f7fc ffcc 	bl	8001550 <HAL_GetTick>
 80045b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	0d1b      	lsrs	r3, r3, #20
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ca:	e054      	b.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d2:	d050      	beq.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d4:	f7fc ffbc 	bl	8001550 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d13d      	bne.n	8004666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004602:	d111      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	d004      	beq.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d107      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004630:	d10f      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e017      	b.n	8004696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3b01      	subs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d19b      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	2000043c 	.word	0x2000043c

080046a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <SPI_EndRxTxTransaction+0x7c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <SPI_EndRxTxTransaction+0x80>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0d5b      	lsrs	r3, r3, #21
 80046bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ce:	d112      	bne.n	80046f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff5a 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e00f      	b.n	8004716 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3b01      	subs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d0f2      	beq.n	80046f6 <SPI_EndRxTxTransaction+0x52>
 8004710:	e000      	b.n	8004714 <SPI_EndRxTxTransaction+0x70>
        break;
 8004712:	bf00      	nop
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	2000043c 	.word	0x2000043c
 8004724:	165e9f81 	.word	0x165e9f81

08004728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03f      	b.n	80047ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fd50 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f929 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d17c      	bne.n	80048dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x2c>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e075      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Transmit+0x3e>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e06e      	b.n	80048de <HAL_UART_Transmit+0x11c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004816:	f7fc fe9b 	bl	8001550 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d108      	bne.n	8004844 <HAL_UART_Transmit+0x82>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004854:	e02a      	b.n	80048ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f840 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e036      	b.n	80048de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e007      	b.n	800489e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1cf      	bne.n	8004856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	; 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f810 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b090      	sub	sp, #64	; 0x40
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f6:	e050      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048fe:	d04c      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0x30>
 8004906:	f7fc fe23 	bl	8001550 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004912:	429a      	cmp	r2, r3
 8004914:	d241      	bcs.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004936:	637a      	str	r2, [r7, #52]	; 0x34
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	613b      	str	r3, [r7, #16]
   return(result);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496a:	623a      	str	r2, [r7, #32]
 800496c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	61bb      	str	r3, [r7, #24]
   return(result);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e00f      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d09f      	beq.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3740      	adds	r7, #64	; 0x40
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	; 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7ff f8ca 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7ff f8b1 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	; 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b08:	f7fb fbc2 	bl	8000290 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9e:	f7fb fb77 	bl	8000290 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	; 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c5a:	f7fb fb19 	bl	8000290 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e106      	b.n	8004e9c <UART_SetConfig+0x4d8>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d1c:	f7fb fab8 	bl	8000290 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dba:	f7fb fa69 	bl	8000290 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2264      	movs	r2, #100	; 0x64
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a33      	ldr	r2, [pc, #204]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	673b      	str	r3, [r7, #112]	; 0x70
 8004dee:	677a      	str	r2, [r7, #116]	; 0x74
 8004df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e36:	464b      	mov	r3, r9
 8004e38:	460a      	mov	r2, r1
 8004e3a:	eb42 0303 	adc.w	r3, r2, r3
 8004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e58:	4649      	mov	r1, r9
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e62:	4641      	mov	r1, r8
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e6a:	f7fb fa11 	bl	8000290 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4422      	add	r2, r4
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004eb0:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <MX_FATFS_Init+0x18>)
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <MX_FATFS_Init+0x1c>)
 8004eb4:	f003 f8f6 	bl	80080a4 <FATFS_LinkDriver>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <MX_FATFS_Init+0x20>)
 8004ebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000ca8 	.word	0x20000ca8
 8004ec8:	20000448 	.word	0x20000448
 8004ecc:	20000ca4 	.word	0x20000ca4

08004ed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ed4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f9d3 	bl	8005298 <USER_SPI_initialize>
 8004ef2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fab1 	bl	8005470 <USER_SPI_status>
 8004f0e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8004f28:	7bf8      	ldrb	r0, [r7, #15]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	f000 fab4 	bl	800549c <USER_SPI_read>
 8004f34:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004f4e:	7bf8      	ldrb	r0, [r7, #15]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	f000 fb07 	bl	8005568 <USER_SPI_write>
 8004f5a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	603a      	str	r2, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
 8004f70:	460b      	mov	r3, r1
 8004f72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004f74:	79b9      	ldrb	r1, [r7, #6]
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fb70 	bl	8005660 <USER_SPI_ioctl>
 8004f80:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004f94:	f7fc fadc 	bl	8001550 <HAL_GetTick>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <SPI_Timer_On+0x20>)
 8004f9c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004f9e:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <SPI_Timer_On+0x24>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6013      	str	r3, [r2, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000cb0 	.word	0x20000cb0
 8004fb0:	20000cb4 	.word	0x20000cb4

08004fb4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004fb8:	f7fc faca 	bl	8001550 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <SPI_Timer_Status+0x24>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <SPI_Timer_Status+0x28>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf34      	ite	cc
 8004fcc:	2301      	movcc	r3, #1
 8004fce:	2300      	movcs	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000cb0 	.word	0x20000cb0
 8004fdc:	20000cb4 	.word	0x20000cb4

08004fe0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004fea:	f107 020f 	add.w	r2, r7, #15
 8004fee:	1df9      	adds	r1, r7, #7
 8004ff0:	2332      	movs	r3, #50	; 0x32
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4804      	ldr	r0, [pc, #16]	; (8005008 <xchg_spi+0x28>)
 8004ff8:	f7ff f929 	bl	800424e <HAL_SPI_TransmitReceive>
    return rxDat;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200009f4 	.word	0x200009f4

0800500c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e00a      	b.n	8005032 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	18d4      	adds	r4, r2, r3
 8005022:	20ff      	movs	r0, #255	; 0xff
 8005024:	f7ff ffdc 	bl	8004fe0 <xchg_spi>
 8005028:	4603      	mov	r3, r0
 800502a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d3f0      	bcc.n	800501c <rcvr_spi_multi+0x10>
	}
}
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bd90      	pop	{r4, r7, pc}

08005044 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	b29a      	uxth	r2, r3
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4803      	ldr	r0, [pc, #12]	; (8005068 <xmit_spi_multi+0x24>)
 800505a:	f7fe ffbc 	bl	8003fd6 <HAL_SPI_Transmit>
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200009f4 	.word	0x200009f4

0800506c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005074:	f7fc fa6c 	bl	8001550 <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800507e:	20ff      	movs	r0, #255	; 0xff
 8005080:	f7ff ffae 	bl	8004fe0 <xchg_spi>
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2bff      	cmp	r3, #255	; 0xff
 800508c:	d007      	beq.n	800509e <wait_ready+0x32>
 800508e:	f7fc fa5f 	bl	8001550 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	429a      	cmp	r2, r3
 800509c:	d8ef      	bhi.n	800507e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2bff      	cmp	r3, #255	; 0xff
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80050b8:	2201      	movs	r2, #1
 80050ba:	2102      	movs	r1, #2
 80050bc:	4803      	ldr	r0, [pc, #12]	; (80050cc <despiselect+0x18>)
 80050be:	f7fd f909 	bl	80022d4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80050c2:	20ff      	movs	r0, #255	; 0xff
 80050c4:	f7ff ff8c 	bl	8004fe0 <xchg_spi>

}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40020400 	.word	0x40020400

080050d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80050d4:	2200      	movs	r2, #0
 80050d6:	2102      	movs	r1, #2
 80050d8:	4809      	ldr	r0, [pc, #36]	; (8005100 <spiselect+0x30>)
 80050da:	f7fd f8fb 	bl	80022d4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80050de:	20ff      	movs	r0, #255	; 0xff
 80050e0:	f7ff ff7e 	bl	8004fe0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80050e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050e8:	f7ff ffc0 	bl	800506c <wait_ready>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <spiselect+0x26>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e002      	b.n	80050fc <spiselect+0x2c>

	despiselect();
 80050f6:	f7ff ffdd 	bl	80050b4 <despiselect>
	return 0;	/* Timeout */
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40020400 	.word	0x40020400

08005104 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800510e:	20c8      	movs	r0, #200	; 0xc8
 8005110:	f7ff ff3c 	bl	8004f8c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005114:	20ff      	movs	r0, #255	; 0xff
 8005116:	f7ff ff63 	bl	8004fe0 <xchg_spi>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2bff      	cmp	r3, #255	; 0xff
 8005122:	d104      	bne.n	800512e <rcvr_datablock+0x2a>
 8005124:	f7ff ff46 	bl	8004fb4 <SPI_Timer_Status>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f2      	bne.n	8005114 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2bfe      	cmp	r3, #254	; 0xfe
 8005132:	d001      	beq.n	8005138 <rcvr_datablock+0x34>
 8005134:	2300      	movs	r3, #0
 8005136:	e00a      	b.n	800514e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ff66 	bl	800500c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005140:	20ff      	movs	r0, #255	; 0xff
 8005142:	f7ff ff4d 	bl	8004fe0 <xchg_spi>
 8005146:	20ff      	movs	r0, #255	; 0xff
 8005148:	f7ff ff4a 	bl	8004fe0 <xchg_spi>

	return 1;						/* Function succeeded */
 800514c:	2301      	movs	r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005166:	f7ff ff81 	bl	800506c <wait_ready>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <xmit_datablock+0x1e>
 8005170:	2300      	movs	r3, #0
 8005172:	e01e      	b.n	80051b2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff ff32 	bl	8004fe0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	2bfd      	cmp	r3, #253	; 0xfd
 8005180:	d016      	beq.n	80051b0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ff5c 	bl	8005044 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800518c:	20ff      	movs	r0, #255	; 0xff
 800518e:	f7ff ff27 	bl	8004fe0 <xchg_spi>
 8005192:	20ff      	movs	r0, #255	; 0xff
 8005194:	f7ff ff24 	bl	8004fe0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005198:	20ff      	movs	r0, #255	; 0xff
 800519a:	f7ff ff21 	bl	8004fe0 <xchg_spi>
 800519e:	4603      	mov	r3, r0
 80051a0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d001      	beq.n	80051b0 <xmit_datablock+0x5a>
 80051ac:	2300      	movs	r3, #0
 80051ae:	e000      	b.n	80051b2 <xmit_datablock+0x5c>
	}
	return 1;
 80051b0:	2301      	movs	r3, #1
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	4603      	mov	r3, r0
 80051c2:	6039      	str	r1, [r7, #0]
 80051c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0e      	bge.n	80051ec <send_cmd+0x32>
		cmd &= 0x7F;
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80051d6:	2100      	movs	r1, #0
 80051d8:	2037      	movs	r0, #55	; 0x37
 80051da:	f7ff ffee 	bl	80051ba <send_cmd>
 80051de:	4603      	mov	r3, r0
 80051e0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80051e2:	7bbb      	ldrb	r3, [r7, #14]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d901      	bls.n	80051ec <send_cmd+0x32>
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	e051      	b.n	8005290 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d008      	beq.n	8005204 <send_cmd+0x4a>
		despiselect();
 80051f2:	f7ff ff5f 	bl	80050b4 <despiselect>
		if (!spiselect()) return 0xFF;
 80051f6:	f7ff ff6b 	bl	80050d0 <spiselect>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <send_cmd+0x4a>
 8005200:	23ff      	movs	r3, #255	; 0xff
 8005202:	e045      	b.n	8005290 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520a:	b2db      	uxtb	r3, r3
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fee7 	bl	8004fe0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fee1 	bl	8004fe0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	b2db      	uxtb	r3, r3
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fedb 	bl	8004fe0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fed5 	bl	8004fe0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fed0 	bl	8004fe0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <send_cmd+0x94>
 800524a:	2395      	movs	r3, #149	; 0x95
 800524c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d101      	bne.n	8005258 <send_cmd+0x9e>
 8005254:	2387      	movs	r3, #135	; 0x87
 8005256:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fec0 	bl	8004fe0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d102      	bne.n	800526c <send_cmd+0xb2>
 8005266:	20ff      	movs	r0, #255	; 0xff
 8005268:	f7ff feba 	bl	8004fe0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800526c:	230a      	movs	r3, #10
 800526e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005270:	20ff      	movs	r0, #255	; 0xff
 8005272:	f7ff feb5 	bl	8004fe0 <xchg_spi>
 8005276:	4603      	mov	r3, r0
 8005278:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800527a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da05      	bge.n	800528e <send_cmd+0xd4>
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	3b01      	subs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <send_cmd+0xb6>

	return res;							/* Return received response */
 800528e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <USER_SPI_initialize+0x14>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0d6      	b.n	800545a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80052ac:	4b6d      	ldr	r3, [pc, #436]	; (8005464 <USER_SPI_initialize+0x1cc>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <USER_SPI_initialize+0x2a>
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <USER_SPI_initialize+0x1cc>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e0cb      	b.n	800545a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80052c2:	4b69      	ldr	r3, [pc, #420]	; (8005468 <USER_SPI_initialize+0x1d0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80052cc:	4b66      	ldr	r3, [pc, #408]	; (8005468 <USER_SPI_initialize+0x1d0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80052d4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80052d6:	230a      	movs	r3, #10
 80052d8:	73fb      	strb	r3, [r7, #15]
 80052da:	e005      	b.n	80052e8 <USER_SPI_initialize+0x50>
 80052dc:	20ff      	movs	r0, #255	; 0xff
 80052de:	f7ff fe7f 	bl	8004fe0 <xchg_spi>
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f6      	bne.n	80052dc <USER_SPI_initialize+0x44>

	ty = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80052f2:	2100      	movs	r1, #0
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7ff ff60 	bl	80051ba <send_cmd>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 808b 	bne.w	8005418 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005306:	f7ff fe41 	bl	8004f8c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800530a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800530e:	2008      	movs	r0, #8
 8005310:	f7ff ff53 	bl	80051ba <send_cmd>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d151      	bne.n	80053be <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	e00d      	b.n	800533c <USER_SPI_initialize+0xa4>
 8005320:	7bfc      	ldrb	r4, [r7, #15]
 8005322:	20ff      	movs	r0, #255	; 0xff
 8005324:	f7ff fe5c 	bl	8004fe0 <xchg_spi>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	f104 0310 	add.w	r3, r4, #16
 8005330:	443b      	add	r3, r7
 8005332:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	3301      	adds	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b03      	cmp	r3, #3
 8005340:	d9ee      	bls.n	8005320 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005342:	7abb      	ldrb	r3, [r7, #10]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d167      	bne.n	8005418 <USER_SPI_initialize+0x180>
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	2baa      	cmp	r3, #170	; 0xaa
 800534c:	d164      	bne.n	8005418 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800534e:	bf00      	nop
 8005350:	f7ff fe30 	bl	8004fb4 <SPI_Timer_Status>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <USER_SPI_initialize+0xd2>
 800535a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800535e:	20a9      	movs	r0, #169	; 0xa9
 8005360:	f7ff ff2b 	bl	80051ba <send_cmd>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f2      	bne.n	8005350 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800536a:	f7ff fe23 	bl	8004fb4 <SPI_Timer_Status>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d051      	beq.n	8005418 <USER_SPI_initialize+0x180>
 8005374:	2100      	movs	r1, #0
 8005376:	203a      	movs	r0, #58	; 0x3a
 8005378:	f7ff ff1f 	bl	80051ba <send_cmd>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d14a      	bne.n	8005418 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
 8005386:	e00d      	b.n	80053a4 <USER_SPI_initialize+0x10c>
 8005388:	7bfc      	ldrb	r4, [r7, #15]
 800538a:	20ff      	movs	r0, #255	; 0xff
 800538c:	f7ff fe28 	bl	8004fe0 <xchg_spi>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	f104 0310 	add.w	r3, r4, #16
 8005398:	443b      	add	r3, r7
 800539a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	3301      	adds	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d9ee      	bls.n	8005388 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80053aa:	7a3b      	ldrb	r3, [r7, #8]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <USER_SPI_initialize+0x120>
 80053b4:	230c      	movs	r3, #12
 80053b6:	e000      	b.n	80053ba <USER_SPI_initialize+0x122>
 80053b8:	2304      	movs	r3, #4
 80053ba:	737b      	strb	r3, [r7, #13]
 80053bc:	e02c      	b.n	8005418 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80053be:	2100      	movs	r1, #0
 80053c0:	20a9      	movs	r0, #169	; 0xa9
 80053c2:	f7ff fefa 	bl	80051ba <send_cmd>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d804      	bhi.n	80053d6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80053cc:	2302      	movs	r3, #2
 80053ce:	737b      	strb	r3, [r7, #13]
 80053d0:	23a9      	movs	r3, #169	; 0xa9
 80053d2:	73bb      	strb	r3, [r7, #14]
 80053d4:	e003      	b.n	80053de <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80053d6:	2301      	movs	r3, #1
 80053d8:	737b      	strb	r3, [r7, #13]
 80053da:	2301      	movs	r3, #1
 80053dc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80053de:	bf00      	nop
 80053e0:	f7ff fde8 	bl	8004fb4 <SPI_Timer_Status>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <USER_SPI_initialize+0x162>
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fee3 	bl	80051ba <send_cmd>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f2      	bne.n	80053e0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80053fa:	f7ff fddb 	bl	8004fb4 <SPI_Timer_Status>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <USER_SPI_initialize+0x17c>
 8005404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005408:	2010      	movs	r0, #16
 800540a:	f7ff fed6 	bl	80051ba <send_cmd>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USER_SPI_initialize+0x180>
				ty = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <USER_SPI_initialize+0x1d4>)
 800541a:	7b7b      	ldrb	r3, [r7, #13]
 800541c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800541e:	f7ff fe49 	bl	80050b4 <despiselect>

	if (ty) {			/* OK */
 8005422:	7b7b      	ldrb	r3, [r7, #13]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <USER_SPI_initialize+0x1d0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <USER_SPI_initialize+0x1d0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0210 	orr.w	r2, r2, #16
 800543a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <USER_SPI_initialize+0x1cc>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <USER_SPI_initialize+0x1cc>)
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e002      	b.n	8005454 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <USER_SPI_initialize+0x1cc>)
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <USER_SPI_initialize+0x1cc>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bd90      	pop	{r4, r7, pc}
 8005462:	bf00      	nop
 8005464:	2000045c 	.word	0x2000045c
 8005468:	200009f4 	.word	0x200009f4
 800546c:	20000cac 	.word	0x20000cac

08005470 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <USER_SPI_status+0x14>
 8005480:	2301      	movs	r3, #1
 8005482:	e002      	b.n	800548a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <USER_SPI_status+0x28>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	b2db      	uxtb	r3, r3
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	2000045c 	.word	0x2000045c

0800549c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <USER_SPI_read+0x1c>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <USER_SPI_read+0x20>
 80054b8:	2304      	movs	r3, #4
 80054ba:	e04d      	b.n	8005558 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <USER_SPI_read+0xc4>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <USER_SPI_read+0x32>
 80054ca:	2303      	movs	r3, #3
 80054cc:	e044      	b.n	8005558 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80054ce:	4b25      	ldr	r3, [pc, #148]	; (8005564 <USER_SPI_read+0xc8>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <USER_SPI_read+0x44>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d111      	bne.n	800550a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	2011      	movs	r0, #17
 80054ea:	f7ff fe66 	bl	80051ba <send_cmd>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d129      	bne.n	8005548 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80054f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054f8:	68b8      	ldr	r0, [r7, #8]
 80054fa:	f7ff fe03 	bl	8005104 <rcvr_datablock>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d021      	beq.n	8005548 <USER_SPI_read+0xac>
			count = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	e01e      	b.n	8005548 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	2012      	movs	r0, #18
 800550e:	f7ff fe54 	bl	80051ba <send_cmd>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d117      	bne.n	8005548 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551c:	68b8      	ldr	r0, [r7, #8]
 800551e:	f7ff fdf1 	bl	8005104 <rcvr_datablock>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <USER_SPI_read+0xa2>
				buff += 512;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800552e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ed      	bne.n	8005518 <USER_SPI_read+0x7c>
 800553c:	e000      	b.n	8005540 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800553e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005540:	2100      	movs	r1, #0
 8005542:	200c      	movs	r0, #12
 8005544:	f7ff fe39 	bl	80051ba <send_cmd>
		}
	}
	despiselect();
 8005548:	f7ff fdb4 	bl	80050b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	2000045c 	.word	0x2000045c
 8005564:	20000cac 	.word	0x20000cac

08005568 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <USER_SPI_write+0x1c>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <USER_SPI_write+0x20>
 8005584:	2304      	movs	r3, #4
 8005586:	e063      	b.n	8005650 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005588:	4b33      	ldr	r3, [pc, #204]	; (8005658 <USER_SPI_write+0xf0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <USER_SPI_write+0x32>
 8005596:	2303      	movs	r3, #3
 8005598:	e05a      	b.n	8005650 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800559a:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <USER_SPI_write+0xf0>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <USER_SPI_write+0x44>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e051      	b.n	8005650 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80055ac:	4b2b      	ldr	r3, [pc, #172]	; (800565c <USER_SPI_write+0xf4>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <USER_SPI_write+0x56>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	025b      	lsls	r3, r3, #9
 80055bc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d110      	bne.n	80055e6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	2018      	movs	r0, #24
 80055c8:	f7ff fdf7 	bl	80051ba <send_cmd>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d136      	bne.n	8005640 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80055d2:	21fe      	movs	r1, #254	; 0xfe
 80055d4:	68b8      	ldr	r0, [r7, #8]
 80055d6:	f7ff fdbe 	bl	8005156 <xmit_datablock>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02f      	beq.n	8005640 <USER_SPI_write+0xd8>
			count = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	e02c      	b.n	8005640 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <USER_SPI_write+0xf4>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f003 0306 	and.w	r3, r3, #6
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <USER_SPI_write+0x92>
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	2097      	movs	r0, #151	; 0x97
 80055f6:	f7ff fde0 	bl	80051ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	2019      	movs	r0, #25
 80055fe:	f7ff fddc 	bl	80051ba <send_cmd>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11b      	bne.n	8005640 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005608:	21fc      	movs	r1, #252	; 0xfc
 800560a:	68b8      	ldr	r0, [r7, #8]
 800560c:	f7ff fda3 	bl	8005156 <xmit_datablock>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <USER_SPI_write+0xc4>
				buff += 512;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800561c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ee      	bne.n	8005608 <USER_SPI_write+0xa0>
 800562a:	e000      	b.n	800562e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800562c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800562e:	21fd      	movs	r1, #253	; 0xfd
 8005630:	2000      	movs	r0, #0
 8005632:	f7ff fd90 	bl	8005156 <xmit_datablock>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <USER_SPI_write+0xd8>
 800563c:	2301      	movs	r3, #1
 800563e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005640:	f7ff fd38 	bl	80050b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	2000045c 	.word	0x2000045c
 800565c:	20000cac 	.word	0x20000cac

08005660 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08c      	sub	sp, #48	; 0x30
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	603a      	str	r2, [r7, #0]
 800566a:	71fb      	strb	r3, [r7, #7]
 800566c:	460b      	mov	r3, r1
 800566e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <USER_SPI_ioctl+0x1a>
 8005676:	2304      	movs	r3, #4
 8005678:	e15a      	b.n	8005930 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800567a:	4baf      	ldr	r3, [pc, #700]	; (8005938 <USER_SPI_ioctl+0x2d8>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <USER_SPI_ioctl+0x2c>
 8005688:	2303      	movs	r3, #3
 800568a:	e151      	b.n	8005930 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005692:	79bb      	ldrb	r3, [r7, #6]
 8005694:	2b04      	cmp	r3, #4
 8005696:	f200 8136 	bhi.w	8005906 <USER_SPI_ioctl+0x2a6>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <USER_SPI_ioctl+0x40>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056b5 	.word	0x080056b5
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	08005907 	.word	0x08005907
 80056ac:	08005775 	.word	0x08005775
 80056b0:	0800586b 	.word	0x0800586b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80056b4:	f7ff fd0c 	bl	80050d0 <spiselect>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8127 	beq.w	800590e <USER_SPI_ioctl+0x2ae>
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80056c6:	e122      	b.n	800590e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80056c8:	2100      	movs	r1, #0
 80056ca:	2009      	movs	r0, #9
 80056cc:	f7ff fd75 	bl	80051ba <send_cmd>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f040 811d 	bne.w	8005912 <USER_SPI_ioctl+0x2b2>
 80056d8:	f107 030c 	add.w	r3, r7, #12
 80056dc:	2110      	movs	r1, #16
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fd10 	bl	8005104 <rcvr_datablock>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8113 	beq.w	8005912 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80056ec:	7b3b      	ldrb	r3, [r7, #12]
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d111      	bne.n	800571a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80056f6:	7d7b      	ldrb	r3, [r7, #21]
 80056f8:	461a      	mov	r2, r3
 80056fa:	7d3b      	ldrb	r3, [r7, #20]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4413      	add	r3, r2
 8005700:	461a      	mov	r2, r3
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800570a:	4413      	add	r3, r2
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	029a      	lsls	r2, r3, #10
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e028      	b.n	800576c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800571a:	7c7b      	ldrb	r3, [r7, #17]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	b2da      	uxtb	r2, r3
 8005722:	7dbb      	ldrb	r3, [r7, #22]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4413      	add	r3, r2
 800572a:	b2da      	uxtb	r2, r3
 800572c:	7d7b      	ldrb	r3, [r7, #21]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 0306 	and.w	r3, r3, #6
 8005736:	b2db      	uxtb	r3, r3
 8005738:	4413      	add	r3, r2
 800573a:	b2db      	uxtb	r3, r3
 800573c:	3302      	adds	r3, #2
 800573e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005742:	7d3b      	ldrb	r3, [r7, #20]
 8005744:	099b      	lsrs	r3, r3, #6
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	7cfb      	ldrb	r3, [r7, #19]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	7cbb      	ldrb	r3, [r7, #18]
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005758:	4413      	add	r3, r2
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800575e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005762:	3b09      	subs	r3, #9
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	409a      	lsls	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005772:	e0ce      	b.n	8005912 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005774:	4b71      	ldr	r3, [pc, #452]	; (800593c <USER_SPI_ioctl+0x2dc>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d031      	beq.n	80057e4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005780:	2100      	movs	r1, #0
 8005782:	208d      	movs	r0, #141	; 0x8d
 8005784:	f7ff fd19 	bl	80051ba <send_cmd>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 80c3 	bne.w	8005916 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005790:	20ff      	movs	r0, #255	; 0xff
 8005792:	f7ff fc25 	bl	8004fe0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005796:	f107 030c 	add.w	r3, r7, #12
 800579a:	2110      	movs	r1, #16
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fcb1 	bl	8005104 <rcvr_datablock>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80b6 	beq.w	8005916 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80057aa:	2330      	movs	r3, #48	; 0x30
 80057ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80057b0:	e007      	b.n	80057c2 <USER_SPI_ioctl+0x162>
 80057b2:	20ff      	movs	r0, #255	; 0xff
 80057b4:	f7ff fc14 	bl	8004fe0 <xchg_spi>
 80057b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057bc:	3b01      	subs	r3, #1
 80057be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80057c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f3      	bne.n	80057b2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80057ca:	7dbb      	ldrb	r3, [r7, #22]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	2310      	movs	r3, #16
 80057d4:	fa03 f202 	lsl.w	r2, r3, r2
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80057e2:	e098      	b.n	8005916 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80057e4:	2100      	movs	r1, #0
 80057e6:	2009      	movs	r0, #9
 80057e8:	f7ff fce7 	bl	80051ba <send_cmd>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 8091 	bne.w	8005916 <USER_SPI_ioctl+0x2b6>
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	2110      	movs	r1, #16
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fc82 	bl	8005104 <rcvr_datablock>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8087 	beq.w	8005916 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005808:	4b4c      	ldr	r3, [pc, #304]	; (800593c <USER_SPI_ioctl+0x2dc>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005814:	7dbb      	ldrb	r3, [r7, #22]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800581c:	7dfa      	ldrb	r2, [r7, #23]
 800581e:	09d2      	lsrs	r2, r2, #7
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	4413      	add	r3, r2
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	7e7b      	ldrb	r3, [r7, #25]
 8005828:	099b      	lsrs	r3, r3, #6
 800582a:	b2db      	uxtb	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	461a      	mov	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e013      	b.n	8005862 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800583a:	7dbb      	ldrb	r3, [r7, #22]
 800583c:	109b      	asrs	r3, r3, #2
 800583e:	b29b      	uxth	r3, r3
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	3301      	adds	r3, #1
 8005846:	7dfa      	ldrb	r2, [r7, #23]
 8005848:	00d2      	lsls	r2, r2, #3
 800584a:	f002 0218 	and.w	r2, r2, #24
 800584e:	7df9      	ldrb	r1, [r7, #23]
 8005850:	0949      	lsrs	r1, r1, #5
 8005852:	b2c9      	uxtb	r1, r1
 8005854:	440a      	add	r2, r1
 8005856:	3201      	adds	r2, #1
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	461a      	mov	r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005868:	e055      	b.n	8005916 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800586a:	4b34      	ldr	r3, [pc, #208]	; (800593c <USER_SPI_ioctl+0x2dc>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f003 0306 	and.w	r3, r3, #6
 8005872:	2b00      	cmp	r3, #0
 8005874:	d051      	beq.n	800591a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005876:	f107 020c 	add.w	r2, r7, #12
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	210b      	movs	r1, #11
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff feee 	bl	8005660 <USER_SPI_ioctl>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d149      	bne.n	800591e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800588a:	7b3b      	ldrb	r3, [r7, #12]
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <USER_SPI_ioctl+0x23e>
 8005894:	7dbb      	ldrb	r3, [r7, #22]
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d041      	beq.n	8005922 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <USER_SPI_ioctl+0x2dc>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	025b      	lsls	r3, r3, #9
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	025b      	lsls	r3, r3, #9
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80058c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058c8:	2020      	movs	r0, #32
 80058ca:	f7ff fc76 	bl	80051ba <send_cmd>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d128      	bne.n	8005926 <USER_SPI_ioctl+0x2c6>
 80058d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d6:	2021      	movs	r0, #33	; 0x21
 80058d8:	f7ff fc6f 	bl	80051ba <send_cmd>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d121      	bne.n	8005926 <USER_SPI_ioctl+0x2c6>
 80058e2:	2100      	movs	r1, #0
 80058e4:	2026      	movs	r0, #38	; 0x26
 80058e6:	f7ff fc68 	bl	80051ba <send_cmd>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11a      	bne.n	8005926 <USER_SPI_ioctl+0x2c6>
 80058f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80058f4:	f7ff fbba 	bl	800506c <wait_ready>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d013      	beq.n	8005926 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005904:	e00f      	b.n	8005926 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005906:	2304      	movs	r3, #4
 8005908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800590c:	e00c      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		break;
 800590e:	bf00      	nop
 8005910:	e00a      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		break;
 8005912:	bf00      	nop
 8005914:	e008      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		break;
 8005916:	bf00      	nop
 8005918:	e006      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800591a:	bf00      	nop
 800591c:	e004      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <USER_SPI_ioctl+0x2c8>
		break;
 8005926:	bf00      	nop
	}

	despiselect();
 8005928:	f7ff fbc4 	bl	80050b4 <despiselect>

	return res;
 800592c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005930:	4618      	mov	r0, r3
 8005932:	3730      	adds	r7, #48	; 0x30
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	2000045c 	.word	0x2000045c
 800593c:	20000cac 	.word	0x20000cac

08005940 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <disk_status+0x30>)
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	79fa      	ldrb	r2, [r7, #7]
 8005958:	4905      	ldr	r1, [pc, #20]	; (8005970 <disk_status+0x30>)
 800595a:	440a      	add	r2, r1
 800595c:	7a12      	ldrb	r2, [r2, #8]
 800595e:	4610      	mov	r0, r2
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000ce0 	.word	0x20000ce0

08005974 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <disk_initialize+0x48>)
 8005986:	5cd3      	ldrb	r3, [r2, r3]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d111      	bne.n	80059b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <disk_initialize+0x48>)
 8005990:	2101      	movs	r1, #1
 8005992:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	4a09      	ldr	r2, [pc, #36]	; (80059bc <disk_initialize+0x48>)
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	79fa      	ldrb	r2, [r7, #7]
 80059a2:	4906      	ldr	r1, [pc, #24]	; (80059bc <disk_initialize+0x48>)
 80059a4:	440a      	add	r2, r1
 80059a6:	7a12      	ldrb	r2, [r2, #8]
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000ce0 	.word	0x20000ce0

080059c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80059c0:	b590      	push	{r4, r7, lr}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <disk_read+0x3c>)
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	689c      	ldr	r4, [r3, #8]
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	4a07      	ldr	r2, [pc, #28]	; (80059fc <disk_read+0x3c>)
 80059e0:	4413      	add	r3, r2
 80059e2:	7a18      	ldrb	r0, [r3, #8]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	47a0      	blx	r4
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd90      	pop	{r4, r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000ce0 	.word	0x20000ce0

08005a00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <disk_write+0x3c>)
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	68dc      	ldr	r4, [r3, #12]
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <disk_write+0x3c>)
 8005a20:	4413      	add	r3, r2
 8005a22:	7a18      	ldrb	r0, [r3, #8]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	47a0      	blx	r4
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000ce0 	.word	0x20000ce0

08005a40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	603a      	str	r2, [r7, #0]
 8005a4a:	71fb      	strb	r3, [r7, #7]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <disk_ioctl+0x38>)
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	79fa      	ldrb	r2, [r7, #7]
 8005a5e:	4906      	ldr	r1, [pc, #24]	; (8005a78 <disk_ioctl+0x38>)
 8005a60:	440a      	add	r2, r1
 8005a62:	7a10      	ldrb	r0, [r2, #8]
 8005a64:	79b9      	ldrb	r1, [r7, #6]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	4798      	blx	r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000ce0 	.word	0x20000ce0

08005a7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3301      	adds	r3, #1
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	b21a      	sxth	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	b21b      	sxth	r3, r3
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	b21b      	sxth	r3, r3
 8005a9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3303      	adds	r3, #3
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	3202      	adds	r2, #2
 8005ac4:	7812      	ldrb	r2, [r2, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	3201      	adds	r2, #1
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	7812      	ldrb	r2, [r2, #0]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	1c53      	adds	r3, r2, #1
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	6179      	str	r1, [r7, #20]
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f1      	bne.n	8005b9a <mem_cpy+0x1a>
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	617a      	str	r2, [r7, #20]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f3      	bne.n	8005bd2 <mem_set+0x10>
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	61ba      	str	r2, [r7, #24]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	1acb      	subs	r3, r1, r3
 8005c24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	607b      	str	r3, [r7, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <mem_cmp+0x40>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0eb      	beq.n	8005c10 <mem_cmp+0x18>

	return r;
 8005c38:	697b      	ldr	r3, [r7, #20]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3724      	adds	r7, #36	; 0x24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005c50:	e002      	b.n	8005c58 <chk_chr+0x12>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3301      	adds	r3, #1
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <chk_chr+0x26>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d1f2      	bne.n	8005c52 <chk_chr+0xc>
	return *str;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e029      	b.n	8005ce4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005c90:	4a27      	ldr	r2, [pc, #156]	; (8005d30 <chk_lock+0xb4>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4413      	add	r3, r2
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01d      	beq.n	8005cda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c9e:	4a24      	ldr	r2, [pc, #144]	; (8005d30 <chk_lock+0xb4>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d116      	bne.n	8005cde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <chk_lock+0xb4>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d10c      	bne.n	8005cde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	; (8005d30 <chk_lock+0xb4>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	4413      	add	r3, r2
 8005ccc:	3308      	adds	r3, #8
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d102      	bne.n	8005cde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005cd8:	e007      	b.n	8005cea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d9d2      	bls.n	8005c90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d109      	bne.n	8005d04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <chk_lock+0x80>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d101      	bne.n	8005d00 <chk_lock+0x84>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e010      	b.n	8005d22 <chk_lock+0xa6>
 8005d00:	2312      	movs	r3, #18
 8005d02:	e00e      	b.n	8005d22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d108      	bne.n	8005d1c <chk_lock+0xa0>
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <chk_lock+0xb4>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	4413      	add	r3, r2
 8005d12:	330c      	adds	r3, #12
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1a:	d101      	bne.n	8005d20 <chk_lock+0xa4>
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	e000      	b.n	8005d22 <chk_lock+0xa6>
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000cc0 	.word	0x20000cc0

08005d34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	e002      	b.n	8005d46 <enq_lock+0x12>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3301      	adds	r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d806      	bhi.n	8005d5a <enq_lock+0x26>
 8005d4c:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <enq_lock+0x40>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	4413      	add	r3, r2
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f2      	bne.n	8005d40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	bf14      	ite	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	2300      	moveq	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000cc0 	.word	0x20000cc0

08005d78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e01f      	b.n	8005dc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005d88:	4a41      	ldr	r2, [pc, #260]	; (8005e90 <inc_lock+0x118>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4413      	add	r3, r2
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d113      	bne.n	8005dc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005d9a:	4a3d      	ldr	r2, [pc, #244]	; (8005e90 <inc_lock+0x118>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d109      	bne.n	8005dc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005dae:	4a38      	ldr	r2, [pc, #224]	; (8005e90 <inc_lock+0x118>)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	3308      	adds	r3, #8
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d006      	beq.n	8005dd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d9dc      	bls.n	8005d88 <inc_lock+0x10>
 8005dce:	e000      	b.n	8005dd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005dd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d132      	bne.n	8005e3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e002      	b.n	8005de4 <inc_lock+0x6c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d806      	bhi.n	8005df8 <inc_lock+0x80>
 8005dea:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <inc_lock+0x118>)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	4413      	add	r3, r2
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f2      	bne.n	8005dde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d101      	bne.n	8005e02 <inc_lock+0x8a>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e040      	b.n	8005e84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4922      	ldr	r1, [pc, #136]	; (8005e90 <inc_lock+0x118>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	440b      	add	r3, r1
 8005e0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	491e      	ldr	r1, [pc, #120]	; (8005e90 <inc_lock+0x118>)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	491a      	ldr	r1, [pc, #104]	; (8005e90 <inc_lock+0x118>)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <inc_lock+0x118>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4413      	add	r3, r2
 8005e38:	330c      	adds	r3, #12
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d009      	beq.n	8005e58 <inc_lock+0xe0>
 8005e44:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <inc_lock+0x118>)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	4413      	add	r3, r2
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <inc_lock+0xe0>
 8005e54:	2300      	movs	r3, #0
 8005e56:	e015      	b.n	8005e84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <inc_lock+0xf8>
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <inc_lock+0x118>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4413      	add	r3, r2
 8005e66:	330c      	adds	r3, #12
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	e001      	b.n	8005e74 <inc_lock+0xfc>
 8005e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e74:	4906      	ldr	r1, [pc, #24]	; (8005e90 <inc_lock+0x118>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	440b      	add	r3, r1
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3301      	adds	r3, #1
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000cc0 	.word	0x20000cc0

08005e94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d825      	bhi.n	8005ef4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005ea8:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <dec_lock+0x74>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005eb6:	89fb      	ldrh	r3, [r7, #14]
 8005eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebc:	d101      	bne.n	8005ec2 <dec_lock+0x2e>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005ec2:	89fb      	ldrh	r3, [r7, #14]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <dec_lock+0x3a>
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ece:	4a0e      	ldr	r2, [pc, #56]	; (8005f08 <dec_lock+0x74>)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	4413      	add	r3, r2
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	89fa      	ldrh	r2, [r7, #14]
 8005eda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005edc:	89fb      	ldrh	r3, [r7, #14]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <dec_lock+0x5a>
 8005ee2:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <dec_lock+0x74>)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	4413      	add	r3, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	737b      	strb	r3, [r7, #13]
 8005ef2:	e001      	b.n	8005ef8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ef8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000cc0 	.word	0x20000cc0

08005f0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	e010      	b.n	8005f3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005f1a:	4a0d      	ldr	r2, [pc, #52]	; (8005f50 <clear_lock+0x44>)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	4413      	add	r3, r2
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d105      	bne.n	8005f36 <clear_lock+0x2a>
 8005f2a:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <clear_lock+0x44>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	4413      	add	r3, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d9eb      	bls.n	8005f1a <clear_lock+0xe>
	}
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000cc0 	.word	0x20000cc0

08005f54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d034      	beq.n	8005fd2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7858      	ldrb	r0, [r3, #1]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f78:	2301      	movs	r3, #1
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	f7ff fd40 	bl	8005a00 <disk_write>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e022      	b.n	8005fd2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	1ad2      	subs	r2, r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d217      	bcs.n	8005fd2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	789b      	ldrb	r3, [r3, #2]
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	e010      	b.n	8005fcc <sync_window+0x78>
					wsect += fs->fsize;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7858      	ldrb	r0, [r3, #1]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	f7ff fd1d 	bl	8005a00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d8eb      	bhi.n	8005faa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d01b      	beq.n	800602c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ffad 	bl	8005f54 <sync_window>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d113      	bne.n	800602c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7858      	ldrb	r0, [r3, #1]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800600e:	2301      	movs	r3, #1
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	f7ff fcd5 	bl	80059c0 <disk_read>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800601c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006020:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff87 	bl	8005f54 <sync_window>
 8006046:	4603      	mov	r3, r0
 8006048:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d158      	bne.n	8006102 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b03      	cmp	r3, #3
 8006056:	d148      	bne.n	80060ea <sync_fs+0xb2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	791b      	ldrb	r3, [r3, #4]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d144      	bne.n	80060ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3330      	adds	r3, #48	; 0x30
 8006064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fda9 	bl	8005bc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3330      	adds	r3, #48	; 0x30
 8006074:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006078:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fd38 	bl	8005af2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3330      	adds	r3, #48	; 0x30
 8006086:	4921      	ldr	r1, [pc, #132]	; (800610c <sync_fs+0xd4>)
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff fd4d 	bl	8005b28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3330      	adds	r3, #48	; 0x30
 8006092:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006096:	491e      	ldr	r1, [pc, #120]	; (8006110 <sync_fs+0xd8>)
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fd45 	bl	8005b28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3330      	adds	r3, #48	; 0x30
 80060a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7ff fd3b 	bl	8005b28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3330      	adds	r3, #48	; 0x30
 80060b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f7ff fd31 	bl	8005b28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7858      	ldrb	r0, [r3, #1]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	2301      	movs	r3, #1
 80060e0:	f7ff fc8e 	bl	8005a00 <disk_write>
			fs->fsi_flag = 0;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fca4 	bl	8005a40 <disk_ioctl>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <sync_fs+0xca>
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	41615252 	.word	0x41615252
 8006110:	61417272 	.word	0x61417272

08006114 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	3b02      	subs	r3, #2
 8006122:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	3b02      	subs	r3, #2
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d301      	bcc.n	8006134 <clust2sect+0x20>
 8006130:	2300      	movs	r3, #0
 8006132:	e008      	b.n	8006146 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	895b      	ldrh	r3, [r3, #10]
 8006138:	461a      	mov	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	fb03 f202 	mul.w	r2, r3, r2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	4413      	add	r3, r2
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b086      	sub	sp, #24
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d904      	bls.n	8006172 <get_fat+0x20>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006172:	2301      	movs	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e08f      	b.n	8006298 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800617c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d062      	beq.n	800624c <get_fat+0xfa>
 8006186:	2b03      	cmp	r3, #3
 8006188:	dc7c      	bgt.n	8006284 <get_fat+0x132>
 800618a:	2b01      	cmp	r3, #1
 800618c:	d002      	beq.n	8006194 <get_fat+0x42>
 800618e:	2b02      	cmp	r3, #2
 8006190:	d042      	beq.n	8006218 <get_fat+0xc6>
 8006192:	e077      	b.n	8006284 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	0a5b      	lsrs	r3, r3, #9
 80061aa:	4413      	add	r3, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	6938      	ldr	r0, [r7, #16]
 80061b0:	f7ff ff14 	bl	8005fdc <move_window>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d167      	bne.n	800628a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	60fa      	str	r2, [r7, #12]
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	0a5b      	lsrs	r3, r3, #9
 80061d6:	4413      	add	r3, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	6938      	ldr	r0, [r7, #16]
 80061dc:	f7ff fefe 	bl	8005fdc <move_window>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d153      	bne.n	800628e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <get_fat+0xbc>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	e002      	b.n	8006214 <get_fat+0xc2>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006214:	617b      	str	r3, [r7, #20]
			break;
 8006216:	e03f      	b.n	8006298 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	4413      	add	r3, r2
 8006222:	4619      	mov	r1, r3
 8006224:	6938      	ldr	r0, [r7, #16]
 8006226:	f7ff fed9 	bl	8005fdc <move_window>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d130      	bne.n	8006292 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800623e:	4413      	add	r3, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fc1b 	bl	8005a7c <ld_word>
 8006246:	4603      	mov	r3, r0
 8006248:	617b      	str	r3, [r7, #20]
			break;
 800624a:	e025      	b.n	8006298 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	4413      	add	r3, r2
 8006256:	4619      	mov	r1, r3
 8006258:	6938      	ldr	r0, [r7, #16]
 800625a:	f7ff febf 	bl	8005fdc <move_window>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d118      	bne.n	8006296 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006272:	4413      	add	r3, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fc19 	bl	8005aac <ld_dword>
 800627a:	4603      	mov	r3, r0
 800627c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006280:	617b      	str	r3, [r7, #20]
			break;
 8006282:	e009      	b.n	8006298 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e006      	b.n	8006298 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800628a:	bf00      	nop
 800628c:	e004      	b.n	8006298 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006296:	bf00      	nop
		}
	}

	return val;
 8006298:	697b      	ldr	r3, [r7, #20]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80062a2:	b590      	push	{r4, r7, lr}
 80062a4:	b089      	sub	sp, #36	; 0x24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	f240 80d9 	bls.w	800646c <put_fat+0x1ca>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	f080 80d3 	bcs.w	800646c <put_fat+0x1ca>
		switch (fs->fs_type) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	f000 8096 	beq.w	80063fc <put_fat+0x15a>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	f300 80cb 	bgt.w	800646c <put_fat+0x1ca>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d002      	beq.n	80062e0 <put_fat+0x3e>
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d06e      	beq.n	80063bc <put_fat+0x11a>
 80062de:	e0c5      	b.n	800646c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4413      	add	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	0a5b      	lsrs	r3, r3, #9
 80062f6:	4413      	add	r3, r2
 80062f8:	4619      	mov	r1, r3
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fe6e 	bl	8005fdc <move_window>
 8006300:	4603      	mov	r3, r0
 8006302:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006304:	7ffb      	ldrb	r3, [r7, #31]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 80a9 	bne.w	800645e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	61b9      	str	r1, [r7, #24]
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	4413      	add	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <put_fat+0xa4>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	b25b      	sxtb	r3, r3
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	b25a      	sxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	b25b      	sxtb	r3, r3
 800633e:	4313      	orrs	r3, r2
 8006340:	b25b      	sxtb	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e001      	b.n	800634a <put_fat+0xa8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1a      	ldr	r2, [r3, #32]
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	0a5b      	lsrs	r3, r3, #9
 800635c:	4413      	add	r3, r2
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fe3b 	bl	8005fdc <move_window>
 8006366:	4603      	mov	r3, r0
 8006368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800636a:	7ffb      	ldrb	r3, [r7, #31]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d178      	bne.n	8006462 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637c:	4413      	add	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <put_fat+0xf0>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e00e      	b.n	80063b0 <put_fat+0x10e>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f023 030f 	bic.w	r3, r3, #15
 800639c:	b25a      	sxtb	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	70da      	strb	r2, [r3, #3]
			break;
 80063ba:	e057      	b.n	800646c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1a      	ldr	r2, [r3, #32]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	4413      	add	r3, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff fe07 	bl	8005fdc <move_window>
 80063ce:	4603      	mov	r3, r0
 80063d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063d2:	7ffb      	ldrb	r3, [r7, #31]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d146      	bne.n	8006466 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80063e6:	4413      	add	r3, r2
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	b292      	uxth	r2, r2
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fb7f 	bl	8005af2 <st_word>
			fs->wflag = 1;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	70da      	strb	r2, [r3, #3]
			break;
 80063fa:	e037      	b.n	800646c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	4413      	add	r3, r2
 8006406:	4619      	mov	r1, r3
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fde7 	bl	8005fdc <move_window>
 800640e:	4603      	mov	r3, r0
 8006410:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006412:	7ffb      	ldrb	r3, [r7, #31]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d128      	bne.n	800646a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800642c:	4413      	add	r3, r2
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fb3c 	bl	8005aac <ld_dword>
 8006434:	4603      	mov	r3, r0
 8006436:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800643a:	4323      	orrs	r3, r4
 800643c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800644c:	4413      	add	r3, r2
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fb69 	bl	8005b28 <st_dword>
			fs->wflag = 1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	70da      	strb	r2, [r3, #3]
			break;
 800645c:	e006      	b.n	800646c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800645e:	bf00      	nop
 8006460:	e004      	b.n	800646c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800646a:	bf00      	nop
		}
	}
	return res;
 800646c:	7ffb      	ldrb	r3, [r7, #31]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3724      	adds	r7, #36	; 0x24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd90      	pop	{r4, r7, pc}

08006476 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b088      	sub	sp, #32
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d904      	bls.n	800649c <remove_chain+0x26>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d301      	bcc.n	80064a0 <remove_chain+0x2a>
 800649c:	2302      	movs	r3, #2
 800649e:	e04b      	b.n	8006538 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00c      	beq.n	80064c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	69b8      	ldr	r0, [r7, #24]
 80064ae:	f7ff fef8 	bl	80062a2 <put_fat>
 80064b2:	4603      	mov	r3, r0
 80064b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <remove_chain+0x4a>
 80064bc:	7ffb      	ldrb	r3, [r7, #31]
 80064be:	e03b      	b.n	8006538 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff fe45 	bl	8006152 <get_fat>
 80064c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <remove_chain+0x64>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e02e      	b.n	8006538 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e0:	d101      	bne.n	80064e6 <remove_chain+0x70>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e028      	b.n	8006538 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80064e6:	2200      	movs	r2, #0
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	69b8      	ldr	r0, [r7, #24]
 80064ec:	f7ff fed9 	bl	80062a2 <put_fat>
 80064f0:	4603      	mov	r3, r0
 80064f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <remove_chain+0x88>
 80064fa:	7ffb      	ldrb	r3, [r7, #31]
 80064fc:	e01c      	b.n	8006538 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	3b02      	subs	r3, #2
 8006508:	429a      	cmp	r2, r3
 800650a:	d20b      	bcs.n	8006524 <remove_chain+0xae>
			fs->free_clst++;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	d3c6      	bcc.n	80064c0 <remove_chain+0x4a>
 8006532:	e000      	b.n	8006536 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006534:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10d      	bne.n	8006572 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <create_chain+0x2c>
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d31b      	bcc.n	80065a4 <create_chain+0x64>
 800656c:	2301      	movs	r3, #1
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e018      	b.n	80065a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fdec 	bl	8006152 <get_fat>
 800657a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d801      	bhi.n	8006586 <create_chain+0x46>
 8006582:	2301      	movs	r3, #1
 8006584:	e070      	b.n	8006668 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800658c:	d101      	bne.n	8006592 <create_chain+0x52>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	e06a      	b.n	8006668 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	429a      	cmp	r2, r3
 800659a:	d201      	bcs.n	80065a0 <create_chain+0x60>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	e063      	b.n	8006668 <create_chain+0x128>
		scl = clst;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	3301      	adds	r3, #1
 80065ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d307      	bcc.n	80065c8 <create_chain+0x88>
				ncl = 2;
 80065b8:	2302      	movs	r3, #2
 80065ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d901      	bls.n	80065c8 <create_chain+0x88>
 80065c4:	2300      	movs	r3, #0
 80065c6:	e04f      	b.n	8006668 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80065c8:	69f9      	ldr	r1, [r7, #28]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fdc1 	bl	8006152 <get_fat>
 80065d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00e      	beq.n	80065f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d003      	beq.n	80065e6 <create_chain+0xa6>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e4:	d101      	bne.n	80065ea <create_chain+0xaa>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	e03e      	b.n	8006668 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d1da      	bne.n	80065a8 <create_chain+0x68>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e038      	b.n	8006668 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80065f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80065f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065fc:	69f9      	ldr	r1, [r7, #28]
 80065fe:	6938      	ldr	r0, [r7, #16]
 8006600:	f7ff fe4f 	bl	80062a2 <put_fat>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006608:	7dfb      	ldrb	r3, [r7, #23]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <create_chain+0xe2>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6938      	ldr	r0, [r7, #16]
 800661a:	f7ff fe42 	bl	80062a2 <put_fat>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d116      	bne.n	8006656 <create_chain+0x116>
		fs->last_clst = ncl;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	3b02      	subs	r3, #2
 8006638:	429a      	cmp	r2, r3
 800663a:	d804      	bhi.n	8006646 <create_chain+0x106>
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	1e5a      	subs	r2, r3, #1
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	791b      	ldrb	r3, [r3, #4]
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	711a      	strb	r2, [r3, #4]
 8006654:	e007      	b.n	8006666 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d102      	bne.n	8006662 <create_chain+0x122>
 800665c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006660:	e000      	b.n	8006664 <create_chain+0x124>
 8006662:	2301      	movs	r3, #1
 8006664:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006666:	69fb      	ldr	r3, [r7, #28]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	3304      	adds	r3, #4
 8006686:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	8952      	ldrh	r2, [r2, #10]
 8006690:	fbb3 f3f2 	udiv	r3, r3, r2
 8006694:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	613a      	str	r2, [r7, #16]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <clmt_clust+0x3a>
 80066a6:	2300      	movs	r3, #0
 80066a8:	e010      	b.n	80066cc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d307      	bcc.n	80066c2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3304      	adds	r3, #4
 80066be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066c0:	e7e9      	b.n	8006696 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80066c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4413      	add	r3, r2
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ee:	d204      	bcs.n	80066fa <dir_sdi+0x22>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <dir_sdi+0x26>
		return FR_INT_ERR;
 80066fa:	2302      	movs	r3, #2
 80066fc:	e063      	b.n	80067c6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <dir_sdi+0x46>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d902      	bls.n	800671e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	8912      	ldrh	r2, [r2, #8]
 800672c:	4293      	cmp	r3, r2
 800672e:	d301      	bcc.n	8006734 <dir_sdi+0x5c>
 8006730:	2302      	movs	r3, #2
 8006732:	e048      	b.n	80067c6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	61da      	str	r2, [r3, #28]
 800673c:	e029      	b.n	8006792 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	895b      	ldrh	r3, [r3, #10]
 8006742:	025b      	lsls	r3, r3, #9
 8006744:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006746:	e019      	b.n	800677c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6979      	ldr	r1, [r7, #20]
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fd00 	bl	8006152 <get_fat>
 8006752:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675a:	d101      	bne.n	8006760 <dir_sdi+0x88>
 800675c:	2301      	movs	r3, #1
 800675e:	e032      	b.n	80067c6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d904      	bls.n	8006770 <dir_sdi+0x98>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	429a      	cmp	r2, r3
 800676e:	d301      	bcc.n	8006774 <dir_sdi+0x9c>
 8006770:	2302      	movs	r3, #2
 8006772:	e028      	b.n	80067c6 <dir_sdi+0xee>
			ofs -= csz;
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	429a      	cmp	r2, r3
 8006782:	d2e1      	bcs.n	8006748 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006784:	6979      	ldr	r1, [r7, #20]
 8006786:	6938      	ldr	r0, [r7, #16]
 8006788:	f7ff fcc4 	bl	8006114 <clust2sect>
 800678c:	4602      	mov	r2, r0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <dir_sdi+0xcc>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e010      	b.n	80067c6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	0a5b      	lsrs	r3, r3, #9
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067be:	441a      	add	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	3320      	adds	r3, #32
 80067e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <dir_next+0x28>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f4:	d301      	bcc.n	80067fa <dir_next+0x2c>
 80067f6:	2304      	movs	r3, #4
 80067f8:	e0aa      	b.n	8006950 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 8098 	bne.w	8006936 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	8912      	ldrh	r2, [r2, #8]
 8006820:	4293      	cmp	r3, r2
 8006822:	f0c0 8088 	bcc.w	8006936 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	61da      	str	r2, [r3, #28]
 800682c:	2304      	movs	r3, #4
 800682e:	e08f      	b.n	8006950 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	0a5b      	lsrs	r3, r3, #9
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	8952      	ldrh	r2, [r2, #10]
 8006838:	3a01      	subs	r2, #1
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d17a      	bne.n	8006936 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7ff fc82 	bl	8006152 <get_fat>
 800684e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d801      	bhi.n	800685a <dir_next+0x8c>
 8006856:	2302      	movs	r3, #2
 8006858:	e07a      	b.n	8006950 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006860:	d101      	bne.n	8006866 <dir_next+0x98>
 8006862:	2301      	movs	r3, #1
 8006864:	e074      	b.n	8006950 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	429a      	cmp	r2, r3
 800686e:	d358      	bcc.n	8006922 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	61da      	str	r2, [r3, #28]
 800687c:	2304      	movs	r3, #4
 800687e:	e067      	b.n	8006950 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7ff fe59 	bl	8006540 <create_chain>
 800688e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <dir_next+0xcc>
 8006896:	2307      	movs	r3, #7
 8006898:	e05a      	b.n	8006950 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <dir_next+0xd6>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e055      	b.n	8006950 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068aa:	d101      	bne.n	80068b0 <dir_next+0xe2>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e04f      	b.n	8006950 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fb4f 	bl	8005f54 <sync_window>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <dir_next+0xf2>
 80068bc:	2301      	movs	r3, #1
 80068be:	e047      	b.n	8006950 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3330      	adds	r3, #48	; 0x30
 80068c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c8:	2100      	movs	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff f979 	bl	8005bc2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fc1c 	bl	8006114 <clust2sect>
 80068dc:	4602      	mov	r2, r0
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80068e2:	e012      	b.n	800690a <dir_next+0x13c>
						fs->wflag = 1;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fb32 	bl	8005f54 <sync_window>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <dir_next+0x12c>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e02a      	b.n	8006950 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3301      	adds	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	62da      	str	r2, [r3, #44]	; 0x2c
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	895b      	ldrh	r3, [r3, #10]
 800690e:	461a      	mov	r2, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4293      	cmp	r3, r2
 8006914:	d3e6      	bcc.n	80068e4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad2      	subs	r2, r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006928:	6979      	ldr	r1, [r7, #20]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fbf2 	bl	8006114 <clust2sect>
 8006930:	4602      	mov	r2, r0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006948:	441a      	add	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff feb4 	bl	80066d8 <dir_sdi>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d12b      	bne.n	80069d2 <dir_alloc+0x7a>
		n = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4619      	mov	r1, r3
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fb29 	bl	8005fdc <move_window>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11d      	bne.n	80069d0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2be5      	cmp	r3, #229	; 0xe5
 800699c:	d004      	beq.n	80069a8 <dir_alloc+0x50>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3301      	adds	r3, #1
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d102      	bne.n	80069bc <dir_alloc+0x64>
 80069b6:	e00c      	b.n	80069d2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069bc:	2101      	movs	r1, #1
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ff05 	bl	80067ce <dir_next>
 80069c4:	4603      	mov	r3, r0
 80069c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0d7      	beq.n	800697e <dir_alloc+0x26>
 80069ce:	e000      	b.n	80069d2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80069d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d101      	bne.n	80069dc <dir_alloc+0x84>
 80069d8:	2307      	movs	r3, #7
 80069da:	75fb      	strb	r3, [r7, #23]
	return res;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	331a      	adds	r3, #26
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff f841 	bl	8005a7c <ld_word>
 80069fa:	4603      	mov	r3, r0
 80069fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d109      	bne.n	8006a1a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff f836 	bl	8005a7c <ld_word>
 8006a10:	4603      	mov	r3, r0
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	331a      	adds	r3, #26
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	b292      	uxth	r2, r2
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff f859 	bl	8005af2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d109      	bne.n	8006a5c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f103 0214 	add.w	r2, r3, #20
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7ff f84b 	bl	8005af2 <st_word>
	}
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fe2f 	bl	80066d8 <dir_sdi>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <dir_find+0x24>
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	e03e      	b.n	8006b06 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f7ff faa4 	bl	8005fdc <move_window>
 8006a94:	4603      	mov	r3, r0
 8006a96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d12f      	bne.n	8006afe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <dir_find+0x4e>
 8006aac:	2304      	movs	r3, #4
 8006aae:	75fb      	strb	r3, [r7, #23]
 8006ab0:	e028      	b.n	8006b04 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	330b      	adds	r3, #11
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	330b      	adds	r3, #11
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <dir_find+0x86>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a18      	ldr	r0, [r3, #32]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3324      	adds	r3, #36	; 0x24
 8006adc:	220b      	movs	r2, #11
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f7ff f88a 	bl	8005bf8 <mem_cmp>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006aea:	2100      	movs	r1, #0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fe6e 	bl	80067ce <dir_next>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0c5      	beq.n	8006a88 <dir_find+0x24>
 8006afc:	e002      	b.n	8006b04 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b02:	bf00      	nop

	return res;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ff1a 	bl	8006958 <dir_alloc>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d11c      	bne.n	8006b68 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	4619      	mov	r1, r3
 8006b34:	68b8      	ldr	r0, [r7, #8]
 8006b36:	f7ff fa51 	bl	8005fdc <move_window>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d111      	bne.n	8006b68 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff f838 	bl	8005bc2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a18      	ldr	r0, [r3, #32]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3324      	adds	r3, #36	; 0x24
 8006b5a:	220b      	movs	r2, #11
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f7ff f80f 	bl	8005b80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2201      	movs	r2, #1
 8006b66:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3324      	adds	r3, #36	; 0x24
 8006b88:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006b8a:	220b      	movs	r2, #11
 8006b8c:	2120      	movs	r1, #32
 8006b8e:	68b8      	ldr	r0, [r7, #8]
 8006b90:	f7ff f817 	bl	8005bc2 <mem_set>
	si = i = 0; ni = 8;
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	61fa      	str	r2, [r7, #28]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006bae:	7efb      	ldrb	r3, [r7, #27]
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d94e      	bls.n	8006c52 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006bb4:	7efb      	ldrb	r3, [r7, #27]
 8006bb6:	2b2f      	cmp	r3, #47	; 0x2f
 8006bb8:	d006      	beq.n	8006bc8 <create_name+0x54>
 8006bba:	7efb      	ldrb	r3, [r7, #27]
 8006bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8006bbe:	d110      	bne.n	8006be2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006bc0:	e002      	b.n	8006bc8 <create_name+0x54>
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8006bd2:	d0f6      	beq.n	8006bc2 <create_name+0x4e>
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b5c      	cmp	r3, #92	; 0x5c
 8006bde:	d0f0      	beq.n	8006bc2 <create_name+0x4e>
			break;
 8006be0:	e038      	b.n	8006c54 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006be2:	7efb      	ldrb	r3, [r7, #27]
 8006be4:	2b2e      	cmp	r3, #46	; 0x2e
 8006be6:	d003      	beq.n	8006bf0 <create_name+0x7c>
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d30c      	bcc.n	8006c0a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b0b      	cmp	r3, #11
 8006bf4:	d002      	beq.n	8006bfc <create_name+0x88>
 8006bf6:	7efb      	ldrb	r3, [r7, #27]
 8006bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bfa:	d001      	beq.n	8006c00 <create_name+0x8c>
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	e044      	b.n	8006c8a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006c00:	2308      	movs	r3, #8
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	230b      	movs	r3, #11
 8006c06:	617b      	str	r3, [r7, #20]
			continue;
 8006c08:	e022      	b.n	8006c50 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006c0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da04      	bge.n	8006c1c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006c12:	7efb      	ldrb	r3, [r7, #27]
 8006c14:	3b80      	subs	r3, #128	; 0x80
 8006c16:	4a1f      	ldr	r2, [pc, #124]	; (8006c94 <create_name+0x120>)
 8006c18:	5cd3      	ldrb	r3, [r2, r3]
 8006c1a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006c1c:	7efb      	ldrb	r3, [r7, #27]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	481d      	ldr	r0, [pc, #116]	; (8006c98 <create_name+0x124>)
 8006c22:	f7ff f810 	bl	8005c46 <chk_chr>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <create_name+0xbc>
 8006c2c:	2306      	movs	r3, #6
 8006c2e:	e02c      	b.n	8006c8a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006c30:	7efb      	ldrb	r3, [r7, #27]
 8006c32:	2b60      	cmp	r3, #96	; 0x60
 8006c34:	d905      	bls.n	8006c42 <create_name+0xce>
 8006c36:	7efb      	ldrb	r3, [r7, #27]
 8006c38:	2b7a      	cmp	r3, #122	; 0x7a
 8006c3a:	d802      	bhi.n	8006c42 <create_name+0xce>
 8006c3c:	7efb      	ldrb	r3, [r7, #27]
 8006c3e:	3b20      	subs	r3, #32
 8006c40:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	613a      	str	r2, [r7, #16]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	7efa      	ldrb	r2, [r7, #27]
 8006c4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006c50:	e7a6      	b.n	8006ba0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c52:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	441a      	add	r2, r3
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <create_name+0xf4>
 8006c64:	2306      	movs	r3, #6
 8006c66:	e010      	b.n	8006c8a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2be5      	cmp	r3, #229	; 0xe5
 8006c6e:	d102      	bne.n	8006c76 <create_name+0x102>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2205      	movs	r2, #5
 8006c74:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006c76:	7efb      	ldrb	r3, [r7, #27]
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d801      	bhi.n	8006c80 <create_name+0x10c>
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	e000      	b.n	8006c82 <create_name+0x10e>
 8006c80:	2200      	movs	r2, #0
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	330b      	adds	r3, #11
 8006c86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006c88:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	0800bde0 	.word	0x0800bde0
 8006c98:	0800bd44 	.word	0x0800bd44

08006c9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006cb0:	e002      	b.n	8006cb8 <follow_path+0x1c>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b2f      	cmp	r3, #47	; 0x2f
 8006cbe:	d0f8      	beq.n	8006cb2 <follow_path+0x16>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b5c      	cmp	r3, #92	; 0x5c
 8006cc6:	d0f4      	beq.n	8006cb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b1f      	cmp	r3, #31
 8006cd4:	d80a      	bhi.n	8006cec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2280      	movs	r2, #128	; 0x80
 8006cda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fcf9 	bl	80066d8 <dir_sdi>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
 8006cea:	e043      	b.n	8006d74 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006cec:	463b      	mov	r3, r7
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff ff3f 	bl	8006b74 <create_name>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d134      	bne.n	8006d6a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff feaf 	bl	8006a64 <dir_find>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d127      	bne.n	8006d6e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d122      	bne.n	8006d6e <follow_path+0xd2>
 8006d28:	2305      	movs	r3, #5
 8006d2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006d2c:	e01f      	b.n	8006d6e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d2e:	7afb      	ldrb	r3, [r7, #11]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	799b      	ldrb	r3, [r3, #6]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006d44:	2305      	movs	r3, #5
 8006d46:	75fb      	strb	r3, [r7, #23]
 8006d48:	e014      	b.n	8006d74 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d58:	4413      	add	r3, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fe42 	bl	80069e6 <ld_clust>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d68:	e7c0      	b.n	8006cec <follow_path+0x50>
			if (res != FR_OK) break;
 8006d6a:	bf00      	nop
 8006d6c:	e002      	b.n	8006d74 <follow_path+0xd8>
				break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d72:	bf00      	nop
			}
		}
	}

	return res;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b087      	sub	sp, #28
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d031      	beq.n	8006df8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e002      	b.n	8006da2 <get_ldnumber+0x24>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d903      	bls.n	8006db2 <get_ldnumber+0x34>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b3a      	cmp	r3, #58	; 0x3a
 8006db0:	d1f4      	bne.n	8006d9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b3a      	cmp	r3, #58	; 0x3a
 8006db8:	d11c      	bne.n	8006df4 <get_ldnumber+0x76>
			tp = *path;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	60fa      	str	r2, [r7, #12]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	3b30      	subs	r3, #48	; 0x30
 8006dca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d80e      	bhi.n	8006df0 <get_ldnumber+0x72>
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d10a      	bne.n	8006df0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d107      	bne.n	8006df0 <get_ldnumber+0x72>
					vol = (int)i;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3301      	adds	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	e002      	b.n	8006dfa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006df8:	693b      	ldr	r3, [r7, #16]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	70da      	strb	r2, [r3, #3]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff f8da 	bl	8005fdc <move_window>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <check_fs+0x2a>
 8006e2e:	2304      	movs	r3, #4
 8006e30:	e038      	b.n	8006ea4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3330      	adds	r3, #48	; 0x30
 8006e36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fe1e 	bl	8005a7c <ld_word>
 8006e40:	4603      	mov	r3, r0
 8006e42:	461a      	mov	r2, r3
 8006e44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <check_fs+0x48>
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e029      	b.n	8006ea4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e56:	2be9      	cmp	r3, #233	; 0xe9
 8006e58:	d009      	beq.n	8006e6e <check_fs+0x66>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e60:	2beb      	cmp	r3, #235	; 0xeb
 8006e62:	d11e      	bne.n	8006ea2 <check_fs+0x9a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e6a:	2b90      	cmp	r3, #144	; 0x90
 8006e6c:	d119      	bne.n	8006ea2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3330      	adds	r3, #48	; 0x30
 8006e72:	3336      	adds	r3, #54	; 0x36
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fe fe19 	bl	8005aac <ld_dword>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <check_fs+0xa4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d101      	bne.n	8006e8a <check_fs+0x82>
 8006e86:	2300      	movs	r3, #0
 8006e88:	e00c      	b.n	8006ea4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3330      	adds	r3, #48	; 0x30
 8006e8e:	3352      	adds	r3, #82	; 0x52
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fe0b 	bl	8005aac <ld_dword>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <check_fs+0xa8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d101      	bne.n	8006ea2 <check_fs+0x9a>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006ea2:	2302      	movs	r3, #2
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	00544146 	.word	0x00544146
 8006eb0:	33544146 	.word	0x33544146

08006eb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b096      	sub	sp, #88	; 0x58
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff ff58 	bl	8006d7e <get_ldnumber>
 8006ece:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da01      	bge.n	8006eda <find_volume+0x26>
 8006ed6:	230b      	movs	r3, #11
 8006ed8:	e22d      	b.n	8007336 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006eda:	4aa1      	ldr	r2, [pc, #644]	; (8007160 <find_volume+0x2ac>)
 8006edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <find_volume+0x3a>
 8006eea:	230c      	movs	r3, #12
 8006eec:	e223      	b.n	8007336 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01a      	beq.n	8006f3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fd19 	bl	8005940 <disk_status>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <find_volume+0x82>
 8006f26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f32:	230a      	movs	r3, #10
 8006f34:	e1ff      	b.n	8007336 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006f36:	2300      	movs	r3, #0
 8006f38:	e1fd      	b.n	8007336 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fd11 	bl	8005974 <disk_initialize>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f64:	2303      	movs	r3, #3
 8006f66:	e1e6      	b.n	8007336 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <find_volume+0xca>
 8006f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006f7a:	230a      	movs	r3, #10
 8006f7c:	e1db      	b.n	8007336 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f86:	f7ff ff3f 	bl	8006e08 <check_fs>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d149      	bne.n	800702c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f98:	2300      	movs	r3, #0
 8006f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f9c:	e01e      	b.n	8006fdc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006fac:	4413      	add	r3, r2
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <find_volume+0x114>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fd74 	bl	8005aac <ld_dword>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	e000      	b.n	8006fca <find_volume+0x116>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	3358      	adds	r3, #88	; 0x58
 8006fd0:	443b      	add	r3, r7
 8006fd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd8:	3301      	adds	r3, #1
 8006fda:	643b      	str	r3, [r7, #64]	; 0x40
 8006fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d9dd      	bls.n	8006f9e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <find_volume+0x13e>
 8006fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	3358      	adds	r3, #88	; 0x58
 8006ff8:	443b      	add	r3, r7
 8006ffa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ffe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <find_volume+0x15e>
 8007006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800700a:	f7ff fefd 	bl	8006e08 <check_fs>
 800700e:	4603      	mov	r3, r0
 8007010:	e000      	b.n	8007014 <find_volume+0x160>
 8007012:	2303      	movs	r3, #3
 8007014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800701c:	2b01      	cmp	r3, #1
 800701e:	d905      	bls.n	800702c <find_volume+0x178>
 8007020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007022:	3301      	adds	r3, #1
 8007024:	643b      	str	r3, [r7, #64]	; 0x40
 8007026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007028:	2b03      	cmp	r3, #3
 800702a:	d9e2      	bls.n	8006ff2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800702c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007030:	2b04      	cmp	r3, #4
 8007032:	d101      	bne.n	8007038 <find_volume+0x184>
 8007034:	2301      	movs	r3, #1
 8007036:	e17e      	b.n	8007336 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800703c:	2b01      	cmp	r3, #1
 800703e:	d901      	bls.n	8007044 <find_volume+0x190>
 8007040:	230d      	movs	r3, #13
 8007042:	e178      	b.n	8007336 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	3330      	adds	r3, #48	; 0x30
 8007048:	330b      	adds	r3, #11
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fd16 	bl	8005a7c <ld_word>
 8007050:	4603      	mov	r3, r0
 8007052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007056:	d001      	beq.n	800705c <find_volume+0x1a8>
 8007058:	230d      	movs	r3, #13
 800705a:	e16c      	b.n	8007336 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	3330      	adds	r3, #48	; 0x30
 8007060:	3316      	adds	r3, #22
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fd0a 	bl	8005a7c <ld_word>
 8007068:	4603      	mov	r3, r0
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800706c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <find_volume+0x1cc>
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	3330      	adds	r3, #48	; 0x30
 8007076:	3324      	adds	r3, #36	; 0x24
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fd17 	bl	8005aac <ld_dword>
 800707e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007084:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	789b      	ldrb	r3, [r3, #2]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d005      	beq.n	80070a4 <find_volume+0x1f0>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	789b      	ldrb	r3, [r3, #2]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d001      	beq.n	80070a4 <find_volume+0x1f0>
 80070a0:	230d      	movs	r3, #13
 80070a2:	e148      	b.n	8007336 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	789b      	ldrb	r3, [r3, #2]
 80070a8:	461a      	mov	r2, r3
 80070aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
 80070b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	895b      	ldrh	r3, [r3, #10]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <find_volume+0x224>
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	895b      	ldrh	r3, [r3, #10]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	895b      	ldrh	r3, [r3, #10]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <find_volume+0x228>
 80070d8:	230d      	movs	r3, #13
 80070da:	e12c      	b.n	8007336 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	3330      	adds	r3, #48	; 0x30
 80070e0:	3311      	adds	r3, #17
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fcca 	bl	8005a7c <ld_word>
 80070e8:	4603      	mov	r3, r0
 80070ea:	461a      	mov	r2, r3
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	891b      	ldrh	r3, [r3, #8]
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <find_volume+0x24e>
 80070fe:	230d      	movs	r3, #13
 8007100:	e119      	b.n	8007336 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	3330      	adds	r3, #48	; 0x30
 8007106:	3313      	adds	r3, #19
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fcb7 	bl	8005a7c <ld_word>
 800710e:	4603      	mov	r3, r0
 8007110:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <find_volume+0x272>
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	3330      	adds	r3, #48	; 0x30
 800711c:	3320      	adds	r3, #32
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fcc4 	bl	8005aac <ld_dword>
 8007124:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	3330      	adds	r3, #48	; 0x30
 800712a:	330e      	adds	r3, #14
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fca5 	bl	8005a7c <ld_word>
 8007132:	4603      	mov	r3, r0
 8007134:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <find_volume+0x28c>
 800713c:	230d      	movs	r3, #13
 800713e:	e0fa      	b.n	8007336 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007140:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007144:	4413      	add	r3, r2
 8007146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007148:	8912      	ldrh	r2, [r2, #8]
 800714a:	0912      	lsrs	r2, r2, #4
 800714c:	b292      	uxth	r2, r2
 800714e:	4413      	add	r3, r2
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	429a      	cmp	r2, r3
 8007158:	d204      	bcs.n	8007164 <find_volume+0x2b0>
 800715a:	230d      	movs	r3, #13
 800715c:	e0eb      	b.n	8007336 <find_volume+0x482>
 800715e:	bf00      	nop
 8007160:	20000cb8 	.word	0x20000cb8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716c:	8952      	ldrh	r2, [r2, #10]
 800716e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <find_volume+0x2ca>
 800717a:	230d      	movs	r3, #13
 800717c:	e0db      	b.n	8007336 <find_volume+0x482>
		fmt = FS_FAT32;
 800717e:	2303      	movs	r3, #3
 8007180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800718a:	4293      	cmp	r3, r2
 800718c:	d802      	bhi.n	8007194 <find_volume+0x2e0>
 800718e:	2302      	movs	r3, #2
 8007190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	f640 72f5 	movw	r2, #4085	; 0xff5
 800719a:	4293      	cmp	r3, r2
 800719c:	d802      	bhi.n	80071a4 <find_volume+0x2f0>
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	1c9a      	adds	r2, r3, #2
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071b0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80071b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b6:	441a      	add	r2, r3
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80071bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	441a      	add	r2, r3
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80071c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d11e      	bne.n	800720c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	3330      	adds	r3, #48	; 0x30
 80071d2:	332a      	adds	r3, #42	; 0x2a
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fc51 	bl	8005a7c <ld_word>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <find_volume+0x330>
 80071e0:	230d      	movs	r3, #13
 80071e2:	e0a8      	b.n	8007336 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	891b      	ldrh	r3, [r3, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <find_volume+0x33c>
 80071ec:	230d      	movs	r3, #13
 80071ee:	e0a2      	b.n	8007336 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	3330      	adds	r3, #48	; 0x30
 80071f4:	332c      	adds	r3, #44	; 0x2c
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fc58 	bl	8005aac <ld_dword>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	647b      	str	r3, [r7, #68]	; 0x44
 800720a:	e01f      	b.n	800724c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	891b      	ldrh	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <find_volume+0x364>
 8007214:	230d      	movs	r3, #13
 8007216:	e08e      	b.n	8007336 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	6a1a      	ldr	r2, [r3, #32]
 800721c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800721e:	441a      	add	r2, r3
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007228:	2b02      	cmp	r3, #2
 800722a:	d103      	bne.n	8007234 <find_volume+0x380>
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	e00a      	b.n	800724a <find_volume+0x396>
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	4613      	mov	r3, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	085a      	lsrs	r2, r3, #1
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800724a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	699a      	ldr	r2, [r3, #24]
 8007250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007252:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007256:	0a5b      	lsrs	r3, r3, #9
 8007258:	429a      	cmp	r2, r3
 800725a:	d201      	bcs.n	8007260 <find_volume+0x3ac>
 800725c:	230d      	movs	r3, #13
 800725e:	e06a      	b.n	8007336 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007266:	611a      	str	r2, [r3, #16]
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2280      	movs	r2, #128	; 0x80
 8007274:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800727a:	2b03      	cmp	r3, #3
 800727c:	d149      	bne.n	8007312 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	3330      	adds	r3, #48	; 0x30
 8007282:	3330      	adds	r3, #48	; 0x30
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fbf9 	bl	8005a7c <ld_word>
 800728a:	4603      	mov	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d140      	bne.n	8007312 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007292:	3301      	adds	r3, #1
 8007294:	4619      	mov	r1, r3
 8007296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007298:	f7fe fea0 	bl	8005fdc <move_window>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d137      	bne.n	8007312 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	2200      	movs	r2, #0
 80072a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	3330      	adds	r3, #48	; 0x30
 80072ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fbe3 	bl	8005a7c <ld_word>
 80072b6:	4603      	mov	r3, r0
 80072b8:	461a      	mov	r2, r3
 80072ba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072be:	429a      	cmp	r2, r3
 80072c0:	d127      	bne.n	8007312 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	3330      	adds	r3, #48	; 0x30
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fbf0 	bl	8005aac <ld_dword>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <find_volume+0x48c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d11e      	bne.n	8007312 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	3330      	adds	r3, #48	; 0x30
 80072d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fbe5 	bl	8005aac <ld_dword>
 80072e2:	4603      	mov	r3, r0
 80072e4:	4a17      	ldr	r2, [pc, #92]	; (8007344 <find_volume+0x490>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d113      	bne.n	8007312 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	3330      	adds	r3, #48	; 0x30
 80072ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe fbda 	bl	8005aac <ld_dword>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	3330      	adds	r3, #48	; 0x30
 8007302:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fbd0 	bl	8005aac <ld_dword>
 800730c:	4602      	mov	r2, r0
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007318:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <find_volume+0x494>)
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <find_volume+0x494>)
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <find_volume+0x494>)
 8007328:	881a      	ldrh	r2, [r3, #0]
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800732e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007330:	f7fe fdec 	bl	8005f0c <clear_lock>
#endif
	return FR_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3758      	adds	r7, #88	; 0x58
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	41615252 	.word	0x41615252
 8007344:	61417272 	.word	0x61417272
 8007348:	20000cbc 	.word	0x20000cbc

0800734c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007356:	2309      	movs	r3, #9
 8007358:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01c      	beq.n	800739a <validate+0x4e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d018      	beq.n	800739a <validate+0x4e>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d013      	beq.n	800739a <validate+0x4e>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	889a      	ldrh	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	88db      	ldrh	r3, [r3, #6]
 800737c:	429a      	cmp	r2, r3
 800737e:	d10c      	bne.n	800739a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fada 	bl	8005940 <disk_status>
 800738c:	4603      	mov	r3, r0
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <validate+0x4e>
			res = FR_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <validate+0x5a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	e000      	b.n	80073a8 <validate+0x5c>
 80073a6:	2300      	movs	r3, #0
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	6013      	str	r3, [r2, #0]
	return res;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80073ca:	f107 0310 	add.w	r3, r7, #16
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fcd5 	bl	8006d7e <get_ldnumber>
 80073d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da01      	bge.n	80073e0 <f_mount+0x28>
 80073dc:	230b      	movs	r3, #11
 80073de:	e02b      	b.n	8007438 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073e0:	4a17      	ldr	r2, [pc, #92]	; (8007440 <f_mount+0x88>)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80073f0:	69b8      	ldr	r0, [r7, #24]
 80073f2:	f7fe fd8b 	bl	8005f0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	490d      	ldr	r1, [pc, #52]	; (8007440 <f_mount+0x88>)
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <f_mount+0x66>
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d001      	beq.n	8007422 <f_mount+0x6a>
 800741e:	2300      	movs	r3, #0
 8007420:	e00a      	b.n	8007438 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007422:	f107 010c 	add.w	r1, r7, #12
 8007426:	f107 0308 	add.w	r3, r7, #8
 800742a:	2200      	movs	r2, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fd41 	bl	8006eb4 <find_volume>
 8007432:	4603      	mov	r3, r0
 8007434:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007436:	7dfb      	ldrb	r3, [r7, #23]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20000cb8 	.word	0x20000cb8

08007444 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b098      	sub	sp, #96	; 0x60
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <f_open+0x18>
 8007458:	2309      	movs	r3, #9
 800745a:	e1ad      	b.n	80077b8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007462:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	f107 0110 	add.w	r1, r7, #16
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fd20 	bl	8006eb4 <find_volume>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800747a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 8191 	bne.w	80077a6 <f_open+0x362>
		dj.obj.fs = fs;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fc03 	bl	8006c9c <follow_path>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800749c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11a      	bne.n	80074da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80074a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da03      	bge.n	80074b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80074ae:	2306      	movs	r3, #6
 80074b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80074b4:	e011      	b.n	80074da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	f107 0314 	add.w	r3, r7, #20
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fbd4 	bl	8005c7c <chk_lock>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	f003 031c 	and.w	r3, r3, #28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d07f      	beq.n	80075e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80074e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d017      	beq.n	800751c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d10e      	bne.n	8007512 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074f4:	f7fe fc1e 	bl	8005d34 <enq_lock>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d006      	beq.n	800750c <f_open+0xc8>
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fb03 	bl	8006b0e <dir_register>
 8007508:	4603      	mov	r3, r0
 800750a:	e000      	b.n	800750e <f_open+0xca>
 800750c:	2312      	movs	r3, #18
 800750e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f043 0308 	orr.w	r3, r3, #8
 8007518:	71fb      	strb	r3, [r7, #7]
 800751a:	e010      	b.n	800753e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800751c:	7ebb      	ldrb	r3, [r7, #26]
 800751e:	f003 0311 	and.w	r3, r3, #17
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <f_open+0xea>
					res = FR_DENIED;
 8007526:	2307      	movs	r3, #7
 8007528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800752c:	e007      	b.n	800753e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <f_open+0xfa>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800753e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007542:	2b00      	cmp	r3, #0
 8007544:	d168      	bne.n	8007618 <f_open+0x1d4>
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d063      	beq.n	8007618 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007550:	f7fd fcbe 	bl	8004ed0 <get_fattime>
 8007554:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	330e      	adds	r3, #14
 800755a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fae3 	bl	8005b28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	3316      	adds	r3, #22
 8007566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fadd 	bl	8005b28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	330b      	adds	r3, #11
 8007572:	2220      	movs	r2, #32
 8007574:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800757a:	4611      	mov	r1, r2
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fa32 	bl	80069e6 <ld_clust>
 8007582:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007588:	2200      	movs	r2, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fa4a 	bl	8006a24 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	331c      	adds	r3, #28
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fac6 	bl	8005b28 <st_dword>
					fs->wflag = 1;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2201      	movs	r2, #1
 80075a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d037      	beq.n	8007618 <f_open+0x1d4>
						dw = fs->winsect;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	2200      	movs	r2, #0
 80075b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe ff5d 	bl	8006476 <remove_chain>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80075c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d126      	bne.n	8007618 <f_open+0x1d4>
							res = move_window(fs, dw);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fd04 	bl	8005fdc <move_window>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075de:	3a01      	subs	r2, #1
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	e019      	b.n	8007618 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80075e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d115      	bne.n	8007618 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80075ec:	7ebb      	ldrb	r3, [r7, #26]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <f_open+0x1ba>
					res = FR_NO_FILE;
 80075f6:	2304      	movs	r3, #4
 80075f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075fc:	e00c      	b.n	8007618 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <f_open+0x1d4>
 8007608:	7ebb      	ldrb	r3, [r7, #26]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <f_open+0x1d4>
						res = FR_DENIED;
 8007612:	2307      	movs	r3, #7
 8007614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761c:	2b00      	cmp	r3, #0
 800761e:	d128      	bne.n	8007672 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007630:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800763a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	f023 0301 	bic.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe fb8d 	bl	8005d78 <inc_lock>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <f_open+0x22e>
 800766c:	2302      	movs	r3, #2
 800766e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 8095 	bne.w	80077a6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f9af 	bl	80069e6 <ld_clust>
 8007688:	4602      	mov	r2, r0
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	331c      	adds	r3, #28
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fa0a 	bl	8005aac <ld_dword>
 8007698:	4602      	mov	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	88da      	ldrh	r2, [r3, #6]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	79fa      	ldrb	r2, [r7, #7]
 80076b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3330      	adds	r3, #48	; 0x30
 80076ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fa74 	bl	8005bc2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d060      	beq.n	80077a6 <f_open+0x362>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d05c      	beq.n	80077a6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	895b      	ldrh	r3, [r3, #10]
 80076f8:	025b      	lsls	r3, r3, #9
 80076fa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	657b      	str	r3, [r7, #84]	; 0x54
 8007708:	e016      	b.n	8007738 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fd1f 	bl	8006152 <get_fat>
 8007714:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007718:	2b01      	cmp	r3, #1
 800771a:	d802      	bhi.n	8007722 <f_open+0x2de>
 800771c:	2302      	movs	r3, #2
 800771e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007728:	d102      	bne.n	8007730 <f_open+0x2ec>
 800772a:	2301      	movs	r3, #1
 800772c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	657b      	str	r3, [r7, #84]	; 0x54
 8007738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <f_open+0x304>
 8007740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007744:	429a      	cmp	r2, r3
 8007746:	d8e0      	bhi.n	800770a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800774c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800774e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007752:	2b00      	cmp	r3, #0
 8007754:	d127      	bne.n	80077a6 <f_open+0x362>
 8007756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	2b00      	cmp	r3, #0
 800775e:	d022      	beq.n	80077a6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fcd5 	bl	8006114 <clust2sect>
 800776a:	6478      	str	r0, [r7, #68]	; 0x44
 800776c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <f_open+0x336>
						res = FR_INT_ERR;
 8007772:	2302      	movs	r3, #2
 8007774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007778:	e015      	b.n	80077a6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800777a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777c:	0a5a      	lsrs	r2, r3, #9
 800777e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	7858      	ldrb	r0, [r3, #1]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a1a      	ldr	r2, [r3, #32]
 8007794:	2301      	movs	r3, #1
 8007796:	f7fe f913 	bl	80059c0 <disk_read>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <f_open+0x362>
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80077a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <f_open+0x370>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80077b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3760      	adds	r7, #96	; 0x60
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08c      	sub	sp, #48	; 0x30
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f107 0210 	add.w	r2, r7, #16
 80077de:	4611      	mov	r1, r2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fdb3 	bl	800734c <validate>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80077ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <f_write+0x44>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	7d5b      	ldrb	r3, [r3, #21]
 80077f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80077fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <f_write+0x4a>
 8007804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007808:	e14b      	b.n	8007aa2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	7d1b      	ldrb	r3, [r3, #20]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <f_write+0x5a>
 8007816:	2307      	movs	r3, #7
 8007818:	e143      	b.n	8007aa2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	429a      	cmp	r2, r3
 8007828:	f080 812d 	bcs.w	8007a86 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	43db      	mvns	r3, r3
 8007832:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007834:	e127      	b.n	8007a86 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 80e3 	bne.w	8007a0a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	0a5b      	lsrs	r3, r3, #9
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	8952      	ldrh	r2, [r2, #10]
 800784e:	3a01      	subs	r2, #1
 8007850:	4013      	ands	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d143      	bne.n	80078e2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10c      	bne.n	800787c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d11a      	bne.n	80078a4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fe64 	bl	8006540 <create_chain>
 8007878:	62b8      	str	r0, [r7, #40]	; 0x28
 800787a:	e013      	b.n	80078a4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4619      	mov	r1, r3
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7fe fef0 	bl	8006670 <clmt_clust>
 8007890:	62b8      	str	r0, [r7, #40]	; 0x28
 8007892:	e007      	b.n	80078a4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7fe fe4f 	bl	8006540 <create_chain>
 80078a2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 80f2 	beq.w	8007a90 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d104      	bne.n	80078bc <f_write+0xfc>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2202      	movs	r2, #2
 80078b6:	755a      	strb	r2, [r3, #21]
 80078b8:	2302      	movs	r3, #2
 80078ba:	e0f2      	b.n	8007aa2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c2:	d104      	bne.n	80078ce <f_write+0x10e>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	755a      	strb	r2, [r3, #21]
 80078ca:	2301      	movs	r3, #1
 80078cc:	e0e9      	b.n	8007aa2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <f_write+0x122>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	7d1b      	ldrb	r3, [r3, #20]
 80078e6:	b25b      	sxtb	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da18      	bge.n	800791e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	7858      	ldrb	r0, [r3, #1]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	2301      	movs	r3, #1
 80078fc:	f7fe f880 	bl	8005a00 <disk_write>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <f_write+0x150>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	755a      	strb	r2, [r3, #21]
 800790c:	2301      	movs	r3, #1
 800790e:	e0c8      	b.n	8007aa2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7d1b      	ldrb	r3, [r3, #20]
 8007914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007918:	b2da      	uxtb	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe fbf4 	bl	8006114 <clust2sect>
 800792c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <f_write+0x17e>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2202      	movs	r2, #2
 8007938:	755a      	strb	r2, [r3, #21]
 800793a:	2302      	movs	r3, #2
 800793c:	e0b1      	b.n	8007aa2 <f_write+0x2e2>
			sect += csect;
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	4413      	add	r3, r2
 8007944:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	0a5b      	lsrs	r3, r3, #9
 800794a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d03c      	beq.n	80079cc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	4413      	add	r3, r2
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	8952      	ldrh	r2, [r2, #10]
 800795c:	4293      	cmp	r3, r2
 800795e:	d905      	bls.n	800796c <f_write+0x1ac>
					cc = fs->csize - csect;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	895b      	ldrh	r3, [r3, #10]
 8007964:	461a      	mov	r2, r3
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	7858      	ldrb	r0, [r3, #1]
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	69f9      	ldr	r1, [r7, #28]
 8007976:	f7fe f843 	bl	8005a00 <disk_write>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <f_write+0x1ca>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	755a      	strb	r2, [r3, #21]
 8007986:	2301      	movs	r3, #1
 8007988:	e08b      	b.n	8007aa2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	6a3a      	ldr	r2, [r7, #32]
 8007994:	429a      	cmp	r2, r3
 8007996:	d915      	bls.n	80079c4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1a      	ldr	r2, [r3, #32]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	025b      	lsls	r3, r3, #9
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b0:	4619      	mov	r1, r3
 80079b2:	f7fe f8e5 	bl	8005b80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	7d1b      	ldrb	r3, [r3, #20]
 80079ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	025b      	lsls	r3, r3, #9
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80079ca:	e03f      	b.n	8007a4c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d016      	beq.n	8007a04 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699a      	ldr	r2, [r3, #24]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079de:	429a      	cmp	r2, r3
 80079e0:	d210      	bcs.n	8007a04 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	7858      	ldrb	r0, [r3, #1]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079ec:	2301      	movs	r3, #1
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	f7fd ffe6 	bl	80059c0 <disk_read>
 80079f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	755a      	strb	r2, [r3, #21]
 8007a00:	2301      	movs	r3, #1
 8007a02:	e04e      	b.n	8007aa2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a12:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d901      	bls.n	8007a24 <f_write+0x264>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	4413      	add	r3, r2
 8007a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a36:	69f9      	ldr	r1, [r7, #28]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe f8a1 	bl	8005b80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	7d1b      	ldrb	r3, [r3, #20]
 8007a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	4413      	add	r3, r2
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	619a      	str	r2, [r3, #24]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	bf38      	it	cc
 8007a6c:	461a      	movcc	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	60da      	str	r2, [r3, #12]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	441a      	add	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f47f aed4 	bne.w	8007836 <f_write+0x76>
 8007a8e:	e000      	b.n	8007a92 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	7d1b      	ldrb	r3, [r3, #20]
 8007a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3730      	adds	r7, #48	; 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f107 0208 	add.w	r2, r7, #8
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fc46 	bl	800734c <validate>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d168      	bne.n	8007b9c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7d1b      	ldrb	r3, [r3, #20]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d062      	beq.n	8007b9c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7d1b      	ldrb	r3, [r3, #20]
 8007ada:	b25b      	sxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da15      	bge.n	8007b0c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	7858      	ldrb	r0, [r3, #1]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1a      	ldr	r2, [r3, #32]
 8007aee:	2301      	movs	r3, #1
 8007af0:	f7fd ff86 	bl	8005a00 <disk_write>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <f_sync+0x54>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e04f      	b.n	8007b9e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7d1b      	ldrb	r3, [r3, #20]
 8007b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b0c:	f7fd f9e0 	bl	8004ed0 <get_fattime>
 8007b10:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7fe fa5e 	bl	8005fdc <move_window>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d138      	bne.n	8007b9c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	330b      	adds	r3, #11
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	330b      	adds	r3, #11
 8007b3a:	f042 0220 	orr.w	r2, r2, #32
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	68f9      	ldr	r1, [r7, #12]
 8007b4e:	f7fe ff69 	bl	8006a24 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f103 021c 	add.w	r2, r3, #28
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f7fd ffe2 	bl	8005b28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3316      	adds	r3, #22
 8007b68:	6939      	ldr	r1, [r7, #16]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd ffdc 	bl	8005b28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3312      	adds	r3, #18
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fd ffbb 	bl	8005af2 <st_word>
					fs->wflag = 1;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fa57 	bl	8006038 <sync_fs>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7d1b      	ldrb	r3, [r3, #20]
 8007b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff ff7b 	bl	8007aaa <f_sync>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d118      	bne.n	8007bf0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f107 0208 	add.w	r2, r7, #8
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff fbc0 	bl	800734c <validate>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10c      	bne.n	8007bf0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe f95a 	bl	8005e94 <dec_lock>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b090      	sub	sp, #64	; 0x40
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff fb9d 	bl	800734c <validate>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007c18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <f_lseek+0x2e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7d5b      	ldrb	r3, [r3, #21]
 8007c24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007c28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <f_lseek+0x3c>
 8007c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c34:	e1e6      	b.n	8008004 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80d1 	beq.w	8007de2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c46:	d15a      	bne.n	8007cfe <f_lseek+0x104>
			tbl = fp->cltbl;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	627a      	str	r2, [r7, #36]	; 0x24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d03a      	beq.n	8007cde <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	3302      	adds	r3, #2
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fa64 	bl	8006152 <get_fat>
 8007c8a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d804      	bhi.n	8007c9c <f_lseek+0xa2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	755a      	strb	r2, [r3, #21]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e1b3      	b.n	8008004 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ca2:	d104      	bne.n	8007cae <f_lseek+0xb4>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	755a      	strb	r2, [r3, #21]
 8007caa:	2301      	movs	r3, #1
 8007cac:	e1aa      	b.n	8008004 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d0de      	beq.n	8007c76 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d809      	bhi.n	8007cd4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	1d1a      	adds	r2, r3, #4
 8007cce:	627a      	str	r2, [r7, #36]	; 0x24
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d3c4      	bcc.n	8007c68 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d803      	bhi.n	8007cf6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e184      	b.n	8008000 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007cf6:	2311      	movs	r3, #17
 8007cf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007cfc:	e180      	b.n	8008000 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d902      	bls.n	8007d0e <f_lseek+0x114>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8172 	beq.w	8008000 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fe fca4 	bl	8006670 <clmt_clust>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe f9ec 	bl	8006114 <clust2sect>
 8007d3c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <f_lseek+0x154>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	755a      	strb	r2, [r3, #21]
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e15a      	b.n	8008004 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	0a5b      	lsrs	r3, r3, #9
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	8952      	ldrh	r2, [r2, #10]
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	4413      	add	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8148 	beq.w	8008000 <f_lseek+0x406>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	f000 8142 	beq.w	8008000 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	7d1b      	ldrb	r3, [r3, #20]
 8007d80:	b25b      	sxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da18      	bge.n	8007db8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	7858      	ldrb	r0, [r3, #1]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	2301      	movs	r3, #1
 8007d96:	f7fd fe33 	bl	8005a00 <disk_write>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <f_lseek+0x1b0>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	755a      	strb	r2, [r3, #21]
 8007da6:	2301      	movs	r3, #1
 8007da8:	e12c      	b.n	8008004 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7d1b      	ldrb	r3, [r3, #20]
 8007dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	7858      	ldrb	r0, [r3, #1]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	f7fd fdfb 	bl	80059c0 <disk_read>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <f_lseek+0x1e0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	755a      	strb	r2, [r3, #21]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e114      	b.n	8008004 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	621a      	str	r2, [r3, #32]
 8007de0:	e10e      	b.n	8008000 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d908      	bls.n	8007dfe <f_lseek+0x204>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7d1b      	ldrb	r3, [r3, #20]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	637b      	str	r3, [r7, #52]	; 0x34
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e0c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80a7 	beq.w	8007f64 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	895b      	ldrh	r3, [r3, #10]
 8007e1a:	025b      	lsls	r3, r3, #9
 8007e1c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01b      	beq.n	8007e5c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	1e5a      	subs	r2, r3, #1
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	1e59      	subs	r1, r3, #1
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d30f      	bcc.n	8007e5c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	425b      	negs	r3, r3
 8007e44:	401a      	ands	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e5a:	e022      	b.n	8007ea2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d119      	bne.n	8007e9c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fb67 	bl	8006540 <create_chain>
 8007e72:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d104      	bne.n	8007e84 <f_lseek+0x28a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	755a      	strb	r2, [r3, #21]
 8007e80:	2302      	movs	r3, #2
 8007e82:	e0bf      	b.n	8008004 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8a:	d104      	bne.n	8007e96 <f_lseek+0x29c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	755a      	strb	r2, [r3, #21]
 8007e92:	2301      	movs	r3, #1
 8007e94:	e0b6      	b.n	8008004 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e9a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ea0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d05d      	beq.n	8007f64 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007ea8:	e03a      	b.n	8007f20 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	441a      	add	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7d1b      	ldrb	r3, [r3, #20]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fb36 	bl	8006540 <create_chain>
 8007ed4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d108      	bne.n	8007eee <f_lseek+0x2f4>
							ofs = 0; break;
 8007edc:	2300      	movs	r3, #0
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	e022      	b.n	8007f28 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe f933 	bl	8006152 <get_fat>
 8007eec:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef4:	d104      	bne.n	8007f00 <f_lseek+0x306>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	755a      	strb	r2, [r3, #21]
 8007efc:	2301      	movs	r3, #1
 8007efe:	e081      	b.n	8008004 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d904      	bls.n	8007f10 <f_lseek+0x316>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d304      	bcc.n	8007f1a <f_lseek+0x320>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	755a      	strb	r2, [r3, #21]
 8007f16:	2302      	movs	r3, #2
 8007f18:	e074      	b.n	8008004 <f_lseek+0x40a>
					fp->clust = clst;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f1e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d8c0      	bhi.n	8007eaa <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	441a      	add	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d012      	beq.n	8007f64 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe f8e6 	bl	8006114 <clust2sect>
 8007f48:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <f_lseek+0x360>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	755a      	strb	r2, [r3, #21]
 8007f56:	2302      	movs	r3, #2
 8007f58:	e054      	b.n	8008004 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	0a5b      	lsrs	r3, r3, #9
 8007f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f60:	4413      	add	r3, r2
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d90a      	bls.n	8007f86 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7d1b      	ldrb	r3, [r3, #20]
 8007f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d036      	beq.n	8008000 <f_lseek+0x406>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d031      	beq.n	8008000 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7d1b      	ldrb	r3, [r3, #20]
 8007fa0:	b25b      	sxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da18      	bge.n	8007fd8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	7858      	ldrb	r0, [r3, #1]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f7fd fd23 	bl	8005a00 <disk_write>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <f_lseek+0x3d0>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	755a      	strb	r2, [r3, #21]
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e01c      	b.n	8008004 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7d1b      	ldrb	r3, [r3, #20]
 8007fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	7858      	ldrb	r0, [r3, #1]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe6:	f7fd fceb 	bl	80059c0 <disk_read>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <f_lseek+0x400>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	755a      	strb	r2, [r3, #21]
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e004      	b.n	8008004 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008000:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008004:	4618      	mov	r0, r3
 8008006:	3740      	adds	r7, #64	; 0x40
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008022:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 8008024:	7a5b      	ldrb	r3, [r3, #9]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d131      	bne.n	8008090 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800802c:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 800802e:	7a5b      	ldrb	r3, [r3, #9]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	461a      	mov	r2, r3
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 8008036:	2100      	movs	r1, #0
 8008038:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800803a:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 800803c:	7a5b      	ldrb	r3, [r3, #9]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	4a17      	ldr	r2, [pc, #92]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800804a:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 800804c:	7a5b      	ldrb	r3, [r3, #9]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 8008054:	4413      	add	r3, r2
 8008056:	79fa      	ldrb	r2, [r7, #7]
 8008058:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800805a:	4b11      	ldr	r3, [pc, #68]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 800805c:	7a5b      	ldrb	r3, [r3, #9]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	b2d1      	uxtb	r1, r2
 8008064:	4a0e      	ldr	r2, [pc, #56]	; (80080a0 <FATFS_LinkDriverEx+0x94>)
 8008066:	7251      	strb	r1, [r2, #9]
 8008068:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800806a:	7dbb      	ldrb	r3, [r7, #22]
 800806c:	3330      	adds	r3, #48	; 0x30
 800806e:	b2da      	uxtb	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3301      	adds	r3, #1
 8008078:	223a      	movs	r2, #58	; 0x3a
 800807a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3302      	adds	r3, #2
 8008080:	222f      	movs	r2, #47	; 0x2f
 8008082:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	3303      	adds	r3, #3
 8008088:	2200      	movs	r2, #0
 800808a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
}
 8008092:	4618      	mov	r0, r3
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20000ce0 	.word	0x20000ce0

080080a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80080ae:	2200      	movs	r2, #0
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ffaa 	bl	800800c <FATFS_LinkDriverEx>
 80080b8:	4603      	mov	r3, r0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 80080c8:	4b10      	ldr	r3, [pc, #64]	; (800810c <MX_PDM2PCM_Init+0x48>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <MX_PDM2PCM_Init+0x48>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	805a      	strh	r2, [r3, #2]
  //PDM1_filter_handler.high_pass_tap = 2104533974;
  PDM1_filter_handler.high_pass_tap = 2136746229;
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <MX_PDM2PCM_Init+0x48>)
 80080d6:	4a0e      	ldr	r2, [pc, #56]	; (8008110 <MX_PDM2PCM_Init+0x4c>)
 80080d8:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <MX_PDM2PCM_Init+0x48>)
 80080dc:	2202      	movs	r2, #2
 80080de:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <MX_PDM2PCM_Init+0x48>)
 80080e2:	2202      	movs	r2, #2
 80080e4:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80080e6:	4809      	ldr	r0, [pc, #36]	; (800810c <MX_PDM2PCM_Init+0x48>)
 80080e8:	f001 fd66 	bl	8009bb8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <MX_PDM2PCM_Init+0x50>)
 80080ee:	2202      	movs	r2, #2
 80080f0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 48; //TODO: check this number
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <MX_PDM2PCM_Init+0x50>)
 80080f4:	2230      	movs	r2, #48	; 0x30
 80080f6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 1;
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <MX_PDM2PCM_Init+0x50>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80080fe:	4905      	ldr	r1, [pc, #20]	; (8008114 <MX_PDM2PCM_Init+0x50>)
 8008100:	4802      	ldr	r0, [pc, #8]	; (800810c <MX_PDM2PCM_Init+0x48>)
 8008102:	f001 fde3 	bl	8009ccc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008106:	bf00      	nop
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000cec 	.word	0x20000cec
 8008110:	7f5c28f5 	.word	0x7f5c28f5
 8008114:	20000d38 	.word	0x20000d38

08008118 <D16_GENERIC>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	b089      	sub	sp, #36	; 0x24
 800811e:	68d4      	ldr	r4, [r2, #12]
 8008120:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008122:	6993      	ldr	r3, [r2, #24]
 8008124:	9407      	str	r4, [sp, #28]
 8008126:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008128:	9306      	str	r3, [sp, #24]
 800812a:	9402      	str	r4, [sp, #8]
 800812c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8008130:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8008134:	69d3      	ldr	r3, [r2, #28]
 8008136:	6896      	ldr	r6, [r2, #8]
 8008138:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800813a:	9103      	str	r1, [sp, #12]
 800813c:	2d00      	cmp	r5, #0
 800813e:	d066      	beq.n	800820e <D16_GENERIC+0xf6>
 8008140:	f004 0510 	and.w	r5, r4, #16
 8008144:	f004 0420 	and.w	r4, r4, #32
 8008148:	9504      	str	r5, [sp, #16]
 800814a:	4938      	ldr	r1, [pc, #224]	; (800822c <D16_GENERIC+0x114>)
 800814c:	9405      	str	r4, [sp, #20]
 800814e:	f04f 0e00 	mov.w	lr, #0
 8008152:	4635      	mov	r5, r6
 8008154:	e04f      	b.n	80081f6 <D16_GENERIC+0xde>
 8008156:	5d87      	ldrb	r7, [r0, r6]
 8008158:	7804      	ldrb	r4, [r0, #0]
 800815a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800815e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8008162:	b2e6      	uxtb	r6, r4
 8008164:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008168:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800816c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008170:	4433      	add	r3, r6
 8008172:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8008176:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800817a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800817e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8008182:	0aa3      	lsrs	r3, r4, #10
 8008184:	4c2a      	ldr	r4, [pc, #168]	; (8008230 <D16_GENERIC+0x118>)
 8008186:	fb26 5404 	smlad	r4, r6, r4, r5
 800818a:	4d2a      	ldr	r5, [pc, #168]	; (8008234 <D16_GENERIC+0x11c>)
 800818c:	fb26 f505 	smuad	r5, r6, r5
 8008190:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008194:	eb04 080a 	add.w	r8, r4, sl
 8008198:	eba8 080b 	sub.w	r8, r8, fp
 800819c:	4646      	mov	r6, r8
 800819e:	17f7      	asrs	r7, r6, #31
 80081a0:	e9cd 6700 	strd	r6, r7, [sp]
 80081a4:	9e04      	ldr	r6, [sp, #16]
 80081a6:	f10e 0c01 	add.w	ip, lr, #1
 80081aa:	b16e      	cbz	r6, 80081c8 <D16_GENERIC+0xb0>
 80081ac:	6a16      	ldr	r6, [r2, #32]
 80081ae:	9f01      	ldr	r7, [sp, #4]
 80081b0:	fba8 8906 	umull	r8, r9, r8, r6
 80081b4:	fb06 9907 	mla	r9, r6, r7, r9
 80081b8:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80081bc:	f149 0900 	adc.w	r9, r9, #0
 80081c0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80081c4:	46a3      	mov	fp, r4
 80081c6:	4654      	mov	r4, sl
 80081c8:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80081ca:	9f02      	ldr	r7, [sp, #8]
 80081cc:	0424      	lsls	r4, r4, #16
 80081ce:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	fb0e fe06 	mul.w	lr, lr, r6
 80081da:	fbc7 8904 	smlal	r8, r9, r7, r4
 80081de:	9e03      	ldr	r6, [sp, #12]
 80081e0:	464f      	mov	r7, r9
 80081e2:	10bc      	asrs	r4, r7, #2
 80081e4:	f304 040f 	ssat	r4, #16, r4
 80081e8:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 80081ec:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80081ee:	fa1f fe8c 	uxth.w	lr, ip
 80081f2:	4574      	cmp	r4, lr
 80081f4:	d90a      	bls.n	800820c <D16_GENERIC+0xf4>
 80081f6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80081f8:	2c01      	cmp	r4, #1
 80081fa:	b2e6      	uxtb	r6, r4
 80081fc:	d1ab      	bne.n	8008156 <D16_GENERIC+0x3e>
 80081fe:	9e05      	ldr	r6, [sp, #20]
 8008200:	f850 4b02 	ldr.w	r4, [r0], #2
 8008204:	2e00      	cmp	r6, #0
 8008206:	d0ac      	beq.n	8008162 <D16_GENERIC+0x4a>
 8008208:	ba64      	rev16	r4, r4
 800820a:	e7aa      	b.n	8008162 <D16_GENERIC+0x4a>
 800820c:	462e      	mov	r6, r5
 800820e:	9907      	ldr	r1, [sp, #28]
 8008210:	61d3      	str	r3, [r2, #28]
 8008212:	9b06      	ldr	r3, [sp, #24]
 8008214:	6096      	str	r6, [r2, #8]
 8008216:	2000      	movs	r0, #0
 8008218:	60d1      	str	r1, [r2, #12]
 800821a:	f8c2 a010 	str.w	sl, [r2, #16]
 800821e:	f8c2 b014 	str.w	fp, [r2, #20]
 8008222:	6193      	str	r3, [r2, #24]
 8008224:	b009      	add	sp, #36	; 0x24
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822a:	bf00      	nop
 800822c:	20000000 	.word	0x20000000
 8008230:	00030001 	.word	0x00030001
 8008234:	00010003 	.word	0x00010003

08008238 <D24_GENERIC>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800823e:	6993      	ldr	r3, [r2, #24]
 8008240:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008242:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8008246:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800824a:	6894      	ldr	r4, [r2, #8]
 800824c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8008250:	b089      	sub	sp, #36	; 0x24
 8008252:	9307      	str	r3, [sp, #28]
 8008254:	9503      	str	r5, [sp, #12]
 8008256:	69d3      	ldr	r3, [r2, #28]
 8008258:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800825a:	9104      	str	r1, [sp, #16]
 800825c:	2e00      	cmp	r6, #0
 800825e:	f000 8096 	beq.w	800838e <D24_GENERIC+0x156>
 8008262:	f005 0610 	and.w	r6, r5, #16
 8008266:	f005 0520 	and.w	r5, r5, #32
 800826a:	4954      	ldr	r1, [pc, #336]	; (80083bc <D24_GENERIC+0x184>)
 800826c:	9605      	str	r6, [sp, #20]
 800826e:	9506      	str	r5, [sp, #24]
 8008270:	f04f 0e00 	mov.w	lr, #0
 8008274:	f8cd 9008 	str.w	r9, [sp, #8]
 8008278:	e06a      	b.n	8008350 <D24_GENERIC+0x118>
 800827a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800827e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8008282:	f890 c000 	ldrb.w	ip, [r0]
 8008286:	042d      	lsls	r5, r5, #16
 8008288:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800828c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8008290:	44ac      	add	ip, r5
 8008292:	4438      	add	r0, r7
 8008294:	fa5f f68c 	uxtb.w	r6, ip
 8008298:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800829c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80082a0:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80082a4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80082a8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80082ac:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80082b0:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80082b4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80082b8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80082bc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80082c0:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80082c4:	4d3e      	ldr	r5, [pc, #248]	; (80083c0 <D24_GENERIC+0x188>)
 80082c6:	fb26 b705 	smlad	r7, r6, r5, fp
 80082ca:	4d3e      	ldr	r5, [pc, #248]	; (80083c4 <D24_GENERIC+0x18c>)
 80082cc:	fb26 4b05 	smlad	fp, r6, r5, r4
 80082d0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80082d4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80082d8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80082dc:	2401      	movs	r4, #1
 80082de:	fb26 f604 	smuad	r6, r6, r4
 80082e2:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80082e6:	9f02      	ldr	r7, [sp, #8]
 80082e8:	eb0e 0c04 	add.w	ip, lr, r4
 80082ec:	eb08 0406 	add.w	r4, r8, r6
 80082f0:	eb05 060a 	add.w	r6, r5, sl
 80082f4:	1bf6      	subs	r6, r6, r7
 80082f6:	4637      	mov	r7, r6
 80082f8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80082fc:	e9cd 7800 	strd	r7, r8, [sp]
 8008300:	9f05      	ldr	r7, [sp, #20]
 8008302:	b177      	cbz	r7, 8008322 <D24_GENERIC+0xea>
 8008304:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8008308:	9502      	str	r5, [sp, #8]
 800830a:	fba6 9a08 	umull	r9, sl, r6, r8
 800830e:	9e01      	ldr	r6, [sp, #4]
 8008310:	fb08 aa06 	mla	sl, r8, r6, sl
 8008314:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8008318:	f14a 0700 	adc.w	r7, sl, #0
 800831c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8008320:	4655      	mov	r5, sl
 8008322:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8008324:	9f03      	ldr	r7, [sp, #12]
 8008326:	03ad      	lsls	r5, r5, #14
 8008328:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	fb0e fe06 	mul.w	lr, lr, r6
 8008334:	fbc7 8905 	smlal	r8, r9, r7, r5
 8008338:	9e04      	ldr	r6, [sp, #16]
 800833a:	464f      	mov	r7, r9
 800833c:	10bd      	asrs	r5, r7, #2
 800833e:	f305 050f 	ssat	r5, #16, r5
 8008342:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8008346:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008348:	fa1f fe8c 	uxth.w	lr, ip
 800834c:	4575      	cmp	r5, lr
 800834e:	d91c      	bls.n	800838a <D24_GENERIC+0x152>
 8008350:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008352:	b2ef      	uxtb	r7, r5
 8008354:	2d01      	cmp	r5, #1
 8008356:	b23e      	sxth	r6, r7
 8008358:	d18f      	bne.n	800827a <D24_GENERIC+0x42>
 800835a:	9d06      	ldr	r5, [sp, #24]
 800835c:	b15d      	cbz	r5, 8008376 <D24_GENERIC+0x13e>
 800835e:	f01e 0f01 	tst.w	lr, #1
 8008362:	d122      	bne.n	80083aa <D24_GENERIC+0x172>
 8008364:	7805      	ldrb	r5, [r0, #0]
 8008366:	78c7      	ldrb	r7, [r0, #3]
 8008368:	7846      	ldrb	r6, [r0, #1]
 800836a:	022d      	lsls	r5, r5, #8
 800836c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8008370:	44b4      	add	ip, r6
 8008372:	3002      	adds	r0, #2
 8008374:	e78e      	b.n	8008294 <D24_GENERIC+0x5c>
 8008376:	7846      	ldrb	r6, [r0, #1]
 8008378:	f890 c002 	ldrb.w	ip, [r0, #2]
 800837c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8008380:	0236      	lsls	r6, r6, #8
 8008382:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8008386:	44ac      	add	ip, r5
 8008388:	e784      	b.n	8008294 <D24_GENERIC+0x5c>
 800838a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800838e:	61d3      	str	r3, [r2, #28]
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	6094      	str	r4, [r2, #8]
 8008394:	2000      	movs	r0, #0
 8008396:	f8c2 b00c 	str.w	fp, [r2, #12]
 800839a:	f8c2 a010 	str.w	sl, [r2, #16]
 800839e:	f8c2 9014 	str.w	r9, [r2, #20]
 80083a2:	6193      	str	r3, [r2, #24]
 80083a4:	b009      	add	sp, #36	; 0x24
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	78c5      	ldrb	r5, [r0, #3]
 80083ac:	7887      	ldrb	r7, [r0, #2]
 80083ae:	f810 6b04 	ldrb.w	r6, [r0], #4
 80083b2:	022d      	lsls	r5, r5, #8
 80083b4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80083b8:	44b4      	add	ip, r6
 80083ba:	e76b      	b.n	8008294 <D24_GENERIC+0x5c>
 80083bc:	20000000 	.word	0x20000000
 80083c0:	00030001 	.word	0x00030001
 80083c4:	00060007 	.word	0x00060007

080083c8 <D32_GENERIC>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80083ce:	6993      	ldr	r3, [r2, #24]
 80083d0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80083d2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80083d6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80083da:	69d6      	ldr	r6, [r2, #28]
 80083dc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80083e0:	b089      	sub	sp, #36	; 0x24
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	9403      	str	r4, [sp, #12]
 80083e6:	6893      	ldr	r3, [r2, #8]
 80083e8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80083ea:	9104      	str	r1, [sp, #16]
 80083ec:	2d00      	cmp	r5, #0
 80083ee:	f000 809f 	beq.w	8008530 <D32_GENERIC+0x168>
 80083f2:	f004 0510 	and.w	r5, r4, #16
 80083f6:	f004 0420 	and.w	r4, r4, #32
 80083fa:	9505      	str	r5, [sp, #20]
 80083fc:	4953      	ldr	r1, [pc, #332]	; (800854c <D32_GENERIC+0x184>)
 80083fe:	9406      	str	r4, [sp, #24]
 8008400:	f04f 0c00 	mov.w	ip, #0
 8008404:	f8cd 9008 	str.w	r9, [sp, #8]
 8008408:	461d      	mov	r5, r3
 800840a:	4617      	mov	r7, r2
 800840c:	e077      	b.n	80084fe <D32_GENERIC+0x136>
 800840e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8008412:	f810 800e 	ldrb.w	r8, [r0, lr]
 8008416:	f810 e002 	ldrb.w	lr, [r0, r2]
 800841a:	7800      	ldrb	r0, [r0, #0]
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8008422:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008426:	4403      	add	r3, r0
 8008428:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800842c:	b2dc      	uxtb	r4, r3
 800842e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008432:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8008436:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800843a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800843e:	0e1b      	lsrs	r3, r3, #24
 8008440:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8008444:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8008448:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800844c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008450:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8008454:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8008458:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800845c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008460:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008464:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008468:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800846c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008470:	4b37      	ldr	r3, [pc, #220]	; (8008550 <D32_GENERIC+0x188>)
 8008472:	fb22 b403 	smlad	r4, r2, r3, fp
 8008476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800847a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800847e:	4b35      	ldr	r3, [pc, #212]	; (8008554 <D32_GENERIC+0x18c>)
 8008480:	fb22 5503 	smlad	r5, r2, r3, r5
 8008484:	4b34      	ldr	r3, [pc, #208]	; (8008558 <D32_GENERIC+0x190>)
 8008486:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800848a:	2301      	movs	r3, #1
 800848c:	fb22 f203 	smuad	r2, r2, r3
 8008490:	4b32      	ldr	r3, [pc, #200]	; (800855c <D32_GENERIC+0x194>)
 8008492:	fb2e 2503 	smlad	r5, lr, r3, r2
 8008496:	9b02      	ldr	r3, [sp, #8]
 8008498:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800849c:	eb04 080a 	add.w	r8, r4, sl
 80084a0:	eba8 0803 	sub.w	r8, r8, r3
 80084a4:	4642      	mov	r2, r8
 80084a6:	17d3      	asrs	r3, r2, #31
 80084a8:	e9cd 2300 	strd	r2, r3, [sp]
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	f10c 0e01 	add.w	lr, ip, #1
 80084b2:	b16b      	cbz	r3, 80084d0 <D32_GENERIC+0x108>
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	9402      	str	r4, [sp, #8]
 80084ba:	fba8 8902 	umull	r8, r9, r8, r2
 80084be:	fb02 9903 	mla	r9, r2, r3, r9
 80084c2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80084c6:	f149 0900 	adc.w	r9, r9, #0
 80084ca:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80084ce:	4654      	mov	r4, sl
 80084d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084d2:	9a04      	ldr	r2, [sp, #16]
 80084d4:	fb0c fc03 	mul.w	ip, ip, r3
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	0364      	lsls	r4, r4, #13
 80084dc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80084e0:	f04f 0900 	mov.w	r9, #0
 80084e4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80084e8:	464b      	mov	r3, r9
 80084ea:	109b      	asrs	r3, r3, #2
 80084ec:	f303 030f 	ssat	r3, #16, r3
 80084f0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80084f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084f6:	fa1f fc8e 	uxth.w	ip, lr
 80084fa:	4563      	cmp	r3, ip
 80084fc:	d914      	bls.n	8008528 <D32_GENERIC+0x160>
 80084fe:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8008500:	b2e2      	uxtb	r2, r4
 8008502:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8008506:	eb00 080e 	add.w	r8, r0, lr
 800850a:	4253      	negs	r3, r2
 800850c:	2c01      	cmp	r4, #1
 800850e:	eb08 0403 	add.w	r4, r8, r3
 8008512:	f47f af7c 	bne.w	800840e <D32_GENERIC+0x46>
 8008516:	1d02      	adds	r2, r0, #4
 8008518:	6803      	ldr	r3, [r0, #0]
 800851a:	9806      	ldr	r0, [sp, #24]
 800851c:	b110      	cbz	r0, 8008524 <D32_GENERIC+0x15c>
 800851e:	ba5b      	rev16	r3, r3
 8008520:	4610      	mov	r0, r2
 8008522:	e783      	b.n	800842c <D32_GENERIC+0x64>
 8008524:	4610      	mov	r0, r2
 8008526:	e781      	b.n	800842c <D32_GENERIC+0x64>
 8008528:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800852c:	462b      	mov	r3, r5
 800852e:	463a      	mov	r2, r7
 8008530:	6093      	str	r3, [r2, #8]
 8008532:	9b07      	ldr	r3, [sp, #28]
 8008534:	f8c2 b00c 	str.w	fp, [r2, #12]
 8008538:	2000      	movs	r0, #0
 800853a:	61d6      	str	r6, [r2, #28]
 800853c:	f8c2 a010 	str.w	sl, [r2, #16]
 8008540:	f8c2 9014 	str.w	r9, [r2, #20]
 8008544:	6193      	str	r3, [r2, #24]
 8008546:	b009      	add	sp, #36	; 0x24
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	20000000 	.word	0x20000000
 8008550:	00060003 	.word	0x00060003
 8008554:	000a000c 	.word	0x000a000c
 8008558:	000c000a 	.word	0x000c000a
 800855c:	00030006 	.word	0x00030006

08008560 <D48_GENERIC>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	b089      	sub	sp, #36	; 0x24
 8008566:	6953      	ldr	r3, [r2, #20]
 8008568:	68d4      	ldr	r4, [r2, #12]
 800856a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800856c:	9302      	str	r3, [sp, #8]
 800856e:	9400      	str	r4, [sp, #0]
 8008570:	6993      	ldr	r3, [r2, #24]
 8008572:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	9403      	str	r4, [sp, #12]
 8008578:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800857c:	69d6      	ldr	r6, [r2, #28]
 800857e:	6893      	ldr	r3, [r2, #8]
 8008580:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008582:	9104      	str	r1, [sp, #16]
 8008584:	2d00      	cmp	r5, #0
 8008586:	f000 80c5 	beq.w	8008714 <D48_GENERIC+0x1b4>
 800858a:	f004 0510 	and.w	r5, r4, #16
 800858e:	f004 0420 	and.w	r4, r4, #32
 8008592:	4967      	ldr	r1, [pc, #412]	; (8008730 <D48_GENERIC+0x1d0>)
 8008594:	9505      	str	r5, [sp, #20]
 8008596:	9406      	str	r4, [sp, #24]
 8008598:	f04f 0c00 	mov.w	ip, #0
 800859c:	4657      	mov	r7, sl
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	e09c      	b.n	80086dc <D48_GENERIC+0x17c>
 80085a2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80085a6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80085aa:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80085ae:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80085b2:	7800      	ldrb	r0, [r0, #0]
 80085b4:	0424      	lsls	r4, r4, #16
 80085b6:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80085ba:	f818 4005 	ldrb.w	r4, [r8, r5]
 80085be:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80085c2:	44a8      	add	r8, r5
 80085c4:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80085c8:	eb0b 0500 	add.w	r5, fp, r0
 80085cc:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80085d0:	fa5f f885 	uxtb.w	r8, r5
 80085d4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80085d8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80085dc:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80085e0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80085e4:	0e2d      	lsrs	r5, r5, #24
 80085e6:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80085ea:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80085ee:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80085f2:	b2e6      	uxtb	r6, r4
 80085f4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80085f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80085fc:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8008600:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008604:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8008608:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800860c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8008610:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8008614:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008618:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800861c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8008620:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008624:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008628:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800862c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8008630:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8008634:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8008638:	4c3e      	ldr	r4, [pc, #248]	; (8008734 <D48_GENERIC+0x1d4>)
 800863a:	9d00      	ldr	r5, [sp, #0]
 800863c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8008640:	4d3d      	ldr	r5, [pc, #244]	; (8008738 <D48_GENERIC+0x1d8>)
 8008642:	fb28 4405 	smlad	r4, r8, r5, r4
 8008646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800864a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800864e:	4c3b      	ldr	r4, [pc, #236]	; (800873c <D48_GENERIC+0x1dc>)
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	fb2a 3304 	smlad	r3, sl, r4, r3
 8008656:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800865a:	fb28 3304 	smlad	r3, r8, r4, r3
 800865e:	4c38      	ldr	r4, [pc, #224]	; (8008740 <D48_GENERIC+0x1e0>)
 8008660:	fb2e 3304 	smlad	r3, lr, r4, r3
 8008664:	2501      	movs	r5, #1
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	fb2a fa05 	smuad	sl, sl, r5
 800866c:	4b35      	ldr	r3, [pc, #212]	; (8008744 <D48_GENERIC+0x1e4>)
 800866e:	fb28 a803 	smlad	r8, r8, r3, sl
 8008672:	4b35      	ldr	r3, [pc, #212]	; (8008748 <D48_GENERIC+0x1e8>)
 8008674:	fb2e 8303 	smlad	r3, lr, r3, r8
 8008678:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	9b02      	ldr	r3, [sp, #8]
 8008680:	eb04 0807 	add.w	r8, r4, r7
 8008684:	eba8 0803 	sub.w	r8, r8, r3
 8008688:	9b05      	ldr	r3, [sp, #20]
 800868a:	4465      	add	r5, ip
 800868c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8008690:	b163      	cbz	r3, 80086ac <D48_GENERIC+0x14c>
 8008692:	6a17      	ldr	r7, [r2, #32]
 8008694:	9402      	str	r4, [sp, #8]
 8008696:	fba8 8907 	umull	r8, r9, r8, r7
 800869a:	fb07 990b 	mla	r9, r7, fp, r9
 800869e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80086a2:	f149 0900 	adc.w	r9, r9, #0
 80086a6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80086aa:	463c      	mov	r4, r7
 80086ac:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	02e4      	lsls	r4, r4, #11
 80086b4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80086b8:	f04f 0900 	mov.w	r9, #0
 80086bc:	fb0c fc0e 	mul.w	ip, ip, lr
 80086c0:	fbc3 8904 	smlal	r8, r9, r3, r4
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80086ca:	f304 040f 	ssat	r4, #16, r4
 80086ce:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80086d2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80086d4:	fa1f fc85 	uxth.w	ip, r5
 80086d8:	4564      	cmp	r4, ip
 80086da:	d919      	bls.n	8008710 <D48_GENERIC+0x1b0>
 80086dc:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80086de:	fa5f fe84 	uxtb.w	lr, r4
 80086e2:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80086e6:	f1ce 0500 	rsb	r5, lr, #0
 80086ea:	eb00 0b09 	add.w	fp, r0, r9
 80086ee:	eb0b 0a05 	add.w	sl, fp, r5
 80086f2:	2c01      	cmp	r4, #1
 80086f4:	eb0a 0809 	add.w	r8, sl, r9
 80086f8:	f47f af53 	bne.w	80085a2 <D48_GENERIC+0x42>
 80086fc:	9b06      	ldr	r3, [sp, #24]
 80086fe:	6805      	ldr	r5, [r0, #0]
 8008700:	6844      	ldr	r4, [r0, #4]
 8008702:	3006      	adds	r0, #6
 8008704:	2b00      	cmp	r3, #0
 8008706:	f43f af63 	beq.w	80085d0 <D48_GENERIC+0x70>
 800870a:	ba6d      	rev16	r5, r5
 800870c:	ba64      	rev16	r4, r4
 800870e:	e75f      	b.n	80085d0 <D48_GENERIC+0x70>
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	46ba      	mov	sl, r7
 8008714:	6093      	str	r3, [r2, #8]
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	60d3      	str	r3, [r2, #12]
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	6153      	str	r3, [r2, #20]
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	61d6      	str	r6, [r2, #28]
 8008722:	2000      	movs	r0, #0
 8008724:	f8c2 a010 	str.w	sl, [r2, #16]
 8008728:	6193      	str	r3, [r2, #24]
 800872a:	b009      	add	sp, #36	; 0x24
 800872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	20000000 	.word	0x20000000
 8008734:	000f000a 	.word	0x000f000a
 8008738:	00060003 	.word	0x00060003
 800873c:	00150019 	.word	0x00150019
 8008740:	00190015 	.word	0x00190015
 8008744:	00030006 	.word	0x00030006
 8008748:	000a000f 	.word	0x000a000f

0800874c <D64_GENERIC>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	b089      	sub	sp, #36	; 0x24
 8008752:	6913      	ldr	r3, [r2, #16]
 8008754:	6895      	ldr	r5, [r2, #8]
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	9501      	str	r5, [sp, #4]
 800875a:	6953      	ldr	r3, [r2, #20]
 800875c:	68d5      	ldr	r5, [r2, #12]
 800875e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	9500      	str	r5, [sp, #0]
 8008764:	6993      	ldr	r3, [r2, #24]
 8008766:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8008768:	9307      	str	r3, [sp, #28]
 800876a:	9505      	str	r5, [sp, #20]
 800876c:	69d3      	ldr	r3, [r2, #28]
 800876e:	9106      	str	r1, [sp, #24]
 8008770:	2c00      	cmp	r4, #0
 8008772:	f000 80d9 	beq.w	8008928 <D64_GENERIC+0x1dc>
 8008776:	6a11      	ldr	r1, [r2, #32]
 8008778:	9102      	str	r1, [sp, #8]
 800877a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8008968 <D64_GENERIC+0x21c>
 800877e:	f04f 0c00 	mov.w	ip, #0
 8008782:	4681      	mov	r9, r0
 8008784:	e0c1      	b.n	800890a <D64_GENERIC+0x1be>
 8008786:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800878a:	4274      	negs	r4, r6
 800878c:	eb09 0708 	add.w	r7, r9, r8
 8008790:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8008794:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8008798:	5d38      	ldrb	r0, [r7, r4]
 800879a:	5d29      	ldrb	r1, [r5, r4]
 800879c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80087a0:	f819 a008 	ldrb.w	sl, [r9, r8]
 80087a4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80087a8:	f899 7000 	ldrb.w	r7, [r9]
 80087ac:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80087b0:	4425      	add	r5, r4
 80087b2:	0409      	lsls	r1, r1, #16
 80087b4:	0400      	lsls	r0, r0, #16
 80087b6:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80087ba:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80087be:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80087c2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80087c6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80087ca:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80087ce:	4459      	add	r1, fp
 80087d0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80087d4:	4438      	add	r0, r7
 80087d6:	b2c5      	uxtb	r5, r0
 80087d8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80087dc:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80087e0:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80087e4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80087e8:	0e00      	lsrs	r0, r0, #24
 80087ea:	eb03 0806 	add.w	r8, r3, r6
 80087ee:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80087f2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80087f6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80087fa:	b2c8      	uxtb	r0, r1
 80087fc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008800:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008804:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8008808:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800880c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008810:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8008814:	0e09      	lsrs	r1, r1, #24
 8008816:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800881a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800881e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8008822:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008826:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800882a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800882e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8008832:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008836:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800883a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800883e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8008842:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008846:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800884a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800884e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008852:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8008856:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800885a:	0a8b      	lsrs	r3, r1, #10
 800885c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008860:	4939      	ldr	r1, [pc, #228]	; (8008948 <D64_GENERIC+0x1fc>)
 8008862:	9c00      	ldr	r4, [sp, #0]
 8008864:	fb28 4101 	smlad	r1, r8, r1, r4
 8008868:	4c38      	ldr	r4, [pc, #224]	; (800894c <D64_GENERIC+0x200>)
 800886a:	fb27 1104 	smlad	r1, r7, r4, r1
 800886e:	4c38      	ldr	r4, [pc, #224]	; (8008950 <D64_GENERIC+0x204>)
 8008870:	fb20 1104 	smlad	r1, r0, r4, r1
 8008874:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8008878:	fb2a 1106 	smlad	r1, sl, r6, r1
 800887c:	4c35      	ldr	r4, [pc, #212]	; (8008954 <D64_GENERIC+0x208>)
 800887e:	9d01      	ldr	r5, [sp, #4]
 8008880:	fb28 5404 	smlad	r4, r8, r4, r5
 8008884:	4d33      	ldr	r5, [pc, #204]	; (8008954 <D64_GENERIC+0x208>)
 8008886:	fb2a 4415 	smladx	r4, sl, r5, r4
 800888a:	4d33      	ldr	r5, [pc, #204]	; (8008958 <D64_GENERIC+0x20c>)
 800888c:	fb27 4405 	smlad	r4, r7, r5, r4
 8008890:	fb20 4415 	smladx	r4, r0, r5, r4
 8008894:	2501      	movs	r5, #1
 8008896:	9400      	str	r4, [sp, #0]
 8008898:	fb28 f805 	smuad	r8, r8, r5
 800889c:	4c2f      	ldr	r4, [pc, #188]	; (800895c <D64_GENERIC+0x210>)
 800889e:	fb27 8704 	smlad	r7, r7, r4, r8
 80088a2:	4c2f      	ldr	r4, [pc, #188]	; (8008960 <D64_GENERIC+0x214>)
 80088a4:	fb20 7004 	smlad	r0, r0, r4, r7
 80088a8:	4c2e      	ldr	r4, [pc, #184]	; (8008964 <D64_GENERIC+0x218>)
 80088aa:	fb2a 0004 	smlad	r0, sl, r4, r0
 80088ae:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80088b2:	9902      	ldr	r1, [sp, #8]
 80088b4:	9001      	str	r0, [sp, #4]
 80088b6:	b189      	cbz	r1, 80088dc <D64_GENERIC+0x190>
 80088b8:	9803      	ldr	r0, [sp, #12]
 80088ba:	9c04      	ldr	r4, [sp, #16]
 80088bc:	9604      	str	r6, [sp, #16]
 80088be:	4430      	add	r0, r6
 80088c0:	1b00      	subs	r0, r0, r4
 80088c2:	17c5      	asrs	r5, r0, #31
 80088c4:	460f      	mov	r7, r1
 80088c6:	fba0 0101 	umull	r0, r1, r0, r1
 80088ca:	fb07 1105 	mla	r1, r7, r5, r1
 80088ce:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80088d2:	f141 0100 	adc.w	r1, r1, #0
 80088d6:	0049      	lsls	r1, r1, #1
 80088d8:	9103      	str	r1, [sp, #12]
 80088da:	460e      	mov	r6, r1
 80088dc:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80088de:	9905      	ldr	r1, [sp, #20]
 80088e0:	9806      	ldr	r0, [sp, #24]
 80088e2:	02b6      	lsls	r6, r6, #10
 80088e4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80088e8:	f04f 0800 	mov.w	r8, #0
 80088ec:	fb0c f404 	mul.w	r4, ip, r4
 80088f0:	fbc1 7806 	smlal	r7, r8, r1, r6
 80088f4:	4641      	mov	r1, r8
 80088f6:	1089      	asrs	r1, r1, #2
 80088f8:	f301 010f 	ssat	r1, #16, r1
 80088fc:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8008900:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8008902:	f10c 0c01 	add.w	ip, ip, #1
 8008906:	4561      	cmp	r1, ip
 8008908:	dd0e      	ble.n	8008928 <D64_GENERIC+0x1dc>
 800890a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800890c:	2e01      	cmp	r6, #1
 800890e:	f47f af3a 	bne.w	8008786 <D64_GENERIC+0x3a>
 8008912:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8008914:	06b4      	lsls	r4, r6, #26
 8008916:	e899 0003 	ldmia.w	r9, {r0, r1}
 800891a:	f109 0908 	add.w	r9, r9, #8
 800891e:	f57f af5a 	bpl.w	80087d6 <D64_GENERIC+0x8a>
 8008922:	ba40      	rev16	r0, r0
 8008924:	ba49      	rev16	r1, r1
 8008926:	e756      	b.n	80087d6 <D64_GENERIC+0x8a>
 8008928:	61d3      	str	r3, [r2, #28]
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	9901      	ldr	r1, [sp, #4]
 800892e:	6113      	str	r3, [r2, #16]
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	6091      	str	r1, [r2, #8]
 8008934:	6153      	str	r3, [r2, #20]
 8008936:	9900      	ldr	r1, [sp, #0]
 8008938:	9b07      	ldr	r3, [sp, #28]
 800893a:	60d1      	str	r1, [r2, #12]
 800893c:	2000      	movs	r0, #0
 800893e:	6193      	str	r3, [r2, #24]
 8008940:	b009      	add	sp, #36	; 0x24
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	bf00      	nop
 8008948:	001c0015 	.word	0x001c0015
 800894c:	000f000a 	.word	0x000f000a
 8008950:	00060003 	.word	0x00060003
 8008954:	0024002a 	.word	0x0024002a
 8008958:	002e0030 	.word	0x002e0030
 800895c:	00030006 	.word	0x00030006
 8008960:	000a000f 	.word	0x000a000f
 8008964:	0015001c 	.word	0x0015001c
 8008968:	20000000 	.word	0x20000000

0800896c <D80_GENERIC>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	b08b      	sub	sp, #44	; 0x2c
 8008972:	6914      	ldr	r4, [r2, #16]
 8008974:	9404      	str	r4, [sp, #16]
 8008976:	6954      	ldr	r4, [r2, #20]
 8008978:	9405      	str	r4, [sp, #20]
 800897a:	6994      	ldr	r4, [r2, #24]
 800897c:	9409      	str	r4, [sp, #36]	; 0x24
 800897e:	6894      	ldr	r4, [r2, #8]
 8008980:	9402      	str	r4, [sp, #8]
 8008982:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008984:	68d4      	ldr	r4, [r2, #12]
 8008986:	9401      	str	r4, [sp, #4]
 8008988:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800898a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800898e:	9406      	str	r4, [sp, #24]
 8008990:	9107      	str	r1, [sp, #28]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 810f 	beq.w	8008bb6 <D80_GENERIC+0x24a>
 8008998:	6a13      	ldr	r3, [r2, #32]
 800899a:	9308      	str	r3, [sp, #32]
 800899c:	2300      	movs	r3, #0
 800899e:	9200      	str	r2, [sp, #0]
 80089a0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8008c08 <D80_GENERIC+0x29c>
 80089a4:	f8cd b00c 	str.w	fp, [sp, #12]
 80089a8:	461a      	mov	r2, r3
 80089aa:	e0ed      	b.n	8008b88 <D80_GENERIC+0x21c>
 80089ac:	fa5f fc8c 	uxtb.w	ip, ip
 80089b0:	fa0f f48c 	sxth.w	r4, ip
 80089b4:	0066      	lsls	r6, r4, #1
 80089b6:	eb06 0804 	add.w	r8, r6, r4
 80089ba:	f1cc 0500 	rsb	r5, ip, #0
 80089be:	eb00 0108 	add.w	r1, r0, r8
 80089c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80089c6:	194b      	adds	r3, r1, r5
 80089c8:	5d49      	ldrb	r1, [r1, r5]
 80089ca:	f810 a008 	ldrb.w	sl, [r0, r8]
 80089ce:	f813 b004 	ldrb.w	fp, [r3, r4]
 80089d2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80089d6:	f890 8000 	ldrb.w	r8, [r0]
 80089da:	eb03 0e04 	add.w	lr, r3, r4
 80089de:	eb0e 0705 	add.w	r7, lr, r5
 80089e2:	0409      	lsls	r1, r1, #16
 80089e4:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80089e8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80089ec:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80089f0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80089f4:	eb0a 0004 	add.w	r0, sl, r4
 80089f8:	041b      	lsls	r3, r3, #16
 80089fa:	f81a a004 	ldrb.w	sl, [sl, r4]
 80089fe:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8008a02:	5d44      	ldrb	r4, [r0, r5]
 8008a04:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008a08:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8008a0c:	4428      	add	r0, r5
 8008a0e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008a12:	4441      	add	r1, r8
 8008a14:	4430      	add	r0, r6
 8008a16:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8008a1a:	441f      	add	r7, r3
 8008a1c:	b2cd      	uxtb	r5, r1
 8008a1e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008a22:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8008a26:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008a30:	0e09      	lsrs	r1, r1, #24
 8008a32:	4433      	add	r3, r6
 8008a34:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8008a38:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8008a3c:	b2fd      	uxtb	r5, r7
 8008a3e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8008a42:	469b      	mov	fp, r3
 8008a44:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8008a48:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8008a4c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8008a50:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8008a54:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8008a58:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8008a5c:	0e3b      	lsrs	r3, r7, #24
 8008a5e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008a62:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8008a66:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008a6a:	fa5f fe84 	uxtb.w	lr, r4
 8008a6e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8008a72:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008a76:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008a7a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8008a7e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8008a82:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8008a86:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8008a8a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008a8e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a96:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008a9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008a9e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008aa2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008aa6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008aaa:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008aae:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8008ab2:	0aa3      	lsrs	r3, r4, #10
 8008ab4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008ab8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008abc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ac0:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8008aca:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8008ace:	4b42      	ldr	r3, [pc, #264]	; (8008bd8 <D80_GENERIC+0x26c>)
 8008ad0:	9901      	ldr	r1, [sp, #4]
 8008ad2:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008ad6:	4941      	ldr	r1, [pc, #260]	; (8008bdc <D80_GENERIC+0x270>)
 8008ad8:	fb28 3301 	smlad	r3, r8, r1, r3
 8008adc:	4940      	ldr	r1, [pc, #256]	; (8008be0 <D80_GENERIC+0x274>)
 8008ade:	fb2c 3301 	smlad	r3, ip, r1, r3
 8008ae2:	4940      	ldr	r1, [pc, #256]	; (8008be4 <D80_GENERIC+0x278>)
 8008ae4:	fb27 3301 	smlad	r3, r7, r1, r3
 8008ae8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008aec:	fb2e 3301 	smlad	r3, lr, r1, r3
 8008af0:	493d      	ldr	r1, [pc, #244]	; (8008be8 <D80_GENERIC+0x27c>)
 8008af2:	9c02      	ldr	r4, [sp, #8]
 8008af4:	fb2b 4401 	smlad	r4, fp, r1, r4
 8008af8:	493c      	ldr	r1, [pc, #240]	; (8008bec <D80_GENERIC+0x280>)
 8008afa:	fb28 4401 	smlad	r4, r8, r1, r4
 8008afe:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8008b02:	fb2c 4101 	smlad	r1, ip, r1, r4
 8008b06:	4c3a      	ldr	r4, [pc, #232]	; (8008bf0 <D80_GENERIC+0x284>)
 8008b08:	fb27 1104 	smlad	r1, r7, r4, r1
 8008b0c:	4c39      	ldr	r4, [pc, #228]	; (8008bf4 <D80_GENERIC+0x288>)
 8008b0e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8008b12:	9101      	str	r1, [sp, #4]
 8008b14:	2101      	movs	r1, #1
 8008b16:	fb2b fb01 	smuad	fp, fp, r1
 8008b1a:	4937      	ldr	r1, [pc, #220]	; (8008bf8 <D80_GENERIC+0x28c>)
 8008b1c:	fb28 b801 	smlad	r8, r8, r1, fp
 8008b20:	4d36      	ldr	r5, [pc, #216]	; (8008bfc <D80_GENERIC+0x290>)
 8008b22:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8008b26:	4d36      	ldr	r5, [pc, #216]	; (8008c00 <D80_GENERIC+0x294>)
 8008b28:	fb27 c705 	smlad	r7, r7, r5, ip
 8008b2c:	4d35      	ldr	r5, [pc, #212]	; (8008c04 <D80_GENERIC+0x298>)
 8008b2e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8008b32:	9102      	str	r1, [sp, #8]
 8008b34:	9908      	ldr	r1, [sp, #32]
 8008b36:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8008b3a:	b181      	cbz	r1, 8008b5e <D80_GENERIC+0x1f2>
 8008b3c:	9c04      	ldr	r4, [sp, #16]
 8008b3e:	9d05      	ldr	r5, [sp, #20]
 8008b40:	9305      	str	r3, [sp, #20]
 8008b42:	441c      	add	r4, r3
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	17e7      	asrs	r7, r4, #31
 8008b48:	fba4 4501 	umull	r4, r5, r4, r1
 8008b4c:	fb01 5507 	mla	r5, r1, r7, r5
 8008b50:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008b54:	f145 0500 	adc.w	r5, r5, #0
 8008b58:	0069      	lsls	r1, r5, #1
 8008b5a:	9104      	str	r1, [sp, #16]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	9e00      	ldr	r6, [sp, #0]
 8008b60:	9f06      	ldr	r7, [sp, #24]
 8008b62:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8008b64:	025b      	lsls	r3, r3, #9
 8008b66:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	fb02 f101 	mul.w	r1, r2, r1
 8008b70:	fbc7 4503 	smlal	r4, r5, r7, r3
 8008b74:	9c07      	ldr	r4, [sp, #28]
 8008b76:	10ab      	asrs	r3, r5, #2
 8008b78:	f303 030f 	ssat	r3, #16, r3
 8008b7c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8008b80:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8008b82:	3201      	adds	r2, #1
 8008b84:	4293      	cmp	r3, r2
 8008b86:	dd13      	ble.n	8008bb0 <D80_GENERIC+0x244>
 8008b88:	9b00      	ldr	r3, [sp, #0]
 8008b8a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8008b8e:	f1bc 0f01 	cmp.w	ip, #1
 8008b92:	f47f af0b 	bne.w	80089ac <D80_GENERIC+0x40>
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	6884      	ldr	r4, [r0, #8]
 8008b9a:	069b      	lsls	r3, r3, #26
 8008b9c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8008ba0:	f100 000a 	add.w	r0, r0, #10
 8008ba4:	f57f af3a 	bpl.w	8008a1c <D80_GENERIC+0xb0>
 8008ba8:	ba49      	rev16	r1, r1
 8008baa:	ba7f      	rev16	r7, r7
 8008bac:	ba64      	rev16	r4, r4
 8008bae:	e735      	b.n	8008a1c <D80_GENERIC+0xb0>
 8008bb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	6093      	str	r3, [r2, #8]
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	60d3      	str	r3, [r2, #12]
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	6113      	str	r3, [r2, #16]
 8008bc2:	9b05      	ldr	r3, [sp, #20]
 8008bc4:	6153      	str	r3, [r2, #20]
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	f8c2 b01c 	str.w	fp, [r2, #28]
 8008bcc:	2000      	movs	r0, #0
 8008bce:	6193      	str	r3, [r2, #24]
 8008bd0:	b00b      	add	sp, #44	; 0x2c
 8008bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd6:	bf00      	nop
 8008bd8:	002d0024 	.word	0x002d0024
 8008bdc:	001c0015 	.word	0x001c0015
 8008be0:	000f000a 	.word	0x000f000a
 8008be4:	00060003 	.word	0x00060003
 8008be8:	0037003f 	.word	0x0037003f
 8008bec:	00450049 	.word	0x00450049
 8008bf0:	00490045 	.word	0x00490045
 8008bf4:	003f0037 	.word	0x003f0037
 8008bf8:	00030006 	.word	0x00030006
 8008bfc:	000a000f 	.word	0x000a000f
 8008c00:	0015001c 	.word	0x0015001c
 8008c04:	0024002d 	.word	0x0024002d
 8008c08:	20000000 	.word	0x20000000

08008c0c <D128_GENERIC>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	b093      	sub	sp, #76	; 0x4c
 8008c12:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008c14:	9005      	str	r0, [sp, #20]
 8008c16:	4610      	mov	r0, r2
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	6912      	ldr	r2, [r2, #16]
 8008c1c:	920c      	str	r2, [sp, #48]	; 0x30
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6940      	ldr	r0, [r0, #20]
 8008c22:	900d      	str	r0, [sp, #52]	; 0x34
 8008c24:	4610      	mov	r0, r2
 8008c26:	4614      	mov	r4, r2
 8008c28:	6992      	ldr	r2, [r2, #24]
 8008c2a:	9211      	str	r2, [sp, #68]	; 0x44
 8008c2c:	69c2      	ldr	r2, [r0, #28]
 8008c2e:	9202      	str	r2, [sp, #8]
 8008c30:	68e2      	ldr	r2, [r4, #12]
 8008c32:	6880      	ldr	r0, [r0, #8]
 8008c34:	9203      	str	r2, [sp, #12]
 8008c36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008c38:	9004      	str	r0, [sp, #16]
 8008c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8008c3c:	910f      	str	r1, [sp, #60]	; 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 819b 	beq.w	8008f7a <D128_GENERIC+0x36e>
 8008c44:	6a23      	ldr	r3, [r4, #32]
 8008c46:	9310      	str	r3, [sp, #64]	; 0x40
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8008ff4 <D128_GENERIC+0x3e8>
 8008c4e:	9306      	str	r3, [sp, #24]
 8008c50:	e17a      	b.n	8008f48 <D128_GENERIC+0x33c>
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	9d05      	ldr	r5, [sp, #20]
 8008c56:	b214      	sxth	r4, r2
 8008c58:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8008c5c:	4250      	negs	r0, r2
 8008c5e:	eb05 010a 	add.w	r1, r5, sl
 8008c62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c66:	eb01 0800 	add.w	r8, r1, r0
 8008c6a:	eb0b 0c04 	add.w	ip, fp, r4
 8008c6e:	eb08 070c 	add.w	r7, r8, ip
 8008c72:	183b      	adds	r3, r7, r0
 8008c74:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8008c78:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8008c7c:	eb0e 0604 	add.w	r6, lr, r4
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	1833      	adds	r3, r6, r0
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	462b      	mov	r3, r5
 8008c88:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8008c8c:	f8cd a020 	str.w	sl, [sp, #32]
 8008c90:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8008c94:	f813 c002 	ldrb.w	ip, [r3, r2]
 8008c98:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8008c9c:	5c3a      	ldrb	r2, [r7, r0]
 8008c9e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8008ca2:	781f      	ldrb	r7, [r3, #0]
 8008ca4:	9b07      	ldr	r3, [sp, #28]
 8008ca6:	9d05      	ldr	r5, [sp, #20]
 8008ca8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8008cac:	5c09      	ldrb	r1, [r1, r0]
 8008cae:	9709      	str	r7, [sp, #36]	; 0x24
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8008cb6:	5c33      	ldrb	r3, [r6, r0]
 8008cb8:	0412      	lsls	r2, r2, #16
 8008cba:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8008cbe:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8008cc2:	9d08      	ldr	r5, [sp, #32]
 8008cc4:	eb06 0a04 	add.w	sl, r6, r4
 8008cc8:	0409      	lsls	r1, r1, #16
 8008cca:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8008cce:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8008cd2:	5d36      	ldrb	r6, [r6, r4]
 8008cd4:	9c05      	ldr	r4, [sp, #20]
 8008cd6:	042d      	lsls	r5, r5, #16
 8008cd8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8008cdc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8008ce0:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8008ce4:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8008ce8:	eb0a 0c00 	add.w	ip, sl, r0
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8008cf2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8008cf6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8008cfa:	9d07      	ldr	r5, [sp, #28]
 8008cfc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8008d00:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8008d04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d06:	4458      	add	r0, fp
 8008d08:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8008d0c:	9005      	str	r0, [sp, #20]
 8008d0e:	4439      	add	r1, r7
 8008d10:	442a      	add	r2, r5
 8008d12:	44b2      	add	sl, r6
 8008d14:	1918      	adds	r0, r3, r4
 8008d16:	b2cb      	uxtb	r3, r1
 8008d18:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008d1c:	9e02      	ldr	r6, [sp, #8]
 8008d1e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d22:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008d26:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8008d2a:	441e      	add	r6, r3
 8008d2c:	0e09      	lsrs	r1, r1, #24
 8008d2e:	4633      	mov	r3, r6
 8008d30:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008d34:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8008d38:	b2d4      	uxtb	r4, r2
 8008d3a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008d3e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008d42:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8008d46:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008d4a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d4e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008d52:	0e12      	lsrs	r2, r2, #24
 8008d54:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8008d58:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8008d5c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008d60:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008d64:	9702      	str	r7, [sp, #8]
 8008d66:	b2c2      	uxtb	r2, r0
 8008d68:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008d6c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8008d70:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8008d74:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008d78:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8008d7c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8008d80:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8008d84:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008d88:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8008d8c:	0e00      	lsrs	r0, r0, #24
 8008d8e:	fa5f f68a 	uxtb.w	r6, sl
 8008d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d96:	9309      	str	r3, [sp, #36]	; 0x24
 8008d98:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008d9c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8008da0:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8008da4:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8008da8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008dac:	950a      	str	r5, [sp, #40]	; 0x28
 8008dae:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008db2:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008db6:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008dba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008dbe:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008dc2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008dc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008dc8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dce:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008dd2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008dd6:	9307      	str	r3, [sp, #28]
 8008dd8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008ddc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	f8cd c008 	str.w	ip, [sp, #8]
 8008de6:	4694      	mov	ip, r2
 8008de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dea:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008dee:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8008df2:	9a02      	ldr	r2, [sp, #8]
 8008df4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008df8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e02:	f8cd a020 	str.w	sl, [sp, #32]
 8008e06:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008e0a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008e0e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008e12:	9b07      	ldr	r3, [sp, #28]
 8008e14:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008e18:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8008e1c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8008e20:	9a08      	ldr	r2, [sp, #32]
 8008e22:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e2a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008e2e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008e32:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8008e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008e3a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008e3e:	0a96      	lsrs	r6, r2, #10
 8008e40:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008e44:	9602      	str	r6, [sp, #8]
 8008e46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008e4a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8008e4e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8008e52:	4e53      	ldr	r6, [pc, #332]	; (8008fa0 <D128_GENERIC+0x394>)
 8008e54:	9f03      	ldr	r7, [sp, #12]
 8008e56:	fb2c 7606 	smlad	r6, ip, r6, r7
 8008e5a:	4f52      	ldr	r7, [pc, #328]	; (8008fa4 <D128_GENERIC+0x398>)
 8008e5c:	fb2a 6607 	smlad	r6, sl, r7, r6
 8008e60:	4f51      	ldr	r7, [pc, #324]	; (8008fa8 <D128_GENERIC+0x39c>)
 8008e62:	fb21 6607 	smlad	r6, r1, r7, r6
 8008e66:	4f51      	ldr	r7, [pc, #324]	; (8008fac <D128_GENERIC+0x3a0>)
 8008e68:	fb24 6607 	smlad	r6, r4, r7, r6
 8008e6c:	4f50      	ldr	r7, [pc, #320]	; (8008fb0 <D128_GENERIC+0x3a4>)
 8008e6e:	fb28 6607 	smlad	r6, r8, r7, r6
 8008e72:	4f50      	ldr	r7, [pc, #320]	; (8008fb4 <D128_GENERIC+0x3a8>)
 8008e74:	fb20 6607 	smlad	r6, r0, r7, r6
 8008e78:	4f4f      	ldr	r7, [pc, #316]	; (8008fb8 <D128_GENERIC+0x3ac>)
 8008e7a:	fb23 6607 	smlad	r6, r3, r7, r6
 8008e7e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8008e82:	fb25 6607 	smlad	r6, r5, r7, r6
 8008e86:	4f4d      	ldr	r7, [pc, #308]	; (8008fbc <D128_GENERIC+0x3b0>)
 8008e88:	9a04      	ldr	r2, [sp, #16]
 8008e8a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8008e8e:	4a4c      	ldr	r2, [pc, #304]	; (8008fc0 <D128_GENERIC+0x3b4>)
 8008e90:	fb2a ee02 	smlad	lr, sl, r2, lr
 8008e94:	4f4b      	ldr	r7, [pc, #300]	; (8008fc4 <D128_GENERIC+0x3b8>)
 8008e96:	fb21 ee07 	smlad	lr, r1, r7, lr
 8008e9a:	4f4b      	ldr	r7, [pc, #300]	; (8008fc8 <D128_GENERIC+0x3bc>)
 8008e9c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008ea0:	4f4a      	ldr	r7, [pc, #296]	; (8008fcc <D128_GENERIC+0x3c0>)
 8008ea2:	fb28 ee07 	smlad	lr, r8, r7, lr
 8008ea6:	4f4a      	ldr	r7, [pc, #296]	; (8008fd0 <D128_GENERIC+0x3c4>)
 8008ea8:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008eac:	4f49      	ldr	r7, [pc, #292]	; (8008fd4 <D128_GENERIC+0x3c8>)
 8008eae:	fb23 e707 	smlad	r7, r3, r7, lr
 8008eb2:	f8df e144 	ldr.w	lr, [pc, #324]	; 8008ff8 <D128_GENERIC+0x3ec>
 8008eb6:	fb25 720e 	smlad	r2, r5, lr, r7
 8008eba:	f04f 0b01 	mov.w	fp, #1
 8008ebe:	9203      	str	r2, [sp, #12]
 8008ec0:	fb2c fb0b 	smuad	fp, ip, fp
 8008ec4:	4f44      	ldr	r7, [pc, #272]	; (8008fd8 <D128_GENERIC+0x3cc>)
 8008ec6:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008eca:	4f44      	ldr	r7, [pc, #272]	; (8008fdc <D128_GENERIC+0x3d0>)
 8008ecc:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008ed0:	4f43      	ldr	r7, [pc, #268]	; (8008fe0 <D128_GENERIC+0x3d4>)
 8008ed2:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008ed6:	4f43      	ldr	r7, [pc, #268]	; (8008fe4 <D128_GENERIC+0x3d8>)
 8008ed8:	fb28 a707 	smlad	r7, r8, r7, sl
 8008edc:	4a42      	ldr	r2, [pc, #264]	; (8008fe8 <D128_GENERIC+0x3dc>)
 8008ede:	fb20 7702 	smlad	r7, r0, r2, r7
 8008ee2:	4a42      	ldr	r2, [pc, #264]	; (8008fec <D128_GENERIC+0x3e0>)
 8008ee4:	fb23 7702 	smlad	r7, r3, r2, r7
 8008ee8:	4b41      	ldr	r3, [pc, #260]	; (8008ff0 <D128_GENERIC+0x3e4>)
 8008eea:	fb25 7303 	smlad	r3, r5, r3, r7
 8008eee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8008ef6:	b185      	cbz	r5, 8008f1a <D128_GENERIC+0x30e>
 8008ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008efa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008efc:	960d      	str	r6, [sp, #52]	; 0x34
 8008efe:	4432      	add	r2, r6
 8008f00:	1a52      	subs	r2, r2, r1
 8008f02:	17d1      	asrs	r1, r2, #31
 8008f04:	fba2 2305 	umull	r2, r3, r2, r5
 8008f08:	fb05 3301 	mla	r3, r5, r1, r3
 8008f0c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008f10:	f143 0300 	adc.w	r3, r3, #0
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	930c      	str	r3, [sp, #48]	; 0x30
 8008f18:	461e      	mov	r6, r3
 8008f1a:	9801      	ldr	r0, [sp, #4]
 8008f1c:	9c06      	ldr	r4, [sp, #24]
 8008f1e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8008f20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f22:	01f6      	lsls	r6, r6, #7
 8008f24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f28:	2300      	movs	r3, #0
 8008f2a:	fbc5 2306 	smlal	r2, r3, r5, r6
 8008f2e:	fb04 f101 	mul.w	r1, r4, r1
 8008f32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f34:	109b      	asrs	r3, r3, #2
 8008f36:	f303 030f 	ssat	r3, #16, r3
 8008f3a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8008f3e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8008f40:	1c62      	adds	r2, r4, #1
 8008f42:	4293      	cmp	r3, r2
 8008f44:	9206      	str	r2, [sp, #24]
 8008f46:	dd18      	ble.n	8008f7a <D128_GENERIC+0x36e>
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008f4c:	2a01      	cmp	r2, #1
 8008f4e:	f47f ae80 	bne.w	8008c52 <D128_GENERIC+0x46>
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	9d05      	ldr	r5, [sp, #20]
 8008f56:	069b      	lsls	r3, r3, #26
 8008f58:	6829      	ldr	r1, [r5, #0]
 8008f5a:	686a      	ldr	r2, [r5, #4]
 8008f5c:	68a8      	ldr	r0, [r5, #8]
 8008f5e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008f62:	f105 0410 	add.w	r4, r5, #16
 8008f66:	d506      	bpl.n	8008f76 <D128_GENERIC+0x36a>
 8008f68:	ba49      	rev16	r1, r1
 8008f6a:	ba52      	rev16	r2, r2
 8008f6c:	ba40      	rev16	r0, r0
 8008f6e:	fa9a fa9a 	rev16.w	sl, sl
 8008f72:	9405      	str	r4, [sp, #20]
 8008f74:	e6cf      	b.n	8008d16 <D128_GENERIC+0x10a>
 8008f76:	9405      	str	r4, [sp, #20]
 8008f78:	e6cd      	b.n	8008d16 <D128_GENERIC+0x10a>
 8008f7a:	9a01      	ldr	r2, [sp, #4]
 8008f7c:	9904      	ldr	r1, [sp, #16]
 8008f7e:	6091      	str	r1, [r2, #8]
 8008f80:	9903      	ldr	r1, [sp, #12]
 8008f82:	60d1      	str	r1, [r2, #12]
 8008f84:	9b02      	ldr	r3, [sp, #8]
 8008f86:	61d3      	str	r3, [r2, #28]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f8e:	610a      	str	r2, [r1, #16]
 8008f90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f92:	6159      	str	r1, [r3, #20]
 8008f94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f96:	6199      	str	r1, [r3, #24]
 8008f98:	2000      	movs	r0, #0
 8008f9a:	b013      	add	sp, #76	; 0x4c
 8008f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa0:	00780069 	.word	0x00780069
 8008fa4:	005b004e 	.word	0x005b004e
 8008fa8:	00420037 	.word	0x00420037
 8008fac:	002d0024 	.word	0x002d0024
 8008fb0:	001c0015 	.word	0x001c0015
 8008fb4:	000f000a 	.word	0x000f000a
 8008fb8:	00060003 	.word	0x00060003
 8008fbc:	00880096 	.word	0x00880096
 8008fc0:	00a200ac 	.word	0x00a200ac
 8008fc4:	00b400ba 	.word	0x00b400ba
 8008fc8:	00be00c0 	.word	0x00be00c0
 8008fcc:	00c000be 	.word	0x00c000be
 8008fd0:	00ba00b4 	.word	0x00ba00b4
 8008fd4:	00ac00a2 	.word	0x00ac00a2
 8008fd8:	00030006 	.word	0x00030006
 8008fdc:	000a000f 	.word	0x000a000f
 8008fe0:	0015001c 	.word	0x0015001c
 8008fe4:	0024002d 	.word	0x0024002d
 8008fe8:	00370042 	.word	0x00370042
 8008fec:	004e005b 	.word	0x004e005b
 8008ff0:	00690078 	.word	0x00690078
 8008ff4:	20000000 	.word	0x20000000
 8008ff8:	00960088 	.word	0x00960088

08008ffc <D16_1CH_HTONS_VOL_HP>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4691      	mov	r9, r2
 8009002:	b083      	sub	sp, #12
 8009004:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8009006:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800900a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4680      	mov	r8, r0
 8009012:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8009016:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800901a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800901e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8009022:	9401      	str	r4, [sp, #4]
 8009024:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8009028:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800902c:	2a00      	cmp	r2, #0
 800902e:	d04e      	beq.n	80090ce <D16_1CH_HTONS_VOL_HP+0xd2>
 8009030:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80090dc <D16_1CH_HTONS_VOL_HP+0xe0>
 8009034:	1e8c      	subs	r4, r1, #2
 8009036:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800903a:	f858 2b02 	ldr.w	r2, [r8], #2
 800903e:	ba52      	rev16	r2, r2
 8009040:	b2d6      	uxtb	r6, r2
 8009042:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009046:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800904a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800904e:	4413      	add	r3, r2
 8009050:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8009054:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8009058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800905c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009060:	0a93      	lsrs	r3, r2, #10
 8009062:	4a1c      	ldr	r2, [pc, #112]	; (80090d4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009064:	fb21 5202 	smlad	r2, r1, r2, r5
 8009068:	4d1b      	ldr	r5, [pc, #108]	; (80090d8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800906a:	fb21 f505 	smuad	r5, r1, r5
 800906e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8009072:	4410      	add	r0, r2
 8009074:	1bc0      	subs	r0, r0, r7
 8009076:	17c7      	asrs	r7, r0, #31
 8009078:	fba0 010e 	umull	r0, r1, r0, lr
 800907c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8009080:	fb0e 1107 	mla	r1, lr, r7, r1
 8009084:	f141 0100 	adc.w	r1, r1, #0
 8009088:	0448      	lsls	r0, r1, #17
 800908a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800908e:	2700      	movs	r7, #0
 8009090:	fbc0 670a 	smlal	r6, r7, r0, sl
 8009094:	45d8      	cmp	r8, fp
 8009096:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800909a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800909e:	4617      	mov	r7, r2
 80090a0:	f301 010f 	ssat	r1, #16, r1
 80090a4:	f824 1f02 	strh.w	r1, [r4, #2]!
 80090a8:	d1c7      	bne.n	800903a <D16_1CH_HTONS_VOL_HP+0x3e>
 80090aa:	9901      	ldr	r1, [sp, #4]
 80090ac:	f8c9 301c 	str.w	r3, [r9, #28]
 80090b0:	9b00      	ldr	r3, [sp, #0]
 80090b2:	f8c9 0010 	str.w	r0, [r9, #16]
 80090b6:	2000      	movs	r0, #0
 80090b8:	f8c9 5008 	str.w	r5, [r9, #8]
 80090bc:	f8c9 100c 	str.w	r1, [r9, #12]
 80090c0:	f8c9 2014 	str.w	r2, [r9, #20]
 80090c4:	f8c9 3018 	str.w	r3, [r9, #24]
 80090c8:	b003      	add	sp, #12
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	463a      	mov	r2, r7
 80090d0:	4621      	mov	r1, r4
 80090d2:	e7eb      	b.n	80090ac <D16_1CH_HTONS_VOL_HP+0xb0>
 80090d4:	00030001 	.word	0x00030001
 80090d8:	00010003 	.word	0x00010003
 80090dc:	20000000 	.word	0x20000000

080090e0 <D24_1CH_HTONS_VOL_HP>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	b089      	sub	sp, #36	; 0x24
 80090e6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80090e8:	6996      	ldr	r6, [r2, #24]
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80090ee:	9207      	str	r2, [sp, #28]
 80090f0:	6915      	ldr	r5, [r2, #16]
 80090f2:	6954      	ldr	r4, [r2, #20]
 80090f4:	9606      	str	r6, [sp, #24]
 80090f6:	6893      	ldr	r3, [r2, #8]
 80090f8:	69d6      	ldr	r6, [r2, #28]
 80090fa:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80090fe:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	9705      	str	r7, [sp, #20]
 8009106:	2a00      	cmp	r2, #0
 8009108:	d07e      	beq.n	8009208 <D24_1CH_HTONS_VOL_HP+0x128>
 800910a:	f1a1 0b02 	sub.w	fp, r1, #2
 800910e:	2700      	movs	r7, #0
 8009110:	46a8      	mov	r8, r5
 8009112:	f8cd b004 	str.w	fp, [sp, #4]
 8009116:	4655      	mov	r5, sl
 8009118:	46e3      	mov	fp, ip
 800911a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8009214 <D24_1CH_HTONS_VOL_HP+0x134>
 800911e:	46ba      	mov	sl, r7
 8009120:	469c      	mov	ip, r3
 8009122:	e055      	b.n	80091d0 <D24_1CH_HTONS_VOL_HP+0xf0>
 8009124:	7802      	ldrb	r2, [r0, #0]
 8009126:	78c3      	ldrb	r3, [r0, #3]
 8009128:	7841      	ldrb	r1, [r0, #1]
 800912a:	0212      	lsls	r2, r2, #8
 800912c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8009130:	440b      	add	r3, r1
 8009132:	3002      	adds	r0, #2
 8009134:	b2d9      	uxtb	r1, r3
 8009136:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800913a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800913e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8009142:	0c1b      	lsrs	r3, r3, #16
 8009144:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009148:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800914c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8009150:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8009154:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009158:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800915c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009160:	4a2a      	ldr	r2, [pc, #168]	; (800920c <D24_1CH_HTONS_VOL_HP+0x12c>)
 8009162:	fb23 b102 	smlad	r1, r3, r2, fp
 8009166:	4a2a      	ldr	r2, [pc, #168]	; (8009210 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009168:	fb23 cb02 	smlad	fp, r3, r2, ip
 800916c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8009170:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8009174:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8009178:	2201      	movs	r2, #1
 800917a:	fb23 f702 	smuad	r7, r3, r2
 800917e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8009182:	eb01 0208 	add.w	r2, r1, r8
 8009186:	1b12      	subs	r2, r2, r4
 8009188:	17d4      	asrs	r4, r2, #31
 800918a:	fba2 2305 	umull	r2, r3, r2, r5
 800918e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009192:	fb05 3304 	mla	r3, r5, r4, r3
 8009196:	f143 0300 	adc.w	r3, r3, #0
 800919a:	9c05      	ldr	r4, [sp, #20]
 800919c:	03da      	lsls	r2, r3, #15
 800919e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80091a2:	f04f 0900 	mov.w	r9, #0
 80091a6:	fbc4 8902 	smlal	r8, r9, r4, r2
 80091aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80091ae:	9a01      	ldr	r2, [sp, #4]
 80091b0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	109b      	asrs	r3, r3, #2
 80091b8:	f303 030f 	ssat	r3, #16, r3
 80091bc:	f822 3f02 	strh.w	r3, [r2, #2]!
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	9201      	str	r2, [sp, #4]
 80091c4:	f10a 0a01 	add.w	sl, sl, #1
 80091c8:	459a      	cmp	sl, r3
 80091ca:	44bc      	add	ip, r7
 80091cc:	460c      	mov	r4, r1
 80091ce:	d00b      	beq.n	80091e8 <D24_1CH_HTONS_VOL_HP+0x108>
 80091d0:	f01a 0f01 	tst.w	sl, #1
 80091d4:	d0a6      	beq.n	8009124 <D24_1CH_HTONS_VOL_HP+0x44>
 80091d6:	78c2      	ldrb	r2, [r0, #3]
 80091d8:	7883      	ldrb	r3, [r0, #2]
 80091da:	f810 1b04 	ldrb.w	r1, [r0], #4
 80091de:	0212      	lsls	r2, r2, #8
 80091e0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80091e4:	440b      	add	r3, r1
 80091e6:	e7a5      	b.n	8009134 <D24_1CH_HTONS_VOL_HP+0x54>
 80091e8:	4663      	mov	r3, ip
 80091ea:	4645      	mov	r5, r8
 80091ec:	46dc      	mov	ip, fp
 80091ee:	9807      	ldr	r0, [sp, #28]
 80091f0:	6141      	str	r1, [r0, #20]
 80091f2:	9906      	ldr	r1, [sp, #24]
 80091f4:	6083      	str	r3, [r0, #8]
 80091f6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80091fa:	61c6      	str	r6, [r0, #28]
 80091fc:	6105      	str	r5, [r0, #16]
 80091fe:	6181      	str	r1, [r0, #24]
 8009200:	2000      	movs	r0, #0
 8009202:	b009      	add	sp, #36	; 0x24
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	4621      	mov	r1, r4
 800920a:	e7f0      	b.n	80091ee <D24_1CH_HTONS_VOL_HP+0x10e>
 800920c:	00030001 	.word	0x00030001
 8009210:	00060007 	.word	0x00060007
 8009214:	20000000 	.word	0x20000000

08009218 <D32_1CH_HTONS_VOL_HP>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	4692      	mov	sl, r2
 800921e:	b087      	sub	sp, #28
 8009220:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8009222:	f8da 3018 	ldr.w	r3, [sl, #24]
 8009226:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8009230:	f8da 8014 	ldr.w	r8, [sl, #20]
 8009234:	f8da 601c 	ldr.w	r6, [sl, #28]
 8009238:	f8da 3008 	ldr.w	r3, [sl, #8]
 800923c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8009240:	9501      	str	r5, [sp, #4]
 8009242:	f8da c020 	ldr.w	ip, [sl, #32]
 8009246:	2a00      	cmp	r2, #0
 8009248:	d07b      	beq.n	8009342 <D32_1CH_HTONS_VOL_HP+0x12a>
 800924a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800924e:	4f3e      	ldr	r7, [pc, #248]	; (8009348 <D32_1CH_HTONS_VOL_HP+0x130>)
 8009250:	f8cd c00c 	str.w	ip, [sp, #12]
 8009254:	9202      	str	r2, [sp, #8]
 8009256:	460d      	mov	r5, r1
 8009258:	46a1      	mov	r9, r4
 800925a:	4684      	mov	ip, r0
 800925c:	f8cd a014 	str.w	sl, [sp, #20]
 8009260:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009264:	ba49      	rev16	r1, r1
 8009266:	b2c8      	uxtb	r0, r1
 8009268:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800926c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8009270:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8009274:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009278:	0e09      	lsrs	r1, r1, #24
 800927a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800927e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8009282:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009286:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800928a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800928e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8009292:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009296:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800929a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800929e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80092a2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80092a6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80092aa:	4a28      	ldr	r2, [pc, #160]	; (800934c <D32_1CH_HTONS_VOL_HP+0x134>)
 80092ac:	fb20 e202 	smlad	r2, r0, r2, lr
 80092b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80092b4:	fb2a 2101 	smlad	r1, sl, r1, r2
 80092b8:	4a25      	ldr	r2, [pc, #148]	; (8009350 <D32_1CH_HTONS_VOL_HP+0x138>)
 80092ba:	fb20 3302 	smlad	r3, r0, r2, r3
 80092be:	4a25      	ldr	r2, [pc, #148]	; (8009354 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80092c0:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80092c4:	2301      	movs	r3, #1
 80092c6:	fb20 f003 	smuad	r0, r0, r3
 80092ca:	4b23      	ldr	r3, [pc, #140]	; (8009358 <D32_1CH_HTONS_VOL_HP+0x140>)
 80092cc:	fb2a 0303 	smlad	r3, sl, r3, r0
 80092d0:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80092d4:	9c03      	ldr	r4, [sp, #12]
 80092d6:	eb02 0009 	add.w	r0, r2, r9
 80092da:	eba0 0008 	sub.w	r0, r0, r8
 80092de:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80092e2:	fba0 0104 	umull	r0, r1, r0, r4
 80092e6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80092ea:	fb04 110b 	mla	r1, r4, fp, r1
 80092ee:	f141 0100 	adc.w	r1, r1, #0
 80092f2:	9c01      	ldr	r4, [sp, #4]
 80092f4:	0388      	lsls	r0, r1, #14
 80092f6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80092fa:	f04f 0900 	mov.w	r9, #0
 80092fe:	fbc0 8904 	smlal	r8, r9, r0, r4
 8009302:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8009306:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800930a:	f300 000f 	ssat	r0, #16, r0
 800930e:	9902      	ldr	r1, [sp, #8]
 8009310:	f825 0b02 	strh.w	r0, [r5], #2
 8009314:	428d      	cmp	r5, r1
 8009316:	4690      	mov	r8, r2
 8009318:	d1a2      	bne.n	8009260 <D32_1CH_HTONS_VOL_HP+0x48>
 800931a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800931e:	464c      	mov	r4, r9
 8009320:	f8ca 3008 	str.w	r3, [sl, #8]
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	f8ca e00c 	str.w	lr, [sl, #12]
 800932a:	2000      	movs	r0, #0
 800932c:	f8ca 601c 	str.w	r6, [sl, #28]
 8009330:	f8ca 4010 	str.w	r4, [sl, #16]
 8009334:	f8ca 2014 	str.w	r2, [sl, #20]
 8009338:	f8ca 3018 	str.w	r3, [sl, #24]
 800933c:	b007      	add	sp, #28
 800933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009342:	4642      	mov	r2, r8
 8009344:	e7ec      	b.n	8009320 <D32_1CH_HTONS_VOL_HP+0x108>
 8009346:	bf00      	nop
 8009348:	20000000 	.word	0x20000000
 800934c:	00060003 	.word	0x00060003
 8009350:	000a000c 	.word	0x000a000c
 8009354:	000c000a 	.word	0x000c000a
 8009358:	00030006 	.word	0x00030006

0800935c <D48_1CH_HTONS_VOL_HP>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	4613      	mov	r3, r2
 8009362:	461c      	mov	r4, r3
 8009364:	b087      	sub	sp, #28
 8009366:	4625      	mov	r5, r4
 8009368:	4626      	mov	r6, r4
 800936a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800936c:	9205      	str	r2, [sp, #20]
 800936e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8009370:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8009374:	9501      	str	r5, [sp, #4]
 8009376:	4680      	mov	r8, r0
 8009378:	6a35      	ldr	r5, [r6, #32]
 800937a:	6918      	ldr	r0, [r3, #16]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	9304      	str	r3, [sp, #16]
 8009380:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	9502      	str	r5, [sp, #8]
 8009388:	68e4      	ldr	r4, [r4, #12]
 800938a:	2a00      	cmp	r2, #0
 800938c:	f000 808c 	beq.w	80094a8 <D48_1CH_HTONS_VOL_HP+0x14c>
 8009390:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009394:	4d45      	ldr	r5, [pc, #276]	; (80094ac <D48_1CH_HTONS_VOL_HP+0x150>)
 8009396:	9203      	str	r2, [sp, #12]
 8009398:	468c      	mov	ip, r1
 800939a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800939e:	f108 0806 	add.w	r8, r8, #6
 80093a2:	ba52      	rev16	r2, r2
 80093a4:	ba76      	rev16	r6, r6
 80093a6:	b2d7      	uxtb	r7, r2
 80093a8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80093ac:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80093b0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80093b4:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80093b8:	0e12      	lsrs	r2, r2, #24
 80093ba:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80093be:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80093c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80093c6:	fa5f fb86 	uxtb.w	fp, r6
 80093ca:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80093ce:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80093d2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80093d6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80093da:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80093de:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80093e2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80093e6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80093ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80093ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80093f2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80093f6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80093fa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80093fe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009402:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8009406:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800940a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800940e:	4a28      	ldr	r2, [pc, #160]	; (80094b0 <D48_1CH_HTONS_VOL_HP+0x154>)
 8009410:	fb2a 4202 	smlad	r2, sl, r2, r4
 8009414:	4927      	ldr	r1, [pc, #156]	; (80094b4 <D48_1CH_HTONS_VOL_HP+0x158>)
 8009416:	fb27 2201 	smlad	r2, r7, r1, r2
 800941a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800941e:	fb26 2201 	smlad	r2, r6, r1, r2
 8009422:	4925      	ldr	r1, [pc, #148]	; (80094b8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8009424:	fb2a 3401 	smlad	r4, sl, r1, r3
 8009428:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800942c:	fb27 4403 	smlad	r4, r7, r3, r4
 8009430:	4b22      	ldr	r3, [pc, #136]	; (80094bc <D48_1CH_HTONS_VOL_HP+0x160>)
 8009432:	fb26 4403 	smlad	r4, r6, r3, r4
 8009436:	2101      	movs	r1, #1
 8009438:	fb2a fa01 	smuad	sl, sl, r1
 800943c:	4b20      	ldr	r3, [pc, #128]	; (80094c0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800943e:	fb27 a703 	smlad	r7, r7, r3, sl
 8009442:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8009444:	fb26 7303 	smlad	r3, r6, r3, r7
 8009448:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800944c:	9e02      	ldr	r6, [sp, #8]
 800944e:	9f01      	ldr	r7, [sp, #4]
 8009450:	4410      	add	r0, r2
 8009452:	eba0 0009 	sub.w	r0, r0, r9
 8009456:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800945a:	fba0 0106 	umull	r0, r1, r0, r6
 800945e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8009462:	fb06 110a 	mla	r1, r6, sl, r1
 8009466:	f141 0100 	adc.w	r1, r1, #0
 800946a:	0308      	lsls	r0, r1, #12
 800946c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009470:	f04f 0a00 	mov.w	sl, #0
 8009474:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8009478:	4657      	mov	r7, sl
 800947a:	10b8      	asrs	r0, r7, #2
 800947c:	f300 000f 	ssat	r0, #16, r0
 8009480:	f82c 0b02 	strh.w	r0, [ip], #2
 8009484:	0048      	lsls	r0, r1, #1
 8009486:	9903      	ldr	r1, [sp, #12]
 8009488:	458c      	cmp	ip, r1
 800948a:	4691      	mov	r9, r2
 800948c:	d185      	bne.n	800939a <D48_1CH_HTONS_VOL_HP+0x3e>
 800948e:	9d05      	ldr	r5, [sp, #20]
 8009490:	616a      	str	r2, [r5, #20]
 8009492:	9a04      	ldr	r2, [sp, #16]
 8009494:	6128      	str	r0, [r5, #16]
 8009496:	2000      	movs	r0, #0
 8009498:	60ab      	str	r3, [r5, #8]
 800949a:	60ec      	str	r4, [r5, #12]
 800949c:	f8c5 e01c 	str.w	lr, [r5, #28]
 80094a0:	61aa      	str	r2, [r5, #24]
 80094a2:	b007      	add	sp, #28
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	464a      	mov	r2, r9
 80094aa:	e7f0      	b.n	800948e <D48_1CH_HTONS_VOL_HP+0x132>
 80094ac:	20000000 	.word	0x20000000
 80094b0:	000f000a 	.word	0x000f000a
 80094b4:	00060003 	.word	0x00060003
 80094b8:	00150019 	.word	0x00150019
 80094bc:	00190015 	.word	0x00190015
 80094c0:	00030006 	.word	0x00030006
 80094c4:	000a000f 	.word	0x000a000f

080094c8 <D64_1CH_HTONS_VOL_HP>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	b089      	sub	sp, #36	; 0x24
 80094ce:	4614      	mov	r4, r2
 80094d0:	9207      	str	r2, [sp, #28]
 80094d2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80094d4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80094d8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80094dc:	6992      	ldr	r2, [r2, #24]
 80094de:	9206      	str	r2, [sp, #24]
 80094e0:	68e2      	ldr	r2, [r4, #12]
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80094e6:	9203      	str	r2, [sp, #12]
 80094e8:	6a22      	ldr	r2, [r4, #32]
 80094ea:	69e5      	ldr	r5, [r4, #28]
 80094ec:	68a6      	ldr	r6, [r4, #8]
 80094ee:	9204      	str	r2, [sp, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80b0 	beq.w	8009656 <D64_1CH_HTONS_VOL_HP+0x18e>
 80094f6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80094fa:	4f58      	ldr	r7, [pc, #352]	; (800965c <D64_1CH_HTONS_VOL_HP+0x194>)
 80094fc:	9305      	str	r3, [sp, #20]
 80094fe:	9102      	str	r1, [sp, #8]
 8009500:	f850 2b08 	ldr.w	r2, [r0], #8
 8009504:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009508:	ba52      	rev16	r2, r2
 800950a:	fa93 f993 	rev16.w	r9, r3
 800950e:	b2d4      	uxtb	r4, r2
 8009510:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009514:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8009518:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800951c:	9901      	ldr	r1, [sp, #4]
 800951e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009522:	0e12      	lsrs	r2, r2, #24
 8009524:	44ab      	add	fp, r5
 8009526:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800952a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800952e:	fa5f f289 	uxtb.w	r2, r9
 8009532:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8009536:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800953a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800953e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009542:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009546:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800954a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800954e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009552:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009556:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800955a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800955e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8009562:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009566:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800956a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800956e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009572:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800957e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8009582:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009586:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800958a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800958e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8009592:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8009596:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800959a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800959e:	4b30      	ldr	r3, [pc, #192]	; (8009660 <D64_1CH_HTONS_VOL_HP+0x198>)
 80095a0:	fb2b 1303 	smlad	r3, fp, r3, r1
 80095a4:	492f      	ldr	r1, [pc, #188]	; (8009664 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80095a6:	fb24 3301 	smlad	r3, r4, r1, r3
 80095aa:	492f      	ldr	r1, [pc, #188]	; (8009668 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80095ac:	fb22 3301 	smlad	r3, r2, r1, r3
 80095b0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80095b4:	fb2e 390a 	smlad	r9, lr, sl, r3
 80095b8:	4b2c      	ldr	r3, [pc, #176]	; (800966c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80095ba:	fb2b 6603 	smlad	r6, fp, r3, r6
 80095be:	fb2e 6613 	smladx	r6, lr, r3, r6
 80095c2:	4b2b      	ldr	r3, [pc, #172]	; (8009670 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80095c4:	fb24 6603 	smlad	r6, r4, r3, r6
 80095c8:	fb22 6313 	smladx	r3, r2, r3, r6
 80095cc:	f04f 0a01 	mov.w	sl, #1
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	fb2b fb0a 	smuad	fp, fp, sl
 80095d6:	4b27      	ldr	r3, [pc, #156]	; (8009674 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80095d8:	fb24 ba03 	smlad	sl, r4, r3, fp
 80095dc:	4b26      	ldr	r3, [pc, #152]	; (8009678 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80095de:	fb22 a203 	smlad	r2, r2, r3, sl
 80095e2:	4b26      	ldr	r3, [pc, #152]	; (800967c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80095e4:	fb2e 2603 	smlad	r6, lr, r3, r2
 80095e8:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 80095ec:	eb0a 020c 	add.w	r2, sl, ip
 80095f0:	9c04      	ldr	r4, [sp, #16]
 80095f2:	9903      	ldr	r1, [sp, #12]
 80095f4:	eba2 0208 	sub.w	r2, r2, r8
 80095f8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80095fc:	fba2 2304 	umull	r2, r3, r2, r4
 8009600:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009604:	fb04 3309 	mla	r3, r4, r9, r3
 8009608:	f143 0300 	adc.w	r3, r3, #0
 800960c:	02da      	lsls	r2, r3, #11
 800960e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009612:	f04f 0900 	mov.w	r9, #0
 8009616:	fbc1 8902 	smlal	r8, r9, r1, r2
 800961a:	9902      	ldr	r1, [sp, #8]
 800961c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8009620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009624:	f302 020f 	ssat	r2, #16, r2
 8009628:	9b05      	ldr	r3, [sp, #20]
 800962a:	f821 2b02 	strh.w	r2, [r1], #2
 800962e:	4299      	cmp	r1, r3
 8009630:	9102      	str	r1, [sp, #8]
 8009632:	46d0      	mov	r8, sl
 8009634:	f47f af64 	bne.w	8009500 <D64_1CH_HTONS_VOL_HP+0x38>
 8009638:	9a07      	ldr	r2, [sp, #28]
 800963a:	9901      	ldr	r1, [sp, #4]
 800963c:	60d1      	str	r1, [r2, #12]
 800963e:	9906      	ldr	r1, [sp, #24]
 8009640:	6096      	str	r6, [r2, #8]
 8009642:	2000      	movs	r0, #0
 8009644:	61d5      	str	r5, [r2, #28]
 8009646:	f8c2 c010 	str.w	ip, [r2, #16]
 800964a:	f8c2 a014 	str.w	sl, [r2, #20]
 800964e:	6191      	str	r1, [r2, #24]
 8009650:	b009      	add	sp, #36	; 0x24
 8009652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009656:	46c2      	mov	sl, r8
 8009658:	4622      	mov	r2, r4
 800965a:	e7ee      	b.n	800963a <D64_1CH_HTONS_VOL_HP+0x172>
 800965c:	20000000 	.word	0x20000000
 8009660:	001c0015 	.word	0x001c0015
 8009664:	000f000a 	.word	0x000f000a
 8009668:	00060003 	.word	0x00060003
 800966c:	0024002a 	.word	0x0024002a
 8009670:	002e0030 	.word	0x002e0030
 8009674:	00030006 	.word	0x00030006
 8009678:	000a000f 	.word	0x000a000f
 800967c:	0015001c 	.word	0x0015001c

08009680 <D80_1CH_HTONS_VOL_HP>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	4613      	mov	r3, r2
 8009686:	b089      	sub	sp, #36	; 0x24
 8009688:	4686      	mov	lr, r0
 800968a:	6918      	ldr	r0, [r3, #16]
 800968c:	9000      	str	r0, [sp, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	461c      	mov	r4, r3
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	9302      	str	r3, [sp, #8]
 8009696:	6983      	ldr	r3, [r0, #24]
 8009698:	9306      	str	r3, [sp, #24]
 800969a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800969e:	69c3      	ldr	r3, [r0, #28]
 80096a0:	68c0      	ldr	r0, [r0, #12]
 80096a2:	9207      	str	r2, [sp, #28]
 80096a4:	9001      	str	r0, [sp, #4]
 80096a6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80096a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80096aa:	9003      	str	r0, [sp, #12]
 80096ac:	6a20      	ldr	r0, [r4, #32]
 80096ae:	9004      	str	r0, [sp, #16]
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	f000 80d2 	beq.w	800985a <D80_1CH_HTONS_VOL_HP+0x1da>
 80096b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80096ba:	4869      	ldr	r0, [pc, #420]	; (8009860 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80096bc:	9205      	str	r2, [sp, #20]
 80096be:	461c      	mov	r4, r3
 80096c0:	f8de 5000 	ldr.w	r5, [lr]
 80096c4:	f8de 2004 	ldr.w	r2, [lr, #4]
 80096c8:	f8de 3008 	ldr.w	r3, [lr, #8]
 80096cc:	f10e 0e0a 	add.w	lr, lr, #10
 80096d0:	ba6d      	rev16	r5, r5
 80096d2:	ba52      	rev16	r2, r2
 80096d4:	fa93 fb93 	rev16.w	fp, r3
 80096d8:	b2ee      	uxtb	r6, r5
 80096da:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80096de:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80096e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80096e6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80096ea:	eb04 0a07 	add.w	sl, r4, r7
 80096ee:	0e2d      	lsrs	r5, r5, #24
 80096f0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80096f4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80096f8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80096fc:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8009700:	b2d5      	uxtb	r5, r2
 8009702:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009706:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800970a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800970e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009712:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8009716:	0e12      	lsrs	r2, r2, #24
 8009718:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800971c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8009720:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009724:	fa5f f48b 	uxtb.w	r4, fp
 8009728:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800972c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8009730:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009734:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8009738:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800973c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8009740:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8009744:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8009748:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800974c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009750:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009754:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009758:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800975c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009760:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8009764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009768:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800976c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009770:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009774:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8009778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800977c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8009780:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8009784:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8009788:	4d36      	ldr	r5, [pc, #216]	; (8009864 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800978a:	9f01      	ldr	r7, [sp, #4]
 800978c:	fb23 7505 	smlad	r5, r3, r5, r7
 8009790:	4f35      	ldr	r7, [pc, #212]	; (8009868 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009792:	fb29 5507 	smlad	r5, r9, r7, r5
 8009796:	4f35      	ldr	r7, [pc, #212]	; (800986c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8009798:	fb28 5507 	smlad	r5, r8, r7, r5
 800979c:	4f34      	ldr	r7, [pc, #208]	; (8009870 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800979e:	fb22 5507 	smlad	r5, r2, r7, r5
 80097a2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80097a6:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80097aa:	4d32      	ldr	r5, [pc, #200]	; (8009874 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80097ac:	fb23 cc05 	smlad	ip, r3, r5, ip
 80097b0:	4d31      	ldr	r5, [pc, #196]	; (8009878 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80097b2:	fb29 cc05 	smlad	ip, r9, r5, ip
 80097b6:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80097ba:	fb28 c505 	smlad	r5, r8, r5, ip
 80097be:	4f2f      	ldr	r7, [pc, #188]	; (800987c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80097c0:	fb22 5507 	smlad	r5, r2, r7, r5
 80097c4:	4f2e      	ldr	r7, [pc, #184]	; (8009880 <D80_1CH_HTONS_VOL_HP+0x200>)
 80097c6:	fb26 5507 	smlad	r5, r6, r7, r5
 80097ca:	f04f 0a01 	mov.w	sl, #1
 80097ce:	9501      	str	r5, [sp, #4]
 80097d0:	fb23 fa0a 	smuad	sl, r3, sl
 80097d4:	4b2b      	ldr	r3, [pc, #172]	; (8009884 <D80_1CH_HTONS_VOL_HP+0x204>)
 80097d6:	fb29 a903 	smlad	r9, r9, r3, sl
 80097da:	4d2b      	ldr	r5, [pc, #172]	; (8009888 <D80_1CH_HTONS_VOL_HP+0x208>)
 80097dc:	fb28 9805 	smlad	r8, r8, r5, r9
 80097e0:	4d2a      	ldr	r5, [pc, #168]	; (800988c <D80_1CH_HTONS_VOL_HP+0x20c>)
 80097e2:	fb22 8205 	smlad	r2, r2, r5, r8
 80097e6:	4b2a      	ldr	r3, [pc, #168]	; (8009890 <D80_1CH_HTONS_VOL_HP+0x210>)
 80097e8:	fb26 2c03 	smlad	ip, r6, r3, r2
 80097ec:	9b00      	ldr	r3, [sp, #0]
 80097ee:	9d04      	ldr	r5, [sp, #16]
 80097f0:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 80097f4:	4453      	add	r3, sl
 80097f6:	461a      	mov	r2, r3
 80097f8:	9b02      	ldr	r3, [sp, #8]
 80097fa:	f8cd a008 	str.w	sl, [sp, #8]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	17d7      	asrs	r7, r2, #31
 8009802:	fba2 2305 	umull	r2, r3, r2, r5
 8009806:	fb05 3307 	mla	r3, r5, r7, r3
 800980a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800980e:	f143 0300 	adc.w	r3, r3, #0
 8009812:	9d03      	ldr	r5, [sp, #12]
 8009814:	029a      	lsls	r2, r3, #10
 8009816:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800981a:	2700      	movs	r7, #0
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8009822:	10ba      	asrs	r2, r7, #2
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	f302 020f 	ssat	r2, #16, r2
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	f821 2b02 	strh.w	r2, [r1], #2
 8009830:	4299      	cmp	r1, r3
 8009832:	f47f af45 	bne.w	80096c0 <D80_1CH_HTONS_VOL_HP+0x40>
 8009836:	4623      	mov	r3, r4
 8009838:	9907      	ldr	r1, [sp, #28]
 800983a:	9801      	ldr	r0, [sp, #4]
 800983c:	60c8      	str	r0, [r1, #12]
 800983e:	9a00      	ldr	r2, [sp, #0]
 8009840:	f8c1 c008 	str.w	ip, [r1, #8]
 8009844:	4608      	mov	r0, r1
 8009846:	61cb      	str	r3, [r1, #28]
 8009848:	610a      	str	r2, [r1, #16]
 800984a:	f8c1 a014 	str.w	sl, [r1, #20]
 800984e:	9906      	ldr	r1, [sp, #24]
 8009850:	6181      	str	r1, [r0, #24]
 8009852:	2000      	movs	r0, #0
 8009854:	b009      	add	sp, #36	; 0x24
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800985e:	e7eb      	b.n	8009838 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8009860:	20000000 	.word	0x20000000
 8009864:	002d0024 	.word	0x002d0024
 8009868:	001c0015 	.word	0x001c0015
 800986c:	000f000a 	.word	0x000f000a
 8009870:	00060003 	.word	0x00060003
 8009874:	0037003f 	.word	0x0037003f
 8009878:	00450049 	.word	0x00450049
 800987c:	00490045 	.word	0x00490045
 8009880:	003f0037 	.word	0x003f0037
 8009884:	00030006 	.word	0x00030006
 8009888:	000a000f 	.word	0x000a000f
 800988c:	0015001c 	.word	0x0015001c
 8009890:	0024002d 	.word	0x0024002d

08009894 <D128_1CH_HTONS_VOL_HP>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	b093      	sub	sp, #76	; 0x4c
 800989a:	4614      	mov	r4, r2
 800989c:	9211      	str	r2, [sp, #68]	; 0x44
 800989e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80098a0:	6912      	ldr	r2, [r2, #16]
 80098a2:	9203      	str	r2, [sp, #12]
 80098a4:	4622      	mov	r2, r4
 80098a6:	4615      	mov	r5, r2
 80098a8:	6964      	ldr	r4, [r4, #20]
 80098aa:	9406      	str	r4, [sp, #24]
 80098ac:	4614      	mov	r4, r2
 80098ae:	6992      	ldr	r2, [r2, #24]
 80098b0:	9210      	str	r2, [sp, #64]	; 0x40
 80098b2:	68ea      	ldr	r2, [r5, #12]
 80098b4:	9204      	str	r2, [sp, #16]
 80098b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80098b8:	69e6      	ldr	r6, [r4, #28]
 80098ba:	920d      	str	r2, [sp, #52]	; 0x34
 80098bc:	68a4      	ldr	r4, [r4, #8]
 80098be:	6a2a      	ldr	r2, [r5, #32]
 80098c0:	9405      	str	r4, [sp, #20]
 80098c2:	920e      	str	r2, [sp, #56]	; 0x38
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8145 	beq.w	8009b54 <D128_1CH_HTONS_VOL_HP+0x2c0>
 80098ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80098ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80098d0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8009bb0 <D128_1CH_HTONS_VOL_HP+0x31c>
 80098d4:	9107      	str	r1, [sp, #28]
 80098d6:	f100 0310 	add.w	r3, r0, #16
 80098da:	4699      	mov	r9, r3
 80098dc:	f1a9 0110 	sub.w	r1, r9, #16
 80098e0:	c90e      	ldmia	r1, {r1, r2, r3}
 80098e2:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80098e6:	ba49      	rev16	r1, r1
 80098e8:	ba52      	rev16	r2, r2
 80098ea:	ba5b      	rev16	r3, r3
 80098ec:	fa90 fa90 	rev16.w	sl, r0
 80098f0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80098f4:	b2cc      	uxtb	r4, r1
 80098f6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80098fa:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80098fe:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009902:	0e09      	lsrs	r1, r1, #24
 8009904:	4426      	add	r6, r4
 8009906:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800990a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800990e:	b2d0      	uxtb	r0, r2
 8009910:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009914:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8009918:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800991c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8009920:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8009924:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009928:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800992c:	0e12      	lsrs	r2, r2, #24
 800992e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8009932:	9701      	str	r7, [sp, #4]
 8009934:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8009938:	4627      	mov	r7, r4
 800993a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800993e:	9702      	str	r7, [sp, #8]
 8009940:	b2da      	uxtb	r2, r3
 8009942:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8009946:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800994a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800994e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009952:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8009956:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800995a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800995e:	0e1b      	lsrs	r3, r3, #24
 8009960:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8009964:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8009968:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800996c:	fa5f f38a 	uxtb.w	r3, sl
 8009970:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009974:	960a      	str	r6, [sp, #40]	; 0x28
 8009976:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800997a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800997e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009982:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009986:	950b      	str	r5, [sp, #44]	; 0x2c
 8009988:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800998c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009990:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009994:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8009998:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800999c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80099a0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80099a4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80099a8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80099ac:	9308      	str	r3, [sp, #32]
 80099ae:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80099b8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80099bc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099c6:	9302      	str	r3, [sp, #8]
 80099c8:	9b08      	ldr	r3, [sp, #32]
 80099ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ce:	9308      	str	r3, [sp, #32]
 80099d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80099d6:	950c      	str	r5, [sp, #48]	; 0x30
 80099d8:	461d      	mov	r5, r3
 80099da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099dc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80099e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80099e4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80099e8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	9b02      	ldr	r3, [sp, #8]
 80099f0:	9202      	str	r2, [sp, #8]
 80099f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80099fa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80099fe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009a02:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009a06:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009a0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009a0e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8009a12:	9b08      	ldr	r3, [sp, #32]
 8009a14:	9f01      	ldr	r7, [sp, #4]
 8009a16:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009a1a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009a1e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009a22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009a26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009a2a:	46be      	mov	lr, r7
 8009a2c:	0a96      	lsrs	r6, r2, #10
 8009a2e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8009a32:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8009a36:	4f49      	ldr	r7, [pc, #292]	; (8009b5c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009a38:	9a04      	ldr	r2, [sp, #16]
 8009a3a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8009a3e:	4a48      	ldr	r2, [pc, #288]	; (8009b60 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8009a40:	fb2a ee02 	smlad	lr, sl, r2, lr
 8009a44:	4a47      	ldr	r2, [pc, #284]	; (8009b64 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8009a46:	fb21 ee02 	smlad	lr, r1, r2, lr
 8009a4a:	4a47      	ldr	r2, [pc, #284]	; (8009b68 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8009a4c:	fb24 ee02 	smlad	lr, r4, r2, lr
 8009a50:	4a46      	ldr	r2, [pc, #280]	; (8009b6c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8009a52:	9f02      	ldr	r7, [sp, #8]
 8009a54:	fb27 ee02 	smlad	lr, r7, r2, lr
 8009a58:	4a45      	ldr	r2, [pc, #276]	; (8009b70 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8009a5a:	fb20 ee02 	smlad	lr, r0, r2, lr
 8009a5e:	4a45      	ldr	r2, [pc, #276]	; (8009b74 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8009a60:	fb23 e702 	smlad	r7, r3, r2, lr
 8009a64:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8009a68:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8009a6c:	9f01      	ldr	r7, [sp, #4]
 8009a6e:	4a42      	ldr	r2, [pc, #264]	; (8009b78 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8009a70:	46bc      	mov	ip, r7
 8009a72:	9f05      	ldr	r7, [sp, #20]
 8009a74:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8009a78:	4a40      	ldr	r2, [pc, #256]	; (8009b7c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8009a7a:	fb2a cc02 	smlad	ip, sl, r2, ip
 8009a7e:	4f40      	ldr	r7, [pc, #256]	; (8009b80 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8009a80:	fb21 cc07 	smlad	ip, r1, r7, ip
 8009a84:	4f3f      	ldr	r7, [pc, #252]	; (8009b84 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8009a86:	fb24 cc07 	smlad	ip, r4, r7, ip
 8009a8a:	4f3f      	ldr	r7, [pc, #252]	; (8009b88 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8009a8c:	9a02      	ldr	r2, [sp, #8]
 8009a8e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8009a92:	4f3e      	ldr	r7, [pc, #248]	; (8009b8c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8009a94:	fb20 cc07 	smlad	ip, r0, r7, ip
 8009a98:	4f3d      	ldr	r7, [pc, #244]	; (8009b90 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8009a9a:	fb23 c707 	smlad	r7, r3, r7, ip
 8009a9e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8009bb4 <D128_1CH_HTONS_VOL_HP+0x320>
 8009aa2:	fb25 720c 	smlad	r2, r5, ip, r7
 8009aa6:	f04f 0b01 	mov.w	fp, #1
 8009aaa:	9204      	str	r2, [sp, #16]
 8009aac:	9f01      	ldr	r7, [sp, #4]
 8009aae:	fb27 fb0b 	smuad	fp, r7, fp
 8009ab2:	4f38      	ldr	r7, [pc, #224]	; (8009b94 <D128_1CH_HTONS_VOL_HP+0x300>)
 8009ab4:	fb2a ba07 	smlad	sl, sl, r7, fp
 8009ab8:	4f37      	ldr	r7, [pc, #220]	; (8009b98 <D128_1CH_HTONS_VOL_HP+0x304>)
 8009aba:	fb21 aa07 	smlad	sl, r1, r7, sl
 8009abe:	4f37      	ldr	r7, [pc, #220]	; (8009b9c <D128_1CH_HTONS_VOL_HP+0x308>)
 8009ac0:	fb24 aa07 	smlad	sl, r4, r7, sl
 8009ac4:	4f36      	ldr	r7, [pc, #216]	; (8009ba0 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8009ac6:	9a02      	ldr	r2, [sp, #8]
 8009ac8:	fb22 a707 	smlad	r7, r2, r7, sl
 8009acc:	4a35      	ldr	r2, [pc, #212]	; (8009ba4 <D128_1CH_HTONS_VOL_HP+0x310>)
 8009ace:	fb20 7702 	smlad	r7, r0, r2, r7
 8009ad2:	4a35      	ldr	r2, [pc, #212]	; (8009ba8 <D128_1CH_HTONS_VOL_HP+0x314>)
 8009ad4:	fb23 7702 	smlad	r7, r3, r2, r7
 8009ad8:	4b34      	ldr	r3, [pc, #208]	; (8009bac <D128_1CH_HTONS_VOL_HP+0x318>)
 8009ada:	fb25 7303 	smlad	r3, r5, r3, r7
 8009ade:	9305      	str	r3, [sp, #20]
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009ae4:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8009ae8:	4473      	add	r3, lr
 8009aea:	461a      	mov	r2, r3
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	f8cd e018 	str.w	lr, [sp, #24]
 8009af2:	1ad2      	subs	r2, r2, r3
 8009af4:	17d1      	asrs	r1, r2, #31
 8009af6:	fba2 2304 	umull	r2, r3, r2, r4
 8009afa:	fb04 3301 	mla	r3, r4, r1, r3
 8009afe:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009b02:	f143 0300 	adc.w	r3, r3, #0
 8009b06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009b08:	021a      	lsls	r2, r3, #8
 8009b0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009b0e:	2100      	movs	r1, #0
 8009b10:	fbc4 0102 	smlal	r0, r1, r4, r2
 8009b14:	108a      	asrs	r2, r1, #2
 8009b16:	9907      	ldr	r1, [sp, #28]
 8009b18:	f302 020f 	ssat	r2, #16, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	f821 2b02 	strh.w	r2, [r1], #2
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b26:	9107      	str	r1, [sp, #28]
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	f109 0910 	add.w	r9, r9, #16
 8009b2e:	f47f aed5 	bne.w	80098dc <D128_1CH_HTONS_VOL_HP+0x48>
 8009b32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b34:	9905      	ldr	r1, [sp, #20]
 8009b36:	6091      	str	r1, [r2, #8]
 8009b38:	9904      	ldr	r1, [sp, #16]
 8009b3a:	60d1      	str	r1, [r2, #12]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	61d6      	str	r6, [r2, #28]
 8009b40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009b42:	9a03      	ldr	r2, [sp, #12]
 8009b44:	611a      	str	r2, [r3, #16]
 8009b46:	2000      	movs	r0, #0
 8009b48:	f8c3 e014 	str.w	lr, [r3, #20]
 8009b4c:	6199      	str	r1, [r3, #24]
 8009b4e:	b013      	add	sp, #76	; 0x4c
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	f8dd e018 	ldr.w	lr, [sp, #24]
 8009b58:	e7eb      	b.n	8009b32 <D128_1CH_HTONS_VOL_HP+0x29e>
 8009b5a:	bf00      	nop
 8009b5c:	00780069 	.word	0x00780069
 8009b60:	005b004e 	.word	0x005b004e
 8009b64:	00420037 	.word	0x00420037
 8009b68:	002d0024 	.word	0x002d0024
 8009b6c:	001c0015 	.word	0x001c0015
 8009b70:	000f000a 	.word	0x000f000a
 8009b74:	00060003 	.word	0x00060003
 8009b78:	00880096 	.word	0x00880096
 8009b7c:	00a200ac 	.word	0x00a200ac
 8009b80:	00b400ba 	.word	0x00b400ba
 8009b84:	00be00c0 	.word	0x00be00c0
 8009b88:	00c000be 	.word	0x00c000be
 8009b8c:	00ba00b4 	.word	0x00ba00b4
 8009b90:	00ac00a2 	.word	0x00ac00a2
 8009b94:	00030006 	.word	0x00030006
 8009b98:	000a000f 	.word	0x000a000f
 8009b9c:	0015001c 	.word	0x0015001c
 8009ba0:	0024002d 	.word	0x0024002d
 8009ba4:	00370042 	.word	0x00370042
 8009ba8:	004e005b 	.word	0x004e005b
 8009bac:	00690078 	.word	0x00690078
 8009bb0:	20000000 	.word	0x20000000
 8009bb4:	00960088 	.word	0x00960088

08009bb8 <PDM_Filter_Init>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	2240      	movs	r2, #64	; 0x40
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	300c      	adds	r0, #12
 8009bc2:	f000 fc11 	bl	800a3e8 <memset>
 8009bc6:	493b      	ldr	r1, [pc, #236]	; (8009cb4 <PDM_Filter_Init+0xfc>)
 8009bc8:	483b      	ldr	r0, [pc, #236]	; (8009cb8 <PDM_Filter_Init+0x100>)
 8009bca:	f000 f98d 	bl	8009ee8 <CRC_Lock>
 8009bce:	8822      	ldrh	r2, [r4, #0]
 8009bd0:	8963      	ldrh	r3, [r4, #10]
 8009bd2:	4938      	ldr	r1, [pc, #224]	; (8009cb4 <PDM_Filter_Init+0xfc>)
 8009bd4:	8925      	ldrh	r5, [r4, #8]
 8009bd6:	86a3      	strh	r3, [r4, #52]	; 0x34
 8009bd8:	2801      	cmp	r0, #1
 8009bda:	f04f 0300 	mov.w	r3, #0
 8009bde:	bf18      	it	ne
 8009be0:	2100      	movne	r1, #0
 8009be2:	2a01      	cmp	r2, #1
 8009be4:	6461      	str	r1, [r4, #68]	; 0x44
 8009be6:	86e5      	strh	r5, [r4, #54]	; 0x36
 8009be8:	61a3      	str	r3, [r4, #24]
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	6163      	str	r3, [r4, #20]
 8009bee:	60e3      	str	r3, [r4, #12]
 8009bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8009bf2:	61e3      	str	r3, [r4, #28]
 8009bf4:	6223      	str	r3, [r4, #32]
 8009bf6:	6423      	str	r3, [r4, #64]	; 0x40
 8009bf8:	d918      	bls.n	8009c2c <PDM_Filter_Init+0x74>
 8009bfa:	2003      	movs	r0, #3
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	8862      	ldrh	r2, [r4, #2]
 8009c00:	2a01      	cmp	r2, #1
 8009c02:	d91d      	bls.n	8009c40 <PDM_Filter_Init+0x88>
 8009c04:	2140      	movs	r1, #64	; 0x40
 8009c06:	2300      	movs	r3, #0
 8009c08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009c0a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8009c0e:	6862      	ldr	r2, [r4, #4]
 8009c10:	bf04      	itt	eq
 8009c12:	6421      	streq	r1, [r4, #64]	; 0x40
 8009c14:	460b      	moveq	r3, r1
 8009c16:	b11a      	cbz	r2, 8009c20 <PDM_Filter_Init+0x68>
 8009c18:	f043 0310 	orr.w	r3, r3, #16
 8009c1c:	6423      	str	r3, [r4, #64]	; 0x40
 8009c1e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009c20:	2200      	movs	r2, #0
 8009c22:	8722      	strh	r2, [r4, #56]	; 0x38
 8009c24:	b908      	cbnz	r0, 8009c2a <PDM_Filter_Init+0x72>
 8009c26:	3380      	adds	r3, #128	; 0x80
 8009c28:	6423      	str	r3, [r4, #64]	; 0x40
 8009c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2c:	4d23      	ldr	r5, [pc, #140]	; (8009cbc <PDM_Filter_Init+0x104>)
 8009c2e:	d010      	beq.n	8009c52 <PDM_Filter_Init+0x9a>
 8009c30:	782a      	ldrb	r2, [r5, #0]
 8009c32:	2a01      	cmp	r2, #1
 8009c34:	d027      	beq.n	8009c86 <PDM_Filter_Init+0xce>
 8009c36:	8862      	ldrh	r2, [r4, #2]
 8009c38:	2a01      	cmp	r2, #1
 8009c3a:	f04f 0001 	mov.w	r0, #1
 8009c3e:	d8e1      	bhi.n	8009c04 <PDM_Filter_Init+0x4c>
 8009c40:	d001      	beq.n	8009c46 <PDM_Filter_Init+0x8e>
 8009c42:	4618      	mov	r0, r3
 8009c44:	e7de      	b.n	8009c04 <PDM_Filter_Init+0x4c>
 8009c46:	2220      	movs	r2, #32
 8009c48:	4618      	mov	r0, r3
 8009c4a:	6422      	str	r2, [r4, #64]	; 0x40
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	2160      	movs	r1, #96	; 0x60
 8009c50:	e7da      	b.n	8009c08 <PDM_Filter_Init+0x50>
 8009c52:	7829      	ldrb	r1, [r5, #0]
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d1ee      	bne.n	8009c36 <PDM_Filter_Init+0x7e>
 8009c58:	4919      	ldr	r1, [pc, #100]	; (8009cc0 <PDM_Filter_Init+0x108>)
 8009c5a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8009cc8 <PDM_Filter_Init+0x110>
 8009c5e:	4f19      	ldr	r7, [pc, #100]	; (8009cc4 <PDM_Filter_Init+0x10c>)
 8009c60:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8009c64:	684a      	ldr	r2, [r1, #4]
 8009c66:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8009c6a:	ea02 0007 	and.w	r0, r2, r7
 8009c6e:	4303      	orrs	r3, r0
 8009c70:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009c74:	4413      	add	r3, r2
 8009c76:	f841 3f04 	str.w	r3, [r1, #4]!
 8009c7a:	428e      	cmp	r6, r1
 8009c7c:	d1f2      	bne.n	8009c64 <PDM_Filter_Init+0xac>
 8009c7e:	2001      	movs	r0, #1
 8009c80:	7028      	strb	r0, [r5, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	e7bb      	b.n	8009bfe <PDM_Filter_Init+0x46>
 8009c86:	490e      	ldr	r1, [pc, #56]	; (8009cc0 <PDM_Filter_Init+0x108>)
 8009c88:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8009cc8 <PDM_Filter_Init+0x110>
 8009c8c:	4f0d      	ldr	r7, [pc, #52]	; (8009cc4 <PDM_Filter_Init+0x10c>)
 8009c8e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8009c92:	684a      	ldr	r2, [r1, #4]
 8009c94:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8009c98:	ea02 0007 	and.w	r0, r2, r7
 8009c9c:	4303      	orrs	r3, r0
 8009c9e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f841 3f04 	str.w	r3, [r1, #4]!
 8009ca8:	428e      	cmp	r6, r1
 8009caa:	d1f2      	bne.n	8009c92 <PDM_Filter_Init+0xda>
 8009cac:	2300      	movs	r3, #0
 8009cae:	702b      	strb	r3, [r5, #0]
 8009cb0:	e7c1      	b.n	8009c36 <PDM_Filter_Init+0x7e>
 8009cb2:	bf00      	nop
 8009cb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009cb8:	f407a5c2 	.word	0xf407a5c2
 8009cbc:	200004d8 	.word	0x200004d8
 8009cc0:	1ffffffc 	.word	0x1ffffffc
 8009cc4:	000ffc00 	.word	0x000ffc00
 8009cc8:	3ff00000 	.word	0x3ff00000

08009ccc <PDM_Filter_setConfig>:
 8009ccc:	4b66      	ldr	r3, [pc, #408]	; (8009e68 <PDM_Filter_setConfig+0x19c>)
 8009cce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d001      	beq.n	8009cd8 <PDM_Filter_setConfig+0xc>
 8009cd4:	2004      	movs	r0, #4
 8009cd6:	4770      	bx	lr
 8009cd8:	b530      	push	{r4, r5, lr}
 8009cda:	880a      	ldrh	r2, [r1, #0]
 8009cdc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009cde:	ed2d 8b04 	vpush	{d8-d9}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	1e51      	subs	r1, r2, #1
 8009ce8:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8009cec:	2906      	cmp	r1, #6
 8009cee:	b083      	sub	sp, #12
 8009cf0:	6420      	str	r0, [r4, #64]	; 0x40
 8009cf2:	d91a      	bls.n	8009d2a <PDM_Filter_setConfig+0x5e>
 8009cf4:	2008      	movs	r0, #8
 8009cf6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8009cfa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	d07e      	beq.n	8009e00 <PDM_Filter_setConfig+0x134>
 8009d02:	f113 0f0c 	cmn.w	r3, #12
 8009d06:	da2a      	bge.n	8009d5e <PDM_Filter_setConfig+0x92>
 8009d08:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009d0c:	3040      	adds	r0, #64	; 0x40
 8009d0e:	80ab      	strh	r3, [r5, #4]
 8009d10:	8622      	strh	r2, [r4, #48]	; 0x30
 8009d12:	886b      	ldrh	r3, [r5, #2]
 8009d14:	8663      	strh	r3, [r4, #50]	; 0x32
 8009d16:	b920      	cbnz	r0, 8009d22 <PDM_Filter_setConfig+0x56>
 8009d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d1e:	6423      	str	r3, [r4, #64]	; 0x40
 8009d20:	2000      	movs	r0, #0
 8009d22:	b003      	add	sp, #12
 8009d24:	ecbd 8b04 	vpop	{d8-d9}
 8009d28:	bd30      	pop	{r4, r5, pc}
 8009d2a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8009d2c:	4291      	cmp	r1, r2
 8009d2e:	d06c      	beq.n	8009e0a <PDM_Filter_setConfig+0x13e>
 8009d30:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8009d34:	f023 0301 	bic.w	r3, r3, #1
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8009d3e:	6423      	str	r3, [r4, #64]	; 0x40
 8009d40:	2970      	cmp	r1, #112	; 0x70
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009d4a:	d066      	beq.n	8009e1a <PDM_Filter_setConfig+0x14e>
 8009d4c:	2b06      	cmp	r3, #6
 8009d4e:	f200 8089 	bhi.w	8009e64 <PDM_Filter_setConfig+0x198>
 8009d52:	e8df f003 	tbb	[pc, r3]
 8009d56:	4f52      	.short	0x4f52
 8009d58:	3d43494c 	.word	0x3d43494c
 8009d5c:	46          	.byte	0x46
 8009d5d:	00          	.byte	0x00
 8009d5e:	2b33      	cmp	r3, #51	; 0x33
 8009d60:	dc32      	bgt.n	8009dc8 <PDM_Filter_setConfig+0xfc>
 8009d62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009d64:	f002 020f 	and.w	r2, r2, #15
 8009d68:	3a01      	subs	r2, #1
 8009d6a:	2a06      	cmp	r2, #6
 8009d6c:	d872      	bhi.n	8009e54 <PDM_Filter_setConfig+0x188>
 8009d6e:	493f      	ldr	r1, [pc, #252]	; (8009e6c <PDM_Filter_setConfig+0x1a0>)
 8009d70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009d74:	ed92 9a00 	vldr	s18, [r2]
 8009d78:	ed92 8a07 	vldr	s16, [r2, #28]
 8009d7c:	9001      	str	r0, [sp, #4]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d86:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8009d8a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8009d8e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009d92:	f001 fa6a 	bl	800b26a <powf>
 8009d96:	eddf 0a36 	vldr	s1, [pc, #216]	; 8009e70 <PDM_Filter_setConfig+0x1a4>
 8009d9a:	eef0 8a40 	vmov.f32	s17, s0
 8009d9e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8009da2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009da6:	f001 fa60 	bl	800b26a <powf>
 8009daa:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009dae:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009db2:	f001 fabf 	bl	800b334 <roundf>
 8009db6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009dba:	88ab      	ldrh	r3, [r5, #4]
 8009dbc:	882a      	ldrh	r2, [r5, #0]
 8009dbe:	9801      	ldr	r0, [sp, #4]
 8009dc0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8009dc4:	8723      	strh	r3, [r4, #56]	; 0x38
 8009dc6:	e7a3      	b.n	8009d10 <PDM_Filter_setConfig+0x44>
 8009dc8:	2333      	movs	r3, #51	; 0x33
 8009dca:	3040      	adds	r0, #64	; 0x40
 8009dcc:	80ab      	strh	r3, [r5, #4]
 8009dce:	e79f      	b.n	8009d10 <PDM_Filter_setConfig+0x44>
 8009dd0:	4b28      	ldr	r3, [pc, #160]	; (8009e74 <PDM_Filter_setConfig+0x1a8>)
 8009dd2:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dd4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e792      	b.n	8009d02 <PDM_Filter_setConfig+0x36>
 8009ddc:	4b26      	ldr	r3, [pc, #152]	; (8009e78 <PDM_Filter_setConfig+0x1ac>)
 8009dde:	64a3      	str	r3, [r4, #72]	; 0x48
 8009de0:	e7f8      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009de2:	4b26      	ldr	r3, [pc, #152]	; (8009e7c <PDM_Filter_setConfig+0x1b0>)
 8009de4:	64a3      	str	r3, [r4, #72]	; 0x48
 8009de6:	e7f5      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009de8:	4b25      	ldr	r3, [pc, #148]	; (8009e80 <PDM_Filter_setConfig+0x1b4>)
 8009dea:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dec:	e7f2      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009dee:	4b25      	ldr	r3, [pc, #148]	; (8009e84 <PDM_Filter_setConfig+0x1b8>)
 8009df0:	64a3      	str	r3, [r4, #72]	; 0x48
 8009df2:	e7ef      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009df4:	4b24      	ldr	r3, [pc, #144]	; (8009e88 <PDM_Filter_setConfig+0x1bc>)
 8009df6:	64a3      	str	r3, [r4, #72]	; 0x48
 8009df8:	e7ec      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009dfa:	4b24      	ldr	r3, [pc, #144]	; (8009e8c <PDM_Filter_setConfig+0x1c0>)
 8009dfc:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dfe:	e7e9      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e00:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8009e02:	4291      	cmp	r1, r2
 8009e04:	f47f af7d 	bne.w	8009d02 <PDM_Filter_setConfig+0x36>
 8009e08:	e783      	b.n	8009d12 <PDM_Filter_setConfig+0x46>
 8009e0a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8009e0e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8009e12:	4299      	cmp	r1, r3
 8009e14:	d023      	beq.n	8009e5e <PDM_Filter_setConfig+0x192>
 8009e16:	2000      	movs	r0, #0
 8009e18:	e773      	b.n	8009d02 <PDM_Filter_setConfig+0x36>
 8009e1a:	2b06      	cmp	r3, #6
 8009e1c:	d822      	bhi.n	8009e64 <PDM_Filter_setConfig+0x198>
 8009e1e:	e8df f003 	tbb	[pc, r3]
 8009e22:	1316      	.short	0x1316
 8009e24:	070a0d10 	.word	0x070a0d10
 8009e28:	04          	.byte	0x04
 8009e29:	00          	.byte	0x00
 8009e2a:	4b19      	ldr	r3, [pc, #100]	; (8009e90 <PDM_Filter_setConfig+0x1c4>)
 8009e2c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e2e:	e7d1      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e30:	4b18      	ldr	r3, [pc, #96]	; (8009e94 <PDM_Filter_setConfig+0x1c8>)
 8009e32:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e34:	e7ce      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e36:	4b18      	ldr	r3, [pc, #96]	; (8009e98 <PDM_Filter_setConfig+0x1cc>)
 8009e38:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e3a:	e7cb      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e3c:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <PDM_Filter_setConfig+0x1d0>)
 8009e3e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e40:	e7c8      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e42:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <PDM_Filter_setConfig+0x1d4>)
 8009e44:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e46:	e7c5      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e48:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <PDM_Filter_setConfig+0x1d8>)
 8009e4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e4c:	e7c2      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e4e:	4b16      	ldr	r3, [pc, #88]	; (8009ea8 <PDM_Filter_setConfig+0x1dc>)
 8009e50:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e52:	e7bf      	b.n	8009dd4 <PDM_Filter_setConfig+0x108>
 8009e54:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8009eac <PDM_Filter_setConfig+0x1e0>
 8009e58:	eeb0 9a48 	vmov.f32	s18, s16
 8009e5c:	e78e      	b.n	8009d7c <PDM_Filter_setConfig+0xb0>
 8009e5e:	886b      	ldrh	r3, [r5, #2]
 8009e60:	8663      	strh	r3, [r4, #50]	; 0x32
 8009e62:	e759      	b.n	8009d18 <PDM_Filter_setConfig+0x4c>
 8009e64:	2000      	movs	r0, #0
 8009e66:	e746      	b.n	8009cf6 <PDM_Filter_setConfig+0x2a>
 8009e68:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e6c:	0800bd88 	.word	0x0800bd88
 8009e70:	42000000 	.word	0x42000000
 8009e74:	08008239 	.word	0x08008239
 8009e78:	08008119 	.word	0x08008119
 8009e7c:	080083c9 	.word	0x080083c9
 8009e80:	08008c0d 	.word	0x08008c0d
 8009e84:	0800896d 	.word	0x0800896d
 8009e88:	0800874d 	.word	0x0800874d
 8009e8c:	08008561 	.word	0x08008561
 8009e90:	08009219 	.word	0x08009219
 8009e94:	080090e1 	.word	0x080090e1
 8009e98:	08008ffd 	.word	0x08008ffd
 8009e9c:	08009895 	.word	0x08009895
 8009ea0:	08009681 	.word	0x08009681
 8009ea4:	080094c9 	.word	0x080094c9
 8009ea8:	0800935d 	.word	0x0800935d
 8009eac:	00000000 	.word	0x00000000

08009eb0 <PDM_Filter>:
 8009eb0:	b410      	push	{r4}
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <PDM_Filter+0x34>)
 8009eb4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	d003      	beq.n	8009ec2 <PDM_Filter+0x12>
 8009eba:	2004      	movs	r0, #4
 8009ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009ec4:	05dc      	lsls	r4, r3, #23
 8009ec6:	d407      	bmi.n	8009ed8 <PDM_Filter+0x28>
 8009ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ecc:	bf14      	ite	ne
 8009ece:	2020      	movne	r0, #32
 8009ed0:	2030      	moveq	r0, #48	; 0x30
 8009ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ede:	320c      	adds	r2, #12
 8009ee0:	4718      	bx	r3
 8009ee2:	bf00      	nop
 8009ee4:	b5e8b5cd 	.word	0xb5e8b5cd

08009ee8 <CRC_Lock>:
 8009ee8:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <CRC_Lock+0x60>)
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	b410      	push	{r4}
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	4c16      	ldr	r4, [pc, #88]	; (8009f4c <CRC_Lock+0x64>)
 8009ef4:	6013      	str	r3, [r2, #0]
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	b933      	cbnz	r3, 8009f08 <CRC_Lock+0x20>
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <CRC_Lock+0x68>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f02:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009f06:	d00f      	beq.n	8009f28 <CRC_Lock+0x40>
 8009f08:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <CRC_Lock+0x6c>)
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	6813      	ldr	r3, [r2, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1fc      	bne.n	8009f0e <CRC_Lock+0x26>
 8009f14:	4b10      	ldr	r3, [pc, #64]	; (8009f58 <CRC_Lock+0x70>)
 8009f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f1a:	6018      	str	r0, [r3, #0]
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	1a08      	subs	r0, r1, r0
 8009f20:	fab0 f080 	clz	r0, r0
 8009f24:	0940      	lsrs	r0, r0, #5
 8009f26:	4770      	bx	lr
 8009f28:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <CRC_Lock+0x74>)
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	6813      	ldr	r3, [r2, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1fc      	bne.n	8009f2e <CRC_Lock+0x46>
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <CRC_Lock+0x78>)
 8009f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f3a:	6018      	str	r0, [r3, #0]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	1a40      	subs	r0, r0, r1
 8009f40:	fab0 f080 	clz	r0, r0
 8009f44:	0940      	lsrs	r0, r0, #5
 8009f46:	4770      	bx	lr
 8009f48:	e0002000 	.word	0xe0002000
 8009f4c:	e0042000 	.word	0xe0042000
 8009f50:	5c001000 	.word	0x5c001000
 8009f54:	40023008 	.word	0x40023008
 8009f58:	40023000 	.word	0x40023000
 8009f5c:	58024c08 	.word	0x58024c08
 8009f60:	58024c00 	.word	0x58024c00

08009f64 <std>:
 8009f64:	2300      	movs	r3, #0
 8009f66:	b510      	push	{r4, lr}
 8009f68:	4604      	mov	r4, r0
 8009f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f72:	6083      	str	r3, [r0, #8]
 8009f74:	8181      	strh	r1, [r0, #12]
 8009f76:	6643      	str	r3, [r0, #100]	; 0x64
 8009f78:	81c2      	strh	r2, [r0, #14]
 8009f7a:	6183      	str	r3, [r0, #24]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	2208      	movs	r2, #8
 8009f80:	305c      	adds	r0, #92	; 0x5c
 8009f82:	f000 fa31 	bl	800a3e8 <memset>
 8009f86:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <std+0x58>)
 8009f88:	6263      	str	r3, [r4, #36]	; 0x24
 8009f8a:	4b0d      	ldr	r3, [pc, #52]	; (8009fc0 <std+0x5c>)
 8009f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f8e:	4b0d      	ldr	r3, [pc, #52]	; (8009fc4 <std+0x60>)
 8009f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f92:	4b0d      	ldr	r3, [pc, #52]	; (8009fc8 <std+0x64>)
 8009f94:	6323      	str	r3, [r4, #48]	; 0x30
 8009f96:	4b0d      	ldr	r3, [pc, #52]	; (8009fcc <std+0x68>)
 8009f98:	6224      	str	r4, [r4, #32]
 8009f9a:	429c      	cmp	r4, r3
 8009f9c:	d006      	beq.n	8009fac <std+0x48>
 8009f9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009fa2:	4294      	cmp	r4, r2
 8009fa4:	d002      	beq.n	8009fac <std+0x48>
 8009fa6:	33d0      	adds	r3, #208	; 0xd0
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	d105      	bne.n	8009fb8 <std+0x54>
 8009fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fb4:	f000 ba90 	b.w	800a4d8 <__retarget_lock_init_recursive>
 8009fb8:	bd10      	pop	{r4, pc}
 8009fba:	bf00      	nop
 8009fbc:	0800a1c5 	.word	0x0800a1c5
 8009fc0:	0800a1e7 	.word	0x0800a1e7
 8009fc4:	0800a21f 	.word	0x0800a21f
 8009fc8:	0800a243 	.word	0x0800a243
 8009fcc:	20000d40 	.word	0x20000d40

08009fd0 <stdio_exit_handler>:
 8009fd0:	4a02      	ldr	r2, [pc, #8]	; (8009fdc <stdio_exit_handler+0xc>)
 8009fd2:	4903      	ldr	r1, [pc, #12]	; (8009fe0 <stdio_exit_handler+0x10>)
 8009fd4:	4803      	ldr	r0, [pc, #12]	; (8009fe4 <stdio_exit_handler+0x14>)
 8009fd6:	f000 b869 	b.w	800a0ac <_fwalk_sglue>
 8009fda:	bf00      	nop
 8009fdc:	20000460 	.word	0x20000460
 8009fe0:	0800b035 	.word	0x0800b035
 8009fe4:	2000046c 	.word	0x2000046c

08009fe8 <cleanup_stdio>:
 8009fe8:	6841      	ldr	r1, [r0, #4]
 8009fea:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <cleanup_stdio+0x34>)
 8009fec:	4299      	cmp	r1, r3
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	d001      	beq.n	8009ff8 <cleanup_stdio+0x10>
 8009ff4:	f001 f81e 	bl	800b034 <_fflush_r>
 8009ff8:	68a1      	ldr	r1, [r4, #8]
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <cleanup_stdio+0x38>)
 8009ffc:	4299      	cmp	r1, r3
 8009ffe:	d002      	beq.n	800a006 <cleanup_stdio+0x1e>
 800a000:	4620      	mov	r0, r4
 800a002:	f001 f817 	bl	800b034 <_fflush_r>
 800a006:	68e1      	ldr	r1, [r4, #12]
 800a008:	4b06      	ldr	r3, [pc, #24]	; (800a024 <cleanup_stdio+0x3c>)
 800a00a:	4299      	cmp	r1, r3
 800a00c:	d004      	beq.n	800a018 <cleanup_stdio+0x30>
 800a00e:	4620      	mov	r0, r4
 800a010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a014:	f001 b80e 	b.w	800b034 <_fflush_r>
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	bf00      	nop
 800a01c:	20000d40 	.word	0x20000d40
 800a020:	20000da8 	.word	0x20000da8
 800a024:	20000e10 	.word	0x20000e10

0800a028 <global_stdio_init.part.0>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <global_stdio_init.part.0+0x30>)
 800a02c:	4c0b      	ldr	r4, [pc, #44]	; (800a05c <global_stdio_init.part.0+0x34>)
 800a02e:	4a0c      	ldr	r2, [pc, #48]	; (800a060 <global_stdio_init.part.0+0x38>)
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	4620      	mov	r0, r4
 800a034:	2200      	movs	r2, #0
 800a036:	2104      	movs	r1, #4
 800a038:	f7ff ff94 	bl	8009f64 <std>
 800a03c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a040:	2201      	movs	r2, #1
 800a042:	2109      	movs	r1, #9
 800a044:	f7ff ff8e 	bl	8009f64 <std>
 800a048:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a04c:	2202      	movs	r2, #2
 800a04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a052:	2112      	movs	r1, #18
 800a054:	f7ff bf86 	b.w	8009f64 <std>
 800a058:	20000e78 	.word	0x20000e78
 800a05c:	20000d40 	.word	0x20000d40
 800a060:	08009fd1 	.word	0x08009fd1

0800a064 <__sfp_lock_acquire>:
 800a064:	4801      	ldr	r0, [pc, #4]	; (800a06c <__sfp_lock_acquire+0x8>)
 800a066:	f000 ba38 	b.w	800a4da <__retarget_lock_acquire_recursive>
 800a06a:	bf00      	nop
 800a06c:	20000e81 	.word	0x20000e81

0800a070 <__sfp_lock_release>:
 800a070:	4801      	ldr	r0, [pc, #4]	; (800a078 <__sfp_lock_release+0x8>)
 800a072:	f000 ba33 	b.w	800a4dc <__retarget_lock_release_recursive>
 800a076:	bf00      	nop
 800a078:	20000e81 	.word	0x20000e81

0800a07c <__sinit>:
 800a07c:	b510      	push	{r4, lr}
 800a07e:	4604      	mov	r4, r0
 800a080:	f7ff fff0 	bl	800a064 <__sfp_lock_acquire>
 800a084:	6a23      	ldr	r3, [r4, #32]
 800a086:	b11b      	cbz	r3, 800a090 <__sinit+0x14>
 800a088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08c:	f7ff bff0 	b.w	800a070 <__sfp_lock_release>
 800a090:	4b04      	ldr	r3, [pc, #16]	; (800a0a4 <__sinit+0x28>)
 800a092:	6223      	str	r3, [r4, #32]
 800a094:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <__sinit+0x2c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f5      	bne.n	800a088 <__sinit+0xc>
 800a09c:	f7ff ffc4 	bl	800a028 <global_stdio_init.part.0>
 800a0a0:	e7f2      	b.n	800a088 <__sinit+0xc>
 800a0a2:	bf00      	nop
 800a0a4:	08009fe9 	.word	0x08009fe9
 800a0a8:	20000e78 	.word	0x20000e78

0800a0ac <_fwalk_sglue>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	4688      	mov	r8, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a0c0:	d505      	bpl.n	800a0ce <_fwalk_sglue+0x22>
 800a0c2:	6824      	ldr	r4, [r4, #0]
 800a0c4:	2c00      	cmp	r4, #0
 800a0c6:	d1f7      	bne.n	800a0b8 <_fwalk_sglue+0xc>
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d907      	bls.n	800a0e4 <_fwalk_sglue+0x38>
 800a0d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	d003      	beq.n	800a0e4 <_fwalk_sglue+0x38>
 800a0dc:	4629      	mov	r1, r5
 800a0de:	4638      	mov	r0, r7
 800a0e0:	47c0      	blx	r8
 800a0e2:	4306      	orrs	r6, r0
 800a0e4:	3568      	adds	r5, #104	; 0x68
 800a0e6:	e7e9      	b.n	800a0bc <_fwalk_sglue+0x10>

0800a0e8 <iprintf>:
 800a0e8:	b40f      	push	{r0, r1, r2, r3}
 800a0ea:	b507      	push	{r0, r1, r2, lr}
 800a0ec:	4906      	ldr	r1, [pc, #24]	; (800a108 <iprintf+0x20>)
 800a0ee:	ab04      	add	r3, sp, #16
 800a0f0:	6808      	ldr	r0, [r1, #0]
 800a0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f6:	6881      	ldr	r1, [r0, #8]
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f000 fc6b 	bl	800a9d4 <_vfiprintf_r>
 800a0fe:	b003      	add	sp, #12
 800a100:	f85d eb04 	ldr.w	lr, [sp], #4
 800a104:	b004      	add	sp, #16
 800a106:	4770      	bx	lr
 800a108:	200004b8 	.word	0x200004b8

0800a10c <_puts_r>:
 800a10c:	6a03      	ldr	r3, [r0, #32]
 800a10e:	b570      	push	{r4, r5, r6, lr}
 800a110:	6884      	ldr	r4, [r0, #8]
 800a112:	4605      	mov	r5, r0
 800a114:	460e      	mov	r6, r1
 800a116:	b90b      	cbnz	r3, 800a11c <_puts_r+0x10>
 800a118:	f7ff ffb0 	bl	800a07c <__sinit>
 800a11c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a11e:	07db      	lsls	r3, r3, #31
 800a120:	d405      	bmi.n	800a12e <_puts_r+0x22>
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	0598      	lsls	r0, r3, #22
 800a126:	d402      	bmi.n	800a12e <_puts_r+0x22>
 800a128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a12a:	f000 f9d6 	bl	800a4da <__retarget_lock_acquire_recursive>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	0719      	lsls	r1, r3, #28
 800a132:	d513      	bpl.n	800a15c <_puts_r+0x50>
 800a134:	6923      	ldr	r3, [r4, #16]
 800a136:	b18b      	cbz	r3, 800a15c <_puts_r+0x50>
 800a138:	3e01      	subs	r6, #1
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a140:	3b01      	subs	r3, #1
 800a142:	60a3      	str	r3, [r4, #8]
 800a144:	b9e9      	cbnz	r1, 800a182 <_puts_r+0x76>
 800a146:	2b00      	cmp	r3, #0
 800a148:	da2e      	bge.n	800a1a8 <_puts_r+0x9c>
 800a14a:	4622      	mov	r2, r4
 800a14c:	210a      	movs	r1, #10
 800a14e:	4628      	mov	r0, r5
 800a150:	f000 f8b4 	bl	800a2bc <__swbuf_r>
 800a154:	3001      	adds	r0, #1
 800a156:	d007      	beq.n	800a168 <_puts_r+0x5c>
 800a158:	250a      	movs	r5, #10
 800a15a:	e007      	b.n	800a16c <_puts_r+0x60>
 800a15c:	4621      	mov	r1, r4
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f8ea 	bl	800a338 <__swsetup_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	d0e7      	beq.n	800a138 <_puts_r+0x2c>
 800a168:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a16e:	07da      	lsls	r2, r3, #31
 800a170:	d405      	bmi.n	800a17e <_puts_r+0x72>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	059b      	lsls	r3, r3, #22
 800a176:	d402      	bmi.n	800a17e <_puts_r+0x72>
 800a178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a17a:	f000 f9af 	bl	800a4dc <__retarget_lock_release_recursive>
 800a17e:	4628      	mov	r0, r5
 800a180:	bd70      	pop	{r4, r5, r6, pc}
 800a182:	2b00      	cmp	r3, #0
 800a184:	da04      	bge.n	800a190 <_puts_r+0x84>
 800a186:	69a2      	ldr	r2, [r4, #24]
 800a188:	429a      	cmp	r2, r3
 800a18a:	dc06      	bgt.n	800a19a <_puts_r+0x8e>
 800a18c:	290a      	cmp	r1, #10
 800a18e:	d004      	beq.n	800a19a <_puts_r+0x8e>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	6022      	str	r2, [r4, #0]
 800a196:	7019      	strb	r1, [r3, #0]
 800a198:	e7cf      	b.n	800a13a <_puts_r+0x2e>
 800a19a:	4622      	mov	r2, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 f88d 	bl	800a2bc <__swbuf_r>
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d1c9      	bne.n	800a13a <_puts_r+0x2e>
 800a1a6:	e7df      	b.n	800a168 <_puts_r+0x5c>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	250a      	movs	r5, #10
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	6022      	str	r2, [r4, #0]
 800a1b0:	701d      	strb	r5, [r3, #0]
 800a1b2:	e7db      	b.n	800a16c <_puts_r+0x60>

0800a1b4 <puts>:
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <puts+0xc>)
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f7ff bfa7 	b.w	800a10c <_puts_r>
 800a1be:	bf00      	nop
 800a1c0:	200004b8 	.word	0x200004b8

0800a1c4 <__sread>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	f000 f936 	bl	800a43c <_read_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	bfab      	itete	ge
 800a1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d8:	181b      	addge	r3, r3, r0
 800a1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1de:	bfac      	ite	ge
 800a1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1e2:	81a3      	strhlt	r3, [r4, #12]
 800a1e4:	bd10      	pop	{r4, pc}

0800a1e6 <__swrite>:
 800a1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ea:	461f      	mov	r7, r3
 800a1ec:	898b      	ldrh	r3, [r1, #12]
 800a1ee:	05db      	lsls	r3, r3, #23
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	d505      	bpl.n	800a204 <__swrite+0x1e>
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	2200      	movs	r2, #0
 800a200:	f000 f90a 	bl	800a418 <_lseek_r>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	4632      	mov	r2, r6
 800a212:	463b      	mov	r3, r7
 800a214:	4628      	mov	r0, r5
 800a216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	f000 b921 	b.w	800a460 <_write_r>

0800a21e <__sseek>:
 800a21e:	b510      	push	{r4, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a226:	f000 f8f7 	bl	800a418 <_lseek_r>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	bf15      	itete	ne
 800a230:	6560      	strne	r0, [r4, #84]	; 0x54
 800a232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a23a:	81a3      	strheq	r3, [r4, #12]
 800a23c:	bf18      	it	ne
 800a23e:	81a3      	strhne	r3, [r4, #12]
 800a240:	bd10      	pop	{r4, pc}

0800a242 <__sclose>:
 800a242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a246:	f000 b8d7 	b.w	800a3f8 <_close_r>

0800a24a <_vsniprintf_r>:
 800a24a:	b530      	push	{r4, r5, lr}
 800a24c:	4614      	mov	r4, r2
 800a24e:	2c00      	cmp	r4, #0
 800a250:	b09b      	sub	sp, #108	; 0x6c
 800a252:	4605      	mov	r5, r0
 800a254:	461a      	mov	r2, r3
 800a256:	da05      	bge.n	800a264 <_vsniprintf_r+0x1a>
 800a258:	238b      	movs	r3, #139	; 0x8b
 800a25a:	6003      	str	r3, [r0, #0]
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a260:	b01b      	add	sp, #108	; 0x6c
 800a262:	bd30      	pop	{r4, r5, pc}
 800a264:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a268:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a26c:	bf14      	ite	ne
 800a26e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a272:	4623      	moveq	r3, r4
 800a274:	9302      	str	r3, [sp, #8]
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a27c:	9100      	str	r1, [sp, #0]
 800a27e:	9104      	str	r1, [sp, #16]
 800a280:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a284:	4669      	mov	r1, sp
 800a286:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a288:	f000 fa7c 	bl	800a784 <_svfiprintf_r>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	bfbc      	itt	lt
 800a290:	238b      	movlt	r3, #139	; 0x8b
 800a292:	602b      	strlt	r3, [r5, #0]
 800a294:	2c00      	cmp	r4, #0
 800a296:	d0e3      	beq.n	800a260 <_vsniprintf_r+0x16>
 800a298:	9b00      	ldr	r3, [sp, #0]
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	e7df      	b.n	800a260 <_vsniprintf_r+0x16>

0800a2a0 <vsniprintf>:
 800a2a0:	b507      	push	{r0, r1, r2, lr}
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	460a      	mov	r2, r1
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	4803      	ldr	r0, [pc, #12]	; (800a2b8 <vsniprintf+0x18>)
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f7ff ffcc 	bl	800a24a <_vsniprintf_r>
 800a2b2:	b003      	add	sp, #12
 800a2b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b8:	200004b8 	.word	0x200004b8

0800a2bc <__swbuf_r>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	460e      	mov	r6, r1
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	b118      	cbz	r0, 800a2ce <__swbuf_r+0x12>
 800a2c6:	6a03      	ldr	r3, [r0, #32]
 800a2c8:	b90b      	cbnz	r3, 800a2ce <__swbuf_r+0x12>
 800a2ca:	f7ff fed7 	bl	800a07c <__sinit>
 800a2ce:	69a3      	ldr	r3, [r4, #24]
 800a2d0:	60a3      	str	r3, [r4, #8]
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	071a      	lsls	r2, r3, #28
 800a2d6:	d525      	bpl.n	800a324 <__swbuf_r+0x68>
 800a2d8:	6923      	ldr	r3, [r4, #16]
 800a2da:	b31b      	cbz	r3, 800a324 <__swbuf_r+0x68>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	6922      	ldr	r2, [r4, #16]
 800a2e0:	1a98      	subs	r0, r3, r2
 800a2e2:	6963      	ldr	r3, [r4, #20]
 800a2e4:	b2f6      	uxtb	r6, r6
 800a2e6:	4283      	cmp	r3, r0
 800a2e8:	4637      	mov	r7, r6
 800a2ea:	dc04      	bgt.n	800a2f6 <__swbuf_r+0x3a>
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f000 fea0 	bl	800b034 <_fflush_r>
 800a2f4:	b9e0      	cbnz	r0, 800a330 <__swbuf_r+0x74>
 800a2f6:	68a3      	ldr	r3, [r4, #8]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	60a3      	str	r3, [r4, #8]
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	6022      	str	r2, [r4, #0]
 800a302:	701e      	strb	r6, [r3, #0]
 800a304:	6962      	ldr	r2, [r4, #20]
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	429a      	cmp	r2, r3
 800a30a:	d004      	beq.n	800a316 <__swbuf_r+0x5a>
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	07db      	lsls	r3, r3, #31
 800a310:	d506      	bpl.n	800a320 <__swbuf_r+0x64>
 800a312:	2e0a      	cmp	r6, #10
 800a314:	d104      	bne.n	800a320 <__swbuf_r+0x64>
 800a316:	4621      	mov	r1, r4
 800a318:	4628      	mov	r0, r5
 800a31a:	f000 fe8b 	bl	800b034 <_fflush_r>
 800a31e:	b938      	cbnz	r0, 800a330 <__swbuf_r+0x74>
 800a320:	4638      	mov	r0, r7
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	4621      	mov	r1, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f000 f806 	bl	800a338 <__swsetup_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d0d5      	beq.n	800a2dc <__swbuf_r+0x20>
 800a330:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a334:	e7f4      	b.n	800a320 <__swbuf_r+0x64>
	...

0800a338 <__swsetup_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4b2a      	ldr	r3, [pc, #168]	; (800a3e4 <__swsetup_r+0xac>)
 800a33c:	4605      	mov	r5, r0
 800a33e:	6818      	ldr	r0, [r3, #0]
 800a340:	460c      	mov	r4, r1
 800a342:	b118      	cbz	r0, 800a34c <__swsetup_r+0x14>
 800a344:	6a03      	ldr	r3, [r0, #32]
 800a346:	b90b      	cbnz	r3, 800a34c <__swsetup_r+0x14>
 800a348:	f7ff fe98 	bl	800a07c <__sinit>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a352:	0718      	lsls	r0, r3, #28
 800a354:	d422      	bmi.n	800a39c <__swsetup_r+0x64>
 800a356:	06d9      	lsls	r1, r3, #27
 800a358:	d407      	bmi.n	800a36a <__swsetup_r+0x32>
 800a35a:	2309      	movs	r3, #9
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a362:	81a3      	strh	r3, [r4, #12]
 800a364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a368:	e034      	b.n	800a3d4 <__swsetup_r+0x9c>
 800a36a:	0758      	lsls	r0, r3, #29
 800a36c:	d512      	bpl.n	800a394 <__swsetup_r+0x5c>
 800a36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a370:	b141      	cbz	r1, 800a384 <__swsetup_r+0x4c>
 800a372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a376:	4299      	cmp	r1, r3
 800a378:	d002      	beq.n	800a380 <__swsetup_r+0x48>
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 f8b0 	bl	800a4e0 <_free_r>
 800a380:	2300      	movs	r3, #0
 800a382:	6363      	str	r3, [r4, #52]	; 0x34
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	2300      	movs	r3, #0
 800a38e:	6063      	str	r3, [r4, #4]
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f043 0308 	orr.w	r3, r3, #8
 800a39a:	81a3      	strh	r3, [r4, #12]
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	b94b      	cbnz	r3, 800a3b4 <__swsetup_r+0x7c>
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3aa:	d003      	beq.n	800a3b4 <__swsetup_r+0x7c>
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f000 fe8e 	bl	800b0d0 <__smakebuf_r>
 800a3b4:	89a0      	ldrh	r0, [r4, #12]
 800a3b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3ba:	f010 0301 	ands.w	r3, r0, #1
 800a3be:	d00a      	beq.n	800a3d6 <__swsetup_r+0x9e>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60a3      	str	r3, [r4, #8]
 800a3c4:	6963      	ldr	r3, [r4, #20]
 800a3c6:	425b      	negs	r3, r3
 800a3c8:	61a3      	str	r3, [r4, #24]
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	b943      	cbnz	r3, 800a3e0 <__swsetup_r+0xa8>
 800a3ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3d2:	d1c4      	bne.n	800a35e <__swsetup_r+0x26>
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
 800a3d6:	0781      	lsls	r1, r0, #30
 800a3d8:	bf58      	it	pl
 800a3da:	6963      	ldrpl	r3, [r4, #20]
 800a3dc:	60a3      	str	r3, [r4, #8]
 800a3de:	e7f4      	b.n	800a3ca <__swsetup_r+0x92>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7f7      	b.n	800a3d4 <__swsetup_r+0x9c>
 800a3e4:	200004b8 	.word	0x200004b8

0800a3e8 <memset>:
 800a3e8:	4402      	add	r2, r0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d100      	bne.n	800a3f2 <memset+0xa>
 800a3f0:	4770      	bx	lr
 800a3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f6:	e7f9      	b.n	800a3ec <memset+0x4>

0800a3f8 <_close_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d06      	ldr	r5, [pc, #24]	; (800a414 <_close_r+0x1c>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	f7f6 ff97 	bl	8001336 <_close>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_close_r+0x1a>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_close_r+0x1a>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	20000e7c 	.word	0x20000e7c

0800a418 <_lseek_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	; (800a438 <_lseek_r+0x20>)
 800a41c:	4604      	mov	r4, r0
 800a41e:	4608      	mov	r0, r1
 800a420:	4611      	mov	r1, r2
 800a422:	2200      	movs	r2, #0
 800a424:	602a      	str	r2, [r5, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	f7f6 ffac 	bl	8001384 <_lseek>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d102      	bne.n	800a436 <_lseek_r+0x1e>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	b103      	cbz	r3, 800a436 <_lseek_r+0x1e>
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	20000e7c 	.word	0x20000e7c

0800a43c <_read_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d07      	ldr	r5, [pc, #28]	; (800a45c <_read_r+0x20>)
 800a440:	4604      	mov	r4, r0
 800a442:	4608      	mov	r0, r1
 800a444:	4611      	mov	r1, r2
 800a446:	2200      	movs	r2, #0
 800a448:	602a      	str	r2, [r5, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	f7f6 ff56 	bl	80012fc <_read>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d102      	bne.n	800a45a <_read_r+0x1e>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b103      	cbz	r3, 800a45a <_read_r+0x1e>
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	20000e7c 	.word	0x20000e7c

0800a460 <_write_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	4d07      	ldr	r5, [pc, #28]	; (800a480 <_write_r+0x20>)
 800a464:	4604      	mov	r4, r0
 800a466:	4608      	mov	r0, r1
 800a468:	4611      	mov	r1, r2
 800a46a:	2200      	movs	r2, #0
 800a46c:	602a      	str	r2, [r5, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	f7f6 fcee 	bl	8000e50 <_write>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_write_r+0x1e>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_write_r+0x1e>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	20000e7c 	.word	0x20000e7c

0800a484 <__errno>:
 800a484:	4b01      	ldr	r3, [pc, #4]	; (800a48c <__errno+0x8>)
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	200004b8 	.word	0x200004b8

0800a490 <__libc_init_array>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	4d0d      	ldr	r5, [pc, #52]	; (800a4c8 <__libc_init_array+0x38>)
 800a494:	4c0d      	ldr	r4, [pc, #52]	; (800a4cc <__libc_init_array+0x3c>)
 800a496:	1b64      	subs	r4, r4, r5
 800a498:	10a4      	asrs	r4, r4, #2
 800a49a:	2600      	movs	r6, #0
 800a49c:	42a6      	cmp	r6, r4
 800a49e:	d109      	bne.n	800a4b4 <__libc_init_array+0x24>
 800a4a0:	4d0b      	ldr	r5, [pc, #44]	; (800a4d0 <__libc_init_array+0x40>)
 800a4a2:	4c0c      	ldr	r4, [pc, #48]	; (800a4d4 <__libc_init_array+0x44>)
 800a4a4:	f001 fac8 	bl	800ba38 <_init>
 800a4a8:	1b64      	subs	r4, r4, r5
 800a4aa:	10a4      	asrs	r4, r4, #2
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	42a6      	cmp	r6, r4
 800a4b0:	d105      	bne.n	800a4be <__libc_init_array+0x2e>
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b8:	4798      	blx	r3
 800a4ba:	3601      	adds	r6, #1
 800a4bc:	e7ee      	b.n	800a49c <__libc_init_array+0xc>
 800a4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c2:	4798      	blx	r3
 800a4c4:	3601      	adds	r6, #1
 800a4c6:	e7f2      	b.n	800a4ae <__libc_init_array+0x1e>
 800a4c8:	0800beb4 	.word	0x0800beb4
 800a4cc:	0800beb4 	.word	0x0800beb4
 800a4d0:	0800beb4 	.word	0x0800beb4
 800a4d4:	0800beb8 	.word	0x0800beb8

0800a4d8 <__retarget_lock_init_recursive>:
 800a4d8:	4770      	bx	lr

0800a4da <__retarget_lock_acquire_recursive>:
 800a4da:	4770      	bx	lr

0800a4dc <__retarget_lock_release_recursive>:
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <_free_r>:
 800a4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	d044      	beq.n	800a570 <_free_r+0x90>
 800a4e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ea:	9001      	str	r0, [sp, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a4f2:	bfb8      	it	lt
 800a4f4:	18e4      	addlt	r4, r4, r3
 800a4f6:	f000 f8df 	bl	800a6b8 <__malloc_lock>
 800a4fa:	4a1e      	ldr	r2, [pc, #120]	; (800a574 <_free_r+0x94>)
 800a4fc:	9801      	ldr	r0, [sp, #4]
 800a4fe:	6813      	ldr	r3, [r2, #0]
 800a500:	b933      	cbnz	r3, 800a510 <_free_r+0x30>
 800a502:	6063      	str	r3, [r4, #4]
 800a504:	6014      	str	r4, [r2, #0]
 800a506:	b003      	add	sp, #12
 800a508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a50c:	f000 b8da 	b.w	800a6c4 <__malloc_unlock>
 800a510:	42a3      	cmp	r3, r4
 800a512:	d908      	bls.n	800a526 <_free_r+0x46>
 800a514:	6825      	ldr	r5, [r4, #0]
 800a516:	1961      	adds	r1, r4, r5
 800a518:	428b      	cmp	r3, r1
 800a51a:	bf01      	itttt	eq
 800a51c:	6819      	ldreq	r1, [r3, #0]
 800a51e:	685b      	ldreq	r3, [r3, #4]
 800a520:	1949      	addeq	r1, r1, r5
 800a522:	6021      	streq	r1, [r4, #0]
 800a524:	e7ed      	b.n	800a502 <_free_r+0x22>
 800a526:	461a      	mov	r2, r3
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	b10b      	cbz	r3, 800a530 <_free_r+0x50>
 800a52c:	42a3      	cmp	r3, r4
 800a52e:	d9fa      	bls.n	800a526 <_free_r+0x46>
 800a530:	6811      	ldr	r1, [r2, #0]
 800a532:	1855      	adds	r5, r2, r1
 800a534:	42a5      	cmp	r5, r4
 800a536:	d10b      	bne.n	800a550 <_free_r+0x70>
 800a538:	6824      	ldr	r4, [r4, #0]
 800a53a:	4421      	add	r1, r4
 800a53c:	1854      	adds	r4, r2, r1
 800a53e:	42a3      	cmp	r3, r4
 800a540:	6011      	str	r1, [r2, #0]
 800a542:	d1e0      	bne.n	800a506 <_free_r+0x26>
 800a544:	681c      	ldr	r4, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	6053      	str	r3, [r2, #4]
 800a54a:	440c      	add	r4, r1
 800a54c:	6014      	str	r4, [r2, #0]
 800a54e:	e7da      	b.n	800a506 <_free_r+0x26>
 800a550:	d902      	bls.n	800a558 <_free_r+0x78>
 800a552:	230c      	movs	r3, #12
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	e7d6      	b.n	800a506 <_free_r+0x26>
 800a558:	6825      	ldr	r5, [r4, #0]
 800a55a:	1961      	adds	r1, r4, r5
 800a55c:	428b      	cmp	r3, r1
 800a55e:	bf04      	itt	eq
 800a560:	6819      	ldreq	r1, [r3, #0]
 800a562:	685b      	ldreq	r3, [r3, #4]
 800a564:	6063      	str	r3, [r4, #4]
 800a566:	bf04      	itt	eq
 800a568:	1949      	addeq	r1, r1, r5
 800a56a:	6021      	streq	r1, [r4, #0]
 800a56c:	6054      	str	r4, [r2, #4]
 800a56e:	e7ca      	b.n	800a506 <_free_r+0x26>
 800a570:	b003      	add	sp, #12
 800a572:	bd30      	pop	{r4, r5, pc}
 800a574:	20000e84 	.word	0x20000e84

0800a578 <sbrk_aligned>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4e0e      	ldr	r6, [pc, #56]	; (800a5b4 <sbrk_aligned+0x3c>)
 800a57c:	460c      	mov	r4, r1
 800a57e:	6831      	ldr	r1, [r6, #0]
 800a580:	4605      	mov	r5, r0
 800a582:	b911      	cbnz	r1, 800a58a <sbrk_aligned+0x12>
 800a584:	f000 fe1c 	bl	800b1c0 <_sbrk_r>
 800a588:	6030      	str	r0, [r6, #0]
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 fe17 	bl	800b1c0 <_sbrk_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	d00a      	beq.n	800a5ac <sbrk_aligned+0x34>
 800a596:	1cc4      	adds	r4, r0, #3
 800a598:	f024 0403 	bic.w	r4, r4, #3
 800a59c:	42a0      	cmp	r0, r4
 800a59e:	d007      	beq.n	800a5b0 <sbrk_aligned+0x38>
 800a5a0:	1a21      	subs	r1, r4, r0
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 fe0c 	bl	800b1c0 <_sbrk_r>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d101      	bne.n	800a5b0 <sbrk_aligned+0x38>
 800a5ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	20000e88 	.word	0x20000e88

0800a5b8 <_malloc_r>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	1ccd      	adds	r5, r1, #3
 800a5be:	f025 0503 	bic.w	r5, r5, #3
 800a5c2:	3508      	adds	r5, #8
 800a5c4:	2d0c      	cmp	r5, #12
 800a5c6:	bf38      	it	cc
 800a5c8:	250c      	movcc	r5, #12
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	db01      	blt.n	800a5d4 <_malloc_r+0x1c>
 800a5d0:	42a9      	cmp	r1, r5
 800a5d2:	d905      	bls.n	800a5e0 <_malloc_r+0x28>
 800a5d4:	230c      	movs	r3, #12
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	2600      	movs	r6, #0
 800a5da:	4630      	mov	r0, r6
 800a5dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6b4 <_malloc_r+0xfc>
 800a5e4:	f000 f868 	bl	800a6b8 <__malloc_lock>
 800a5e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ec:	461c      	mov	r4, r3
 800a5ee:	bb5c      	cbnz	r4, 800a648 <_malloc_r+0x90>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	f7ff ffc0 	bl	800a578 <sbrk_aligned>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	d155      	bne.n	800a6aa <_malloc_r+0xf2>
 800a5fe:	f8d8 4000 	ldr.w	r4, [r8]
 800a602:	4626      	mov	r6, r4
 800a604:	2e00      	cmp	r6, #0
 800a606:	d145      	bne.n	800a694 <_malloc_r+0xdc>
 800a608:	2c00      	cmp	r4, #0
 800a60a:	d048      	beq.n	800a69e <_malloc_r+0xe6>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	4631      	mov	r1, r6
 800a610:	4638      	mov	r0, r7
 800a612:	eb04 0903 	add.w	r9, r4, r3
 800a616:	f000 fdd3 	bl	800b1c0 <_sbrk_r>
 800a61a:	4581      	cmp	r9, r0
 800a61c:	d13f      	bne.n	800a69e <_malloc_r+0xe6>
 800a61e:	6821      	ldr	r1, [r4, #0]
 800a620:	1a6d      	subs	r5, r5, r1
 800a622:	4629      	mov	r1, r5
 800a624:	4638      	mov	r0, r7
 800a626:	f7ff ffa7 	bl	800a578 <sbrk_aligned>
 800a62a:	3001      	adds	r0, #1
 800a62c:	d037      	beq.n	800a69e <_malloc_r+0xe6>
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	442b      	add	r3, r5
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	f8d8 3000 	ldr.w	r3, [r8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d038      	beq.n	800a6ae <_malloc_r+0xf6>
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	42a2      	cmp	r2, r4
 800a640:	d12b      	bne.n	800a69a <_malloc_r+0xe2>
 800a642:	2200      	movs	r2, #0
 800a644:	605a      	str	r2, [r3, #4]
 800a646:	e00f      	b.n	800a668 <_malloc_r+0xb0>
 800a648:	6822      	ldr	r2, [r4, #0]
 800a64a:	1b52      	subs	r2, r2, r5
 800a64c:	d41f      	bmi.n	800a68e <_malloc_r+0xd6>
 800a64e:	2a0b      	cmp	r2, #11
 800a650:	d917      	bls.n	800a682 <_malloc_r+0xca>
 800a652:	1961      	adds	r1, r4, r5
 800a654:	42a3      	cmp	r3, r4
 800a656:	6025      	str	r5, [r4, #0]
 800a658:	bf18      	it	ne
 800a65a:	6059      	strne	r1, [r3, #4]
 800a65c:	6863      	ldr	r3, [r4, #4]
 800a65e:	bf08      	it	eq
 800a660:	f8c8 1000 	streq.w	r1, [r8]
 800a664:	5162      	str	r2, [r4, r5]
 800a666:	604b      	str	r3, [r1, #4]
 800a668:	4638      	mov	r0, r7
 800a66a:	f104 060b 	add.w	r6, r4, #11
 800a66e:	f000 f829 	bl	800a6c4 <__malloc_unlock>
 800a672:	f026 0607 	bic.w	r6, r6, #7
 800a676:	1d23      	adds	r3, r4, #4
 800a678:	1af2      	subs	r2, r6, r3
 800a67a:	d0ae      	beq.n	800a5da <_malloc_r+0x22>
 800a67c:	1b9b      	subs	r3, r3, r6
 800a67e:	50a3      	str	r3, [r4, r2]
 800a680:	e7ab      	b.n	800a5da <_malloc_r+0x22>
 800a682:	42a3      	cmp	r3, r4
 800a684:	6862      	ldr	r2, [r4, #4]
 800a686:	d1dd      	bne.n	800a644 <_malloc_r+0x8c>
 800a688:	f8c8 2000 	str.w	r2, [r8]
 800a68c:	e7ec      	b.n	800a668 <_malloc_r+0xb0>
 800a68e:	4623      	mov	r3, r4
 800a690:	6864      	ldr	r4, [r4, #4]
 800a692:	e7ac      	b.n	800a5ee <_malloc_r+0x36>
 800a694:	4634      	mov	r4, r6
 800a696:	6876      	ldr	r6, [r6, #4]
 800a698:	e7b4      	b.n	800a604 <_malloc_r+0x4c>
 800a69a:	4613      	mov	r3, r2
 800a69c:	e7cc      	b.n	800a638 <_malloc_r+0x80>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	603b      	str	r3, [r7, #0]
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f000 f80e 	bl	800a6c4 <__malloc_unlock>
 800a6a8:	e797      	b.n	800a5da <_malloc_r+0x22>
 800a6aa:	6025      	str	r5, [r4, #0]
 800a6ac:	e7dc      	b.n	800a668 <_malloc_r+0xb0>
 800a6ae:	605b      	str	r3, [r3, #4]
 800a6b0:	deff      	udf	#255	; 0xff
 800a6b2:	bf00      	nop
 800a6b4:	20000e84 	.word	0x20000e84

0800a6b8 <__malloc_lock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	; (800a6c0 <__malloc_lock+0x8>)
 800a6ba:	f7ff bf0e 	b.w	800a4da <__retarget_lock_acquire_recursive>
 800a6be:	bf00      	nop
 800a6c0:	20000e80 	.word	0x20000e80

0800a6c4 <__malloc_unlock>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	; (800a6cc <__malloc_unlock+0x8>)
 800a6c6:	f7ff bf09 	b.w	800a4dc <__retarget_lock_release_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	20000e80 	.word	0x20000e80

0800a6d0 <__ssputs_r>:
 800a6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	688e      	ldr	r6, [r1, #8]
 800a6d6:	461f      	mov	r7, r3
 800a6d8:	42be      	cmp	r6, r7
 800a6da:	680b      	ldr	r3, [r1, #0]
 800a6dc:	4682      	mov	sl, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	4690      	mov	r8, r2
 800a6e2:	d82c      	bhi.n	800a73e <__ssputs_r+0x6e>
 800a6e4:	898a      	ldrh	r2, [r1, #12]
 800a6e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6ea:	d026      	beq.n	800a73a <__ssputs_r+0x6a>
 800a6ec:	6965      	ldr	r5, [r4, #20]
 800a6ee:	6909      	ldr	r1, [r1, #16]
 800a6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6f4:	eba3 0901 	sub.w	r9, r3, r1
 800a6f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6fc:	1c7b      	adds	r3, r7, #1
 800a6fe:	444b      	add	r3, r9
 800a700:	106d      	asrs	r5, r5, #1
 800a702:	429d      	cmp	r5, r3
 800a704:	bf38      	it	cc
 800a706:	461d      	movcc	r5, r3
 800a708:	0553      	lsls	r3, r2, #21
 800a70a:	d527      	bpl.n	800a75c <__ssputs_r+0x8c>
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7ff ff53 	bl	800a5b8 <_malloc_r>
 800a712:	4606      	mov	r6, r0
 800a714:	b360      	cbz	r0, 800a770 <__ssputs_r+0xa0>
 800a716:	6921      	ldr	r1, [r4, #16]
 800a718:	464a      	mov	r2, r9
 800a71a:	f000 fd61 	bl	800b1e0 <memcpy>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	6126      	str	r6, [r4, #16]
 800a72c:	6165      	str	r5, [r4, #20]
 800a72e:	444e      	add	r6, r9
 800a730:	eba5 0509 	sub.w	r5, r5, r9
 800a734:	6026      	str	r6, [r4, #0]
 800a736:	60a5      	str	r5, [r4, #8]
 800a738:	463e      	mov	r6, r7
 800a73a:	42be      	cmp	r6, r7
 800a73c:	d900      	bls.n	800a740 <__ssputs_r+0x70>
 800a73e:	463e      	mov	r6, r7
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	4632      	mov	r2, r6
 800a744:	4641      	mov	r1, r8
 800a746:	f000 fcff 	bl	800b148 <memmove>
 800a74a:	68a3      	ldr	r3, [r4, #8]
 800a74c:	1b9b      	subs	r3, r3, r6
 800a74e:	60a3      	str	r3, [r4, #8]
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	4433      	add	r3, r6
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	2000      	movs	r0, #0
 800a758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75c:	462a      	mov	r2, r5
 800a75e:	f000 fd4d 	bl	800b1fc <_realloc_r>
 800a762:	4606      	mov	r6, r0
 800a764:	2800      	cmp	r0, #0
 800a766:	d1e0      	bne.n	800a72a <__ssputs_r+0x5a>
 800a768:	6921      	ldr	r1, [r4, #16]
 800a76a:	4650      	mov	r0, sl
 800a76c:	f7ff feb8 	bl	800a4e0 <_free_r>
 800a770:	230c      	movs	r3, #12
 800a772:	f8ca 3000 	str.w	r3, [sl]
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a782:	e7e9      	b.n	800a758 <__ssputs_r+0x88>

0800a784 <_svfiprintf_r>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	4698      	mov	r8, r3
 800a78a:	898b      	ldrh	r3, [r1, #12]
 800a78c:	061b      	lsls	r3, r3, #24
 800a78e:	b09d      	sub	sp, #116	; 0x74
 800a790:	4607      	mov	r7, r0
 800a792:	460d      	mov	r5, r1
 800a794:	4614      	mov	r4, r2
 800a796:	d50e      	bpl.n	800a7b6 <_svfiprintf_r+0x32>
 800a798:	690b      	ldr	r3, [r1, #16]
 800a79a:	b963      	cbnz	r3, 800a7b6 <_svfiprintf_r+0x32>
 800a79c:	2140      	movs	r1, #64	; 0x40
 800a79e:	f7ff ff0b 	bl	800a5b8 <_malloc_r>
 800a7a2:	6028      	str	r0, [r5, #0]
 800a7a4:	6128      	str	r0, [r5, #16]
 800a7a6:	b920      	cbnz	r0, 800a7b2 <_svfiprintf_r+0x2e>
 800a7a8:	230c      	movs	r3, #12
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b0:	e0d0      	b.n	800a954 <_svfiprintf_r+0x1d0>
 800a7b2:	2340      	movs	r3, #64	; 0x40
 800a7b4:	616b      	str	r3, [r5, #20]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ba:	2320      	movs	r3, #32
 800a7bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7c4:	2330      	movs	r3, #48	; 0x30
 800a7c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a96c <_svfiprintf_r+0x1e8>
 800a7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ce:	f04f 0901 	mov.w	r9, #1
 800a7d2:	4623      	mov	r3, r4
 800a7d4:	469a      	mov	sl, r3
 800a7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7da:	b10a      	cbz	r2, 800a7e0 <_svfiprintf_r+0x5c>
 800a7dc:	2a25      	cmp	r2, #37	; 0x25
 800a7de:	d1f9      	bne.n	800a7d4 <_svfiprintf_r+0x50>
 800a7e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a7e4:	d00b      	beq.n	800a7fe <_svfiprintf_r+0x7a>
 800a7e6:	465b      	mov	r3, fp
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f7ff ff6f 	bl	800a6d0 <__ssputs_r>
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	f000 80a9 	beq.w	800a94a <_svfiprintf_r+0x1c6>
 800a7f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7fa:	445a      	add	r2, fp
 800a7fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 80a1 	beq.w	800a94a <_svfiprintf_r+0x1c6>
 800a808:	2300      	movs	r3, #0
 800a80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a812:	f10a 0a01 	add.w	sl, sl, #1
 800a816:	9304      	str	r3, [sp, #16]
 800a818:	9307      	str	r3, [sp, #28]
 800a81a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a81e:	931a      	str	r3, [sp, #104]	; 0x68
 800a820:	4654      	mov	r4, sl
 800a822:	2205      	movs	r2, #5
 800a824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a828:	4850      	ldr	r0, [pc, #320]	; (800a96c <_svfiprintf_r+0x1e8>)
 800a82a:	f7f5 fce1 	bl	80001f0 <memchr>
 800a82e:	9a04      	ldr	r2, [sp, #16]
 800a830:	b9d8      	cbnz	r0, 800a86a <_svfiprintf_r+0xe6>
 800a832:	06d0      	lsls	r0, r2, #27
 800a834:	bf44      	itt	mi
 800a836:	2320      	movmi	r3, #32
 800a838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83c:	0711      	lsls	r1, r2, #28
 800a83e:	bf44      	itt	mi
 800a840:	232b      	movmi	r3, #43	; 0x2b
 800a842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a846:	f89a 3000 	ldrb.w	r3, [sl]
 800a84a:	2b2a      	cmp	r3, #42	; 0x2a
 800a84c:	d015      	beq.n	800a87a <_svfiprintf_r+0xf6>
 800a84e:	9a07      	ldr	r2, [sp, #28]
 800a850:	4654      	mov	r4, sl
 800a852:	2000      	movs	r0, #0
 800a854:	f04f 0c0a 	mov.w	ip, #10
 800a858:	4621      	mov	r1, r4
 800a85a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a85e:	3b30      	subs	r3, #48	; 0x30
 800a860:	2b09      	cmp	r3, #9
 800a862:	d94d      	bls.n	800a900 <_svfiprintf_r+0x17c>
 800a864:	b1b0      	cbz	r0, 800a894 <_svfiprintf_r+0x110>
 800a866:	9207      	str	r2, [sp, #28]
 800a868:	e014      	b.n	800a894 <_svfiprintf_r+0x110>
 800a86a:	eba0 0308 	sub.w	r3, r0, r8
 800a86e:	fa09 f303 	lsl.w	r3, r9, r3
 800a872:	4313      	orrs	r3, r2
 800a874:	9304      	str	r3, [sp, #16]
 800a876:	46a2      	mov	sl, r4
 800a878:	e7d2      	b.n	800a820 <_svfiprintf_r+0x9c>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	1d19      	adds	r1, r3, #4
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	9103      	str	r1, [sp, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	bfbb      	ittet	lt
 800a886:	425b      	neglt	r3, r3
 800a888:	f042 0202 	orrlt.w	r2, r2, #2
 800a88c:	9307      	strge	r3, [sp, #28]
 800a88e:	9307      	strlt	r3, [sp, #28]
 800a890:	bfb8      	it	lt
 800a892:	9204      	strlt	r2, [sp, #16]
 800a894:	7823      	ldrb	r3, [r4, #0]
 800a896:	2b2e      	cmp	r3, #46	; 0x2e
 800a898:	d10c      	bne.n	800a8b4 <_svfiprintf_r+0x130>
 800a89a:	7863      	ldrb	r3, [r4, #1]
 800a89c:	2b2a      	cmp	r3, #42	; 0x2a
 800a89e:	d134      	bne.n	800a90a <_svfiprintf_r+0x186>
 800a8a0:	9b03      	ldr	r3, [sp, #12]
 800a8a2:	1d1a      	adds	r2, r3, #4
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	9203      	str	r2, [sp, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	bfb8      	it	lt
 800a8ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a8b0:	3402      	adds	r4, #2
 800a8b2:	9305      	str	r3, [sp, #20]
 800a8b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a97c <_svfiprintf_r+0x1f8>
 800a8b8:	7821      	ldrb	r1, [r4, #0]
 800a8ba:	2203      	movs	r2, #3
 800a8bc:	4650      	mov	r0, sl
 800a8be:	f7f5 fc97 	bl	80001f0 <memchr>
 800a8c2:	b138      	cbz	r0, 800a8d4 <_svfiprintf_r+0x150>
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	eba0 000a 	sub.w	r0, r0, sl
 800a8ca:	2240      	movs	r2, #64	; 0x40
 800a8cc:	4082      	lsls	r2, r0
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	3401      	adds	r4, #1
 800a8d2:	9304      	str	r3, [sp, #16]
 800a8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d8:	4825      	ldr	r0, [pc, #148]	; (800a970 <_svfiprintf_r+0x1ec>)
 800a8da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8de:	2206      	movs	r2, #6
 800a8e0:	f7f5 fc86 	bl	80001f0 <memchr>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d038      	beq.n	800a95a <_svfiprintf_r+0x1d6>
 800a8e8:	4b22      	ldr	r3, [pc, #136]	; (800a974 <_svfiprintf_r+0x1f0>)
 800a8ea:	bb1b      	cbnz	r3, 800a934 <_svfiprintf_r+0x1b0>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	3307      	adds	r3, #7
 800a8f0:	f023 0307 	bic.w	r3, r3, #7
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	9303      	str	r3, [sp, #12]
 800a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8fa:	4433      	add	r3, r6
 800a8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fe:	e768      	b.n	800a7d2 <_svfiprintf_r+0x4e>
 800a900:	fb0c 3202 	mla	r2, ip, r2, r3
 800a904:	460c      	mov	r4, r1
 800a906:	2001      	movs	r0, #1
 800a908:	e7a6      	b.n	800a858 <_svfiprintf_r+0xd4>
 800a90a:	2300      	movs	r3, #0
 800a90c:	3401      	adds	r4, #1
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	4619      	mov	r1, r3
 800a912:	f04f 0c0a 	mov.w	ip, #10
 800a916:	4620      	mov	r0, r4
 800a918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a91c:	3a30      	subs	r2, #48	; 0x30
 800a91e:	2a09      	cmp	r2, #9
 800a920:	d903      	bls.n	800a92a <_svfiprintf_r+0x1a6>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0c6      	beq.n	800a8b4 <_svfiprintf_r+0x130>
 800a926:	9105      	str	r1, [sp, #20]
 800a928:	e7c4      	b.n	800a8b4 <_svfiprintf_r+0x130>
 800a92a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a92e:	4604      	mov	r4, r0
 800a930:	2301      	movs	r3, #1
 800a932:	e7f0      	b.n	800a916 <_svfiprintf_r+0x192>
 800a934:	ab03      	add	r3, sp, #12
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	462a      	mov	r2, r5
 800a93a:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <_svfiprintf_r+0x1f4>)
 800a93c:	a904      	add	r1, sp, #16
 800a93e:	4638      	mov	r0, r7
 800a940:	f3af 8000 	nop.w
 800a944:	1c42      	adds	r2, r0, #1
 800a946:	4606      	mov	r6, r0
 800a948:	d1d6      	bne.n	800a8f8 <_svfiprintf_r+0x174>
 800a94a:	89ab      	ldrh	r3, [r5, #12]
 800a94c:	065b      	lsls	r3, r3, #25
 800a94e:	f53f af2d 	bmi.w	800a7ac <_svfiprintf_r+0x28>
 800a952:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a954:	b01d      	add	sp, #116	; 0x74
 800a956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95a:	ab03      	add	r3, sp, #12
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	462a      	mov	r2, r5
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <_svfiprintf_r+0x1f4>)
 800a962:	a904      	add	r1, sp, #16
 800a964:	4638      	mov	r0, r7
 800a966:	f000 f9bd 	bl	800ace4 <_printf_i>
 800a96a:	e7eb      	b.n	800a944 <_svfiprintf_r+0x1c0>
 800a96c:	0800be60 	.word	0x0800be60
 800a970:	0800be6a 	.word	0x0800be6a
 800a974:	00000000 	.word	0x00000000
 800a978:	0800a6d1 	.word	0x0800a6d1
 800a97c:	0800be66 	.word	0x0800be66

0800a980 <__sfputc_r>:
 800a980:	6893      	ldr	r3, [r2, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	b410      	push	{r4}
 800a988:	6093      	str	r3, [r2, #8]
 800a98a:	da08      	bge.n	800a99e <__sfputc_r+0x1e>
 800a98c:	6994      	ldr	r4, [r2, #24]
 800a98e:	42a3      	cmp	r3, r4
 800a990:	db01      	blt.n	800a996 <__sfputc_r+0x16>
 800a992:	290a      	cmp	r1, #10
 800a994:	d103      	bne.n	800a99e <__sfputc_r+0x1e>
 800a996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a99a:	f7ff bc8f 	b.w	800a2bc <__swbuf_r>
 800a99e:	6813      	ldr	r3, [r2, #0]
 800a9a0:	1c58      	adds	r0, r3, #1
 800a9a2:	6010      	str	r0, [r2, #0]
 800a9a4:	7019      	strb	r1, [r3, #0]
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <__sfputs_r>:
 800a9ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	18d5      	adds	r5, r2, r3
 800a9b8:	42ac      	cmp	r4, r5
 800a9ba:	d101      	bne.n	800a9c0 <__sfputs_r+0x12>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	e007      	b.n	800a9d0 <__sfputs_r+0x22>
 800a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c4:	463a      	mov	r2, r7
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7ff ffda 	bl	800a980 <__sfputc_r>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d1f3      	bne.n	800a9b8 <__sfputs_r+0xa>
 800a9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d4 <_vfiprintf_r>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	460d      	mov	r5, r1
 800a9da:	b09d      	sub	sp, #116	; 0x74
 800a9dc:	4614      	mov	r4, r2
 800a9de:	4698      	mov	r8, r3
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	b118      	cbz	r0, 800a9ec <_vfiprintf_r+0x18>
 800a9e4:	6a03      	ldr	r3, [r0, #32]
 800a9e6:	b90b      	cbnz	r3, 800a9ec <_vfiprintf_r+0x18>
 800a9e8:	f7ff fb48 	bl	800a07c <__sinit>
 800a9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x2a>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x2a>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fa:	f7ff fd6e 	bl	800a4da <__retarget_lock_acquire_recursive>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	071b      	lsls	r3, r3, #28
 800aa02:	d501      	bpl.n	800aa08 <_vfiprintf_r+0x34>
 800aa04:	692b      	ldr	r3, [r5, #16]
 800aa06:	b99b      	cbnz	r3, 800aa30 <_vfiprintf_r+0x5c>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff fc94 	bl	800a338 <__swsetup_r>
 800aa10:	b170      	cbz	r0, 800aa30 <_vfiprintf_r+0x5c>
 800aa12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa14:	07dc      	lsls	r4, r3, #31
 800aa16:	d504      	bpl.n	800aa22 <_vfiprintf_r+0x4e>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa1c:	b01d      	add	sp, #116	; 0x74
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	89ab      	ldrh	r3, [r5, #12]
 800aa24:	0598      	lsls	r0, r3, #22
 800aa26:	d4f7      	bmi.n	800aa18 <_vfiprintf_r+0x44>
 800aa28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa2a:	f7ff fd57 	bl	800a4dc <__retarget_lock_release_recursive>
 800aa2e:	e7f3      	b.n	800aa18 <_vfiprintf_r+0x44>
 800aa30:	2300      	movs	r3, #0
 800aa32:	9309      	str	r3, [sp, #36]	; 0x24
 800aa34:	2320      	movs	r3, #32
 800aa36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3e:	2330      	movs	r3, #48	; 0x30
 800aa40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800abf4 <_vfiprintf_r+0x220>
 800aa44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa48:	f04f 0901 	mov.w	r9, #1
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	469a      	mov	sl, r3
 800aa50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa54:	b10a      	cbz	r2, 800aa5a <_vfiprintf_r+0x86>
 800aa56:	2a25      	cmp	r2, #37	; 0x25
 800aa58:	d1f9      	bne.n	800aa4e <_vfiprintf_r+0x7a>
 800aa5a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5e:	d00b      	beq.n	800aa78 <_vfiprintf_r+0xa4>
 800aa60:	465b      	mov	r3, fp
 800aa62:	4622      	mov	r2, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7ff ffa1 	bl	800a9ae <__sfputs_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	f000 80a9 	beq.w	800abc4 <_vfiprintf_r+0x1f0>
 800aa72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa74:	445a      	add	r2, fp
 800aa76:	9209      	str	r2, [sp, #36]	; 0x24
 800aa78:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80a1 	beq.w	800abc4 <_vfiprintf_r+0x1f0>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa8c:	f10a 0a01 	add.w	sl, sl, #1
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	9307      	str	r3, [sp, #28]
 800aa94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa98:	931a      	str	r3, [sp, #104]	; 0x68
 800aa9a:	4654      	mov	r4, sl
 800aa9c:	2205      	movs	r2, #5
 800aa9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa2:	4854      	ldr	r0, [pc, #336]	; (800abf4 <_vfiprintf_r+0x220>)
 800aaa4:	f7f5 fba4 	bl	80001f0 <memchr>
 800aaa8:	9a04      	ldr	r2, [sp, #16]
 800aaaa:	b9d8      	cbnz	r0, 800aae4 <_vfiprintf_r+0x110>
 800aaac:	06d1      	lsls	r1, r2, #27
 800aaae:	bf44      	itt	mi
 800aab0:	2320      	movmi	r3, #32
 800aab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab6:	0713      	lsls	r3, r2, #28
 800aab8:	bf44      	itt	mi
 800aaba:	232b      	movmi	r3, #43	; 0x2b
 800aabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac0:	f89a 3000 	ldrb.w	r3, [sl]
 800aac4:	2b2a      	cmp	r3, #42	; 0x2a
 800aac6:	d015      	beq.n	800aaf4 <_vfiprintf_r+0x120>
 800aac8:	9a07      	ldr	r2, [sp, #28]
 800aaca:	4654      	mov	r4, sl
 800aacc:	2000      	movs	r0, #0
 800aace:	f04f 0c0a 	mov.w	ip, #10
 800aad2:	4621      	mov	r1, r4
 800aad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad8:	3b30      	subs	r3, #48	; 0x30
 800aada:	2b09      	cmp	r3, #9
 800aadc:	d94d      	bls.n	800ab7a <_vfiprintf_r+0x1a6>
 800aade:	b1b0      	cbz	r0, 800ab0e <_vfiprintf_r+0x13a>
 800aae0:	9207      	str	r2, [sp, #28]
 800aae2:	e014      	b.n	800ab0e <_vfiprintf_r+0x13a>
 800aae4:	eba0 0308 	sub.w	r3, r0, r8
 800aae8:	fa09 f303 	lsl.w	r3, r9, r3
 800aaec:	4313      	orrs	r3, r2
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	46a2      	mov	sl, r4
 800aaf2:	e7d2      	b.n	800aa9a <_vfiprintf_r+0xc6>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	1d19      	adds	r1, r3, #4
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	9103      	str	r1, [sp, #12]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfbb      	ittet	lt
 800ab00:	425b      	neglt	r3, r3
 800ab02:	f042 0202 	orrlt.w	r2, r2, #2
 800ab06:	9307      	strge	r3, [sp, #28]
 800ab08:	9307      	strlt	r3, [sp, #28]
 800ab0a:	bfb8      	it	lt
 800ab0c:	9204      	strlt	r2, [sp, #16]
 800ab0e:	7823      	ldrb	r3, [r4, #0]
 800ab10:	2b2e      	cmp	r3, #46	; 0x2e
 800ab12:	d10c      	bne.n	800ab2e <_vfiprintf_r+0x15a>
 800ab14:	7863      	ldrb	r3, [r4, #1]
 800ab16:	2b2a      	cmp	r3, #42	; 0x2a
 800ab18:	d134      	bne.n	800ab84 <_vfiprintf_r+0x1b0>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	1d1a      	adds	r2, r3, #4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	9203      	str	r2, [sp, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	bfb8      	it	lt
 800ab26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab2a:	3402      	adds	r4, #2
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ac04 <_vfiprintf_r+0x230>
 800ab32:	7821      	ldrb	r1, [r4, #0]
 800ab34:	2203      	movs	r2, #3
 800ab36:	4650      	mov	r0, sl
 800ab38:	f7f5 fb5a 	bl	80001f0 <memchr>
 800ab3c:	b138      	cbz	r0, 800ab4e <_vfiprintf_r+0x17a>
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	eba0 000a 	sub.w	r0, r0, sl
 800ab44:	2240      	movs	r2, #64	; 0x40
 800ab46:	4082      	lsls	r2, r0
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab52:	4829      	ldr	r0, [pc, #164]	; (800abf8 <_vfiprintf_r+0x224>)
 800ab54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab58:	2206      	movs	r2, #6
 800ab5a:	f7f5 fb49 	bl	80001f0 <memchr>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d03f      	beq.n	800abe2 <_vfiprintf_r+0x20e>
 800ab62:	4b26      	ldr	r3, [pc, #152]	; (800abfc <_vfiprintf_r+0x228>)
 800ab64:	bb1b      	cbnz	r3, 800abae <_vfiprintf_r+0x1da>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	3307      	adds	r3, #7
 800ab6a:	f023 0307 	bic.w	r3, r3, #7
 800ab6e:	3308      	adds	r3, #8
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab74:	443b      	add	r3, r7
 800ab76:	9309      	str	r3, [sp, #36]	; 0x24
 800ab78:	e768      	b.n	800aa4c <_vfiprintf_r+0x78>
 800ab7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7e:	460c      	mov	r4, r1
 800ab80:	2001      	movs	r0, #1
 800ab82:	e7a6      	b.n	800aad2 <_vfiprintf_r+0xfe>
 800ab84:	2300      	movs	r3, #0
 800ab86:	3401      	adds	r4, #1
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f04f 0c0a 	mov.w	ip, #10
 800ab90:	4620      	mov	r0, r4
 800ab92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab96:	3a30      	subs	r2, #48	; 0x30
 800ab98:	2a09      	cmp	r2, #9
 800ab9a:	d903      	bls.n	800aba4 <_vfiprintf_r+0x1d0>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0c6      	beq.n	800ab2e <_vfiprintf_r+0x15a>
 800aba0:	9105      	str	r1, [sp, #20]
 800aba2:	e7c4      	b.n	800ab2e <_vfiprintf_r+0x15a>
 800aba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba8:	4604      	mov	r4, r0
 800abaa:	2301      	movs	r3, #1
 800abac:	e7f0      	b.n	800ab90 <_vfiprintf_r+0x1bc>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b12      	ldr	r3, [pc, #72]	; (800ac00 <_vfiprintf_r+0x22c>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4630      	mov	r0, r6
 800abba:	f3af 8000 	nop.w
 800abbe:	4607      	mov	r7, r0
 800abc0:	1c78      	adds	r0, r7, #1
 800abc2:	d1d6      	bne.n	800ab72 <_vfiprintf_r+0x19e>
 800abc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x202>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x202>
 800abd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd2:	f7ff fc83 	bl	800a4dc <__retarget_lock_release_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	065b      	lsls	r3, r3, #25
 800abda:	f53f af1d 	bmi.w	800aa18 <_vfiprintf_r+0x44>
 800abde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abe0:	e71c      	b.n	800aa1c <_vfiprintf_r+0x48>
 800abe2:	ab03      	add	r3, sp, #12
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	462a      	mov	r2, r5
 800abe8:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <_vfiprintf_r+0x22c>)
 800abea:	a904      	add	r1, sp, #16
 800abec:	4630      	mov	r0, r6
 800abee:	f000 f879 	bl	800ace4 <_printf_i>
 800abf2:	e7e4      	b.n	800abbe <_vfiprintf_r+0x1ea>
 800abf4:	0800be60 	.word	0x0800be60
 800abf8:	0800be6a 	.word	0x0800be6a
 800abfc:	00000000 	.word	0x00000000
 800ac00:	0800a9af 	.word	0x0800a9af
 800ac04:	0800be66 	.word	0x0800be66

0800ac08 <_printf_common>:
 800ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	4616      	mov	r6, r2
 800ac0e:	4699      	mov	r9, r3
 800ac10:	688a      	ldr	r2, [r1, #8]
 800ac12:	690b      	ldr	r3, [r1, #16]
 800ac14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	bfb8      	it	lt
 800ac1c:	4613      	movlt	r3, r2
 800ac1e:	6033      	str	r3, [r6, #0]
 800ac20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac24:	4607      	mov	r7, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	b10a      	cbz	r2, 800ac2e <_printf_common+0x26>
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	0699      	lsls	r1, r3, #26
 800ac32:	bf42      	ittt	mi
 800ac34:	6833      	ldrmi	r3, [r6, #0]
 800ac36:	3302      	addmi	r3, #2
 800ac38:	6033      	strmi	r3, [r6, #0]
 800ac3a:	6825      	ldr	r5, [r4, #0]
 800ac3c:	f015 0506 	ands.w	r5, r5, #6
 800ac40:	d106      	bne.n	800ac50 <_printf_common+0x48>
 800ac42:	f104 0a19 	add.w	sl, r4, #25
 800ac46:	68e3      	ldr	r3, [r4, #12]
 800ac48:	6832      	ldr	r2, [r6, #0]
 800ac4a:	1a9b      	subs	r3, r3, r2
 800ac4c:	42ab      	cmp	r3, r5
 800ac4e:	dc26      	bgt.n	800ac9e <_printf_common+0x96>
 800ac50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac54:	1e13      	subs	r3, r2, #0
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	bf18      	it	ne
 800ac5a:	2301      	movne	r3, #1
 800ac5c:	0692      	lsls	r2, r2, #26
 800ac5e:	d42b      	bmi.n	800acb8 <_printf_common+0xb0>
 800ac60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac64:	4649      	mov	r1, r9
 800ac66:	4638      	mov	r0, r7
 800ac68:	47c0      	blx	r8
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	d01e      	beq.n	800acac <_printf_common+0xa4>
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	f003 0306 	and.w	r3, r3, #6
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	bf02      	ittt	eq
 800ac7a:	68e5      	ldreq	r5, [r4, #12]
 800ac7c:	6833      	ldreq	r3, [r6, #0]
 800ac7e:	1aed      	subeq	r5, r5, r3
 800ac80:	68a3      	ldr	r3, [r4, #8]
 800ac82:	bf0c      	ite	eq
 800ac84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac88:	2500      	movne	r5, #0
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	bfc4      	itt	gt
 800ac8e:	1a9b      	subgt	r3, r3, r2
 800ac90:	18ed      	addgt	r5, r5, r3
 800ac92:	2600      	movs	r6, #0
 800ac94:	341a      	adds	r4, #26
 800ac96:	42b5      	cmp	r5, r6
 800ac98:	d11a      	bne.n	800acd0 <_printf_common+0xc8>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e008      	b.n	800acb0 <_printf_common+0xa8>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4652      	mov	r2, sl
 800aca2:	4649      	mov	r1, r9
 800aca4:	4638      	mov	r0, r7
 800aca6:	47c0      	blx	r8
 800aca8:	3001      	adds	r0, #1
 800acaa:	d103      	bne.n	800acb4 <_printf_common+0xac>
 800acac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb4:	3501      	adds	r5, #1
 800acb6:	e7c6      	b.n	800ac46 <_printf_common+0x3e>
 800acb8:	18e1      	adds	r1, r4, r3
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	2030      	movs	r0, #48	; 0x30
 800acbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acc2:	4422      	add	r2, r4
 800acc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800accc:	3302      	adds	r3, #2
 800acce:	e7c7      	b.n	800ac60 <_printf_common+0x58>
 800acd0:	2301      	movs	r3, #1
 800acd2:	4622      	mov	r2, r4
 800acd4:	4649      	mov	r1, r9
 800acd6:	4638      	mov	r0, r7
 800acd8:	47c0      	blx	r8
 800acda:	3001      	adds	r0, #1
 800acdc:	d0e6      	beq.n	800acac <_printf_common+0xa4>
 800acde:	3601      	adds	r6, #1
 800ace0:	e7d9      	b.n	800ac96 <_printf_common+0x8e>
	...

0800ace4 <_printf_i>:
 800ace4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ace8:	7e0f      	ldrb	r7, [r1, #24]
 800acea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acec:	2f78      	cmp	r7, #120	; 0x78
 800acee:	4691      	mov	r9, r2
 800acf0:	4680      	mov	r8, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	469a      	mov	sl, r3
 800acf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acfa:	d807      	bhi.n	800ad0c <_printf_i+0x28>
 800acfc:	2f62      	cmp	r7, #98	; 0x62
 800acfe:	d80a      	bhi.n	800ad16 <_printf_i+0x32>
 800ad00:	2f00      	cmp	r7, #0
 800ad02:	f000 80d4 	beq.w	800aeae <_printf_i+0x1ca>
 800ad06:	2f58      	cmp	r7, #88	; 0x58
 800ad08:	f000 80c0 	beq.w	800ae8c <_printf_i+0x1a8>
 800ad0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad14:	e03a      	b.n	800ad8c <_printf_i+0xa8>
 800ad16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad1a:	2b15      	cmp	r3, #21
 800ad1c:	d8f6      	bhi.n	800ad0c <_printf_i+0x28>
 800ad1e:	a101      	add	r1, pc, #4	; (adr r1, 800ad24 <_printf_i+0x40>)
 800ad20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad24:	0800ad7d 	.word	0x0800ad7d
 800ad28:	0800ad91 	.word	0x0800ad91
 800ad2c:	0800ad0d 	.word	0x0800ad0d
 800ad30:	0800ad0d 	.word	0x0800ad0d
 800ad34:	0800ad0d 	.word	0x0800ad0d
 800ad38:	0800ad0d 	.word	0x0800ad0d
 800ad3c:	0800ad91 	.word	0x0800ad91
 800ad40:	0800ad0d 	.word	0x0800ad0d
 800ad44:	0800ad0d 	.word	0x0800ad0d
 800ad48:	0800ad0d 	.word	0x0800ad0d
 800ad4c:	0800ad0d 	.word	0x0800ad0d
 800ad50:	0800ae95 	.word	0x0800ae95
 800ad54:	0800adbd 	.word	0x0800adbd
 800ad58:	0800ae4f 	.word	0x0800ae4f
 800ad5c:	0800ad0d 	.word	0x0800ad0d
 800ad60:	0800ad0d 	.word	0x0800ad0d
 800ad64:	0800aeb7 	.word	0x0800aeb7
 800ad68:	0800ad0d 	.word	0x0800ad0d
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800ad0d 	.word	0x0800ad0d
 800ad74:	0800ad0d 	.word	0x0800ad0d
 800ad78:	0800ae57 	.word	0x0800ae57
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	1d1a      	adds	r2, r3, #4
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	602a      	str	r2, [r5, #0]
 800ad84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e09f      	b.n	800aed0 <_printf_i+0x1ec>
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	0607      	lsls	r7, r0, #24
 800ad96:	f103 0104 	add.w	r1, r3, #4
 800ad9a:	6029      	str	r1, [r5, #0]
 800ad9c:	d501      	bpl.n	800ada2 <_printf_i+0xbe>
 800ad9e:	681e      	ldr	r6, [r3, #0]
 800ada0:	e003      	b.n	800adaa <_printf_i+0xc6>
 800ada2:	0646      	lsls	r6, r0, #25
 800ada4:	d5fb      	bpl.n	800ad9e <_printf_i+0xba>
 800ada6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800adaa:	2e00      	cmp	r6, #0
 800adac:	da03      	bge.n	800adb6 <_printf_i+0xd2>
 800adae:	232d      	movs	r3, #45	; 0x2d
 800adb0:	4276      	negs	r6, r6
 800adb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb6:	485a      	ldr	r0, [pc, #360]	; (800af20 <_printf_i+0x23c>)
 800adb8:	230a      	movs	r3, #10
 800adba:	e012      	b.n	800ade2 <_printf_i+0xfe>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	6820      	ldr	r0, [r4, #0]
 800adc0:	1d19      	adds	r1, r3, #4
 800adc2:	6029      	str	r1, [r5, #0]
 800adc4:	0605      	lsls	r5, r0, #24
 800adc6:	d501      	bpl.n	800adcc <_printf_i+0xe8>
 800adc8:	681e      	ldr	r6, [r3, #0]
 800adca:	e002      	b.n	800add2 <_printf_i+0xee>
 800adcc:	0641      	lsls	r1, r0, #25
 800adce:	d5fb      	bpl.n	800adc8 <_printf_i+0xe4>
 800add0:	881e      	ldrh	r6, [r3, #0]
 800add2:	4853      	ldr	r0, [pc, #332]	; (800af20 <_printf_i+0x23c>)
 800add4:	2f6f      	cmp	r7, #111	; 0x6f
 800add6:	bf0c      	ite	eq
 800add8:	2308      	moveq	r3, #8
 800adda:	230a      	movne	r3, #10
 800addc:	2100      	movs	r1, #0
 800adde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ade2:	6865      	ldr	r5, [r4, #4]
 800ade4:	60a5      	str	r5, [r4, #8]
 800ade6:	2d00      	cmp	r5, #0
 800ade8:	bfa2      	ittt	ge
 800adea:	6821      	ldrge	r1, [r4, #0]
 800adec:	f021 0104 	bicge.w	r1, r1, #4
 800adf0:	6021      	strge	r1, [r4, #0]
 800adf2:	b90e      	cbnz	r6, 800adf8 <_printf_i+0x114>
 800adf4:	2d00      	cmp	r5, #0
 800adf6:	d04b      	beq.n	800ae90 <_printf_i+0x1ac>
 800adf8:	4615      	mov	r5, r2
 800adfa:	fbb6 f1f3 	udiv	r1, r6, r3
 800adfe:	fb03 6711 	mls	r7, r3, r1, r6
 800ae02:	5dc7      	ldrb	r7, [r0, r7]
 800ae04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae08:	4637      	mov	r7, r6
 800ae0a:	42bb      	cmp	r3, r7
 800ae0c:	460e      	mov	r6, r1
 800ae0e:	d9f4      	bls.n	800adfa <_printf_i+0x116>
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d10b      	bne.n	800ae2c <_printf_i+0x148>
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	07de      	lsls	r6, r3, #31
 800ae18:	d508      	bpl.n	800ae2c <_printf_i+0x148>
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	6861      	ldr	r1, [r4, #4]
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	bfde      	ittt	le
 800ae22:	2330      	movle	r3, #48	; 0x30
 800ae24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae2c:	1b52      	subs	r2, r2, r5
 800ae2e:	6122      	str	r2, [r4, #16]
 800ae30:	f8cd a000 	str.w	sl, [sp]
 800ae34:	464b      	mov	r3, r9
 800ae36:	aa03      	add	r2, sp, #12
 800ae38:	4621      	mov	r1, r4
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	f7ff fee4 	bl	800ac08 <_printf_common>
 800ae40:	3001      	adds	r0, #1
 800ae42:	d14a      	bne.n	800aeda <_printf_i+0x1f6>
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae48:	b004      	add	sp, #16
 800ae4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	f043 0320 	orr.w	r3, r3, #32
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	4833      	ldr	r0, [pc, #204]	; (800af24 <_printf_i+0x240>)
 800ae58:	2778      	movs	r7, #120	; 0x78
 800ae5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	6829      	ldr	r1, [r5, #0]
 800ae62:	061f      	lsls	r7, r3, #24
 800ae64:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae68:	d402      	bmi.n	800ae70 <_printf_i+0x18c>
 800ae6a:	065f      	lsls	r7, r3, #25
 800ae6c:	bf48      	it	mi
 800ae6e:	b2b6      	uxthmi	r6, r6
 800ae70:	07df      	lsls	r7, r3, #31
 800ae72:	bf48      	it	mi
 800ae74:	f043 0320 	orrmi.w	r3, r3, #32
 800ae78:	6029      	str	r1, [r5, #0]
 800ae7a:	bf48      	it	mi
 800ae7c:	6023      	strmi	r3, [r4, #0]
 800ae7e:	b91e      	cbnz	r6, 800ae88 <_printf_i+0x1a4>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	f023 0320 	bic.w	r3, r3, #32
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	2310      	movs	r3, #16
 800ae8a:	e7a7      	b.n	800addc <_printf_i+0xf8>
 800ae8c:	4824      	ldr	r0, [pc, #144]	; (800af20 <_printf_i+0x23c>)
 800ae8e:	e7e4      	b.n	800ae5a <_printf_i+0x176>
 800ae90:	4615      	mov	r5, r2
 800ae92:	e7bd      	b.n	800ae10 <_printf_i+0x12c>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	6826      	ldr	r6, [r4, #0]
 800ae98:	6961      	ldr	r1, [r4, #20]
 800ae9a:	1d18      	adds	r0, r3, #4
 800ae9c:	6028      	str	r0, [r5, #0]
 800ae9e:	0635      	lsls	r5, r6, #24
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	d501      	bpl.n	800aea8 <_printf_i+0x1c4>
 800aea4:	6019      	str	r1, [r3, #0]
 800aea6:	e002      	b.n	800aeae <_printf_i+0x1ca>
 800aea8:	0670      	lsls	r0, r6, #25
 800aeaa:	d5fb      	bpl.n	800aea4 <_printf_i+0x1c0>
 800aeac:	8019      	strh	r1, [r3, #0]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	6123      	str	r3, [r4, #16]
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	e7bc      	b.n	800ae30 <_printf_i+0x14c>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	1d1a      	adds	r2, r3, #4
 800aeba:	602a      	str	r2, [r5, #0]
 800aebc:	681d      	ldr	r5, [r3, #0]
 800aebe:	6862      	ldr	r2, [r4, #4]
 800aec0:	2100      	movs	r1, #0
 800aec2:	4628      	mov	r0, r5
 800aec4:	f7f5 f994 	bl	80001f0 <memchr>
 800aec8:	b108      	cbz	r0, 800aece <_printf_i+0x1ea>
 800aeca:	1b40      	subs	r0, r0, r5
 800aecc:	6060      	str	r0, [r4, #4]
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	6123      	str	r3, [r4, #16]
 800aed2:	2300      	movs	r3, #0
 800aed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aed8:	e7aa      	b.n	800ae30 <_printf_i+0x14c>
 800aeda:	6923      	ldr	r3, [r4, #16]
 800aedc:	462a      	mov	r2, r5
 800aede:	4649      	mov	r1, r9
 800aee0:	4640      	mov	r0, r8
 800aee2:	47d0      	blx	sl
 800aee4:	3001      	adds	r0, #1
 800aee6:	d0ad      	beq.n	800ae44 <_printf_i+0x160>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	079b      	lsls	r3, r3, #30
 800aeec:	d413      	bmi.n	800af16 <_printf_i+0x232>
 800aeee:	68e0      	ldr	r0, [r4, #12]
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	4298      	cmp	r0, r3
 800aef4:	bfb8      	it	lt
 800aef6:	4618      	movlt	r0, r3
 800aef8:	e7a6      	b.n	800ae48 <_printf_i+0x164>
 800aefa:	2301      	movs	r3, #1
 800aefc:	4632      	mov	r2, r6
 800aefe:	4649      	mov	r1, r9
 800af00:	4640      	mov	r0, r8
 800af02:	47d0      	blx	sl
 800af04:	3001      	adds	r0, #1
 800af06:	d09d      	beq.n	800ae44 <_printf_i+0x160>
 800af08:	3501      	adds	r5, #1
 800af0a:	68e3      	ldr	r3, [r4, #12]
 800af0c:	9903      	ldr	r1, [sp, #12]
 800af0e:	1a5b      	subs	r3, r3, r1
 800af10:	42ab      	cmp	r3, r5
 800af12:	dcf2      	bgt.n	800aefa <_printf_i+0x216>
 800af14:	e7eb      	b.n	800aeee <_printf_i+0x20a>
 800af16:	2500      	movs	r5, #0
 800af18:	f104 0619 	add.w	r6, r4, #25
 800af1c:	e7f5      	b.n	800af0a <_printf_i+0x226>
 800af1e:	bf00      	nop
 800af20:	0800be71 	.word	0x0800be71
 800af24:	0800be82 	.word	0x0800be82

0800af28 <__sflush_r>:
 800af28:	898a      	ldrh	r2, [r1, #12]
 800af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	4605      	mov	r5, r0
 800af30:	0710      	lsls	r0, r2, #28
 800af32:	460c      	mov	r4, r1
 800af34:	d458      	bmi.n	800afe8 <__sflush_r+0xc0>
 800af36:	684b      	ldr	r3, [r1, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dc05      	bgt.n	800af48 <__sflush_r+0x20>
 800af3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dc02      	bgt.n	800af48 <__sflush_r+0x20>
 800af42:	2000      	movs	r0, #0
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	d0f9      	beq.n	800af42 <__sflush_r+0x1a>
 800af4e:	2300      	movs	r3, #0
 800af50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af54:	682f      	ldr	r7, [r5, #0]
 800af56:	6a21      	ldr	r1, [r4, #32]
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	d032      	beq.n	800afc2 <__sflush_r+0x9a>
 800af5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	075a      	lsls	r2, r3, #29
 800af62:	d505      	bpl.n	800af70 <__sflush_r+0x48>
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	1ac0      	subs	r0, r0, r3
 800af68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af6a:	b10b      	cbz	r3, 800af70 <__sflush_r+0x48>
 800af6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af6e:	1ac0      	subs	r0, r0, r3
 800af70:	2300      	movs	r3, #0
 800af72:	4602      	mov	r2, r0
 800af74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af76:	6a21      	ldr	r1, [r4, #32]
 800af78:	4628      	mov	r0, r5
 800af7a:	47b0      	blx	r6
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	d106      	bne.n	800af90 <__sflush_r+0x68>
 800af82:	6829      	ldr	r1, [r5, #0]
 800af84:	291d      	cmp	r1, #29
 800af86:	d82b      	bhi.n	800afe0 <__sflush_r+0xb8>
 800af88:	4a29      	ldr	r2, [pc, #164]	; (800b030 <__sflush_r+0x108>)
 800af8a:	410a      	asrs	r2, r1
 800af8c:	07d6      	lsls	r6, r2, #31
 800af8e:	d427      	bmi.n	800afe0 <__sflush_r+0xb8>
 800af90:	2200      	movs	r2, #0
 800af92:	6062      	str	r2, [r4, #4]
 800af94:	04d9      	lsls	r1, r3, #19
 800af96:	6922      	ldr	r2, [r4, #16]
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	d504      	bpl.n	800afa6 <__sflush_r+0x7e>
 800af9c:	1c42      	adds	r2, r0, #1
 800af9e:	d101      	bne.n	800afa4 <__sflush_r+0x7c>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b903      	cbnz	r3, 800afa6 <__sflush_r+0x7e>
 800afa4:	6560      	str	r0, [r4, #84]	; 0x54
 800afa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa8:	602f      	str	r7, [r5, #0]
 800afaa:	2900      	cmp	r1, #0
 800afac:	d0c9      	beq.n	800af42 <__sflush_r+0x1a>
 800afae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb2:	4299      	cmp	r1, r3
 800afb4:	d002      	beq.n	800afbc <__sflush_r+0x94>
 800afb6:	4628      	mov	r0, r5
 800afb8:	f7ff fa92 	bl	800a4e0 <_free_r>
 800afbc:	2000      	movs	r0, #0
 800afbe:	6360      	str	r0, [r4, #52]	; 0x34
 800afc0:	e7c0      	b.n	800af44 <__sflush_r+0x1c>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b0      	blx	r6
 800afc8:	1c41      	adds	r1, r0, #1
 800afca:	d1c8      	bne.n	800af5e <__sflush_r+0x36>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0c5      	beq.n	800af5e <__sflush_r+0x36>
 800afd2:	2b1d      	cmp	r3, #29
 800afd4:	d001      	beq.n	800afda <__sflush_r+0xb2>
 800afd6:	2b16      	cmp	r3, #22
 800afd8:	d101      	bne.n	800afde <__sflush_r+0xb6>
 800afda:	602f      	str	r7, [r5, #0]
 800afdc:	e7b1      	b.n	800af42 <__sflush_r+0x1a>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	e7ad      	b.n	800af44 <__sflush_r+0x1c>
 800afe8:	690f      	ldr	r7, [r1, #16]
 800afea:	2f00      	cmp	r7, #0
 800afec:	d0a9      	beq.n	800af42 <__sflush_r+0x1a>
 800afee:	0793      	lsls	r3, r2, #30
 800aff0:	680e      	ldr	r6, [r1, #0]
 800aff2:	bf08      	it	eq
 800aff4:	694b      	ldreq	r3, [r1, #20]
 800aff6:	600f      	str	r7, [r1, #0]
 800aff8:	bf18      	it	ne
 800affa:	2300      	movne	r3, #0
 800affc:	eba6 0807 	sub.w	r8, r6, r7
 800b000:	608b      	str	r3, [r1, #8]
 800b002:	f1b8 0f00 	cmp.w	r8, #0
 800b006:	dd9c      	ble.n	800af42 <__sflush_r+0x1a>
 800b008:	6a21      	ldr	r1, [r4, #32]
 800b00a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b00c:	4643      	mov	r3, r8
 800b00e:	463a      	mov	r2, r7
 800b010:	4628      	mov	r0, r5
 800b012:	47b0      	blx	r6
 800b014:	2800      	cmp	r0, #0
 800b016:	dc06      	bgt.n	800b026 <__sflush_r+0xfe>
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b01e:	81a3      	strh	r3, [r4, #12]
 800b020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b024:	e78e      	b.n	800af44 <__sflush_r+0x1c>
 800b026:	4407      	add	r7, r0
 800b028:	eba8 0800 	sub.w	r8, r8, r0
 800b02c:	e7e9      	b.n	800b002 <__sflush_r+0xda>
 800b02e:	bf00      	nop
 800b030:	dfbffffe 	.word	0xdfbffffe

0800b034 <_fflush_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b913      	cbnz	r3, 800b044 <_fflush_r+0x10>
 800b03e:	2500      	movs	r5, #0
 800b040:	4628      	mov	r0, r5
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	b118      	cbz	r0, 800b04e <_fflush_r+0x1a>
 800b046:	6a03      	ldr	r3, [r0, #32]
 800b048:	b90b      	cbnz	r3, 800b04e <_fflush_r+0x1a>
 800b04a:	f7ff f817 	bl	800a07c <__sinit>
 800b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0f3      	beq.n	800b03e <_fflush_r+0xa>
 800b056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b058:	07d0      	lsls	r0, r2, #31
 800b05a:	d404      	bmi.n	800b066 <_fflush_r+0x32>
 800b05c:	0599      	lsls	r1, r3, #22
 800b05e:	d402      	bmi.n	800b066 <_fflush_r+0x32>
 800b060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b062:	f7ff fa3a 	bl	800a4da <__retarget_lock_acquire_recursive>
 800b066:	4628      	mov	r0, r5
 800b068:	4621      	mov	r1, r4
 800b06a:	f7ff ff5d 	bl	800af28 <__sflush_r>
 800b06e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b070:	07da      	lsls	r2, r3, #31
 800b072:	4605      	mov	r5, r0
 800b074:	d4e4      	bmi.n	800b040 <_fflush_r+0xc>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	059b      	lsls	r3, r3, #22
 800b07a:	d4e1      	bmi.n	800b040 <_fflush_r+0xc>
 800b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07e:	f7ff fa2d 	bl	800a4dc <__retarget_lock_release_recursive>
 800b082:	e7dd      	b.n	800b040 <_fflush_r+0xc>

0800b084 <__swhatbuf_r>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	460c      	mov	r4, r1
 800b088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08c:	2900      	cmp	r1, #0
 800b08e:	b096      	sub	sp, #88	; 0x58
 800b090:	4615      	mov	r5, r2
 800b092:	461e      	mov	r6, r3
 800b094:	da0d      	bge.n	800b0b2 <__swhatbuf_r+0x2e>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b09c:	f04f 0100 	mov.w	r1, #0
 800b0a0:	bf0c      	ite	eq
 800b0a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0a6:	2340      	movne	r3, #64	; 0x40
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	6031      	str	r1, [r6, #0]
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	b016      	add	sp, #88	; 0x58
 800b0b0:	bd70      	pop	{r4, r5, r6, pc}
 800b0b2:	466a      	mov	r2, sp
 800b0b4:	f000 f862 	bl	800b17c <_fstat_r>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	dbec      	blt.n	800b096 <__swhatbuf_r+0x12>
 800b0bc:	9901      	ldr	r1, [sp, #4]
 800b0be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0c6:	4259      	negs	r1, r3
 800b0c8:	4159      	adcs	r1, r3
 800b0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ce:	e7eb      	b.n	800b0a8 <__swhatbuf_r+0x24>

0800b0d0 <__smakebuf_r>:
 800b0d0:	898b      	ldrh	r3, [r1, #12]
 800b0d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0d4:	079d      	lsls	r5, r3, #30
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	460c      	mov	r4, r1
 800b0da:	d507      	bpl.n	800b0ec <__smakebuf_r+0x1c>
 800b0dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	6163      	str	r3, [r4, #20]
 800b0e8:	b002      	add	sp, #8
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}
 800b0ec:	ab01      	add	r3, sp, #4
 800b0ee:	466a      	mov	r2, sp
 800b0f0:	f7ff ffc8 	bl	800b084 <__swhatbuf_r>
 800b0f4:	9900      	ldr	r1, [sp, #0]
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff fa5d 	bl	800a5b8 <_malloc_r>
 800b0fe:	b948      	cbnz	r0, 800b114 <__smakebuf_r+0x44>
 800b100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b104:	059a      	lsls	r2, r3, #22
 800b106:	d4ef      	bmi.n	800b0e8 <__smakebuf_r+0x18>
 800b108:	f023 0303 	bic.w	r3, r3, #3
 800b10c:	f043 0302 	orr.w	r3, r3, #2
 800b110:	81a3      	strh	r3, [r4, #12]
 800b112:	e7e3      	b.n	800b0dc <__smakebuf_r+0xc>
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	6020      	str	r0, [r4, #0]
 800b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	9b00      	ldr	r3, [sp, #0]
 800b120:	6163      	str	r3, [r4, #20]
 800b122:	9b01      	ldr	r3, [sp, #4]
 800b124:	6120      	str	r0, [r4, #16]
 800b126:	b15b      	cbz	r3, 800b140 <__smakebuf_r+0x70>
 800b128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b12c:	4630      	mov	r0, r6
 800b12e:	f000 f837 	bl	800b1a0 <_isatty_r>
 800b132:	b128      	cbz	r0, 800b140 <__smakebuf_r+0x70>
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	f043 0301 	orr.w	r3, r3, #1
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	431d      	orrs	r5, r3
 800b144:	81a5      	strh	r5, [r4, #12]
 800b146:	e7cf      	b.n	800b0e8 <__smakebuf_r+0x18>

0800b148 <memmove>:
 800b148:	4288      	cmp	r0, r1
 800b14a:	b510      	push	{r4, lr}
 800b14c:	eb01 0402 	add.w	r4, r1, r2
 800b150:	d902      	bls.n	800b158 <memmove+0x10>
 800b152:	4284      	cmp	r4, r0
 800b154:	4623      	mov	r3, r4
 800b156:	d807      	bhi.n	800b168 <memmove+0x20>
 800b158:	1e43      	subs	r3, r0, #1
 800b15a:	42a1      	cmp	r1, r4
 800b15c:	d008      	beq.n	800b170 <memmove+0x28>
 800b15e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b162:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b166:	e7f8      	b.n	800b15a <memmove+0x12>
 800b168:	4402      	add	r2, r0
 800b16a:	4601      	mov	r1, r0
 800b16c:	428a      	cmp	r2, r1
 800b16e:	d100      	bne.n	800b172 <memmove+0x2a>
 800b170:	bd10      	pop	{r4, pc}
 800b172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b17a:	e7f7      	b.n	800b16c <memmove+0x24>

0800b17c <_fstat_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d07      	ldr	r5, [pc, #28]	; (800b19c <_fstat_r+0x20>)
 800b180:	2300      	movs	r3, #0
 800b182:	4604      	mov	r4, r0
 800b184:	4608      	mov	r0, r1
 800b186:	4611      	mov	r1, r2
 800b188:	602b      	str	r3, [r5, #0]
 800b18a:	f7f6 f8e0 	bl	800134e <_fstat>
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d102      	bne.n	800b198 <_fstat_r+0x1c>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	b103      	cbz	r3, 800b198 <_fstat_r+0x1c>
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	bd38      	pop	{r3, r4, r5, pc}
 800b19a:	bf00      	nop
 800b19c:	20000e7c 	.word	0x20000e7c

0800b1a0 <_isatty_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d06      	ldr	r5, [pc, #24]	; (800b1bc <_isatty_r+0x1c>)
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	602b      	str	r3, [r5, #0]
 800b1ac:	f7f6 f8df 	bl	800136e <_isatty>
 800b1b0:	1c43      	adds	r3, r0, #1
 800b1b2:	d102      	bne.n	800b1ba <_isatty_r+0x1a>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	b103      	cbz	r3, 800b1ba <_isatty_r+0x1a>
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	20000e7c 	.word	0x20000e7c

0800b1c0 <_sbrk_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_sbrk_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f6 f8e8 	bl	80013a0 <_sbrk>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_sbrk_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_sbrk_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20000e7c 	.word	0x20000e7c

0800b1e0 <memcpy>:
 800b1e0:	440a      	add	r2, r1
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1e8:	d100      	bne.n	800b1ec <memcpy+0xc>
 800b1ea:	4770      	bx	lr
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f6:	4291      	cmp	r1, r2
 800b1f8:	d1f9      	bne.n	800b1ee <memcpy+0xe>
 800b1fa:	bd10      	pop	{r4, pc}

0800b1fc <_realloc_r>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	4680      	mov	r8, r0
 800b202:	4614      	mov	r4, r2
 800b204:	460e      	mov	r6, r1
 800b206:	b921      	cbnz	r1, 800b212 <_realloc_r+0x16>
 800b208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b20c:	4611      	mov	r1, r2
 800b20e:	f7ff b9d3 	b.w	800a5b8 <_malloc_r>
 800b212:	b92a      	cbnz	r2, 800b220 <_realloc_r+0x24>
 800b214:	f7ff f964 	bl	800a4e0 <_free_r>
 800b218:	4625      	mov	r5, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b220:	f000 f81b 	bl	800b25a <_malloc_usable_size_r>
 800b224:	4284      	cmp	r4, r0
 800b226:	4607      	mov	r7, r0
 800b228:	d802      	bhi.n	800b230 <_realloc_r+0x34>
 800b22a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b22e:	d812      	bhi.n	800b256 <_realloc_r+0x5a>
 800b230:	4621      	mov	r1, r4
 800b232:	4640      	mov	r0, r8
 800b234:	f7ff f9c0 	bl	800a5b8 <_malloc_r>
 800b238:	4605      	mov	r5, r0
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d0ed      	beq.n	800b21a <_realloc_r+0x1e>
 800b23e:	42bc      	cmp	r4, r7
 800b240:	4622      	mov	r2, r4
 800b242:	4631      	mov	r1, r6
 800b244:	bf28      	it	cs
 800b246:	463a      	movcs	r2, r7
 800b248:	f7ff ffca 	bl	800b1e0 <memcpy>
 800b24c:	4631      	mov	r1, r6
 800b24e:	4640      	mov	r0, r8
 800b250:	f7ff f946 	bl	800a4e0 <_free_r>
 800b254:	e7e1      	b.n	800b21a <_realloc_r+0x1e>
 800b256:	4635      	mov	r5, r6
 800b258:	e7df      	b.n	800b21a <_realloc_r+0x1e>

0800b25a <_malloc_usable_size_r>:
 800b25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25e:	1f18      	subs	r0, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfbc      	itt	lt
 800b264:	580b      	ldrlt	r3, [r1, r0]
 800b266:	18c0      	addlt	r0, r0, r3
 800b268:	4770      	bx	lr

0800b26a <powf>:
 800b26a:	b508      	push	{r3, lr}
 800b26c:	ed2d 8b04 	vpush	{d8-d9}
 800b270:	eeb0 8a60 	vmov.f32	s16, s1
 800b274:	eeb0 9a40 	vmov.f32	s18, s0
 800b278:	f000 f880 	bl	800b37c <__ieee754_powf>
 800b27c:	eeb4 8a48 	vcmp.f32	s16, s16
 800b280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b284:	eef0 8a40 	vmov.f32	s17, s0
 800b288:	d63e      	bvs.n	800b308 <powf+0x9e>
 800b28a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b292:	d112      	bne.n	800b2ba <powf+0x50>
 800b294:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29c:	d039      	beq.n	800b312 <powf+0xa8>
 800b29e:	eeb0 0a48 	vmov.f32	s0, s16
 800b2a2:	f000 f839 	bl	800b318 <finitef>
 800b2a6:	b378      	cbz	r0, 800b308 <powf+0x9e>
 800b2a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b0:	d52a      	bpl.n	800b308 <powf+0x9e>
 800b2b2:	f7ff f8e7 	bl	800a484 <__errno>
 800b2b6:	2322      	movs	r3, #34	; 0x22
 800b2b8:	e014      	b.n	800b2e4 <powf+0x7a>
 800b2ba:	f000 f82d 	bl	800b318 <finitef>
 800b2be:	b998      	cbnz	r0, 800b2e8 <powf+0x7e>
 800b2c0:	eeb0 0a49 	vmov.f32	s0, s18
 800b2c4:	f000 f828 	bl	800b318 <finitef>
 800b2c8:	b170      	cbz	r0, 800b2e8 <powf+0x7e>
 800b2ca:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ce:	f000 f823 	bl	800b318 <finitef>
 800b2d2:	b148      	cbz	r0, 800b2e8 <powf+0x7e>
 800b2d4:	eef4 8a68 	vcmp.f32	s17, s17
 800b2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2dc:	d7e9      	bvc.n	800b2b2 <powf+0x48>
 800b2de:	f7ff f8d1 	bl	800a484 <__errno>
 800b2e2:	2321      	movs	r3, #33	; 0x21
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	e00f      	b.n	800b308 <powf+0x9e>
 800b2e8:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f0:	d10a      	bne.n	800b308 <powf+0x9e>
 800b2f2:	eeb0 0a49 	vmov.f32	s0, s18
 800b2f6:	f000 f80f 	bl	800b318 <finitef>
 800b2fa:	b128      	cbz	r0, 800b308 <powf+0x9e>
 800b2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800b300:	f000 f80a 	bl	800b318 <finitef>
 800b304:	2800      	cmp	r0, #0
 800b306:	d1d4      	bne.n	800b2b2 <powf+0x48>
 800b308:	eeb0 0a68 	vmov.f32	s0, s17
 800b30c:	ecbd 8b04 	vpop	{d8-d9}
 800b310:	bd08      	pop	{r3, pc}
 800b312:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b316:	e7f7      	b.n	800b308 <powf+0x9e>

0800b318 <finitef>:
 800b318:	b082      	sub	sp, #8
 800b31a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b31e:	9801      	ldr	r0, [sp, #4]
 800b320:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b324:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b328:	bfac      	ite	ge
 800b32a:	2000      	movge	r0, #0
 800b32c:	2001      	movlt	r0, #1
 800b32e:	b002      	add	sp, #8
 800b330:	4770      	bx	lr
	...

0800b334 <roundf>:
 800b334:	ee10 0a10 	vmov	r0, s0
 800b338:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b33c:	3a7f      	subs	r2, #127	; 0x7f
 800b33e:	2a16      	cmp	r2, #22
 800b340:	dc15      	bgt.n	800b36e <roundf+0x3a>
 800b342:	2a00      	cmp	r2, #0
 800b344:	da08      	bge.n	800b358 <roundf+0x24>
 800b346:	3201      	adds	r2, #1
 800b348:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b34c:	d101      	bne.n	800b352 <roundf+0x1e>
 800b34e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b352:	ee00 3a10 	vmov	s0, r3
 800b356:	4770      	bx	lr
 800b358:	4907      	ldr	r1, [pc, #28]	; (800b378 <roundf+0x44>)
 800b35a:	4111      	asrs	r1, r2
 800b35c:	4208      	tst	r0, r1
 800b35e:	d0fa      	beq.n	800b356 <roundf+0x22>
 800b360:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b364:	4113      	asrs	r3, r2
 800b366:	4403      	add	r3, r0
 800b368:	ea23 0301 	bic.w	r3, r3, r1
 800b36c:	e7f1      	b.n	800b352 <roundf+0x1e>
 800b36e:	2a80      	cmp	r2, #128	; 0x80
 800b370:	d1f1      	bne.n	800b356 <roundf+0x22>
 800b372:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b376:	4770      	bx	lr
 800b378:	007fffff 	.word	0x007fffff

0800b37c <__ieee754_powf>:
 800b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b380:	ee10 4a90 	vmov	r4, s1
 800b384:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800b388:	ed2d 8b02 	vpush	{d8}
 800b38c:	ee10 7a10 	vmov	r7, s0
 800b390:	eeb0 8a40 	vmov.f32	s16, s0
 800b394:	eef0 8a60 	vmov.f32	s17, s1
 800b398:	d10c      	bne.n	800b3b4 <__ieee754_powf+0x38>
 800b39a:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800b39e:	007f      	lsls	r7, r7, #1
 800b3a0:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800b3a4:	f240 8292 	bls.w	800b8cc <__ieee754_powf+0x550>
 800b3a8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b3ac:	ecbd 8b02 	vpop	{d8}
 800b3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b4:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800b3b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b3bc:	dcf4      	bgt.n	800b3a8 <__ieee754_powf+0x2c>
 800b3be:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b3c2:	dd08      	ble.n	800b3d6 <__ieee754_powf+0x5a>
 800b3c4:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b3c8:	d1ee      	bne.n	800b3a8 <__ieee754_powf+0x2c>
 800b3ca:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b3ce:	0064      	lsls	r4, r4, #1
 800b3d0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b3d4:	e7e6      	b.n	800b3a4 <__ieee754_powf+0x28>
 800b3d6:	2f00      	cmp	r7, #0
 800b3d8:	da20      	bge.n	800b41c <__ieee754_powf+0xa0>
 800b3da:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800b3de:	da2d      	bge.n	800b43c <__ieee754_powf+0xc0>
 800b3e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b3e4:	f2c0 827b 	blt.w	800b8de <__ieee754_powf+0x562>
 800b3e8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800b3ec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b3f0:	fa48 f603 	asr.w	r6, r8, r3
 800b3f4:	fa06 f303 	lsl.w	r3, r6, r3
 800b3f8:	4543      	cmp	r3, r8
 800b3fa:	f040 8270 	bne.w	800b8de <__ieee754_powf+0x562>
 800b3fe:	f006 0601 	and.w	r6, r6, #1
 800b402:	f1c6 0602 	rsb	r6, r6, #2
 800b406:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b40a:	d11f      	bne.n	800b44c <__ieee754_powf+0xd0>
 800b40c:	2c00      	cmp	r4, #0
 800b40e:	f280 8263 	bge.w	800b8d8 <__ieee754_powf+0x55c>
 800b412:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b416:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b41a:	e7c7      	b.n	800b3ac <__ieee754_powf+0x30>
 800b41c:	2600      	movs	r6, #0
 800b41e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b422:	d1f0      	bne.n	800b406 <__ieee754_powf+0x8a>
 800b424:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b428:	f000 8250 	beq.w	800b8cc <__ieee754_powf+0x550>
 800b42c:	dd08      	ble.n	800b440 <__ieee754_powf+0xc4>
 800b42e:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800b734 <__ieee754_powf+0x3b8>
 800b432:	2c00      	cmp	r4, #0
 800b434:	bfa8      	it	ge
 800b436:	eeb0 0a68 	vmovge.f32	s0, s17
 800b43a:	e7b7      	b.n	800b3ac <__ieee754_powf+0x30>
 800b43c:	2602      	movs	r6, #2
 800b43e:	e7ee      	b.n	800b41e <__ieee754_powf+0xa2>
 800b440:	2c00      	cmp	r4, #0
 800b442:	f280 8246 	bge.w	800b8d2 <__ieee754_powf+0x556>
 800b446:	eeb1 0a68 	vneg.f32	s0, s17
 800b44a:	e7af      	b.n	800b3ac <__ieee754_powf+0x30>
 800b44c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b450:	d102      	bne.n	800b458 <__ieee754_powf+0xdc>
 800b452:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b456:	e7a9      	b.n	800b3ac <__ieee754_powf+0x30>
 800b458:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b45c:	eeb0 0a48 	vmov.f32	s0, s16
 800b460:	d107      	bne.n	800b472 <__ieee754_powf+0xf6>
 800b462:	2f00      	cmp	r7, #0
 800b464:	db05      	blt.n	800b472 <__ieee754_powf+0xf6>
 800b466:	ecbd 8b02 	vpop	{d8}
 800b46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	f000 badf 	b.w	800ba30 <__ieee754_sqrtf>
 800b472:	f000 fa4d 	bl	800b910 <fabsf>
 800b476:	b125      	cbz	r5, 800b482 <__ieee754_powf+0x106>
 800b478:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800b47c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b480:	d115      	bne.n	800b4ae <__ieee754_powf+0x132>
 800b482:	2c00      	cmp	r4, #0
 800b484:	bfbc      	itt	lt
 800b486:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b48a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b48e:	2f00      	cmp	r7, #0
 800b490:	da8c      	bge.n	800b3ac <__ieee754_powf+0x30>
 800b492:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800b496:	4335      	orrs	r5, r6
 800b498:	d104      	bne.n	800b4a4 <__ieee754_powf+0x128>
 800b49a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b49e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b4a2:	e783      	b.n	800b3ac <__ieee754_powf+0x30>
 800b4a4:	2e01      	cmp	r6, #1
 800b4a6:	d181      	bne.n	800b3ac <__ieee754_powf+0x30>
 800b4a8:	eeb1 0a40 	vneg.f32	s0, s0
 800b4ac:	e77e      	b.n	800b3ac <__ieee754_powf+0x30>
 800b4ae:	0ff8      	lsrs	r0, r7, #31
 800b4b0:	3801      	subs	r0, #1
 800b4b2:	ea56 0300 	orrs.w	r3, r6, r0
 800b4b6:	d104      	bne.n	800b4c2 <__ieee754_powf+0x146>
 800b4b8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b4bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b4c0:	e774      	b.n	800b3ac <__ieee754_powf+0x30>
 800b4c2:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800b4c6:	dd73      	ble.n	800b5b0 <__ieee754_powf+0x234>
 800b4c8:	4b9b      	ldr	r3, [pc, #620]	; (800b738 <__ieee754_powf+0x3bc>)
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	dc08      	bgt.n	800b4e0 <__ieee754_powf+0x164>
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	da0b      	bge.n	800b4ea <__ieee754_powf+0x16e>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	ecbd 8b02 	vpop	{d8}
 800b4d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4dc:	f000 baa2 	b.w	800ba24 <__math_oflowf>
 800b4e0:	4b96      	ldr	r3, [pc, #600]	; (800b73c <__ieee754_powf+0x3c0>)
 800b4e2:	429d      	cmp	r5, r3
 800b4e4:	dd08      	ble.n	800b4f8 <__ieee754_powf+0x17c>
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	dcf3      	bgt.n	800b4d2 <__ieee754_powf+0x156>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	ecbd 8b02 	vpop	{d8}
 800b4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f4:	f000 ba90 	b.w	800ba18 <__math_uflowf>
 800b4f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b4fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b500:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800b740 <__ieee754_powf+0x3c4>
 800b504:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b508:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b50c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b510:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b514:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b51c:	eddf 7a89 	vldr	s15, [pc, #548]	; 800b744 <__ieee754_powf+0x3c8>
 800b520:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800b524:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b748 <__ieee754_powf+0x3cc>
 800b528:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b52c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800b74c <__ieee754_powf+0x3d0>
 800b530:	eef0 6a67 	vmov.f32	s13, s15
 800b534:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b538:	ee16 3a90 	vmov	r3, s13
 800b53c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b540:	f023 030f 	bic.w	r3, r3, #15
 800b544:	ee06 3a90 	vmov	s13, r3
 800b548:	eee0 6a47 	vfms.f32	s13, s0, s14
 800b54c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b550:	3e01      	subs	r6, #1
 800b552:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800b556:	4306      	orrs	r6, r0
 800b558:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b55c:	f024 040f 	bic.w	r4, r4, #15
 800b560:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b564:	bf08      	it	eq
 800b566:	eeb0 8a47 	vmoveq.f32	s16, s14
 800b56a:	ee07 4a10 	vmov	s14, r4
 800b56e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b572:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b57e:	ee07 4a10 	vmov	s14, r4
 800b582:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b586:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b58a:	ee17 1a10 	vmov	r1, s14
 800b58e:	2900      	cmp	r1, #0
 800b590:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b594:	f340 817c 	ble.w	800b890 <__ieee754_powf+0x514>
 800b598:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b59c:	f340 80f8 	ble.w	800b790 <__ieee754_powf+0x414>
 800b5a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	bf4c      	ite	mi
 800b5aa:	2001      	movmi	r0, #1
 800b5ac:	2000      	movpl	r0, #0
 800b5ae:	e791      	b.n	800b4d4 <__ieee754_powf+0x158>
 800b5b0:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800b5b4:	bf01      	itttt	eq
 800b5b6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b750 <__ieee754_powf+0x3d4>
 800b5ba:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b5be:	f06f 0317 	mvneq.w	r3, #23
 800b5c2:	ee17 5a90 	vmoveq	r5, s15
 800b5c6:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800b5ca:	bf18      	it	ne
 800b5cc:	2300      	movne	r3, #0
 800b5ce:	3a7f      	subs	r2, #127	; 0x7f
 800b5d0:	441a      	add	r2, r3
 800b5d2:	4b60      	ldr	r3, [pc, #384]	; (800b754 <__ieee754_powf+0x3d8>)
 800b5d4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800b5d8:	429d      	cmp	r5, r3
 800b5da:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800b5de:	dd06      	ble.n	800b5ee <__ieee754_powf+0x272>
 800b5e0:	4b5d      	ldr	r3, [pc, #372]	; (800b758 <__ieee754_powf+0x3dc>)
 800b5e2:	429d      	cmp	r5, r3
 800b5e4:	f340 80a4 	ble.w	800b730 <__ieee754_powf+0x3b4>
 800b5e8:	3201      	adds	r2, #1
 800b5ea:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b5ee:	2500      	movs	r5, #0
 800b5f0:	4b5a      	ldr	r3, [pc, #360]	; (800b75c <__ieee754_powf+0x3e0>)
 800b5f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800b5f6:	ee07 1a10 	vmov	s14, r1
 800b5fa:	edd3 5a00 	vldr	s11, [r3]
 800b5fe:	4b58      	ldr	r3, [pc, #352]	; (800b760 <__ieee754_powf+0x3e4>)
 800b600:	ee75 7a87 	vadd.f32	s15, s11, s14
 800b604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b608:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800b60c:	1049      	asrs	r1, r1, #1
 800b60e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b612:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b616:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800b61a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800b61e:	ee07 1a90 	vmov	s15, r1
 800b622:	ee26 5a24 	vmul.f32	s10, s12, s9
 800b626:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800b62a:	ee15 7a10 	vmov	r7, s10
 800b62e:	401f      	ands	r7, r3
 800b630:	ee06 7a90 	vmov	s13, r7
 800b634:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800b638:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b63c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800b640:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800b644:	eddf 5a47 	vldr	s11, [pc, #284]	; 800b764 <__ieee754_powf+0x3e8>
 800b648:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800b768 <__ieee754_powf+0x3ec>
 800b64c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b650:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b76c <__ieee754_powf+0x3f0>
 800b654:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b658:	eddf 5a39 	vldr	s11, [pc, #228]	; 800b740 <__ieee754_powf+0x3c4>
 800b65c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b660:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800b770 <__ieee754_powf+0x3f4>
 800b664:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b668:	eddf 5a42 	vldr	s11, [pc, #264]	; 800b774 <__ieee754_powf+0x3f8>
 800b66c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b670:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b674:	ee35 7a26 	vadd.f32	s14, s10, s13
 800b678:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800b67c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b680:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800b684:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800b688:	eef0 5a67 	vmov.f32	s11, s15
 800b68c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800b690:	ee75 5a87 	vadd.f32	s11, s11, s14
 800b694:	ee15 1a90 	vmov	r1, s11
 800b698:	4019      	ands	r1, r3
 800b69a:	ee05 1a90 	vmov	s11, r1
 800b69e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b6a2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800b6a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b6ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b6b2:	eeb0 6a67 	vmov.f32	s12, s15
 800b6b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b6ba:	ee16 1a10 	vmov	r1, s12
 800b6be:	4019      	ands	r1, r3
 800b6c0:	ee07 1a10 	vmov	s14, r1
 800b6c4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800b6c8:	ee06 1a10 	vmov	s12, r1
 800b6cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6d0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b778 <__ieee754_powf+0x3fc>
 800b6d4:	4929      	ldr	r1, [pc, #164]	; (800b77c <__ieee754_powf+0x400>)
 800b6d6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800b780 <__ieee754_powf+0x404>
 800b6da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6de:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b784 <__ieee754_powf+0x408>
 800b6e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b6e6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b6ea:	ed91 7a00 	vldr	s14, [r1]
 800b6ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6f2:	ee07 2a10 	vmov	s14, r2
 800b6f6:	eef0 6a67 	vmov.f32	s13, s15
 800b6fa:	4a23      	ldr	r2, [pc, #140]	; (800b788 <__ieee754_powf+0x40c>)
 800b6fc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b700:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b704:	ed92 5a00 	vldr	s10, [r2]
 800b708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b70c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b710:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b714:	ee16 2a90 	vmov	r2, s13
 800b718:	4013      	ands	r3, r2
 800b71a:	ee06 3a90 	vmov	s13, r3
 800b71e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b722:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b726:	eea6 7a65 	vfms.f32	s14, s12, s11
 800b72a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b72e:	e70f      	b.n	800b550 <__ieee754_powf+0x1d4>
 800b730:	2501      	movs	r5, #1
 800b732:	e75d      	b.n	800b5f0 <__ieee754_powf+0x274>
 800b734:	00000000 	.word	0x00000000
 800b738:	3f7ffff3 	.word	0x3f7ffff3
 800b73c:	3f800007 	.word	0x3f800007
 800b740:	3eaaaaab 	.word	0x3eaaaaab
 800b744:	3fb8aa3b 	.word	0x3fb8aa3b
 800b748:	36eca570 	.word	0x36eca570
 800b74c:	3fb8aa00 	.word	0x3fb8aa00
 800b750:	4b800000 	.word	0x4b800000
 800b754:	001cc471 	.word	0x001cc471
 800b758:	005db3d6 	.word	0x005db3d6
 800b75c:	0800be94 	.word	0x0800be94
 800b760:	fffff000 	.word	0xfffff000
 800b764:	3e6c3255 	.word	0x3e6c3255
 800b768:	3e53f142 	.word	0x3e53f142
 800b76c:	3e8ba305 	.word	0x3e8ba305
 800b770:	3edb6db7 	.word	0x3edb6db7
 800b774:	3f19999a 	.word	0x3f19999a
 800b778:	3f76384f 	.word	0x3f76384f
 800b77c:	0800bea4 	.word	0x0800bea4
 800b780:	3f763800 	.word	0x3f763800
 800b784:	369dc3a0 	.word	0x369dc3a0
 800b788:	0800be9c 	.word	0x0800be9c
 800b78c:	3338aa3c 	.word	0x3338aa3c
 800b790:	f040 8093 	bne.w	800b8ba <__ieee754_powf+0x53e>
 800b794:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b78c <__ieee754_powf+0x410>
 800b798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b79c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b7a0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a8:	f73f aefa 	bgt.w	800b5a0 <__ieee754_powf+0x224>
 800b7ac:	15db      	asrs	r3, r3, #23
 800b7ae:	3b7e      	subs	r3, #126	; 0x7e
 800b7b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800b7b4:	4118      	asrs	r0, r3
 800b7b6:	4408      	add	r0, r1
 800b7b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b7bc:	4a49      	ldr	r2, [pc, #292]	; (800b8e4 <__ieee754_powf+0x568>)
 800b7be:	3b7f      	subs	r3, #127	; 0x7f
 800b7c0:	411a      	asrs	r2, r3
 800b7c2:	4002      	ands	r2, r0
 800b7c4:	ee07 2a10 	vmov	s14, r2
 800b7c8:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b7cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b7d0:	f1c3 0317 	rsb	r3, r3, #23
 800b7d4:	4118      	asrs	r0, r3
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7dc:	bfb8      	it	lt
 800b7de:	4240      	neglt	r0, r0
 800b7e0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b7e4:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b8e8 <__ieee754_powf+0x56c>
 800b7e8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800b8ec <__ieee754_powf+0x570>
 800b7ec:	ee17 3a10 	vmov	r3, s14
 800b7f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b7f4:	f023 030f 	bic.w	r3, r3, #15
 800b7f8:	ee07 3a10 	vmov	s14, r3
 800b7fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b800:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b804:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b808:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b8f0 <__ieee754_powf+0x574>
 800b80c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b810:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800b814:	eef0 6a67 	vmov.f32	s13, s15
 800b818:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b81c:	eef0 5a66 	vmov.f32	s11, s13
 800b820:	eee7 5a46 	vfms.f32	s11, s14, s12
 800b824:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b828:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b82c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b8f4 <__ieee754_powf+0x578>
 800b830:	eddf 5a31 	vldr	s11, [pc, #196]	; 800b8f8 <__ieee754_powf+0x57c>
 800b834:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b838:	eddf 5a30 	vldr	s11, [pc, #192]	; 800b8fc <__ieee754_powf+0x580>
 800b83c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b840:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b900 <__ieee754_powf+0x584>
 800b844:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b848:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b904 <__ieee754_powf+0x588>
 800b84c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b850:	eeb0 6a66 	vmov.f32	s12, s13
 800b854:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800b858:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b85c:	ee66 5a86 	vmul.f32	s11, s13, s12
 800b860:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b864:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800b868:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800b86c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b870:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b874:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b878:	ee10 3a10 	vmov	r3, s0
 800b87c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b880:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b884:	da1f      	bge.n	800b8c6 <__ieee754_powf+0x54a>
 800b886:	f000 f84b 	bl	800b920 <scalbnf>
 800b88a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b88e:	e58d      	b.n	800b3ac <__ieee754_powf+0x30>
 800b890:	4a1d      	ldr	r2, [pc, #116]	; (800b908 <__ieee754_powf+0x58c>)
 800b892:	4293      	cmp	r3, r2
 800b894:	dd07      	ble.n	800b8a6 <__ieee754_powf+0x52a>
 800b896:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89e:	bf4c      	ite	mi
 800b8a0:	2001      	movmi	r0, #1
 800b8a2:	2000      	movpl	r0, #0
 800b8a4:	e622      	b.n	800b4ec <__ieee754_powf+0x170>
 800b8a6:	d108      	bne.n	800b8ba <__ieee754_powf+0x53e>
 800b8a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8ac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	f6ff af7a 	blt.w	800b7ac <__ieee754_powf+0x430>
 800b8b8:	e7ed      	b.n	800b896 <__ieee754_powf+0x51a>
 800b8ba:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b8be:	f73f af75 	bgt.w	800b7ac <__ieee754_powf+0x430>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e78c      	b.n	800b7e0 <__ieee754_powf+0x464>
 800b8c6:	ee00 3a10 	vmov	s0, r3
 800b8ca:	e7de      	b.n	800b88a <__ieee754_powf+0x50e>
 800b8cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b8d0:	e56c      	b.n	800b3ac <__ieee754_powf+0x30>
 800b8d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b90c <__ieee754_powf+0x590>
 800b8d6:	e569      	b.n	800b3ac <__ieee754_powf+0x30>
 800b8d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b8dc:	e566      	b.n	800b3ac <__ieee754_powf+0x30>
 800b8de:	2600      	movs	r6, #0
 800b8e0:	e591      	b.n	800b406 <__ieee754_powf+0x8a>
 800b8e2:	bf00      	nop
 800b8e4:	ff800000 	.word	0xff800000
 800b8e8:	3f317218 	.word	0x3f317218
 800b8ec:	3f317200 	.word	0x3f317200
 800b8f0:	35bfbe8c 	.word	0x35bfbe8c
 800b8f4:	b5ddea0e 	.word	0xb5ddea0e
 800b8f8:	3331bb4c 	.word	0x3331bb4c
 800b8fc:	388ab355 	.word	0x388ab355
 800b900:	bb360b61 	.word	0xbb360b61
 800b904:	3e2aaaab 	.word	0x3e2aaaab
 800b908:	43160000 	.word	0x43160000
 800b90c:	00000000 	.word	0x00000000

0800b910 <fabsf>:
 800b910:	ee10 3a10 	vmov	r3, s0
 800b914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b918:	ee00 3a10 	vmov	s0, r3
 800b91c:	4770      	bx	lr
	...

0800b920 <scalbnf>:
 800b920:	ee10 3a10 	vmov	r3, s0
 800b924:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b928:	d02b      	beq.n	800b982 <scalbnf+0x62>
 800b92a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b92e:	d302      	bcc.n	800b936 <scalbnf+0x16>
 800b930:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b934:	4770      	bx	lr
 800b936:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b93a:	d123      	bne.n	800b984 <scalbnf+0x64>
 800b93c:	4b24      	ldr	r3, [pc, #144]	; (800b9d0 <scalbnf+0xb0>)
 800b93e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800b9d4 <scalbnf+0xb4>
 800b942:	4298      	cmp	r0, r3
 800b944:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b948:	db17      	blt.n	800b97a <scalbnf+0x5a>
 800b94a:	ee10 3a10 	vmov	r3, s0
 800b94e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b952:	3a19      	subs	r2, #25
 800b954:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b958:	4288      	cmp	r0, r1
 800b95a:	dd15      	ble.n	800b988 <scalbnf+0x68>
 800b95c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b9d8 <scalbnf+0xb8>
 800b960:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b9dc <scalbnf+0xbc>
 800b964:	ee10 3a10 	vmov	r3, s0
 800b968:	eeb0 7a67 	vmov.f32	s14, s15
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfb8      	it	lt
 800b970:	eef0 7a66 	vmovlt.f32	s15, s13
 800b974:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b978:	4770      	bx	lr
 800b97a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800b9e0 <scalbnf+0xc0>
 800b97e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b982:	4770      	bx	lr
 800b984:	0dd2      	lsrs	r2, r2, #23
 800b986:	e7e5      	b.n	800b954 <scalbnf+0x34>
 800b988:	4410      	add	r0, r2
 800b98a:	28fe      	cmp	r0, #254	; 0xfe
 800b98c:	dce6      	bgt.n	800b95c <scalbnf+0x3c>
 800b98e:	2800      	cmp	r0, #0
 800b990:	dd06      	ble.n	800b9a0 <scalbnf+0x80>
 800b992:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b996:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b99a:	ee00 3a10 	vmov	s0, r3
 800b99e:	4770      	bx	lr
 800b9a0:	f110 0f16 	cmn.w	r0, #22
 800b9a4:	da09      	bge.n	800b9ba <scalbnf+0x9a>
 800b9a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b9e0 <scalbnf+0xc0>
 800b9aa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800b9e4 <scalbnf+0xc4>
 800b9ae:	ee10 3a10 	vmov	r3, s0
 800b9b2:	eeb0 7a67 	vmov.f32	s14, s15
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	e7d9      	b.n	800b96e <scalbnf+0x4e>
 800b9ba:	3019      	adds	r0, #25
 800b9bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b9c4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800b9e8 <scalbnf+0xc8>
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	e7d7      	b.n	800b97e <scalbnf+0x5e>
 800b9ce:	bf00      	nop
 800b9d0:	ffff3cb0 	.word	0xffff3cb0
 800b9d4:	4c000000 	.word	0x4c000000
 800b9d8:	7149f2ca 	.word	0x7149f2ca
 800b9dc:	f149f2ca 	.word	0xf149f2ca
 800b9e0:	0da24260 	.word	0x0da24260
 800b9e4:	8da24260 	.word	0x8da24260
 800b9e8:	33000000 	.word	0x33000000

0800b9ec <with_errnof>:
 800b9ec:	b513      	push	{r0, r1, r4, lr}
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b9f4:	f7fe fd46 	bl	800a484 <__errno>
 800b9f8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b9fc:	6004      	str	r4, [r0, #0]
 800b9fe:	b002      	add	sp, #8
 800ba00:	bd10      	pop	{r4, pc}

0800ba02 <xflowf>:
 800ba02:	b130      	cbz	r0, 800ba12 <xflowf+0x10>
 800ba04:	eef1 7a40 	vneg.f32	s15, s0
 800ba08:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ba0c:	2022      	movs	r0, #34	; 0x22
 800ba0e:	f7ff bfed 	b.w	800b9ec <with_errnof>
 800ba12:	eef0 7a40 	vmov.f32	s15, s0
 800ba16:	e7f7      	b.n	800ba08 <xflowf+0x6>

0800ba18 <__math_uflowf>:
 800ba18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba20 <__math_uflowf+0x8>
 800ba1c:	f7ff bff1 	b.w	800ba02 <xflowf>
 800ba20:	10000000 	.word	0x10000000

0800ba24 <__math_oflowf>:
 800ba24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba2c <__math_oflowf+0x8>
 800ba28:	f7ff bfeb 	b.w	800ba02 <xflowf>
 800ba2c:	70000000 	.word	0x70000000

0800ba30 <__ieee754_sqrtf>:
 800ba30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ba34:	4770      	bx	lr
	...

0800ba38 <_init>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	bf00      	nop
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr

0800ba44 <_fini>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr
