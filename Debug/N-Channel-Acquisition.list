
N-Channel-Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccbc  0800ccbc  0002053c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc4  0800ccc4  0002053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc4  0800ccc4  0001ccc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccc8  0800ccc8  0001ccc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000053c  20000000  0800cccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  2000053c  0800d208  0002053c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b10  0800d208  00021b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161ad  00000000  00000000  0002062e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003832  00000000  00000000  000367db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107d  00000000  00000000  0003b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a998  00000000  00000000  0003c5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc3f  00000000  00000000  00056f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e3a  00000000  00000000  00072bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063b0  00000000  00000000  001089e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000053c 	.word	0x2000053c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c82c 	.word	0x0800c82c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000540 	.word	0x20000540
 80001dc:	0800c82c 	.word	0x0800c82c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <sd_card_init>:
static uint8_t wav_file_header[44]={0x52, 0x49, 0x46, 0x46, 0xa4, 0xa9, 0x03, 0x00, 0x57 ,0x41, 0x56, 0x45, 0x66, 0x6d,
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0xbb, 0x80, 0x00, 0x00, 0xee, 0x02, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x80, 0xa9, 0x03, 0x00};

void sd_card_init()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//	mounting an sd card
	fres = f_mount(&FatFs, "", 1);
 8000590:	2201      	movs	r2, #1
 8000592:	4913      	ldr	r1, [pc, #76]	; (80005e0 <sd_card_init+0x54>)
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <sd_card_init+0x58>)
 8000596:	f007 fe09 	bl	80081ac <f_mount>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <sd_card_init+0x5c>)
 80005a0:	701a      	strb	r2, [r3, #0]
	if(fres != 0)
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <sd_card_init+0x5c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d014      	beq.n	80005d4 <sd_card_init+0x48>
	{
		myprintf("error in mounting an sd card: %d \n", fres);
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <sd_card_init+0x5c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <sd_card_init+0x60>)
 80005b2:	f000 f9b7 	bl	8000924 <myprintf>
		while (fres != FR_OK) {
 80005b6:	e008      	b.n	80005ca <sd_card_init+0x3e>
			fres = f_mount(&FatFs, "", 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <sd_card_init+0x54>)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <sd_card_init+0x58>)
 80005be:	f007 fdf5 	bl	80081ac <f_mount>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <sd_card_init+0x5c>)
 80005c8:	701a      	strb	r2, [r3, #0]
		while (fres != FR_OK) {
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <sd_card_init+0x5c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f2      	bne.n	80005b8 <sd_card_init+0x2c>
	}
	else
	{
		myprintf("succeded in mounting an sd card \n");
	}
}
 80005d2:	e002      	b.n	80005da <sd_card_init+0x4e>
		myprintf("succeded in mounting an sd card \n");
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <sd_card_init+0x64>)
 80005d6:	f000 f9a5 	bl	8000924 <myprintf>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800c844 	.word	0x0800c844
 80005e4:	2000055c 	.word	0x2000055c
 80005e8:	20000559 	.word	0x20000559
 80005ec:	0800c848 	.word	0x0800c848
 80005f0:	0800c86c 	.word	0x0800c86c

080005f4 <start_recording>:

void start_recording(uint32_t frequency)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 1; //TODO: check if 10
	int file_number_digits = file_counter;
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <start_recording+0x140>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <start_recording+0x144>)
 800060e:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b48      	ldr	r3, [pc, #288]	; (8000738 <start_recording+0x144>)
 8000618:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b45      	ldr	r3, [pc, #276]	; (8000738 <start_recording+0x144>)
 8000622:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	0e1b      	lsrs	r3, r3, #24
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <start_recording+0x144>)
 800062c:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <start_recording+0x144>)
 8000634:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <start_recording+0x144>)
 800063e:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <start_recording+0x144>)
 8000648:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	0e1b      	lsrs	r3, r3, #24
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b39      	ldr	r3, [pc, #228]	; (8000738 <start_recording+0x144>)
 8000652:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48; //48 is digit 0
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	4b39      	ldr	r3, [pc, #228]	; (800073c <start_recording+0x148>)
 8000658:	fb83 1302 	smull	r1, r3, r3, r2
 800065c:	1099      	asrs	r1, r3, #2
 800065e:	17d3      	asrs	r3, r2, #31
 8000660:	1ac9      	subs	r1, r1, r3
 8000662:	460b      	mov	r3, r1
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	1ad1      	subs	r1, r2, r3
 800066c:	b2cb      	uxtb	r3, r1
 800066e:	3330      	adds	r3, #48	; 0x30
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <start_recording+0x14c>)
 8000674:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <start_recording+0x148>)
 800067a:	fb82 1203 	smull	r1, r2, r2, r3
 800067e:	1092      	asrs	r2, r2, #2
 8000680:	17db      	asrs	r3, r3, #31
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4b2c      	ldr	r3, [pc, #176]	; (800073c <start_recording+0x148>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1099      	asrs	r1, r3, #2
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1ac9      	subs	r1, r1, r3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad1      	subs	r1, r2, r3
 800069e:	b2cb      	uxtb	r3, r1
 80006a0:	3330      	adds	r3, #48	; 0x30
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <start_recording+0x14c>)
 80006a6:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4a24      	ldr	r2, [pc, #144]	; (800073c <start_recording+0x148>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1092      	asrs	r2, r2, #2
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <start_recording+0x148>)
 80006bc:	fb83 1302 	smull	r1, r3, r3, r2
 80006c0:	1099      	asrs	r1, r3, #2
 80006c2:	17d3      	asrs	r3, r2, #31
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	1ad1      	subs	r1, r2, r3
 80006d0:	b2cb      	uxtb	r3, r1
 80006d2:	3330      	adds	r3, #48	; 0x30
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <start_recording+0x14c>)
 80006d8:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 80006da:	4919      	ldr	r1, [pc, #100]	; (8000740 <start_recording+0x14c>)
 80006dc:	4819      	ldr	r0, [pc, #100]	; (8000744 <start_recording+0x150>)
 80006de:	f00a fbfd 	bl	800aedc <iprintf>
	myprintf("file name %s \n", file_name);
 80006e2:	4917      	ldr	r1, [pc, #92]	; (8000740 <start_recording+0x14c>)
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <start_recording+0x150>)
 80006e6:	f000 f91d 	bl	8000924 <myprintf>
	file_counter++;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <start_recording+0x140>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <start_recording+0x140>)
 80006f4:	701a      	strb	r2, [r3, #0]

	// creating a file
	fres = f_open(&fil ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 80006f6:	220a      	movs	r2, #10
 80006f8:	4911      	ldr	r1, [pc, #68]	; (8000740 <start_recording+0x14c>)
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <start_recording+0x154>)
 80006fc:	f007 fd9c 	bl	8008238 <f_open>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <start_recording+0x158>)
 8000706:	701a      	strb	r2, [r3, #0]
	if(fres != 0)
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <start_recording+0x158>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d006      	beq.n	800071e <start_recording+0x12a>
	{
		myprintf("error in creating a file: %d \n", fres);
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <start_recording+0x158>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <start_recording+0x15c>)
 8000718:	f000 f904 	bl	8000924 <myprintf>
 800071c:	e002      	b.n	8000724 <start_recording+0x130>
	}
	else
	{
		myprintf("succeeded in opening a file \n");
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <start_recording+0x160>)
 8000720:	f000 f900 	bl	8000924 <myprintf>
	}
	wav_file_size = 0;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <start_recording+0x164>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000042c 	.word	0x2000042c
 8000738:	20000400 	.word	0x20000400
 800073c:	66666667 	.word	0x66666667
 8000740:	20000430 	.word	0x20000430
 8000744:	0800c890 	.word	0x0800c890
 8000748:	2000078c 	.word	0x2000078c
 800074c:	20000559 	.word	0x20000559
 8000750:	0800c8a0 	.word	0x0800c8a0
 8000754:	0800c8c0 	.word	0x0800c8c0
 8000758:	200009bc 	.word	0x200009bc

0800075c <dump_audio_content>:

void dump_audio_content(uint8_t *data, uint16_t data_size){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
	 //some variables for FatFs

	uint32_t temp_number;
	printf("w\n");
 8000768:	481c      	ldr	r0, [pc, #112]	; (80007dc <dump_audio_content+0x80>)
 800076a:	f00a fc1d 	bl	800afa8 <puts>
	if(first_access == 0) {
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <dump_audio_content+0x84>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d113      	bne.n	800079e <dump_audio_content+0x42>
		for(int i = 0; i < 44; i++){
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e00a      	b.n	8000792 <dump_audio_content+0x36>
			*(data + i) = wav_file_header[i];
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4918      	ldr	r1, [pc, #96]	; (80007e4 <dump_audio_content+0x88>)
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	440a      	add	r2, r1
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++){
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b2b      	cmp	r3, #43	; 0x2b
 8000796:	ddf1      	ble.n	800077c <dump_audio_content+0x20>
		}
		first_access = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <dump_audio_content+0x84>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
//	if(fres == FR_OK) {
//	myprintf("I was able to open 'audio.txt' for writing\r\n");
//	} else {
//	myprintf("f_open error In dump_audio :( (%i)\r\n", fres);
//	}
	fres = f_write(&fil,(void *)data, data_size,(UINT*)&temp_number);
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <dump_audio_content+0x8c>)
 80007a8:	f007 ff04 	bl	80085b4 <f_write>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <dump_audio_content+0x90>)
 80007b2:	701a      	strb	r2, [r3, #0]
//	for (int i = 0; i < 20; i++) {
//		myprintf("My data is: %x", (*data));
//	}
	if(fres != FR_OK) {
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <dump_audio_content+0x90>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <dump_audio_content+0x6c>
	//myprintf("Wrote %i bytes to '.lav'!\r\n", temp_number);
	myprintf("f_write error (%i)\r\n", fres);
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <dump_audio_content+0x90>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <dump_audio_content+0x94>)
 80007c4:	f000 f8ae 	bl	8000924 <myprintf>
	}

	wav_file_size += data_size;
 80007c8:	887a      	ldrh	r2, [r7, #2]
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <dump_audio_content+0x98>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <dump_audio_content+0x98>)
 80007d2:	6013      	str	r3, [r2, #0]

	//f_close(&fil);
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	0800c8e0 	.word	0x0800c8e0
 80007e0:	200009c0 	.word	0x200009c0
 80007e4:	20000400 	.word	0x20000400
 80007e8:	2000078c 	.word	0x2000078c
 80007ec:	20000559 	.word	0x20000559
 80007f0:	0800c8e4 	.word	0x0800c8e4
 80007f4:	200009bc 	.word	0x200009bc

080007f8 <stop_recording>:

void stop_recording() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	uint16_t temp_number;
		// updating data size sector
	wav_file_size -= 8;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <stop_recording+0xc0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3b08      	subs	r3, #8
 8000804:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <stop_recording+0xc0>)
 8000806:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <stop_recording+0xc0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <stop_recording+0xc4>)
 8000810:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <stop_recording+0xc0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <stop_recording+0xc4>)
 800081c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <stop_recording+0xc0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <stop_recording+0xc4>)
 8000828:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <stop_recording+0xc0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0e1b      	lsrs	r3, r3, #24
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <stop_recording+0xc4>)
 8000834:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <stop_recording+0xc0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b24      	subs	r3, #36	; 0x24
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <stop_recording+0xc0>)
 800083e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <stop_recording+0xc0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <stop_recording+0xc4>)
 8000848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <stop_recording+0xc0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <stop_recording+0xc4>)
 8000856:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <stop_recording+0xc0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <stop_recording+0xc4>)
 8000864:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <stop_recording+0xc0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0e1b      	lsrs	r3, r3, #24
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <stop_recording+0xc4>)
 8000872:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&fil, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <stop_recording+0xc8>)
 800087a:	f008 f8b8 	bl	80089ee <f_lseek>
	f_write(&fil,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	222c      	movs	r2, #44	; 0x2c
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <stop_recording+0xc4>)
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <stop_recording+0xc8>)
 8000886:	f007 fe95 	bl	80085b4 <f_write>
	if(fres != FR_OK)
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <stop_recording+0xcc>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d005      	beq.n	800089e <stop_recording+0xa6>
	{
		printf("error in updating the first sector: %d \n", fres);
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <stop_recording+0xcc>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <stop_recording+0xd0>)
 800089a:	f00a fb1f 	bl	800aedc <iprintf>
//		while(1);
	}

	f_close(&fil);
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <stop_recording+0xc8>)
 80008a0:	f008 f87b 	bl	800899a <f_close>
	first_access = 0;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <stop_recording+0xd4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	myprintf("Closing file now....");
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <stop_recording+0xd8>)
 80008ac:	f000 f83a 	bl	8000924 <myprintf>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200009bc 	.word	0x200009bc
 80008bc:	20000400 	.word	0x20000400
 80008c0:	2000078c 	.word	0x2000078c
 80008c4:	20000559 	.word	0x20000559
 80008c8:	0800c8fc 	.word	0x0800c8fc
 80008cc:	200009c0 	.word	0x200009c0
 80008d0:	0800c928 	.word	0x0800c928

080008d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d013      	beq.n	8000914 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008fc:	e000      	b.n	8000900 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000900:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800090a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000924:	b40f      	push	{r0, r1, r2, r3}
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <myprintf+0x44>)
 800093c:	f00a fbaa 	bl	800b094 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <myprintf+0x44>)
 8000942:	f7ff fc4d 	bl	80001e0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	b29a      	uxth	r2, r3
 800094e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000952:	4905      	ldr	r1, [pc, #20]	; (8000968 <myprintf+0x44>)
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <myprintf+0x48>)
 8000956:	f004 fe2e 	bl	80055b6 <HAL_UART_Transmit>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000964:	b004      	add	sp, #16
 8000966:	4770      	bx	lr
 8000968:	20001820 	.word	0x20001820
 800096c:	20000b14 	.word	0x20000b14

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 ff53 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f8bf 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 fa6b 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000982:	f000 fa49 	bl	8000e18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000986:	f000 fa1d 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 800098a:	f000 f93b 	bl	8000c04 <MX_I2S2_Init>
  MX_CRC_Init();
 800098e:	f000 f91d 	bl	8000bcc <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000992:	f008 fa91 	bl	8008eb8 <MX_PDM2PCM_Init>
  MX_SPI5_Init();
 8000996:	f000 f963 	bl	8000c60 <MX_SPI5_Init>
  MX_FATFS_Init();
 800099a:	f005 f981 	bl	8005ca0 <MX_FATFS_Init>
  MX_TIM3_Init();
 800099e:	f000 f995 	bl	8000ccc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2S_DMAStop(&hi2s2); //size in bytes so we divide by 2 TODO:check
  //HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)dataIn_PDM, sizeof(dataIn_PDM)/2);
  HAL_Delay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a6:	f000 ffad 	bl	8001904 <HAL_Delay>
  /*BELOW ADDED FOR SD_CARD*/
  sd_card_init();
 80009aa:	f7ff fdef 	bl	800058c <sd_card_init>
  while (1)
  {
//	  printf("Hello World \n");
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_Delay(1000);
	  if(button_flag)
 80009ae:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <main+0x144>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d051      	beq.n	8000a5c <main+0xec>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009b8:	2120      	movs	r1, #32
 80009ba:	483f      	ldr	r0, [pc, #252]	; (8000ab8 <main+0x148>)
 80009bc:	f001 fe71 	bl	80026a2 <HAL_GPIO_TogglePin>
		  if(start_stop_recording) { //1
 80009c0:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <main+0x14c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01a      	beq.n	8000a00 <main+0x90>
			  if (HAL_I2S_DMAStop(&hi2s2) != HAL_OK) {
 80009ca:	483d      	ldr	r0, [pc, #244]	; (8000ac0 <main+0x150>)
 80009cc:	f002 f898 	bl	8002b00 <HAL_I2S_DMAStop>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <main+0x6c>
				 myprintf("Big error in recording");
 80009d6:	483b      	ldr	r0, [pc, #236]	; (8000ac4 <main+0x154>)
 80009d8:	f7ff ffa4 	bl	8000924 <myprintf>
			  }
			  start_stop_recording = 0;
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <main+0x14c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 80009e2:	f7ff ff09 	bl	80007f8 <stop_recording>
			  half_i2s = 0;
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <main+0x158>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 80009ec:	4b37      	ldr	r3, [pc, #220]	; (8000acc <main+0x15c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			  printf("stop recording \n");
 80009f2:	4837      	ldr	r0, [pc, #220]	; (8000ad0 <main+0x160>)
 80009f4:	f00a fad8 	bl	800afa8 <puts>
			  myprintf("Stop recording \n");
 80009f8:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <main+0x164>)
 80009fa:	f7ff ff93 	bl	8000924 <myprintf>
 80009fe:	e02a      	b.n	8000a56 <main+0xe6>
		  }
		  else {
			  start_stop_recording = 1;
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <main+0x14c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_48K);
 8000a06:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000a0a:	f7ff fdf3 	bl	80005f4 <start_recording>
			  printf("start recording \n");
 8000a0e:	4832      	ldr	r0, [pc, #200]	; (8000ad8 <main+0x168>)
 8000a10:	f00a faca 	bl	800afa8 <puts>
			  myprintf("Start recording \n");
 8000a14:	4831      	ldr	r0, [pc, #196]	; (8000adc <main+0x16c>)
 8000a16:	f7ff ff85 	bl	8000924 <myprintf>
			  myprintf("start_recording %d and %d\n", half_i2s, full_i2s);
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <main+0x158>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <main+0x15c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <main+0x170>)
 8000a2c:	f7ff ff7a 	bl	8000924 <myprintf>
			  uint32_t myArrSize = sizeof(dataIn_PDM);
 8000a30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a34:	607b      	str	r3, [r7, #4]
			  myprintf("The size of my array is: %i", myArrSize);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	482a      	ldr	r0, [pc, #168]	; (8000ae4 <main+0x174>)
 8000a3a:	f7ff ff73 	bl	8000924 <myprintf>
			  //HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)dataIn_PDM, sizeof(dataIn_PDM)/2);
			  //CHECK: AudioInCtx[Instance].Size = (PDM_Clock_Freq/8U) * 2U * N_MS_PER_INTERRUPT;
			  if (HAL_I2S_Receive_DMA(&hi2s2, &I2S_InternalBuffer[0], (uint16_t)768/2U) != HAL_OK) {
 8000a3e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a42:	4929      	ldr	r1, [pc, #164]	; (8000ae8 <main+0x178>)
 8000a44:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <main+0x150>)
 8000a46:	f001 ff9f 	bl	8002988 <HAL_I2S_Receive_DMA>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <main+0xe6>
				  myprintf("Big error in DMA");
 8000a50:	4826      	ldr	r0, [pc, #152]	; (8000aec <main+0x17c>)
 8000a52:	f7ff ff67 	bl	8000924 <myprintf>
			  }
		  }
		  button_flag = 0;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <main+0x144>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	  }
	  //myprintf("PDM Data is: %x", dataIn_PDM[0]);
	  if(start_stop_recording == 1 && half_i2s == 1) {
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <main+0x14c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10f      	bne.n	8000a86 <main+0x116>
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <main+0x158>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d10a      	bne.n	8000a86 <main+0x116>
//		  PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
//		  myData = processedData[0];
		  half_i2s = 0;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <main+0x158>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
		  CONVERT_AUDIO_IN_PDMToPCM((uint16_t *)dataIn_PDM, processedData);
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <main+0x180>)
 8000a78:	481e      	ldr	r0, [pc, #120]	; (8000af4 <main+0x184>)
 8000a7a:	f000 fb61 	bl	8001140 <CONVERT_AUDIO_IN_PDMToPCM>
		  dump_audio_content((uint8_t*)processedData, WAV_WRITE_SAMPLE_COUNT);
 8000a7e:	2160      	movs	r1, #96	; 0x60
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <main+0x180>)
 8000a82:	f7ff fe6b 	bl	800075c <dump_audio_content>
		  //myprintf("audio dumped!");

	  }
	  if(start_stop_recording == 1 && full_i2s == 1) {
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <main+0x14c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d18e      	bne.n	80009ae <main+0x3e>
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <main+0x15c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d189      	bne.n	80009ae <main+0x3e>
//		  PDM_Filter(&dataIn_PDM[0], &processedData[0], &PDM1_filter_handler);
//		  myData = processedData[0];
		  full_i2s = 0;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <main+0x15c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
		  CONVERT_AUDIO_IN_PDMToPCM((uint16_t *)dataIn_PDM, processedData);
 8000aa0:	4913      	ldr	r1, [pc, #76]	; (8000af0 <main+0x180>)
 8000aa2:	4814      	ldr	r0, [pc, #80]	; (8000af4 <main+0x184>)
 8000aa4:	f000 fb4c 	bl	8001140 <CONVERT_AUDIO_IN_PDMToPCM>
		  dump_audio_content((uint8_t*)processedData + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <main+0x188>)
 8000aaa:	2160      	movs	r1, #96	; 0x60
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe55 	bl	800075c <dump_audio_content>
	  if(button_flag)
 8000ab2:	e77c      	b.n	80009ae <main+0x3e>
 8000ab4:	2000181c 	.word	0x2000181c
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	2000181d 	.word	0x2000181d
 8000ac0:	200009cc 	.word	0x200009cc
 8000ac4:	0800caa4 	.word	0x0800caa4
 8000ac8:	2000181a 	.word	0x2000181a
 8000acc:	2000181b 	.word	0x2000181b
 8000ad0:	0800cabc 	.word	0x0800cabc
 8000ad4:	0800cacc 	.word	0x0800cacc
 8000ad8:	0800cae0 	.word	0x0800cae0
 8000adc:	0800caf4 	.word	0x0800caf4
 8000ae0:	0800cb08 	.word	0x0800cb08
 8000ae4:	0800cb24 	.word	0x0800cb24
 8000ae8:	20001218 	.word	0x20001218
 8000aec:	0800cb40 	.word	0x0800cb40
 8000af0:	20001158 	.word	0x20001158
 8000af4:	20000b58 	.word	0x20000b58
 8000af8:	200011b8 	.word	0x200011b8

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	; 0x50
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	2230      	movs	r2, #48	; 0x30
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00a fb66 	bl	800b1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <SystemClock_Config+0xc8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <SystemClock_Config+0xc8>)
 8000b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <SystemClock_Config+0xc8>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fd7b 	bl	800367c <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b8c:	f000 fb0c 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2103      	movs	r1, #3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 ffdd 	bl	8003b6c <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb8:	f000 faf6 	bl	80011a8 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3750      	adds	r7, #80	; 0x50
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_CRC_Init+0x30>)
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <MX_CRC_Init+0x34>)
 8000bd4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bd6:	4809      	ldr	r0, [pc, #36]	; (8000bfc <MX_CRC_Init+0x30>)
 8000bd8:	f000 ffc9 	bl	8001b6e <HAL_CRC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000be2:	f000 fae1 	bl	80011a8 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <MX_CRC_Init+0x30>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <MX_CRC_Init+0x30>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0201 	orr.w	r2, r2, #1
 8000bf4:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200009c4 	.word	0x200009c4
 8000c00:	40023000 	.word	0x40023000

08000c04 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <MX_I2S2_Init+0x58>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c10:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c14:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c18:	2210      	movs	r2, #16
 8000c1a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c2a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c2e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_I2S2_Init+0x54>)
 8000c44:	f001 fd60 	bl	8002708 <HAL_I2S_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c4e:	f000 faab 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200009cc 	.word	0x200009cc
 8000c5c:	40003800 	.word	0x40003800

08000c60 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <MX_SPI5_Init+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c94:	2230      	movs	r2, #48	; 0x30
 8000c96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_SPI5_Init+0x64>)
 8000cb2:	f003 facb 	bl	800424c <HAL_SPI_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cbc:	f000 fa74 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000a74 	.word	0x20000a74
 8000cc8:	40015000 	.word	0x40015000

08000ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <MX_TIM3_Init+0xf4>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d22:	4826      	ldr	r0, [pc, #152]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d24:	f003 fec4 	bl	8004ab0 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d2e:	f000 fa3b 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d32:	4822      	ldr	r0, [pc, #136]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d34:	f003 ff0b 	bl	8004b4e <HAL_TIM_PWM_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d3e:	f000 fa33 	bl	80011a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000d42:	2307      	movs	r3, #7
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d46:	2350      	movs	r3, #80	; 0x50
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d5a:	f004 f813 	bl	8004d84 <HAL_TIM_SlaveConfigSynchro>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d64:	f000 fa20 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d78:	f004 fb62 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000d82:	f000 fa11 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d86:	2360      	movs	r3, #96	; 0x60
 8000d88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000d9e:	f003 ff2f 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000da8:	f000 f9fe 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM3_Init+0xf0>)
 8000dae:	f000 fbb5 	bl	800151c <HAL_TIM_MspPostInit>

}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	; 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000acc 	.word	0x20000acc
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_USART2_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	f004 fb8e 	bl	800551c <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f000 f9cf 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000b14 	.word	0x20000b14
 8000e14:	40004400 	.word	0x40004400

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_DMA_Init+0x3c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <MX_DMA_Init+0x3c>)
 8000e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_DMA_Init+0x3c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	200e      	movs	r0, #14
 8000e40:	f000 fe5f 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e44:	200e      	movs	r0, #14
 8000e46:	f000 fe78 	bl	8001b3a <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a33      	ldr	r2, [pc, #204]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a2c      	ldr	r2, [pc, #176]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_GPIO_Init+0x108>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <MX_GPIO_Init+0x10c>)
 8000ee4:	f001 fbc4 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	481e      	ldr	r0, [pc, #120]	; (8000f68 <MX_GPIO_Init+0x110>)
 8000eee:	f001 fbbf 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4818      	ldr	r0, [pc, #96]	; (8000f6c <MX_GPIO_Init+0x114>)
 8000f0a:	f001 fa2d 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f0e:	2320      	movs	r3, #32
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	480f      	ldr	r0, [pc, #60]	; (8000f64 <MX_GPIO_Init+0x10c>)
 8000f26:	f001 fa1f 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <MX_GPIO_Init+0x110>)
 8000f42:	f001 fa11 	bl	8002368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2028      	movs	r0, #40	; 0x28
 8000f4c:	f000 fdd9 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f50:	2028      	movs	r0, #40	; 0x28
 8000f52:	f000 fdf2 	bl	8001b3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800

08000f70 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e009      	b.n	8000f96 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fca2 	bl	80008d4 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbf1      	blt.n	8000f82 <_write+0x12>
	}
	return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
//	//MX_PDM2PCM_Process(&data_i2s[0], &processedData[0]);
//	myData = processedData[0];
//	full_i2s = 1;
	//myprintf("Reached Callback");
	uint32_t index;
	uint16_t * DataTempI2S = &(I2S_InternalBuffer[768/2U]);
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_I2S_RxCpltCallback+0xb4>)
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t a,b;
  for(index=0; index<(768/2U); index++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e03e      	b.n	8001038 <HAL_I2S_RxCpltCallback+0x90>
  {
	  a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	73fb      	strb	r3, [r7, #15]
	 b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	3301      	adds	r3, #1
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	73bb      	strb	r3, [r7, #14]
	 ((uint8_t *)(dataIn_PDM))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_I2S_RxCpltCallback+0xb8>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	b25a      	sxtb	r2, r3
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000fe6:	491e      	ldr	r1, [pc, #120]	; (8001060 <HAL_I2S_RxCpltCallback+0xb8>)
 8000fe8:	5ccb      	ldrb	r3, [r1, r3]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b259      	sxtb	r1, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_I2S_RxCpltCallback+0xbc>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
	 ((uint8_t *)(dataIn_PDM))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] | (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	085b      	lsrs	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_I2S_RxCpltCallback+0xb8>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	b25a      	sxtb	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001018:	4911      	ldr	r1, [pc, #68]	; (8001060 <HAL_I2S_RxCpltCallback+0xb8>)
 800101a:	5ccb      	ldrb	r3, [r1, r3]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b259      	sxtb	r1, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	3301      	adds	r3, #1
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_I2S_RxCpltCallback+0xbc>)
 800102c:	4413      	add	r3, r2
 800102e:	b2ca      	uxtb	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
  for(index=0; index<(768/2U); index++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800103e:	d3bc      	bcc.n	8000fba <HAL_I2S_RxCpltCallback+0x12>
  }
  full_i2s = 1;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_I2S_RxCpltCallback+0xc0>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
  myData = processedData[0];
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_I2S_RxCpltCallback+0xc4>)
 8001048:	881a      	ldrh	r2, [r3, #0]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_I2S_RxCpltCallback+0xc8>)
 800104c:	801a      	strh	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20001518 	.word	0x20001518
 8001060:	2000043c 	.word	0x2000043c
 8001064:	20000b58 	.word	0x20000b58
 8001068:	2000181b 	.word	0x2000181b
 800106c:	20001158 	.word	0x20001158
 8001070:	20001818 	.word	0x20001818

08001074 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
//			myprintf("Error is: %i", pcmErr);
//	}
//	myData = processedData[0];
//	half_i2s = 1;
	uint32_t index;
	uint16_t * DataTempI2S = I2S_InternalBuffer;
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_I2S_RxHalfCpltCallback+0xb4>)
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t a,b;
  for(index=0; index<384; index++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e03e      	b.n	8001104 <HAL_I2S_RxHalfCpltCallback+0x90>
  {
	a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	73fb      	strb	r3, [r7, #15]
	b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	3301      	adds	r3, #1
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	73bb      	strb	r3, [r7, #14]
	((uint8_t *)(dataIn_PDM))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80010a6:	4a21      	ldr	r2, [pc, #132]	; (800112c <HAL_I2S_RxHalfCpltCallback+0xb8>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	b25a      	sxtb	r2, r3
	  (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80010b2:	491e      	ldr	r1, [pc, #120]	; (800112c <HAL_I2S_RxHalfCpltCallback+0xb8>)
 80010b4:	5ccb      	ldrb	r3, [r1, r3]
 80010b6:	011b      	lsls	r3, r3, #4
	((uint8_t *)(dataIn_PDM))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b259      	sxtb	r1, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_I2S_RxHalfCpltCallback+0xbc>)
 80010c4:	4413      	add	r3, r2
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	  ((uint8_t *)(dataIn_PDM))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	085b      	lsrs	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80010d4:	4a15      	ldr	r2, [pc, #84]	; (800112c <HAL_I2S_RxHalfCpltCallback+0xb8>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	b25a      	sxtb	r2, r3
		(Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	085b      	lsrs	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80010e4:	4911      	ldr	r1, [pc, #68]	; (800112c <HAL_I2S_RxHalfCpltCallback+0xb8>)
 80010e6:	5ccb      	ldrb	r3, [r1, r3]
 80010e8:	011b      	lsls	r3, r3, #4
	  ((uint8_t *)(dataIn_PDM))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b259      	sxtb	r1, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_I2S_RxHalfCpltCallback+0xbc>)
 80010f8:	4413      	add	r3, r2
 80010fa:	b2ca      	uxtb	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
  for(index=0; index<384; index++)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800110a:	d3bc      	bcc.n	8001086 <HAL_I2S_RxHalfCpltCallback+0x12>
  }
  myData = processedData[0];
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2S_RxHalfCpltCallback+0xc0>)
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2S_RxHalfCpltCallback+0xc4>)
 8001112:	801a      	strh	r2, [r3, #0]
  half_i2s = 1;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_I2S_RxHalfCpltCallback+0xc8>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20001218 	.word	0x20001218
 800112c:	2000043c 	.word	0x2000043c
 8001130:	20000b58 	.word	0x20000b58
 8001134:	20001158 	.word	0x20001158
 8001138:	20001818 	.word	0x20001818
 800113c:	2000181a 	.word	0x2000181a

08001140 <CONVERT_AUDIO_IN_PDMToPCM>:

//TODO: might need different filter handlers
int32_t CONVERT_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	uint32_t index;
	for(index = 0; index < NUM_AUDIO_IN_CHANNELS; index++) {
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e00d      	b.n	800116c <CONVERT_AUDIO_IN_PDMToPCM+0x2c>
		(void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM1_filter_handler);
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	18d0      	adds	r0, r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <CONVERT_AUDIO_IN_PDMToPCM+0x3c>)
 8001160:	4619      	mov	r1, r3
 8001162:	f009 fd9f 	bl	800aca4 <PDM_Filter>
	for(index = 0; index < NUM_AUDIO_IN_CHANNELS; index++) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d9ee      	bls.n	8001150 <CONVERT_AUDIO_IN_PDMToPCM+0x10>
	}
	return 1;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20001970 	.word	0x20001970

08001180 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin) {
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001190:	d102      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
	}
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	2000181c 	.word	0x2000181c

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_MspInit+0x4c>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_MspInit+0x4c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011f2:	2007      	movs	r0, #7
 80011f4:	f000 fc7a 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <HAL_CRC_MspInit+0x3c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10d      	bne.n	8001232 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_CRC_MspInit+0x40>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_CRC_MspInit+0x40>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_CRC_MspInit+0x40>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023000 	.word	0x40023000
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_I2S_MspInit+0x15c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	f040 808f 	bne.w	800139c <HAL_I2S_MspInit+0x154>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800127e:	2301      	movs	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8001282:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001286:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 8001288:	2307      	movs	r3, #7
 800128a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fe89 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 80012a0:	f7ff ff82 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_I2S_MspInit+0x160>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012f8:	2308      	movs	r3, #8
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001308:	2305      	movs	r3, #5
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	4619      	mov	r1, r3
 8001312:	4826      	ldr	r0, [pc, #152]	; (80013ac <HAL_I2S_MspInit+0x164>)
 8001314:	f001 f828 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001318:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800132a:	2305      	movs	r3, #5
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001332:	4619      	mov	r1, r3
 8001334:	481e      	ldr	r0, [pc, #120]	; (80013b0 <HAL_I2S_MspInit+0x168>)
 8001336:	f001 f817 	bl	8002368 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_I2S_MspInit+0x170>)
 800133e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 800135c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001360:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001368:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 800136c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001370:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001378:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001382:	f000 fc11 	bl	8001ba8 <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 800138c:	f7ff ff0c 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001394:	63da      	str	r2, [r3, #60]	; 0x3c
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_I2S_MspInit+0x16c>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40003800 	.word	0x40003800
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020400 	.word	0x40020400
 80013b4:	20000a14 	.word	0x20000a14
 80013b8:	40026058 	.word	0x40026058

080013bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_SPI_MspInit+0xc0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d14a      	bne.n	8001474 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_SPI_MspInit+0xc4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    PA12     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001442:	2306      	movs	r3, #6
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <HAL_SPI_MspInit+0xc8>)
 800144e:	f000 ff8b 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001452:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001464:	2306      	movs	r3, #6
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_SPI_MspInit+0xcc>)
 8001470:	f000 ff7a 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40015000 	.word	0x40015000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_TIM_Base_MspInit+0x84>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12b      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_TIM_Base_MspInit+0x88>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_TIM_Base_MspInit+0x88>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_TIM_Base_MspInit+0x88>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_TIM_Base_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_TIM_Base_MspInit+0x88>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_TIM_Base_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f6:	2302      	movs	r3, #2
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 8001502:	f000 ff31 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40000400 	.word	0x40000400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <HAL_TIM_MspPostInit+0x68>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d11d      	bne.n	800157a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_TIM_MspPostInit+0x6c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_TIM_MspPostInit+0x6c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_TIM_MspPostInit+0x6c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800156a:	2302      	movs	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_TIM_MspPostInit+0x70>)
 8001576:	f000 fef7 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40000400 	.word	0x40000400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d12b      	bne.n	800160a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ea:	230c      	movs	r3, #12
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fa:	2307      	movs	r3, #7
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0x8c>)
 8001606:	f000 feaf 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40004400 	.word	0x40004400
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f92a 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA1_Stream3_IRQHandler+0x10>)
 800167a:	f000 fc0b 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000a14 	.word	0x20000a14

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800168c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001690:	f001 f822 	bl	80026d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
  }

  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f009 fd84 	bl	800b278 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20020000 	.word	0x20020000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20001920 	.word	0x20001920
 80017a4:	20001b10 	.word	0x20001b10

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d2:	490e      	ldr	r1, [pc, #56]	; (800180c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e8:	4c0b      	ldr	r4, [pc, #44]	; (8001818 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f6:	f7ff ffd7 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f009 fd43 	bl	800b284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff f8b7 	bl	8000970 <main>
  bx  lr    
 8001802:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	2000053c 	.word	0x2000053c
  ldr r2, =_sidata
 8001810:	0800cccc 	.word	0x0800cccc
  ldr r2, =_sbss
 8001814:	2000053c 	.word	0x2000053c
  ldr r4, =_ebss
 8001818:	20001b10 	.word	0x20001b10

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_Init+0x40>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_Init+0x40>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_Init+0x40>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f94f 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f808 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff fcae 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f967 	bl	8001b56 <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a0:	f000 f92f 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200004bc 	.word	0x200004bc
 80018bc:	200004c4 	.word	0x200004c4
 80018c0:	200004c0 	.word	0x200004c0

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200004c4 	.word	0x200004c4
 80018e8:	20001924 	.word	0x20001924

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20001924 	.word	0x20001924

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200004c4 	.word	0x200004c4

0800194c <__NVIC_SetPriorityGrouping>:
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00e      	b.n	8001b9e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fb37 	bl	8001204 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fe9a 	bl	80018ec <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e099      	b.n	8001cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fe81 	bl	80018ec <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d908      	bls.n	8001c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e078      	b.n	8001cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x158>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d117      	bne.n	8001cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fadf 	bl	8002270 <DMA_CheckFifoParam>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa96 	bl	8002204 <DMA_CalcBaseAndBitshift>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	f010803f 	.word	0xf010803f

08001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Start_IT+0x26>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e040      	b.n	8001dac <HAL_DMA_Start_IT+0xa8>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12f      	bne.n	8001d9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fa28 	bl	80021a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0216 	orr.w	r2, r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e005      	b.n	8001daa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff fd93 	bl	80018ec <HAL_GetTick>
 8001dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e052      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0216 	bic.w	r2, r2, #22
 8001df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_DMA_Abort+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	e013      	b.n	8001e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e38:	f7ff fd58 	bl	80018ec <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d90c      	bls.n	8001e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e015      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e4      	bne.n	8001e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ea0:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <HAL_DMA_IRQHandler+0x248>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8e      	ldr	r2, [pc, #568]	; (80020e0 <HAL_DMA_IRQHandler+0x24c>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01a      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0204 	bic.w	r2, r2, #4
 8001ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2208      	movs	r2, #8
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0202 	orr.w	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2204      	movs	r2, #4
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2210      	movs	r2, #16
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d043      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03c      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2210      	movs	r2, #16
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d024      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e01f      	b.n	8002004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e016      	b.n	8002004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0208 	bic.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2220      	movs	r2, #32
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 808f 	beq.w	8002134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8087 	beq.w	8002134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2220      	movs	r2, #32
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b05      	cmp	r3, #5
 800203c:	d136      	bne.n	80020ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0216 	bic.w	r2, r2, #22
 800204c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800205c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <HAL_DMA_IRQHandler+0x1da>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0208 	bic.w	r2, r2, #8
 800207c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	223f      	movs	r2, #63	; 0x3f
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d07e      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
        }
        return;
 80020aa:	e079      	b.n	80021a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
 80020d8:	e02c      	b.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
 80020da:	bf00      	nop
 80020dc:	200004bc 	.word	0x200004bc
 80020e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e01e      	b.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	2b00      	cmp	r3, #0
 800213a:	d032      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d022      	beq.n	800218e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3301      	adds	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	d307      	bcc.n	800217c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f2      	bne.n	8002160 <HAL_DMA_IRQHandler+0x2cc>
 800217a:	e000      	b.n	800217e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800217c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e000      	b.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021a0:	bf00      	nop
    }
  }
}
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d108      	bne.n	80021e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e6:	e007      	b.n	80021f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3b10      	subs	r3, #16
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <DMA_CalcBaseAndBitshift+0x64>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <DMA_CalcBaseAndBitshift+0x68>)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d909      	bls.n	8002246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	; 0x58
 8002244:	e007      	b.n	8002256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	aaaaaaab 	.word	0xaaaaaaab
 800226c:	0800cbe8 	.word	0x0800cbe8

08002270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11f      	bne.n	80022ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d856      	bhi.n	800233e <DMA_CheckFifoParam+0xce>
 8002290:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <DMA_CheckFifoParam+0x28>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022bb 	.word	0x080022bb
 80022a0:	080022a9 	.word	0x080022a9
 80022a4:	0800233f 	.word	0x0800233f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d046      	beq.n	8002342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b8:	e043      	b.n	8002342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c2:	d140      	bne.n	8002346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c8:	e03d      	b.n	8002346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d2:	d121      	bne.n	8002318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d837      	bhi.n	800234a <DMA_CheckFifoParam+0xda>
 80022da:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <DMA_CheckFifoParam+0x70>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	080022f7 	.word	0x080022f7
 80022e8:	080022f1 	.word	0x080022f1
 80022ec:	08002309 	.word	0x08002309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	e030      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d025      	beq.n	800234e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002306:	e022      	b.n	800234e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002310:	d11f      	bne.n	8002352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002316:	e01c      	b.n	8002352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d903      	bls.n	8002326 <DMA_CheckFifoParam+0xb6>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d003      	beq.n	800232c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002324:	e018      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
      break;
 800232a:	e015      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      break;
 800233c:	e00b      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 800233e:	bf00      	nop
 8002340:	e00a      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e008      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e006      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e004      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e002      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;   
 8002352:	bf00      	nop
 8002354:	e000      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 8002356:	bf00      	nop
    }
  } 
  
  return status; 
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e159      	b.n	8002638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8148 	bne.w	8002632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d005      	beq.n	80023ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d130      	bne.n	800241c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d017      	beq.n	8002458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d123      	bne.n	80024ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	08da      	lsrs	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a2 	beq.w	8002632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a56      	ldr	r2, [pc, #344]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b54      	ldr	r3, [pc, #336]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250a:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a49      	ldr	r2, [pc, #292]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x202>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <HAL_GPIO_Init+0x2f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x1fe>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a47      	ldr	r2, [pc, #284]	; (8002660 <HAL_GPIO_Init+0x2f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a46      	ldr	r2, [pc, #280]	; (8002664 <HAL_GPIO_Init+0x2fc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x1f6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a45      	ldr	r2, [pc, #276]	; (8002668 <HAL_GPIO_Init+0x300>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x1f2>
 8002556:	2304      	movs	r3, #4
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x204>
 800255a:	2307      	movs	r3, #7
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x204>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x204>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x204>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x204>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257c:	4935      	ldr	r1, [pc, #212]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_GPIO_Init+0x304>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ae:	4a2f      	ldr	r2, [pc, #188]	; (800266c <HAL_GPIO_Init+0x304>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_GPIO_Init+0x304>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_GPIO_Init+0x304>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025de:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_GPIO_Init+0x304>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002602:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_GPIO_Init+0x304>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_GPIO_Init+0x304>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <HAL_GPIO_Init+0x304>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f aea2 	bls.w	8002384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43d9      	mvns	r1, r3
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	400b      	ands	r3, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fd42 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40013c00 	.word	0x40013c00

08002708 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e128      	b.n	800296c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a90      	ldr	r2, [pc, #576]	; (8002974 <HAL_I2S_Init+0x26c>)
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe fd87 	bl	8001248 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d060      	beq.n	8002828 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800276e:	2310      	movs	r3, #16
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e001      	b.n	8002778 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d802      	bhi.n	8002786 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002786:	2001      	movs	r0, #1
 8002788:	f001 fd00 	bl	800418c <HAL_RCCEx_GetPeriphCLKFreq>
 800278c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d125      	bne.n	80027e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	3305      	adds	r3, #5
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e01f      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	3305      	adds	r3, #5
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e00e      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	3305      	adds	r3, #5
 8002800:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <HAL_I2S_Init+0x270>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002828:	2302      	movs	r3, #2
 800282a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d902      	bls.n	800283c <HAL_I2S_Init+0x134>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d907      	bls.n	800284c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e08f      	b.n	800296c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	430a      	orrs	r2, r1
 800285e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6851      	ldr	r1, [r2, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68d2      	ldr	r2, [r2, #12]
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6992      	ldr	r2, [r2, #24]
 8002882:	430a      	orrs	r2, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d161      	bne.n	800295c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_I2S_Init+0x274>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x1a4>
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x1a8>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4932      	ldr	r1, [pc, #200]	; (8002980 <HAL_I2S_Init+0x278>)
 80028b8:	428a      	cmp	r2, r1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2S_Init+0x1b8>
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028be:	e001      	b.n	80028c4 <HAL_I2S_Init+0x1bc>
 80028c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c8:	f023 030f 	bic.w	r3, r3, #15
 80028cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_I2S_Init+0x278>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_I2S_Init+0x1d4>
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028da:	e001      	b.n	80028e0 <HAL_I2S_Init+0x1d8>
 80028dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e0:	2202      	movs	r2, #2
 80028e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_I2S_Init+0x278>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_I2S_Init+0x1ea>
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2S_Init+0x1ee>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d003      	beq.n	800290c <HAL_I2S_Init+0x204>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800290c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e001      	b.n	8002918 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002922:	4313      	orrs	r3, r2
 8002924:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800292c:	4313      	orrs	r3, r2
 800292e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002936:	4313      	orrs	r3, r2
 8002938:	b29a      	uxth	r2, r3
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	4313      	orrs	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002944:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_I2S_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_I2S_Init+0x24c>
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_I2S_Init+0x27c>)
 8002952:	e001      	b.n	8002958 <HAL_I2S_Init+0x250>
 8002954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08003041 	.word	0x08003041
 8002978:	cccccccd 	.word	0xcccccccd
 800297c:	080031c9 	.word	0x080031c9
 8002980:	40003800 	.word	0x40003800
 8002984:	40003400 	.word	0x40003400

08002988 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_I2S_Receive_DMA+0x1a>
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0a1      	b.n	8002aea <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2S_Receive_DMA+0x2e>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e099      	b.n	8002aea <HAL_I2S_Receive_DMA+0x162>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d005      	beq.n	80029d6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	e089      	b.n	8002aea <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2204      	movs	r2, #4
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d002      	beq.n	8002a02 <HAL_I2S_Receive_DMA+0x7a>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d10a      	bne.n	8002a18 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	865a      	strh	r2, [r3, #50]	; 0x32
 8002a16:	e005      	b.n	8002a24 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	4a32      	ldr	r2, [pc, #200]	; (8002af4 <HAL_I2S_Receive_DMA+0x16c>)
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	4a31      	ldr	r2, [pc, #196]	; (8002af8 <HAL_I2S_Receive_DMA+0x170>)
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <HAL_I2S_Receive_DMA+0x174>)
 8002a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4a:	d10a      	bne.n	8002a62 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002a7a:	f7ff f943 	bl	8001d04 <HAL_DMA_Start_IT>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00f      	beq.n	8002aa4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f043 0208 	orr.w	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e022      	b.n	8002aea <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ac0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08002f1f 	.word	0x08002f1f
 8002af8:	08002edd 	.word	0x08002edd
 8002afc:	08002f3b 	.word	0x08002f3b

08002b00 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b14:	d004      	beq.n	8002b20 <HAL_I2S_DMAStop+0x20>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 80d1 	bne.w	8002cc2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00f      	beq.n	8002b48 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f941 	bl	8001db4 <HAL_DMA_Abort>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0208 	orr.w	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002b48:	2364      	movs	r3, #100	; 0x64
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fb00 	bl	8003154 <I2S_WaitFlagStateUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002b72:	2364      	movs	r3, #100	; 0x64
 8002b74:	2200      	movs	r2, #0
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 faeb 	bl	8003154 <I2S_WaitFlagStateUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002baa:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0202 	bic.w	r2, r2, #2
 8002bc8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	f040 8165 	bne.w	8002ea2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00f      	beq.n	8002c00 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f8e5 	bl	8001db4 <HAL_DMA_Abort>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	f043 0208 	orr.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a8a      	ldr	r2, [pc, #552]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_I2S_DMAStop+0x10e>
 8002c0a:	4b8a      	ldr	r3, [pc, #552]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002c0c:	e001      	b.n	8002c12 <HAL_I2S_DMAStop+0x112>
 8002c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4985      	ldr	r1, [pc, #532]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002c1a:	428b      	cmp	r3, r1
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2S_DMAStop+0x122>
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002c20:	e001      	b.n	8002c26 <HAL_I2S_DMAStop+0x126>
 8002c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a7e      	ldr	r2, [pc, #504]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_I2S_DMAStop+0x13e>
 8002c3a:	4b7e      	ldr	r3, [pc, #504]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002c3c:	e001      	b.n	8002c42 <HAL_I2S_DMAStop+0x142>
 8002c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a79      	ldr	r2, [pc, #484]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d101      	bne.n	8002c54 <HAL_I2S_DMAStop+0x154>
 8002c50:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002c52:	e001      	b.n	8002c58 <HAL_I2S_DMAStop+0x158>
 8002c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a73      	ldr	r2, [pc, #460]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_I2S_DMAStop+0x16c>
 8002c68:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002c6a:	e001      	b.n	8002c70 <HAL_I2S_DMAStop+0x170>
 8002c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	496e      	ldr	r1, [pc, #440]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2S_DMAStop+0x180>
 8002c7c:	4b6d      	ldr	r3, [pc, #436]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002c7e:	e001      	b.n	8002c84 <HAL_I2S_DMAStop+0x184>
 8002c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002caa:	e0fa      	b.n	8002ea2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5f      	ldr	r2, [pc, #380]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_I2S_DMAStop+0x1ba>
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002cb8:	e001      	b.n	8002cbe <HAL_I2S_DMAStop+0x1be>
 8002cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cbe:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002cc0:	e0ef      	b.n	8002ea2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cca:	d005      	beq.n	8002cd8 <HAL_I2S_DMAStop+0x1d8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd4:	f040 80e5 	bne.w	8002ea2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00f      	beq.n	8002d00 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f865 	bl	8001db4 <HAL_DMA_Abort>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0208 	orr.w	r2, r3, #8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	f040 809a 	bne.w	8002e42 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00f      	beq.n	8002d36 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f84a 	bl	8001db4 <HAL_DMA_Abort>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f043 0208 	orr.w	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002d36:	f7fe fdd9 	bl	80018ec <HAL_GetTick>
 8002d3a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002d3c:	e012      	b.n	8002d64 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002d3e:	f7fe fdd5 	bl	80018ec <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	d90b      	bls.n	8002d64 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2S_DMAStop+0x272>
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002d70:	e001      	b.n	8002d76 <HAL_I2S_DMAStop+0x276>
 8002d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d1de      	bne.n	8002d3e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002d80:	e012      	b.n	8002da8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002d82:	f7fe fdb3 	bl	80018ec <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d90b      	bls.n	8002da8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_I2S_DMAStop+0x2b6>
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002db4:	e001      	b.n	8002dba <HAL_I2S_DMAStop+0x2ba>
 8002db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d0de      	beq.n	8002d82 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2S_DMAStop+0x2d2>
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002dd0:	e001      	b.n	8002dd6 <HAL_I2S_DMAStop+0x2d6>
 8002dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4914      	ldr	r1, [pc, #80]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002dde:	428b      	cmp	r3, r1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2S_DMAStop+0x2e6>
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002de4:	e001      	b.n	8002dea <HAL_I2S_DMAStop+0x2ea>
 8002de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2S_DMAStop+0x302>
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002e00:	e001      	b.n	8002e06 <HAL_I2S_DMAStop+0x306>
 8002e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_I2S_DMAStop+0x31a>
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002e18:	e001      	b.n	8002e1e <HAL_I2S_DMAStop+0x31e>
 8002e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4902      	ldr	r1, [pc, #8]	; (8002e30 <HAL_I2S_DMAStop+0x330>)
 8002e26:	428b      	cmp	r3, r1
 8002e28:	d106      	bne.n	8002e38 <HAL_I2S_DMAStop+0x338>
 8002e2a:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <HAL_I2S_DMAStop+0x334>)
 8002e2c:	e006      	b.n	8002e3c <HAL_I2S_DMAStop+0x33c>
 8002e2e:	bf00      	nop
 8002e30:	40003800 	.word	0x40003800
 8002e34:	40003400 	.word	0x40003400
 8002e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3c:	f022 0202 	bic.w	r2, r2, #2
 8002e40:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	d10c      	bne.n	8002e9c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e002      	b.n	8002ea2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7fe f849 	bl	8000fa8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fe f8a1 	bl	8001074 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0203 	bic.w	r2, r2, #3
 8002f56:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff ffa5 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c9a      	adds	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10e      	bne.n	8002fda <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff6d 	bl	8002eb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	1c9a      	adds	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003028:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd ffb8 	bl	8000fa8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b04      	cmp	r3, #4
 800305a:	d13a      	bne.n	80030d2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d109      	bne.n	800307a <I2S_IRQHandler+0x3a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d102      	bne.n	800307a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffb4 	bl	8002fe2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d126      	bne.n	80030d2 <I2S_IRQHandler+0x92>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d11f      	bne.n	80030d2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030a0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0202 	orr.w	r2, r3, #2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fefb 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d136      	bne.n	800314c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d109      	bne.n	80030fc <I2S_IRQHandler+0xbc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d102      	bne.n	80030fc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff45 	bl	8002f86 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d122      	bne.n	800314c <I2S_IRQHandler+0x10c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b20      	cmp	r3, #32
 8003112:	d11b      	bne.n	800314c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003122:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff febe 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003164:	f7fe fbc2 	bl	80018ec <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800316a:	e018      	b.n	800319e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	d014      	beq.n	800319e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003174:	f7fe fbba 	bl	80018ec <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d902      	bls.n	800318a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e00f      	b.n	80031be <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1d7      	bne.n	800316c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a92      	ldr	r2, [pc, #584]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80031e2:	4b92      	ldr	r3, [pc, #584]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031e4:	e001      	b.n	80031ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80031e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a8b      	ldr	r2, [pc, #556]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003200:	4b8a      	ldr	r3, [pc, #552]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003202:	e001      	b.n	8003208 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d004      	beq.n	8003220 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8099 	bne.w	8003352 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d107      	bne.n	800323a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f925 	bl	8003484 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9c8 	bl	80035e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d13a      	bne.n	80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d035      	beq.n	80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003272:	4b6e      	ldr	r3, [pc, #440]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003274:	e001      	b.n	800327a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4969      	ldr	r1, [pc, #420]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003282:	428b      	cmp	r3, r1
 8003284:	d101      	bne.n	800328a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003286:	4b69      	ldr	r3, [pc, #420]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003288:	e001      	b.n	800328e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800328a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800328e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003292:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fdfa 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b08      	cmp	r3, #8
 80032dc:	f040 80c3 	bne.w	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80bd 	beq.w	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003306:	4b49      	ldr	r3, [pc, #292]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003308:	e001      	b.n	800330e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800330a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4944      	ldr	r1, [pc, #272]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003316:	428b      	cmp	r3, r1
 8003318:	d101      	bne.n	800331e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800331a:	4b44      	ldr	r3, [pc, #272]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800331c:	e001      	b.n	8003322 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800331e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003322:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003326:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fdbc 	bl	8002ec8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003350:	e089      	b.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d107      	bne.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8be 	bl	80034e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8fd 	bl	8003580 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d12f      	bne.n	80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02a      	beq.n	80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033b6:	e001      	b.n	80033bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80033b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4919      	ldr	r1, [pc, #100]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d101      	bne.n	80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80033c8:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033ca:	e001      	b.n	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80033cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fd6c 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d136      	bne.n	8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d031      	beq.n	8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003410:	e001      	b.n	8003416 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4902      	ldr	r1, [pc, #8]	; (8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800341e:	428b      	cmp	r3, r1
 8003420:	d106      	bne.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003422:	4b02      	ldr	r3, [pc, #8]	; (800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003424:	e006      	b.n	8003434 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003426:	bf00      	nop
 8003428:	40003800 	.word	0x40003800
 800342c:	40003400 	.word	0x40003400
 8003430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003438:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003448:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fd32 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003464:	e000      	b.n	8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003466:	bf00      	nop
}
 8003468:	bf00      	nop
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	1c99      	adds	r1, r3, #2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6251      	str	r1, [r2, #36]	; 0x24
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d113      	bne.n	80034de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ffc9 	bl	8003470 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c99      	adds	r1, r3, #2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6251      	str	r1, [r2, #36]	; 0x24
 80034fa:	8819      	ldrh	r1, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <I2SEx_TxISR_I2SExt+0x90>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <I2SEx_TxISR_I2SExt+0x22>
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <I2SEx_TxISR_I2SExt+0x94>)
 8003508:	e001      	b.n	800350e <I2SEx_TxISR_I2SExt+0x26>
 800350a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350e:	460a      	mov	r2, r1
 8003510:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d121      	bne.n	800356e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <I2SEx_TxISR_I2SExt+0x90>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <I2SEx_TxISR_I2SExt+0x50>
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <I2SEx_TxISR_I2SExt+0x94>)
 8003536:	e001      	b.n	800353c <I2SEx_TxISR_I2SExt+0x54>
 8003538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	490d      	ldr	r1, [pc, #52]	; (8003578 <I2SEx_TxISR_I2SExt+0x90>)
 8003544:	428b      	cmp	r3, r1
 8003546:	d101      	bne.n	800354c <I2SEx_TxISR_I2SExt+0x64>
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <I2SEx_TxISR_I2SExt+0x94>)
 800354a:	e001      	b.n	8003550 <I2SEx_TxISR_I2SExt+0x68>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003554:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff81 	bl	8003470 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40003800 	.word	0x40003800
 800357c:	40003400 	.word	0x40003400

08003580 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68d8      	ldr	r0, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	1c99      	adds	r1, r3, #2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003598:	b282      	uxth	r2, r0
 800359a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff4a 	bl	8003470 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <I2SEx_RxISR_I2SExt+0x90>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <I2SEx_RxISR_I2SExt+0x16>
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <I2SEx_RxISR_I2SExt+0x94>)
 80035f8:	e001      	b.n	80035fe <I2SEx_RxISR_I2SExt+0x1a>
 80035fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fe:	68d8      	ldr	r0, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	1c99      	adds	r1, r3, #2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	62d1      	str	r1, [r2, #44]	; 0x2c
 800360a:	b282      	uxth	r2, r0
 800360c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d121      	bne.n	800366a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <I2SEx_RxISR_I2SExt+0x90>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <I2SEx_RxISR_I2SExt+0x50>
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <I2SEx_RxISR_I2SExt+0x94>)
 8003632:	e001      	b.n	8003638 <I2SEx_RxISR_I2SExt+0x54>
 8003634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	490d      	ldr	r1, [pc, #52]	; (8003674 <I2SEx_RxISR_I2SExt+0x90>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d101      	bne.n	8003648 <I2SEx_RxISR_I2SExt+0x64>
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <I2SEx_RxISR_I2SExt+0x94>)
 8003646:	e001      	b.n	800364c <I2SEx_RxISR_I2SExt+0x68>
 8003648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003650:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff03 	bl	8003470 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40003800 	.word	0x40003800
 8003678:	40003400 	.word	0x40003400

0800367c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e267      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	4b88      	ldr	r3, [pc, #544]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b85      	ldr	r3, [pc, #532]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b7e      	ldr	r3, [pc, #504]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e242      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b76      	ldr	r3, [pc, #472]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b70      	ldr	r3, [pc, #448]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6f      	ldr	r2, [pc, #444]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b6d      	ldr	r3, [pc, #436]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6c      	ldr	r2, [pc, #432]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b69      	ldr	r3, [pc, #420]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe f8da 	bl	80018ec <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe f8d6 	bl	80018ec <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e207      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b5b      	ldr	r3, [pc, #364]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe f8c6 	bl	80018ec <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe f8c2 	bl	80018ec <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1f3      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b51      	ldr	r3, [pc, #324]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b44      	ldr	r3, [pc, #272]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4937      	ldr	r1, [pc, #220]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x244>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe f87b 	bl	80018ec <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe f877 	bl	80018ec <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1a8      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b28      	ldr	r3, [pc, #160]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4925      	ldr	r1, [pc, #148]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <HAL_RCC_OscConfig+0x244>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe f85a 	bl	80018ec <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe f856 	bl	80018ec <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e187      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d036      	beq.n	80038d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_RCC_OscConfig+0x248>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe f83a 	bl	80018ec <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe f836 	bl	80018ec <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e167      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_OscConfig+0x240>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e01b      	b.n	80038d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_OscConfig+0x248>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe f823 	bl	80018ec <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e00e      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe f81f 	bl	80018ec <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d907      	bls.n	80038c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e150      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470000 	.word	0x42470000
 80038c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ea      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b81      	ldr	r3, [pc, #516]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b7d      	ldr	r3, [pc, #500]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a7c      	ldr	r2, [pc, #496]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b77      	ldr	r3, [pc, #476]	; (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b74      	ldr	r3, [pc, #464]	; (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	; (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fd ffdf 	bl	80018ec <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fd ffdb 	bl	80018ec <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e10c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x2ea>
 8003958:	4b64      	ldr	r3, [pc, #400]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a63      	ldr	r2, [pc, #396]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b05      	cmp	r3, #5
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x30c>
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	4a5e      	ldr	r2, [pc, #376]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	; 0x70
 800397a:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a5b      	ldr	r2, [pc, #364]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003988:	4b58      	ldr	r3, [pc, #352]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	; 0x70
 8003994:	4b55      	ldr	r3, [pc, #340]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	4a54      	ldr	r2, [pc, #336]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 0304 	bic.w	r3, r3, #4
 800399e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd ffa0 	bl	80018ec <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd ff9c 	bl	80018ec <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0cb      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCC_OscConfig+0x334>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7fd ff8a 	bl	80018ec <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd ff86 	bl	80018ec <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ee      	bne.n	80039dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	4a38      	ldr	r2, [pc, #224]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a1 	beq.w	8003b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d05c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d141      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd ff5a 	bl	80018ec <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd ff56 	bl	80018ec <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e087      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	491b      	ldr	r1, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fd ff2f 	bl	80018ec <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fd ff2b 	bl	80018ec <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e05c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003ab0:	e054      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd ff18 	bl	80018ec <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd ff14 	bl	80018ec <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x444>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e038      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d121      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d111      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0cc      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d90c      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b65      	ldr	r3, [pc, #404]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b8      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b59      	ldr	r3, [pc, #356]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b50      	ldr	r3, [pc, #320]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	494d      	ldr	r1, [pc, #308]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d044      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e067      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4934      	ldr	r1, [pc, #208]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd fe46 	bl	80018ec <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fd fe42 	bl	80018ec <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e04f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d20c      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e032      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4916      	ldr	r1, [pc, #88]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	490e      	ldr	r1, [pc, #56]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf2:	f000 f821 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490a      	ldr	r1, [pc, #40]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fda6 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	0800cbd0 	.word	0x0800cbd0
 8003d30:	200004bc 	.word	0x200004bc
 8003d34:	200004c0 	.word	0x200004c0

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b094      	sub	sp, #80	; 0x50
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	647b      	str	r3, [r7, #68]	; 0x44
 8003d44:	2300      	movs	r3, #0
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d48:	2300      	movs	r3, #0
 8003d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d50:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x40>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	f200 80e1 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x34>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6a:	e0db      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b73      	ldr	r3, [pc, #460]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d70:	e0db      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d76:	e0d8      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d78:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d063      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30
 8003da2:	2300      	movs	r3, #0
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
 8003da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	6139      	str	r1, [r7, #16]
 8003dc8:	4629      	mov	r1, r5
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	018b      	lsls	r3, r1, #6
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de6:	4651      	mov	r1, sl
 8003de8:	018a      	lsls	r2, r1, #6
 8003dea:	4651      	mov	r1, sl
 8003dec:	ebb2 0801 	subs.w	r8, r2, r1
 8003df0:	4659      	mov	r1, fp
 8003df2:	eb63 0901 	sbc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	462b      	mov	r3, r5
 8003e18:	eb49 0303 	adc.w	r3, r9, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	024b      	lsls	r3, r1, #9
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e34:	4621      	mov	r1, r4
 8003e36:	024a      	lsls	r2, r1, #9
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e48:	f7fc fa22 	bl	8000290 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e54:	e058      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4611      	mov	r1, r2
 8003e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	0159      	lsls	r1, r3, #5
 8003e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e82:	0150      	lsls	r0, r2, #5
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4641      	mov	r1, r8
 8003e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8003eac:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	464b      	mov	r3, r9
 8003ecc:	eb45 0303 	adc.w	r3, r5, r3
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	61fa      	str	r2, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	f7fc f9c8 	bl	8000290 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3750      	adds	r7, #80	; 0x50
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	200004bc 	.word	0x200004bc

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	0800cbe0 	.word	0x0800cbe0

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	0800cbe0 	.word	0x0800cbe0

08003fac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d038      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd4:	4b68      	ldr	r3, [pc, #416]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fda:	f7fd fc87 	bl	80018ec <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe2:	f7fd fc83 	bl	80018ec <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0bd      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	495a      	ldr	r1, [pc, #360]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004020:	f7fd fc64 	bl	80018ec <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004028:	f7fd fc60 	bl	80018ec <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e09a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800403a:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8083 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	4a47      	ldr	r2, [pc, #284]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004062:	6413      	str	r3, [r2, #64]	; 0x40
 8004064:	4b45      	ldr	r3, [pc, #276]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004070:	4b43      	ldr	r3, [pc, #268]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a42      	ldr	r2, [pc, #264]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800407c:	f7fd fc36 	bl	80018ec <HAL_GetTick>
 8004080:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004084:	f7fd fc32 	bl	80018ec <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e06c      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a2:	4b36      	ldr	r3, [pc, #216]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d02f      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d028      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c0:	4b2e      	ldr	r3, [pc, #184]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040d0:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040d6:	4a29      	ldr	r2, [pc, #164]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d114      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fd fc00 	bl	80018ec <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ee:	e00a      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fd fbfc 	bl	80018ec <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e034      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ee      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411e:	d10d      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004134:	4911      	ldr	r1, [pc, #68]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
 800413a:	e005      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a0e      	ldr	r2, [pc, #56]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	4909      	ldr	r1, [pc, #36]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7d1a      	ldrb	r2, [r3, #20]
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800416c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	42470068 	.word	0x42470068
 800417c:	40023800 	.word	0x40023800
 8004180:	40007000 	.word	0x40007000
 8004184:	42470e40 	.word	0x42470e40
 8004188:	424711e0 	.word	0x424711e0

0800418c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d140      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d131      	bne.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041c2:	617b      	str	r3, [r7, #20]
          break;
 80041c4:	e031      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d2:	d109      	bne.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f2:	4a15      	ldr	r2, [pc, #84]	; (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004214:	0f1b      	lsrs	r3, r3, #28
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
          break;
 8004222:	e002      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
          break;
 8004228:	bf00      	nop
        }
      }
      break;
 800422a:	bf00      	nop
    }
  }
  return frequency;
 800422c:	697b      	ldr	r3, [r7, #20]
}
 800422e:	4618      	mov	r0, r3
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	00bb8000 	.word	0x00bb8000
 8004244:	007a1200 	.word	0x007a1200
 8004248:	00f42400 	.word	0x00f42400

0800424c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07b      	b.n	8004356 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d009      	beq.n	8004284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
 8004276:	e005      	b.n	8004284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fd f88c 	bl	80013bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	ea42 0103 	orr.w	r1, r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0104 	and.w	r1, r3, #4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0210 	and.w	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004344:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b088      	sub	sp, #32
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_SPI_Transmit+0x22>
 800437c:	2302      	movs	r3, #2
 800437e:	e126      	b.n	80045ce <HAL_SPI_Transmit+0x270>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004388:	f7fd fab0 	bl	80018ec <HAL_GetTick>
 800438c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d002      	beq.n	80043a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800439e:	2302      	movs	r3, #2
 80043a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a2:	e10b      	b.n	80045bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_Transmit+0x52>
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043b4:	e102      	b.n	80045bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2203      	movs	r2, #3
 80043ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fc:	d10f      	bne.n	800441e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800441c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d007      	beq.n	800443c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004444:	d14b      	bne.n	80044de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_Transmit+0xf6>
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d13e      	bne.n	80044d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004478:	e02b      	b.n	80044d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d112      	bne.n	80044ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	1c9a      	adds	r2, r3, #2
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ac:	e011      	b.n	80044d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ae:	f7fd fa1d 	bl	80018ec <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d803      	bhi.n	80044c6 <HAL_SPI_Transmit+0x168>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c4:	d102      	bne.n	80044cc <HAL_SPI_Transmit+0x16e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044d0:	e074      	b.n	80045bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ce      	bne.n	800447a <HAL_SPI_Transmit+0x11c>
 80044dc:	e04c      	b.n	8004578 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Transmit+0x18e>
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d140      	bne.n	800456e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004512:	e02c      	b.n	800456e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d113      	bne.n	800454a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	86da      	strh	r2, [r3, #54]	; 0x36
 8004548:	e011      	b.n	800456e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800454a:	f7fd f9cf 	bl	80018ec <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d803      	bhi.n	8004562 <HAL_SPI_Transmit+0x204>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	d102      	bne.n	8004568 <HAL_SPI_Transmit+0x20a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800456c:	e026      	b.n	80045bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1cd      	bne.n	8004514 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fa55 	bl	8004a2c <SPI_EndRxTxTransaction>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e000      	b.n	80045bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80045ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08c      	sub	sp, #48	; 0x30
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045e4:	2301      	movs	r3, #1
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x26>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e18a      	b.n	8004912 <HAL_SPI_TransmitReceive+0x33c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fd f972 	bl	80018ec <HAL_GetTick>
 8004608:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800461e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004622:	2b01      	cmp	r3, #1
 8004624:	d00f      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x70>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462c:	d107      	bne.n	800463e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_SPI_TransmitReceive+0x68>
 8004636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800463a:	2b04      	cmp	r3, #4
 800463c:	d003      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800463e:	2302      	movs	r3, #2
 8004640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004644:	e15b      	b.n	80048fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x82>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x82>
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800465e:	e14e      	b.n	80048fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b04      	cmp	r3, #4
 800466a:	d003      	beq.n	8004674 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2205      	movs	r2, #5
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	887a      	ldrh	r2, [r7, #2]
 8004696:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d007      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d0:	d178      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x10a>
 80046da:	8b7b      	ldrh	r3, [r7, #26]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d166      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	1c9a      	adds	r2, r3, #2
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004704:	e053      	b.n	80047ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d11b      	bne.n	800474c <HAL_SPI_TransmitReceive+0x176>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <HAL_SPI_TransmitReceive+0x176>
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d113      	bne.n	800474c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d119      	bne.n	800478e <HAL_SPI_TransmitReceive+0x1b8>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d014      	beq.n	800478e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	b292      	uxth	r2, r2
 8004770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478a:	2301      	movs	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800478e:	f7fd f8ad 	bl	80018ec <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800479a:	429a      	cmp	r2, r3
 800479c:	d807      	bhi.n	80047ae <HAL_SPI_TransmitReceive+0x1d8>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a4:	d003      	beq.n	80047ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047ac:	e0a7      	b.n	80048fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1a6      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x130>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1a1      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x130>
 80047c2:	e07c      	b.n	80048be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0x1fc>
 80047cc:	8b7b      	ldrh	r3, [r7, #26]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d16b      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f8:	e057      	b.n	80048aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d11c      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x26c>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x26c>
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d114      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d119      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x2ae>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d014      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004884:	f7fd f832 	bl	80018ec <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <HAL_SPI_TransmitReceive+0x2c6>
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x2cc>
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048a8:	e029      	b.n	80048fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1a2      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x224>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d19d      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8b2 	bl	8004a2c <SPI_EndRxTxTransaction>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d006      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048da:	e010      	b.n	80048fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	e000      	b.n	80048fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800490e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004912:	4618      	mov	r0, r3
 8004914:	3730      	adds	r7, #48	; 0x30
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800492c:	f7fc ffde 	bl	80018ec <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800493c:	f7fc ffd6 	bl	80018ec <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	015b      	lsls	r3, r3, #5
 8004948:	0d1b      	lsrs	r3, r3, #20
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004952:	e054      	b.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495a:	d050      	beq.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800495c:	f7fc ffc6 	bl	80018ec <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	d902      	bls.n	8004972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13d      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498a:	d111      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004994:	d004      	beq.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	d107      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d10f      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e017      	b.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d19b      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	200004bc 	.word	0x200004bc

08004a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <SPI_EndRxTxTransaction+0x7c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <SPI_EndRxTxTransaction+0x80>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0d5b      	lsrs	r3, r3, #21
 8004a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a56:	d112      	bne.n	8004a7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2180      	movs	r1, #128	; 0x80
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff ff5a 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e00f      	b.n	8004a9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b80      	cmp	r3, #128	; 0x80
 8004a96:	d0f2      	beq.n	8004a7e <SPI_EndRxTxTransaction+0x52>
 8004a98:	e000      	b.n	8004a9c <SPI_EndRxTxTransaction+0x70>
        break;
 8004a9a:	bf00      	nop
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200004bc 	.word	0x200004bc
 8004aac:	165e9f81 	.word	0x165e9f81

08004ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e041      	b.n	8004b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fcd8 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 f98a 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e041      	b.n	8004be4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f839 	bl	8004bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f000 f93b 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0ae      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	f200 809f 	bhi.w	8004d6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004d6d 	.word	0x08004d6d
 8004c3c:	08004d6d 	.word	0x08004d6d
 8004c40:	08004d6d 	.word	0x08004d6d
 8004c44:	08004ca9 	.word	0x08004ca9
 8004c48:	08004d6d 	.word	0x08004d6d
 8004c4c:	08004d6d 	.word	0x08004d6d
 8004c50:	08004d6d 	.word	0x08004d6d
 8004c54:	08004ceb 	.word	0x08004ceb
 8004c58:	08004d6d 	.word	0x08004d6d
 8004c5c:	08004d6d 	.word	0x08004d6d
 8004c60:	08004d6d 	.word	0x08004d6d
 8004c64:	08004d2b 	.word	0x08004d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f94a 	bl	8004f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0208 	orr.w	r2, r2, #8
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0204 	bic.w	r2, r2, #4
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	619a      	str	r2, [r3, #24]
      break;
 8004ca6:	e064      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f990 	bl	8004fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
      break;
 8004ce8:	e043      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f9db 	bl	80050ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0208 	orr.w	r2, r2, #8
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0204 	bic.w	r2, r2, #4
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]
      break;
 8004d28:	e023      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa25 	bl	8005180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	61da      	str	r2, [r3, #28]
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e031      	b.n	8004e00 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa36 	bl	8005220 <TIM_SlaveTimer_SetConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e018      	b.n	8004e00 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a34      	ldr	r2, [pc, #208]	; (8004eec <TIM_Base_SetConfig+0xe4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00f      	beq.n	8004e40 <TIM_Base_SetConfig+0x38>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d00b      	beq.n	8004e40 <TIM_Base_SetConfig+0x38>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a31      	ldr	r2, [pc, #196]	; (8004ef0 <TIM_Base_SetConfig+0xe8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d007      	beq.n	8004e40 <TIM_Base_SetConfig+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a30      	ldr	r2, [pc, #192]	; (8004ef4 <TIM_Base_SetConfig+0xec>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_Base_SetConfig+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <TIM_Base_SetConfig+0xf0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d108      	bne.n	8004e52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a25      	ldr	r2, [pc, #148]	; (8004eec <TIM_Base_SetConfig+0xe4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01b      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d017      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <TIM_Base_SetConfig+0xe8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <TIM_Base_SetConfig+0xec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00f      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <TIM_Base_SetConfig+0xf0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <TIM_Base_SetConfig+0xf4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <TIM_Base_SetConfig+0xf8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <TIM_Base_SetConfig+0xfc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d108      	bne.n	8004ea4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a08      	ldr	r2, [pc, #32]	; (8004eec <TIM_Base_SetConfig+0xe4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800

08004f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 0302 	bic.w	r3, r3, #2
 8004f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <TIM_OC1_SetConfig+0xc8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10c      	bne.n	8004f7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0308 	bic.w	r3, r3, #8
 8004f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <TIM_OC1_SetConfig+0xc8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40010000 	.word	0x40010000

08004fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0210 	bic.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0320 	bic.w	r3, r3, #32
 800501e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <TIM_OC2_SetConfig+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d10d      	bne.n	8005050 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <TIM_OC2_SetConfig+0xd4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d113      	bne.n	8005080 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000

080050ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_OC3_SetConfig+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10d      	bne.n	8005126 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a14      	ldr	r2, [pc, #80]	; (800517c <TIM_OC3_SetConfig+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d113      	bne.n	8005156 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40010000 	.word	0x40010000

08005180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	031b      	lsls	r3, r3, #12
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a10      	ldr	r2, [pc, #64]	; (800521c <TIM_OC4_SetConfig+0x9c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d109      	bne.n	80051f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000

08005220 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 0307 	bic.w	r3, r3, #7
 800524e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b70      	cmp	r3, #112	; 0x70
 8005268:	d01a      	beq.n	80052a0 <TIM_SlaveTimer_SetConfig+0x80>
 800526a:	2b70      	cmp	r3, #112	; 0x70
 800526c:	d860      	bhi.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
 800526e:	2b60      	cmp	r3, #96	; 0x60
 8005270:	d054      	beq.n	800531c <TIM_SlaveTimer_SetConfig+0xfc>
 8005272:	2b60      	cmp	r3, #96	; 0x60
 8005274:	d85c      	bhi.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
 8005276:	2b50      	cmp	r3, #80	; 0x50
 8005278:	d046      	beq.n	8005308 <TIM_SlaveTimer_SetConfig+0xe8>
 800527a:	2b50      	cmp	r3, #80	; 0x50
 800527c:	d858      	bhi.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d019      	beq.n	80052b6 <TIM_SlaveTimer_SetConfig+0x96>
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d854      	bhi.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	d055      	beq.n	8005336 <TIM_SlaveTimer_SetConfig+0x116>
 800528a:	2b30      	cmp	r3, #48	; 0x30
 800528c:	d850      	bhi.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d051      	beq.n	8005336 <TIM_SlaveTimer_SetConfig+0x116>
 8005292:	2b20      	cmp	r3, #32
 8005294:	d84c      	bhi.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d04d      	beq.n	8005336 <TIM_SlaveTimer_SetConfig+0x116>
 800529a:	2b10      	cmp	r3, #16
 800529c:	d04b      	beq.n	8005336 <TIM_SlaveTimer_SetConfig+0x116>
 800529e:	e047      	b.n	8005330 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68d9      	ldr	r1, [r3, #12]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f000 f8a6 	bl	8005400 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80052b4:	e040      	b.n	8005338 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d101      	bne.n	80052c2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e03b      	b.n	800533a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
      break;
 8005306:	e017      	b.n	8005338 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6899      	ldr	r1, [r3, #8]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	461a      	mov	r2, r3
 8005316:	f000 f814 	bl	8005342 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800531a:	e00d      	b.n	8005338 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	461a      	mov	r2, r3
 800532a:	f000 f839 	bl	80053a0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800532e:	e003      	b.n	8005338 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	e000      	b.n	8005338 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005336:	bf00      	nop
  }

  return status;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0201 	bic.w	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800536c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 030a 	bic.w	r3, r3, #10
 800537e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	621a      	str	r2, [r3, #32]
}
 8005394:	bf00      	nop
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f023 0210 	bic.w	r2, r3, #16
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	031b      	lsls	r3, r3, #12
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800541a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e050      	b.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d013      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a16      	ldr	r2, [pc, #88]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a15      	ldr	r2, [pc, #84]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10c      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40014000 	.word	0x40014000

0800551c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e03f      	b.n	80055ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc f824 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	; 0x24
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f929 	bl	80057b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b08a      	sub	sp, #40	; 0x28
 80055ba:	af02      	add	r7, sp, #8
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d17c      	bne.n	80056d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_UART_Transmit+0x2c>
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e075      	b.n	80056d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_UART_Transmit+0x3e>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e06e      	b.n	80056d2 <HAL_UART_Transmit+0x11c>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2221      	movs	r2, #33	; 0x21
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800560a:	f7fc f96f 	bl	80018ec <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d108      	bne.n	8005638 <HAL_UART_Transmit+0x82>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e003      	b.n	8005640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005648:	e02a      	b.n	80056a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f840 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e036      	b.n	80056d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	3302      	adds	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e007      	b.n	8005692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1cf      	bne.n	800564a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2140      	movs	r1, #64	; 0x40
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f810 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b090      	sub	sp, #64	; 0x40
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ea:	e050      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f2:	d04c      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0x30>
 80056fa:	f7fc f8f7 	bl	80018ec <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005706:	429a      	cmp	r2, r3
 8005708:	d241      	bcs.n	800578e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800572a:	637a      	str	r2, [r7, #52]	; 0x34
 800572c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e5      	bne.n	800570a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3314      	adds	r3, #20
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575e:	623a      	str	r2, [r7, #32]
 8005760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	69f9      	ldr	r1, [r7, #28]
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	61bb      	str	r3, [r7, #24]
   return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00f      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d09f      	beq.n	80056ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3740      	adds	r7, #64	; 0x40
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057bc:	b0c0      	sub	sp, #256	; 0x100
 80057be:	af00      	add	r7, sp, #0
 80057c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	68d9      	ldr	r1, [r3, #12]
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	ea40 0301 	orr.w	r3, r0, r1
 80057e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005810:	f021 010c 	bic.w	r1, r1, #12
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800581e:	430b      	orrs	r3, r1
 8005820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	6999      	ldr	r1, [r3, #24]
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	ea40 0301 	orr.w	r3, r0, r1
 800583e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b8f      	ldr	r3, [pc, #572]	; (8005a84 <UART_SetConfig+0x2cc>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d005      	beq.n	8005858 <UART_SetConfig+0xa0>
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <UART_SetConfig+0x2d0>)
 8005854:	429a      	cmp	r2, r3
 8005856:	d104      	bne.n	8005862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe fb94 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 800585c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005860:	e003      	b.n	800586a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005862:	f7fe fb7b 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8005866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	f040 810c 	bne.w	8005a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587c:	2200      	movs	r2, #0
 800587e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005882:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800588a:	4622      	mov	r2, r4
 800588c:	462b      	mov	r3, r5
 800588e:	1891      	adds	r1, r2, r2
 8005890:	65b9      	str	r1, [r7, #88]	; 0x58
 8005892:	415b      	adcs	r3, r3
 8005894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800589a:	4621      	mov	r1, r4
 800589c:	eb12 0801 	adds.w	r8, r2, r1
 80058a0:	4629      	mov	r1, r5
 80058a2:	eb43 0901 	adc.w	r9, r3, r1
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	4623      	mov	r3, r4
 80058c0:	eb18 0303 	adds.w	r3, r8, r3
 80058c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c8:	462b      	mov	r3, r5
 80058ca:	eb49 0303 	adc.w	r3, r9, r3
 80058ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058e6:	460b      	mov	r3, r1
 80058e8:	18db      	adds	r3, r3, r3
 80058ea:	653b      	str	r3, [r7, #80]	; 0x50
 80058ec:	4613      	mov	r3, r2
 80058ee:	eb42 0303 	adc.w	r3, r2, r3
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
 80058f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058fc:	f7fa fcc8 	bl	8000290 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005906:	fba3 2302 	umull	r2, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	011c      	lsls	r4, r3, #4
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800591c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	64b9      	str	r1, [r7, #72]	; 0x48
 8005928:	415b      	adcs	r3, r3
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005930:	4641      	mov	r1, r8
 8005932:	eb12 0a01 	adds.w	sl, r2, r1
 8005936:	4649      	mov	r1, r9
 8005938:	eb43 0b01 	adc.w	fp, r3, r1
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800594c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005950:	4692      	mov	sl, r2
 8005952:	469b      	mov	fp, r3
 8005954:	4643      	mov	r3, r8
 8005956:	eb1a 0303 	adds.w	r3, sl, r3
 800595a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595e:	464b      	mov	r3, r9
 8005960:	eb4b 0303 	adc.w	r3, fp, r3
 8005964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005974:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800597c:	460b      	mov	r3, r1
 800597e:	18db      	adds	r3, r3, r3
 8005980:	643b      	str	r3, [r7, #64]	; 0x40
 8005982:	4613      	mov	r3, r2
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
 800598a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800598e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005992:	f7fa fc7d 	bl	8000290 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4611      	mov	r1, r2
 800599c:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <UART_SetConfig+0x2d4>)
 800599e:	fba3 2301 	umull	r2, r3, r3, r1
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2264      	movs	r2, #100	; 0x64
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	1acb      	subs	r3, r1, r3
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059b2:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <UART_SetConfig+0x2d4>)
 80059b4:	fba3 2302 	umull	r2, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c0:	441c      	add	r4, r3
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	63b9      	str	r1, [r7, #56]	; 0x38
 80059dc:	415b      	adcs	r3, r3
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e4:	4641      	mov	r1, r8
 80059e6:	1851      	adds	r1, r2, r1
 80059e8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ea:	4649      	mov	r1, r9
 80059ec:	414b      	adcs	r3, r1
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059fc:	4659      	mov	r1, fp
 80059fe:	00cb      	lsls	r3, r1, #3
 8005a00:	4651      	mov	r1, sl
 8005a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a06:	4651      	mov	r1, sl
 8005a08:	00ca      	lsls	r2, r1, #3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4642      	mov	r2, r8
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a18:	464b      	mov	r3, r9
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a4e:	f7fa fc1f 	bl	8000290 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 0207 	and.w	r2, r3, #7
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4422      	add	r2, r4
 8005a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a80:	e106      	b.n	8005c90 <UART_SetConfig+0x4d8>
 8005a82:	bf00      	nop
 8005a84:	40011000 	.word	0x40011000
 8005a88:	40011400 	.word	0x40011400
 8005a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aa2:	4642      	mov	r2, r8
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	6239      	str	r1, [r7, #32]
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	1854      	adds	r4, r2, r1
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	eb43 0501 	adc.w	r5, r3, r1
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	00eb      	lsls	r3, r5, #3
 8005ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aca:	00e2      	lsls	r2, r4, #3
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	4643      	mov	r3, r8
 8005ad2:	18e3      	adds	r3, r4, r3
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad8:	464b      	mov	r3, r9
 8005ada:	eb45 0303 	adc.w	r3, r5, r3
 8005ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005afe:	4629      	mov	r1, r5
 8005b00:	008b      	lsls	r3, r1, #2
 8005b02:	4621      	mov	r1, r4
 8005b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b08:	4621      	mov	r1, r4
 8005b0a:	008a      	lsls	r2, r1, #2
 8005b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b10:	f7fa fbbe 	bl	8000290 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4b60      	ldr	r3, [pc, #384]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	011c      	lsls	r4, r3, #4
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	61b9      	str	r1, [r7, #24]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6139      	str	r1, [r7, #16]
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b78:	464b      	mov	r3, r9
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	008a      	lsls	r2, r1, #2
 8005baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bae:	f7fa fb6f 	bl	8000290 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005bba:	fba3 2301 	umull	r2, r3, r3, r1
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2264      	movs	r2, #100	; 0x64
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	1acb      	subs	r3, r1, r3
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd8:	441c      	add	r4, r3
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	673b      	str	r3, [r7, #112]	; 0x70
 8005be2:	677a      	str	r2, [r7, #116]	; 0x74
 8005be4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	1851      	adds	r1, r2, r1
 8005bfc:	6039      	str	r1, [r7, #0]
 8005bfe:	4649      	mov	r1, r9
 8005c00:	414b      	adcs	r3, r1
 8005c02:	607b      	str	r3, [r7, #4]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c10:	4659      	mov	r1, fp
 8005c12:	00cb      	lsls	r3, r1, #3
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	00ca      	lsls	r2, r1, #3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	4642      	mov	r2, r8
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	460a      	mov	r2, r1
 8005c2e:	eb42 0303 	adc.w	r3, r2, r3
 8005c32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3e:	667a      	str	r2, [r7, #100]	; 0x64
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	008b      	lsls	r3, r1, #2
 8005c50:	4641      	mov	r1, r8
 8005c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c56:	4641      	mov	r1, r8
 8005c58:	008a      	lsls	r2, r1, #2
 8005c5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c5e:	f7fa fb17 	bl	8000290 <__aeabi_uldivmod>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005c68:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	2164      	movs	r1, #100	; 0x64
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	3332      	adds	r3, #50	; 0x32
 8005c7a:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	f003 020f 	and.w	r2, r3, #15
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4422      	add	r2, r4
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	bf00      	nop
 8005c92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ca4:	4904      	ldr	r1, [pc, #16]	; (8005cb8 <MX_FATFS_Init+0x18>)
 8005ca6:	4805      	ldr	r0, [pc, #20]	; (8005cbc <MX_FATFS_Init+0x1c>)
 8005ca8:	f003 f8f6 	bl	8008e98 <FATFS_LinkDriver>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <MX_FATFS_Init+0x20>)
 8005cb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005cb4:	bf00      	nop
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	2000192c 	.word	0x2000192c
 8005cbc:	200004c8 	.word	0x200004c8
 8005cc0:	20001928 	.word	0x20001928

08005cc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005cc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f9d3 	bl	800608c <USER_SPI_initialize>
 8005ce6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fab1 	bl	8006264 <USER_SPI_status>
 8005d02:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8005d1c:	7bf8      	ldrb	r0, [r7, #15]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	f000 fab4 	bl	8006290 <USER_SPI_read>
 8005d28:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8005d42:	7bf8      	ldrb	r0, [r7, #15]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	f000 fb07 	bl	800635c <USER_SPI_write>
 8005d4e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	603a      	str	r2, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
 8005d64:	460b      	mov	r3, r1
 8005d66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005d68:	79b9      	ldrb	r1, [r7, #6]
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fb70 	bl	8006454 <USER_SPI_ioctl>
 8005d74:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005d88:	f7fb fdb0 	bl	80018ec <HAL_GetTick>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <SPI_Timer_On+0x20>)
 8005d90:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005d92:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <SPI_Timer_On+0x24>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20001934 	.word	0x20001934
 8005da4:	20001938 	.word	0x20001938

08005da8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005dac:	f7fb fd9e 	bl	80018ec <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <SPI_Timer_Status+0x24>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <SPI_Timer_Status+0x28>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	bf34      	ite	cc
 8005dc0:	2301      	movcc	r3, #1
 8005dc2:	2300      	movcs	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20001934 	.word	0x20001934
 8005dd0:	20001938 	.word	0x20001938

08005dd4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005dde:	f107 020f 	add.w	r2, r7, #15
 8005de2:	1df9      	adds	r1, r7, #7
 8005de4:	2332      	movs	r3, #50	; 0x32
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2301      	movs	r3, #1
 8005dea:	4804      	ldr	r0, [pc, #16]	; (8005dfc <xchg_spi+0x28>)
 8005dec:	f7fe fbf3 	bl	80045d6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000a74 	.word	0x20000a74

08005e00 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e00a      	b.n	8005e26 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	18d4      	adds	r4, r2, r3
 8005e16:	20ff      	movs	r0, #255	; 0xff
 8005e18:	f7ff ffdc 	bl	8005dd4 <xchg_spi>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d3f0      	bcc.n	8005e10 <rcvr_spi_multi+0x10>
	}
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd90      	pop	{r4, r7, pc}

08005e38 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4803      	ldr	r0, [pc, #12]	; (8005e5c <xmit_spi_multi+0x24>)
 8005e4e:	f7fe fa86 	bl	800435e <HAL_SPI_Transmit>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000a74 	.word	0x20000a74

08005e60 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005e68:	f7fb fd40 	bl	80018ec <HAL_GetTick>
 8005e6c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005e72:	20ff      	movs	r0, #255	; 0xff
 8005e74:	f7ff ffae 	bl	8005dd4 <xchg_spi>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2bff      	cmp	r3, #255	; 0xff
 8005e80:	d007      	beq.n	8005e92 <wait_ready+0x32>
 8005e82:	f7fb fd33 	bl	80018ec <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d8ef      	bhi.n	8005e72 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2bff      	cmp	r3, #255	; 0xff
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005eac:	2201      	movs	r2, #1
 8005eae:	2102      	movs	r1, #2
 8005eb0:	4803      	ldr	r0, [pc, #12]	; (8005ec0 <despiselect+0x18>)
 8005eb2:	f7fc fbdd 	bl	8002670 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005eb6:	20ff      	movs	r0, #255	; 0xff
 8005eb8:	f7ff ff8c 	bl	8005dd4 <xchg_spi>

}
 8005ebc:	bf00      	nop
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40020400 	.word	0x40020400

08005ec4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4809      	ldr	r0, [pc, #36]	; (8005ef4 <spiselect+0x30>)
 8005ece:	f7fc fbcf 	bl	8002670 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005ed2:	20ff      	movs	r0, #255	; 0xff
 8005ed4:	f7ff ff7e 	bl	8005dd4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005edc:	f7ff ffc0 	bl	8005e60 <wait_ready>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <spiselect+0x26>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e002      	b.n	8005ef0 <spiselect+0x2c>

	despiselect();
 8005eea:	f7ff ffdd 	bl	8005ea8 <despiselect>
	return 0;	/* Timeout */
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40020400 	.word	0x40020400

08005ef8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005f02:	20c8      	movs	r0, #200	; 0xc8
 8005f04:	f7ff ff3c 	bl	8005d80 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005f08:	20ff      	movs	r0, #255	; 0xff
 8005f0a:	f7ff ff63 	bl	8005dd4 <xchg_spi>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2bff      	cmp	r3, #255	; 0xff
 8005f16:	d104      	bne.n	8005f22 <rcvr_datablock+0x2a>
 8005f18:	f7ff ff46 	bl	8005da8 <SPI_Timer_Status>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f2      	bne.n	8005f08 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2bfe      	cmp	r3, #254	; 0xfe
 8005f26:	d001      	beq.n	8005f2c <rcvr_datablock+0x34>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e00a      	b.n	8005f42 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ff66 	bl	8005e00 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005f34:	20ff      	movs	r0, #255	; 0xff
 8005f36:	f7ff ff4d 	bl	8005dd4 <xchg_spi>
 8005f3a:	20ff      	movs	r0, #255	; 0xff
 8005f3c:	f7ff ff4a 	bl	8005dd4 <xchg_spi>

	return 1;						/* Function succeeded */
 8005f40:	2301      	movs	r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f5a:	f7ff ff81 	bl	8005e60 <wait_ready>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <xmit_datablock+0x1e>
 8005f64:	2300      	movs	r3, #0
 8005f66:	e01e      	b.n	8005fa6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff ff32 	bl	8005dd4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	2bfd      	cmp	r3, #253	; 0xfd
 8005f74:	d016      	beq.n	8005fa4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff ff5c 	bl	8005e38 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005f80:	20ff      	movs	r0, #255	; 0xff
 8005f82:	f7ff ff27 	bl	8005dd4 <xchg_spi>
 8005f86:	20ff      	movs	r0, #255	; 0xff
 8005f88:	f7ff ff24 	bl	8005dd4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005f8c:	20ff      	movs	r0, #255	; 0xff
 8005f8e:	f7ff ff21 	bl	8005dd4 <xchg_spi>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2b05      	cmp	r3, #5
 8005f9e:	d001      	beq.n	8005fa4 <xmit_datablock+0x5a>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <xmit_datablock+0x5c>
	}
	return 1;
 8005fa4:	2301      	movs	r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	6039      	str	r1, [r7, #0]
 8005fb8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da0e      	bge.n	8005fe0 <send_cmd+0x32>
		cmd &= 0x7F;
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005fca:	2100      	movs	r1, #0
 8005fcc:	2037      	movs	r0, #55	; 0x37
 8005fce:	f7ff ffee 	bl	8005fae <send_cmd>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d901      	bls.n	8005fe0 <send_cmd+0x32>
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	e051      	b.n	8006084 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d008      	beq.n	8005ff8 <send_cmd+0x4a>
		despiselect();
 8005fe6:	f7ff ff5f 	bl	8005ea8 <despiselect>
		if (!spiselect()) return 0xFF;
 8005fea:	f7ff ff6b 	bl	8005ec4 <spiselect>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <send_cmd+0x4a>
 8005ff4:	23ff      	movs	r3, #255	; 0xff
 8005ff6:	e045      	b.n	8006084 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fee7 	bl	8005dd4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	0e1b      	lsrs	r3, r3, #24
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fee1 	bl	8005dd4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fedb 	bl	8005dd4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	b2db      	uxtb	r3, r3
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fed5 	bl	8005dd4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff fed0 	bl	8005dd4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006034:	2301      	movs	r3, #1
 8006036:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <send_cmd+0x94>
 800603e:	2395      	movs	r3, #149	; 0x95
 8006040:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b08      	cmp	r3, #8
 8006046:	d101      	bne.n	800604c <send_cmd+0x9e>
 8006048:	2387      	movs	r3, #135	; 0x87
 800604a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fec0 	bl	8005dd4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b0c      	cmp	r3, #12
 8006058:	d102      	bne.n	8006060 <send_cmd+0xb2>
 800605a:	20ff      	movs	r0, #255	; 0xff
 800605c:	f7ff feba 	bl	8005dd4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006060:	230a      	movs	r3, #10
 8006062:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006064:	20ff      	movs	r0, #255	; 0xff
 8006066:	f7ff feb5 	bl	8005dd4 <xchg_spi>
 800606a:	4603      	mov	r3, r0
 800606c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800606e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da05      	bge.n	8006082 <send_cmd+0xd4>
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	3b01      	subs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006082:	7bbb      	ldrb	r3, [r7, #14]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <USER_SPI_initialize+0x14>
 800609c:	2301      	movs	r3, #1
 800609e:	e0d6      	b.n	800624e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80060a0:	4b6d      	ldr	r3, [pc, #436]	; (8006258 <USER_SPI_initialize+0x1cc>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <USER_SPI_initialize+0x2a>
 80060ae:	4b6a      	ldr	r3, [pc, #424]	; (8006258 <USER_SPI_initialize+0x1cc>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	e0cb      	b.n	800624e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80060b6:	4b69      	ldr	r3, [pc, #420]	; (800625c <USER_SPI_initialize+0x1d0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060c0:	4b66      	ldr	r3, [pc, #408]	; (800625c <USER_SPI_initialize+0x1d0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80060c8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80060ca:	230a      	movs	r3, #10
 80060cc:	73fb      	strb	r3, [r7, #15]
 80060ce:	e005      	b.n	80060dc <USER_SPI_initialize+0x50>
 80060d0:	20ff      	movs	r0, #255	; 0xff
 80060d2:	f7ff fe7f 	bl	8005dd4 <xchg_spi>
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	3b01      	subs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f6      	bne.n	80060d0 <USER_SPI_initialize+0x44>

	ty = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80060e6:	2100      	movs	r1, #0
 80060e8:	2000      	movs	r0, #0
 80060ea:	f7ff ff60 	bl	8005fae <send_cmd>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f040 808b 	bne.w	800620c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80060f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060fa:	f7ff fe41 	bl	8005d80 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80060fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006102:	2008      	movs	r0, #8
 8006104:	f7ff ff53 	bl	8005fae <send_cmd>
 8006108:	4603      	mov	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d151      	bne.n	80061b2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
 8006112:	e00d      	b.n	8006130 <USER_SPI_initialize+0xa4>
 8006114:	7bfc      	ldrb	r4, [r7, #15]
 8006116:	20ff      	movs	r0, #255	; 0xff
 8006118:	f7ff fe5c 	bl	8005dd4 <xchg_spi>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	f104 0310 	add.w	r3, r4, #16
 8006124:	443b      	add	r3, r7
 8006126:	f803 2c08 	strb.w	r2, [r3, #-8]
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	3301      	adds	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d9ee      	bls.n	8006114 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006136:	7abb      	ldrb	r3, [r7, #10]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d167      	bne.n	800620c <USER_SPI_initialize+0x180>
 800613c:	7afb      	ldrb	r3, [r7, #11]
 800613e:	2baa      	cmp	r3, #170	; 0xaa
 8006140:	d164      	bne.n	800620c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006142:	bf00      	nop
 8006144:	f7ff fe30 	bl	8005da8 <SPI_Timer_Status>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <USER_SPI_initialize+0xd2>
 800614e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006152:	20a9      	movs	r0, #169	; 0xa9
 8006154:	f7ff ff2b 	bl	8005fae <send_cmd>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f2      	bne.n	8006144 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800615e:	f7ff fe23 	bl	8005da8 <SPI_Timer_Status>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d051      	beq.n	800620c <USER_SPI_initialize+0x180>
 8006168:	2100      	movs	r1, #0
 800616a:	203a      	movs	r0, #58	; 0x3a
 800616c:	f7ff ff1f 	bl	8005fae <send_cmd>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d14a      	bne.n	800620c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
 800617a:	e00d      	b.n	8006198 <USER_SPI_initialize+0x10c>
 800617c:	7bfc      	ldrb	r4, [r7, #15]
 800617e:	20ff      	movs	r0, #255	; 0xff
 8006180:	f7ff fe28 	bl	8005dd4 <xchg_spi>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	f104 0310 	add.w	r3, r4, #16
 800618c:	443b      	add	r3, r7
 800618e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	3301      	adds	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d9ee      	bls.n	800617c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800619e:	7a3b      	ldrb	r3, [r7, #8]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <USER_SPI_initialize+0x120>
 80061a8:	230c      	movs	r3, #12
 80061aa:	e000      	b.n	80061ae <USER_SPI_initialize+0x122>
 80061ac:	2304      	movs	r3, #4
 80061ae:	737b      	strb	r3, [r7, #13]
 80061b0:	e02c      	b.n	800620c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80061b2:	2100      	movs	r1, #0
 80061b4:	20a9      	movs	r0, #169	; 0xa9
 80061b6:	f7ff fefa 	bl	8005fae <send_cmd>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d804      	bhi.n	80061ca <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80061c0:	2302      	movs	r3, #2
 80061c2:	737b      	strb	r3, [r7, #13]
 80061c4:	23a9      	movs	r3, #169	; 0xa9
 80061c6:	73bb      	strb	r3, [r7, #14]
 80061c8:	e003      	b.n	80061d2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80061ca:	2301      	movs	r3, #1
 80061cc:	737b      	strb	r3, [r7, #13]
 80061ce:	2301      	movs	r3, #1
 80061d0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80061d2:	bf00      	nop
 80061d4:	f7ff fde8 	bl	8005da8 <SPI_Timer_Status>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <USER_SPI_initialize+0x162>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fee3 	bl	8005fae <send_cmd>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f2      	bne.n	80061d4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80061ee:	f7ff fddb 	bl	8005da8 <SPI_Timer_Status>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <USER_SPI_initialize+0x17c>
 80061f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061fc:	2010      	movs	r0, #16
 80061fe:	f7ff fed6 	bl	8005fae <send_cmd>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <USER_SPI_initialize+0x180>
				ty = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <USER_SPI_initialize+0x1d4>)
 800620e:	7b7b      	ldrb	r3, [r7, #13]
 8006210:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006212:	f7ff fe49 	bl	8005ea8 <despiselect>

	if (ty) {			/* OK */
 8006216:	7b7b      	ldrb	r3, [r7, #13]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <USER_SPI_initialize+0x1d0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <USER_SPI_initialize+0x1d0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0210 	orr.w	r2, r2, #16
 800622e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <USER_SPI_initialize+0x1cc>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	b2da      	uxtb	r2, r3
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <USER_SPI_initialize+0x1cc>)
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e002      	b.n	8006248 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <USER_SPI_initialize+0x1cc>)
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <USER_SPI_initialize+0x1cc>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bd90      	pop	{r4, r7, pc}
 8006256:	bf00      	nop
 8006258:	200004dc 	.word	0x200004dc
 800625c:	20000a74 	.word	0x20000a74
 8006260:	20001930 	.word	0x20001930

08006264 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <USER_SPI_status+0x14>
 8006274:	2301      	movs	r3, #1
 8006276:	e002      	b.n	800627e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006278:	4b04      	ldr	r3, [pc, #16]	; (800628c <USER_SPI_status+0x28>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	b2db      	uxtb	r3, r3
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	200004dc 	.word	0x200004dc

08006290 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <USER_SPI_read+0x1c>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USER_SPI_read+0x20>
 80062ac:	2304      	movs	r3, #4
 80062ae:	e04d      	b.n	800634c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80062b0:	4b28      	ldr	r3, [pc, #160]	; (8006354 <USER_SPI_read+0xc4>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <USER_SPI_read+0x32>
 80062be:	2303      	movs	r3, #3
 80062c0:	e044      	b.n	800634c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80062c2:	4b25      	ldr	r3, [pc, #148]	; (8006358 <USER_SPI_read+0xc8>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <USER_SPI_read+0x44>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d111      	bne.n	80062fe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	2011      	movs	r0, #17
 80062de:	f7ff fe66 	bl	8005fae <send_cmd>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d129      	bne.n	800633c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80062e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f7ff fe03 	bl	8005ef8 <rcvr_datablock>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d021      	beq.n	800633c <USER_SPI_read+0xac>
			count = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	e01e      	b.n	800633c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	2012      	movs	r0, #18
 8006302:	f7ff fe54 	bl	8005fae <send_cmd>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d117      	bne.n	800633c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800630c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006310:	68b8      	ldr	r0, [r7, #8]
 8006312:	f7ff fdf1 	bl	8005ef8 <rcvr_datablock>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <USER_SPI_read+0xa2>
				buff += 512;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006322:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	3b01      	subs	r3, #1
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ed      	bne.n	800630c <USER_SPI_read+0x7c>
 8006330:	e000      	b.n	8006334 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006332:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006334:	2100      	movs	r1, #0
 8006336:	200c      	movs	r0, #12
 8006338:	f7ff fe39 	bl	8005fae <send_cmd>
		}
	}
	despiselect();
 800633c:	f7ff fdb4 	bl	8005ea8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200004dc 	.word	0x200004dc
 8006358:	20001930 	.word	0x20001930

0800635c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <USER_SPI_write+0x1c>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <USER_SPI_write+0x20>
 8006378:	2304      	movs	r3, #4
 800637a:	e063      	b.n	8006444 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800637c:	4b33      	ldr	r3, [pc, #204]	; (800644c <USER_SPI_write+0xf0>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <USER_SPI_write+0x32>
 800638a:	2303      	movs	r3, #3
 800638c:	e05a      	b.n	8006444 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800638e:	4b2f      	ldr	r3, [pc, #188]	; (800644c <USER_SPI_write+0xf0>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USER_SPI_write+0x44>
 800639c:	2302      	movs	r3, #2
 800639e:	e051      	b.n	8006444 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80063a0:	4b2b      	ldr	r3, [pc, #172]	; (8006450 <USER_SPI_write+0xf4>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <USER_SPI_write+0x56>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	025b      	lsls	r3, r3, #9
 80063b0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d110      	bne.n	80063da <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	2018      	movs	r0, #24
 80063bc:	f7ff fdf7 	bl	8005fae <send_cmd>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d136      	bne.n	8006434 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80063c6:	21fe      	movs	r1, #254	; 0xfe
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	f7ff fdbe 	bl	8005f4a <xmit_datablock>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d02f      	beq.n	8006434 <USER_SPI_write+0xd8>
			count = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	e02c      	b.n	8006434 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80063da:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <USER_SPI_write+0xf4>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 0306 	and.w	r3, r3, #6
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USER_SPI_write+0x92>
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	2097      	movs	r0, #151	; 0x97
 80063ea:	f7ff fde0 	bl	8005fae <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	2019      	movs	r0, #25
 80063f2:	f7ff fddc 	bl	8005fae <send_cmd>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d11b      	bne.n	8006434 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80063fc:	21fc      	movs	r1, #252	; 0xfc
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f7ff fda3 	bl	8005f4a <xmit_datablock>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <USER_SPI_write+0xc4>
				buff += 512;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006410:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	3b01      	subs	r3, #1
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1ee      	bne.n	80063fc <USER_SPI_write+0xa0>
 800641e:	e000      	b.n	8006422 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006420:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006422:	21fd      	movs	r1, #253	; 0xfd
 8006424:	2000      	movs	r0, #0
 8006426:	f7ff fd90 	bl	8005f4a <xmit_datablock>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USER_SPI_write+0xd8>
 8006430:	2301      	movs	r3, #1
 8006432:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006434:	f7ff fd38 	bl	8005ea8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200004dc 	.word	0x200004dc
 8006450:	20001930 	.word	0x20001930

08006454 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	603a      	str	r2, [r7, #0]
 800645e:	71fb      	strb	r3, [r7, #7]
 8006460:	460b      	mov	r3, r1
 8006462:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <USER_SPI_ioctl+0x1a>
 800646a:	2304      	movs	r3, #4
 800646c:	e15a      	b.n	8006724 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800646e:	4baf      	ldr	r3, [pc, #700]	; (800672c <USER_SPI_ioctl+0x2d8>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USER_SPI_ioctl+0x2c>
 800647c:	2303      	movs	r3, #3
 800647e:	e151      	b.n	8006724 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006486:	79bb      	ldrb	r3, [r7, #6]
 8006488:	2b04      	cmp	r3, #4
 800648a:	f200 8136 	bhi.w	80066fa <USER_SPI_ioctl+0x2a6>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <USER_SPI_ioctl+0x40>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a9 	.word	0x080064a9
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080066fb 	.word	0x080066fb
 80064a0:	08006569 	.word	0x08006569
 80064a4:	0800665f 	.word	0x0800665f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80064a8:	f7ff fd0c 	bl	8005ec4 <spiselect>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8127 	beq.w	8006702 <USER_SPI_ioctl+0x2ae>
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80064ba:	e122      	b.n	8006702 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80064bc:	2100      	movs	r1, #0
 80064be:	2009      	movs	r0, #9
 80064c0:	f7ff fd75 	bl	8005fae <send_cmd>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 811d 	bne.w	8006706 <USER_SPI_ioctl+0x2b2>
 80064cc:	f107 030c 	add.w	r3, r7, #12
 80064d0:	2110      	movs	r1, #16
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fd10 	bl	8005ef8 <rcvr_datablock>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8113 	beq.w	8006706 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80064e0:	7b3b      	ldrb	r3, [r7, #12]
 80064e2:	099b      	lsrs	r3, r3, #6
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d111      	bne.n	800650e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80064ea:	7d7b      	ldrb	r3, [r7, #21]
 80064ec:	461a      	mov	r2, r3
 80064ee:	7d3b      	ldrb	r3, [r7, #20]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	4413      	add	r3, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80064fe:	4413      	add	r3, r2
 8006500:	3301      	adds	r3, #1
 8006502:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	029a      	lsls	r2, r3, #10
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e028      	b.n	8006560 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800650e:	7c7b      	ldrb	r3, [r7, #17]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	b2da      	uxtb	r2, r3
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	09db      	lsrs	r3, r3, #7
 800651a:	b2db      	uxtb	r3, r3
 800651c:	4413      	add	r3, r2
 800651e:	b2da      	uxtb	r2, r3
 8006520:	7d7b      	ldrb	r3, [r7, #21]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0306 	and.w	r3, r3, #6
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4413      	add	r3, r2
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3302      	adds	r3, #2
 8006532:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006536:	7d3b      	ldrb	r3, [r7, #20]
 8006538:	099b      	lsrs	r3, r3, #6
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
 8006544:	7cbb      	ldrb	r3, [r7, #18]
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800654c:	4413      	add	r3, r2
 800654e:	3301      	adds	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006556:	3b09      	subs	r3, #9
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	409a      	lsls	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006566:	e0ce      	b.n	8006706 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006568:	4b71      	ldr	r3, [pc, #452]	; (8006730 <USER_SPI_ioctl+0x2dc>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d031      	beq.n	80065d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006574:	2100      	movs	r1, #0
 8006576:	208d      	movs	r0, #141	; 0x8d
 8006578:	f7ff fd19 	bl	8005fae <send_cmd>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 80c3 	bne.w	800670a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006584:	20ff      	movs	r0, #255	; 0xff
 8006586:	f7ff fc25 	bl	8005dd4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800658a:	f107 030c 	add.w	r3, r7, #12
 800658e:	2110      	movs	r1, #16
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fcb1 	bl	8005ef8 <rcvr_datablock>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80b6 	beq.w	800670a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800659e:	2330      	movs	r3, #48	; 0x30
 80065a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80065a4:	e007      	b.n	80065b6 <USER_SPI_ioctl+0x162>
 80065a6:	20ff      	movs	r0, #255	; 0xff
 80065a8:	f7ff fc14 	bl	8005dd4 <xchg_spi>
 80065ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065b0:	3b01      	subs	r3, #1
 80065b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80065b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f3      	bne.n	80065a6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80065be:	7dbb      	ldrb	r3, [r7, #22]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	2310      	movs	r3, #16
 80065c8:	fa03 f202 	lsl.w	r2, r3, r2
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80065d6:	e098      	b.n	800670a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80065d8:	2100      	movs	r1, #0
 80065da:	2009      	movs	r0, #9
 80065dc:	f7ff fce7 	bl	8005fae <send_cmd>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f040 8091 	bne.w	800670a <USER_SPI_ioctl+0x2b6>
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	2110      	movs	r1, #16
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fc82 	bl	8005ef8 <rcvr_datablock>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8087 	beq.w	800670a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80065fc:	4b4c      	ldr	r3, [pc, #304]	; (8006730 <USER_SPI_ioctl+0x2dc>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006608:	7dbb      	ldrb	r3, [r7, #22]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006610:	7dfa      	ldrb	r2, [r7, #23]
 8006612:	09d2      	lsrs	r2, r2, #7
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	4413      	add	r3, r2
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	7e7b      	ldrb	r3, [r7, #25]
 800661c:	099b      	lsrs	r3, r3, #6
 800661e:	b2db      	uxtb	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	461a      	mov	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e013      	b.n	8006656 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800662e:	7dbb      	ldrb	r3, [r7, #22]
 8006630:	109b      	asrs	r3, r3, #2
 8006632:	b29b      	uxth	r3, r3
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	3301      	adds	r3, #1
 800663a:	7dfa      	ldrb	r2, [r7, #23]
 800663c:	00d2      	lsls	r2, r2, #3
 800663e:	f002 0218 	and.w	r2, r2, #24
 8006642:	7df9      	ldrb	r1, [r7, #23]
 8006644:	0949      	lsrs	r1, r1, #5
 8006646:	b2c9      	uxtb	r1, r1
 8006648:	440a      	add	r2, r1
 800664a:	3201      	adds	r2, #1
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	461a      	mov	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800665c:	e055      	b.n	800670a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800665e:	4b34      	ldr	r3, [pc, #208]	; (8006730 <USER_SPI_ioctl+0x2dc>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f003 0306 	and.w	r3, r3, #6
 8006666:	2b00      	cmp	r3, #0
 8006668:	d051      	beq.n	800670e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800666a:	f107 020c 	add.w	r2, r7, #12
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	210b      	movs	r1, #11
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff feee 	bl	8006454 <USER_SPI_ioctl>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d149      	bne.n	8006712 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800667e:	7b3b      	ldrb	r3, [r7, #12]
 8006680:	099b      	lsrs	r3, r3, #6
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <USER_SPI_ioctl+0x23e>
 8006688:	7dbb      	ldrb	r3, [r7, #22]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d041      	beq.n	8006716 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80066a2:	4b23      	ldr	r3, [pc, #140]	; (8006730 <USER_SPI_ioctl+0x2dc>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	025b      	lsls	r3, r3, #9
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	025b      	lsls	r3, r3, #9
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80066ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066bc:	2020      	movs	r0, #32
 80066be:	f7ff fc76 	bl	8005fae <send_cmd>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d128      	bne.n	800671a <USER_SPI_ioctl+0x2c6>
 80066c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ca:	2021      	movs	r0, #33	; 0x21
 80066cc:	f7ff fc6f 	bl	8005fae <send_cmd>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d121      	bne.n	800671a <USER_SPI_ioctl+0x2c6>
 80066d6:	2100      	movs	r1, #0
 80066d8:	2026      	movs	r0, #38	; 0x26
 80066da:	f7ff fc68 	bl	8005fae <send_cmd>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11a      	bne.n	800671a <USER_SPI_ioctl+0x2c6>
 80066e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80066e8:	f7ff fbba 	bl	8005e60 <wait_ready>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d013      	beq.n	800671a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80066f2:	2300      	movs	r3, #0
 80066f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80066f8:	e00f      	b.n	800671a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80066fa:	2304      	movs	r3, #4
 80066fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006700:	e00c      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 8006702:	bf00      	nop
 8006704:	e00a      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 8006706:	bf00      	nop
 8006708:	e008      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 800670a:	bf00      	nop
 800670c:	e006      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800670e:	bf00      	nop
 8006710:	e004      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 800671a:	bf00      	nop
	}

	despiselect();
 800671c:	f7ff fbc4 	bl	8005ea8 <despiselect>

	return res;
 8006720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006724:	4618      	mov	r0, r3
 8006726:	3730      	adds	r7, #48	; 0x30
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200004dc 	.word	0x200004dc
 8006730:	20001930 	.word	0x20001930

08006734 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	4a08      	ldr	r2, [pc, #32]	; (8006764 <disk_status+0x30>)
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	79fa      	ldrb	r2, [r7, #7]
 800674c:	4905      	ldr	r1, [pc, #20]	; (8006764 <disk_status+0x30>)
 800674e:	440a      	add	r2, r1
 8006750:	7a12      	ldrb	r2, [r2, #8]
 8006752:	4610      	mov	r0, r2
 8006754:	4798      	blx	r3
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
  return stat;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20001964 	.word	0x20001964

08006768 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4a0d      	ldr	r2, [pc, #52]	; (80067b0 <disk_initialize+0x48>)
 800677a:	5cd3      	ldrb	r3, [r2, r3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d111      	bne.n	80067a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <disk_initialize+0x48>)
 8006784:	2101      	movs	r1, #1
 8006786:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <disk_initialize+0x48>)
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	4906      	ldr	r1, [pc, #24]	; (80067b0 <disk_initialize+0x48>)
 8006798:	440a      	add	r2, r1
 800679a:	7a12      	ldrb	r2, [r2, #8]
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20001964 	.word	0x20001964

080067b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <disk_read+0x3c>)
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	689c      	ldr	r4, [r3, #8]
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	4a07      	ldr	r2, [pc, #28]	; (80067f0 <disk_read+0x3c>)
 80067d4:	4413      	add	r3, r2
 80067d6:	7a18      	ldrb	r0, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	47a0      	blx	r4
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd90      	pop	{r4, r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20001964 	.word	0x20001964

080067f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <disk_write+0x3c>)
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68dc      	ldr	r4, [r3, #12]
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	4a07      	ldr	r2, [pc, #28]	; (8006830 <disk_write+0x3c>)
 8006814:	4413      	add	r3, r2
 8006816:	7a18      	ldrb	r0, [r3, #8]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	47a0      	blx	r4
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]
  return res;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}
 800682e:	bf00      	nop
 8006830:	20001964 	.word	0x20001964

08006834 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	603a      	str	r2, [r7, #0]
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	460b      	mov	r3, r1
 8006842:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <disk_ioctl+0x38>)
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	79fa      	ldrb	r2, [r7, #7]
 8006852:	4906      	ldr	r1, [pc, #24]	; (800686c <disk_ioctl+0x38>)
 8006854:	440a      	add	r2, r1
 8006856:	7a10      	ldrb	r0, [r2, #8]
 8006858:	79b9      	ldrb	r1, [r7, #6]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
  return res;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20001964 	.word	0x20001964

08006870 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3301      	adds	r3, #1
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	b21a      	sxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b21b      	sxth	r3, r3
 800688c:	4313      	orrs	r3, r2
 800688e:	b21b      	sxth	r3, r3
 8006890:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006892:	89fb      	ldrh	r3, [r7, #14]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3303      	adds	r3, #3
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	3202      	adds	r2, #2
 80068b8:	7812      	ldrb	r2, [r2, #0]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	3201      	adds	r2, #1
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	887a      	ldrh	r2, [r7, #2]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	887b      	ldrh	r3, [r7, #2]
 8006900:	0a1b      	lsrs	r3, r3, #8
 8006902:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	0a1b      	lsrs	r3, r3, #8
 8006936:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	1c53      	adds	r3, r2, #1
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1c59      	adds	r1, r3, #1
 8006998:	6179      	str	r1, [r7, #20]
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f1      	bne.n	800698e <mem_cpy+0x1a>
	}
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80069b6:	b480      	push	{r7}
 80069b8:	b087      	sub	sp, #28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	617a      	str	r2, [r7, #20]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	607b      	str	r3, [r7, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f3      	bne.n	80069c6 <mem_set+0x10>
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	; 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	61fa      	str	r2, [r7, #28]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	61ba      	str	r2, [r7, #24]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	1acb      	subs	r3, r1, r3
 8006a18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <mem_cmp+0x40>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0eb      	beq.n	8006a04 <mem_cmp+0x18>

	return r;
 8006a2c:	697b      	ldr	r3, [r7, #20]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3724      	adds	r7, #36	; 0x24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006a44:	e002      	b.n	8006a4c <chk_chr+0x12>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <chk_chr+0x26>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d1f2      	bne.n	8006a46 <chk_chr+0xc>
	return *str;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	781b      	ldrb	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e029      	b.n	8006ad8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006a84:	4a27      	ldr	r2, [pc, #156]	; (8006b24 <chk_lock+0xb4>)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	4413      	add	r3, r2
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01d      	beq.n	8006ace <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a92:	4a24      	ldr	r2, [pc, #144]	; (8006b24 <chk_lock+0xb4>)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	4413      	add	r3, r2
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d116      	bne.n	8006ad2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <chk_lock+0xb4>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	4413      	add	r3, r2
 8006aac:	3304      	adds	r3, #4
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10c      	bne.n	8006ad2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ab8:	4a1a      	ldr	r2, [pc, #104]	; (8006b24 <chk_lock+0xb4>)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	4413      	add	r3, r2
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d102      	bne.n	8006ad2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006acc:	e007      	b.n	8006ade <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d9d2      	bls.n	8006a84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d109      	bne.n	8006af8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d102      	bne.n	8006af0 <chk_lock+0x80>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d101      	bne.n	8006af4 <chk_lock+0x84>
 8006af0:	2300      	movs	r3, #0
 8006af2:	e010      	b.n	8006b16 <chk_lock+0xa6>
 8006af4:	2312      	movs	r3, #18
 8006af6:	e00e      	b.n	8006b16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d108      	bne.n	8006b10 <chk_lock+0xa0>
 8006afe:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <chk_lock+0xb4>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	4413      	add	r3, r2
 8006b06:	330c      	adds	r3, #12
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0e:	d101      	bne.n	8006b14 <chk_lock+0xa4>
 8006b10:	2310      	movs	r3, #16
 8006b12:	e000      	b.n	8006b16 <chk_lock+0xa6>
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20001944 	.word	0x20001944

08006b28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	607b      	str	r3, [r7, #4]
 8006b32:	e002      	b.n	8006b3a <enq_lock+0x12>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3301      	adds	r3, #1
 8006b38:	607b      	str	r3, [r7, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d806      	bhi.n	8006b4e <enq_lock+0x26>
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <enq_lock+0x40>)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	4413      	add	r3, r2
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f2      	bne.n	8006b34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20001944 	.word	0x20001944

08006b6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	e01f      	b.n	8006bbc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006b7c:	4a41      	ldr	r2, [pc, #260]	; (8006c84 <inc_lock+0x118>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	4413      	add	r3, r2
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d113      	bne.n	8006bb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006b8e:	4a3d      	ldr	r2, [pc, #244]	; (8006c84 <inc_lock+0x118>)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	4413      	add	r3, r2
 8006b96:	3304      	adds	r3, #4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d109      	bne.n	8006bb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <inc_lock+0x118>)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	4413      	add	r3, r2
 8006baa:	3308      	adds	r3, #8
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d006      	beq.n	8006bc4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d9dc      	bls.n	8006b7c <inc_lock+0x10>
 8006bc2:	e000      	b.n	8006bc6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006bc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d132      	bne.n	8006c32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e002      	b.n	8006bd8 <inc_lock+0x6c>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d806      	bhi.n	8006bec <inc_lock+0x80>
 8006bde:	4a29      	ldr	r2, [pc, #164]	; (8006c84 <inc_lock+0x118>)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	4413      	add	r3, r2
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f2      	bne.n	8006bd2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d101      	bne.n	8006bf6 <inc_lock+0x8a>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e040      	b.n	8006c78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4922      	ldr	r1, [pc, #136]	; (8006c84 <inc_lock+0x118>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	440b      	add	r3, r1
 8006c02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	491e      	ldr	r1, [pc, #120]	; (8006c84 <inc_lock+0x118>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	440b      	add	r3, r1
 8006c10:	3304      	adds	r3, #4
 8006c12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	491a      	ldr	r1, [pc, #104]	; (8006c84 <inc_lock+0x118>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	440b      	add	r3, r1
 8006c20:	3308      	adds	r3, #8
 8006c22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <inc_lock+0x118>)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	4413      	add	r3, r2
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	2200      	movs	r2, #0
 8006c30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <inc_lock+0xe0>
 8006c38:	4a12      	ldr	r2, [pc, #72]	; (8006c84 <inc_lock+0x118>)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	4413      	add	r3, r2
 8006c40:	330c      	adds	r3, #12
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <inc_lock+0xe0>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e015      	b.n	8006c78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <inc_lock+0xf8>
 8006c52:	4a0c      	ldr	r2, [pc, #48]	; (8006c84 <inc_lock+0x118>)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	4413      	add	r3, r2
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	e001      	b.n	8006c68 <inc_lock+0xfc>
 8006c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c68:	4906      	ldr	r1, [pc, #24]	; (8006c84 <inc_lock+0x118>)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	440b      	add	r3, r1
 8006c70:	330c      	adds	r3, #12
 8006c72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	20001944 	.word	0x20001944

08006c88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	607b      	str	r3, [r7, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d825      	bhi.n	8006ce8 <dec_lock+0x60>
		n = Files[i].ctr;
 8006c9c:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <dec_lock+0x74>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	4413      	add	r3, r2
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006caa:	89fb      	ldrh	r3, [r7, #14]
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb0:	d101      	bne.n	8006cb6 <dec_lock+0x2e>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006cb6:	89fb      	ldrh	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <dec_lock+0x3a>
 8006cbc:	89fb      	ldrh	r3, [r7, #14]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <dec_lock+0x74>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	4413      	add	r3, r2
 8006cca:	330c      	adds	r3, #12
 8006ccc:	89fa      	ldrh	r2, [r7, #14]
 8006cce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006cd0:	89fb      	ldrh	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <dec_lock+0x5a>
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <dec_lock+0x74>)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	4413      	add	r3, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	737b      	strb	r3, [r7, #13]
 8006ce6:	e001      	b.n	8006cec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ce8:	2302      	movs	r3, #2
 8006cea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006cec:	7b7b      	ldrb	r3, [r7, #13]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20001944 	.word	0x20001944

08006d00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e010      	b.n	8006d30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d0e:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <clear_lock+0x44>)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	4413      	add	r3, r2
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d105      	bne.n	8006d2a <clear_lock+0x2a>
 8006d1e:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <clear_lock+0x44>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	4413      	add	r3, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d9eb      	bls.n	8006d0e <clear_lock+0xe>
	}
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20001944 	.word	0x20001944

08006d48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d034      	beq.n	8006dc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	7858      	ldrb	r0, [r3, #1]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	f7ff fd40 	bl	80067f4 <disk_write>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e022      	b.n	8006dc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	1ad2      	subs	r2, r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d217      	bcs.n	8006dc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	789b      	ldrb	r3, [r3, #2]
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	e010      	b.n	8006dc0 <sync_window+0x78>
					wsect += fs->fsize;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4413      	add	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7858      	ldrb	r0, [r3, #1]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006db2:	2301      	movs	r3, #1
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	f7ff fd1d 	bl	80067f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d8eb      	bhi.n	8006d9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d01b      	beq.n	8006e20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff ffad 	bl	8006d48 <sync_window>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d113      	bne.n	8006e20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7858      	ldrb	r0, [r3, #1]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e02:	2301      	movs	r3, #1
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	f7ff fcd5 	bl	80067b4 <disk_read>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ff87 	bl	8006d48 <sync_window>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d158      	bne.n	8006ef6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d148      	bne.n	8006ede <sync_fs+0xb2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	791b      	ldrb	r3, [r3, #4]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d144      	bne.n	8006ede <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3330      	adds	r3, #48	; 0x30
 8006e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fda9 	bl	80069b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3330      	adds	r3, #48	; 0x30
 8006e68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fd38 	bl	80068e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3330      	adds	r3, #48	; 0x30
 8006e7a:	4921      	ldr	r1, [pc, #132]	; (8006f00 <sync_fs+0xd4>)
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fd4d 	bl	800691c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3330      	adds	r3, #48	; 0x30
 8006e86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006e8a:	491e      	ldr	r1, [pc, #120]	; (8006f04 <sync_fs+0xd8>)
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fd45 	bl	800691c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3330      	adds	r3, #48	; 0x30
 8006e96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7ff fd3b 	bl	800691c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3330      	adds	r3, #48	; 0x30
 8006eaa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f7ff fd31 	bl	800691c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7858      	ldrb	r0, [r3, #1]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f7ff fc8e 	bl	80067f4 <disk_write>
			fs->fsi_flag = 0;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fca4 	bl	8006834 <disk_ioctl>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <sync_fs+0xca>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	41615252 	.word	0x41615252
 8006f04:	61417272 	.word	0x61417272

08006f08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	3b02      	subs	r3, #2
 8006f16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	3b02      	subs	r3, #2
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d301      	bcc.n	8006f28 <clust2sect+0x20>
 8006f24:	2300      	movs	r3, #0
 8006f26:	e008      	b.n	8006f3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	895b      	ldrh	r3, [r3, #10]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	fb03 f202 	mul.w	r2, r3, r2
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	4413      	add	r3, r2
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b086      	sub	sp, #24
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d904      	bls.n	8006f66 <get_fat+0x20>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d302      	bcc.n	8006f6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006f66:	2301      	movs	r3, #1
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e08f      	b.n	800708c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d062      	beq.n	8007040 <get_fat+0xfa>
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	dc7c      	bgt.n	8007078 <get_fat+0x132>
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d002      	beq.n	8006f88 <get_fat+0x42>
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d042      	beq.n	800700c <get_fat+0xc6>
 8006f86:	e077      	b.n	8007078 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	0a5b      	lsrs	r3, r3, #9
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	f7ff ff14 	bl	8006dd0 <move_window>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d167      	bne.n	800707e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	60fa      	str	r2, [r7, #12]
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6a1a      	ldr	r2, [r3, #32]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	0a5b      	lsrs	r3, r3, #9
 8006fca:	4413      	add	r3, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6938      	ldr	r0, [r7, #16]
 8006fd0:	f7ff fefe 	bl	8006dd0 <move_window>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d153      	bne.n	8007082 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	461a      	mov	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <get_fat+0xbc>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	e002      	b.n	8007008 <get_fat+0xc2>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007008:	617b      	str	r3, [r7, #20]
			break;
 800700a:	e03f      	b.n	800708c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	4413      	add	r3, r2
 8007016:	4619      	mov	r1, r3
 8007018:	6938      	ldr	r0, [r7, #16]
 800701a:	f7ff fed9 	bl	8006dd0 <move_window>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d130      	bne.n	8007086 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007032:	4413      	add	r3, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fc1b 	bl	8006870 <ld_word>
 800703a:	4603      	mov	r3, r0
 800703c:	617b      	str	r3, [r7, #20]
			break;
 800703e:	e025      	b.n	800708c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	6a1a      	ldr	r2, [r3, #32]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	09db      	lsrs	r3, r3, #7
 8007048:	4413      	add	r3, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6938      	ldr	r0, [r7, #16]
 800704e:	f7ff febf 	bl	8006dd0 <move_window>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d118      	bne.n	800708a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007066:	4413      	add	r3, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff fc19 	bl	80068a0 <ld_dword>
 800706e:	4603      	mov	r3, r0
 8007070:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007074:	617b      	str	r3, [r7, #20]
			break;
 8007076:	e009      	b.n	800708c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e006      	b.n	800708c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800707e:	bf00      	nop
 8007080:	e004      	b.n	800708c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007082:	bf00      	nop
 8007084:	e002      	b.n	800708c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007086:	bf00      	nop
 8007088:	e000      	b.n	800708c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800708a:	bf00      	nop
		}
	}

	return val;
 800708c:	697b      	ldr	r3, [r7, #20]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007096:	b590      	push	{r4, r7, lr}
 8007098:	b089      	sub	sp, #36	; 0x24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80070a2:	2302      	movs	r3, #2
 80070a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	f240 80d9 	bls.w	8007260 <put_fat+0x1ca>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	f080 80d3 	bcs.w	8007260 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	f000 8096 	beq.w	80071f0 <put_fat+0x15a>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	f300 80cb 	bgt.w	8007260 <put_fat+0x1ca>
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d002      	beq.n	80070d4 <put_fat+0x3e>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d06e      	beq.n	80071b0 <put_fat+0x11a>
 80070d2:	e0c5      	b.n	8007260 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	4413      	add	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1a      	ldr	r2, [r3, #32]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	0a5b      	lsrs	r3, r3, #9
 80070ea:	4413      	add	r3, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fe6e 	bl	8006dd0 <move_window>
 80070f4:	4603      	mov	r3, r0
 80070f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070f8:	7ffb      	ldrb	r3, [r7, #31]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 80a9 	bne.w	8007252 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	1c59      	adds	r1, r3, #1
 800710a:	61b9      	str	r1, [r7, #24]
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	4413      	add	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00d      	beq.n	800713a <put_fat+0xa4>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b25b      	sxtb	r3, r3
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	b25a      	sxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	b25b      	sxtb	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b25b      	sxtb	r3, r3
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e001      	b.n	800713e <put_fat+0xa8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	0a5b      	lsrs	r3, r3, #9
 8007150:	4413      	add	r3, r2
 8007152:	4619      	mov	r1, r3
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fe3b 	bl	8006dd0 <move_window>
 800715a:	4603      	mov	r3, r0
 800715c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d178      	bne.n	8007256 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007170:	4413      	add	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <put_fat+0xf0>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	b2db      	uxtb	r3, r3
 8007184:	e00e      	b.n	80071a4 <put_fat+0x10e>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b25b      	sxtb	r3, r3
 800718c:	f023 030f 	bic.w	r3, r3, #15
 8007190:	b25a      	sxtb	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	b25b      	sxtb	r3, r3
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	b25b      	sxtb	r3, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	b25b      	sxtb	r3, r3
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	70da      	strb	r2, [r3, #3]
			break;
 80071ae:	e057      	b.n	8007260 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	4413      	add	r3, r2
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7ff fe07 	bl	8006dd0 <move_window>
 80071c2:	4603      	mov	r3, r0
 80071c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071c6:	7ffb      	ldrb	r3, [r7, #31]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d146      	bne.n	800725a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80071da:	4413      	add	r3, r2
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	b292      	uxth	r2, r2
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fb7f 	bl	80068e6 <st_word>
			fs->wflag = 1;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	70da      	strb	r2, [r3, #3]
			break;
 80071ee:	e037      	b.n	8007260 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	09db      	lsrs	r3, r3, #7
 80071f8:	4413      	add	r3, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fde7 	bl	8006dd0 <move_window>
 8007202:	4603      	mov	r3, r0
 8007204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007206:	7ffb      	ldrb	r3, [r7, #31]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d128      	bne.n	800725e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007220:	4413      	add	r3, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fb3c 	bl	80068a0 <ld_dword>
 8007228:	4603      	mov	r3, r0
 800722a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800722e:	4323      	orrs	r3, r4
 8007230:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007240:	4413      	add	r3, r2
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fb69 	bl	800691c <st_dword>
			fs->wflag = 1;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	70da      	strb	r2, [r3, #3]
			break;
 8007250:	e006      	b.n	8007260 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007252:	bf00      	nop
 8007254:	e004      	b.n	8007260 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007256:	bf00      	nop
 8007258:	e002      	b.n	8007260 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800725a:	bf00      	nop
 800725c:	e000      	b.n	8007260 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800725e:	bf00      	nop
		}
	}
	return res;
 8007260:	7ffb      	ldrb	r3, [r7, #31]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3724      	adds	r7, #36	; 0x24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd90      	pop	{r4, r7, pc}

0800726a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b088      	sub	sp, #32
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d904      	bls.n	8007290 <remove_chain+0x26>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	429a      	cmp	r2, r3
 800728e:	d301      	bcc.n	8007294 <remove_chain+0x2a>
 8007290:	2302      	movs	r3, #2
 8007292:	e04b      	b.n	800732c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00c      	beq.n	80072b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800729a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	69b8      	ldr	r0, [r7, #24]
 80072a2:	f7ff fef8 	bl	8007096 <put_fat>
 80072a6:	4603      	mov	r3, r0
 80072a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80072aa:	7ffb      	ldrb	r3, [r7, #31]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <remove_chain+0x4a>
 80072b0:	7ffb      	ldrb	r3, [r7, #31]
 80072b2:	e03b      	b.n	800732c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fe45 	bl	8006f46 <get_fat>
 80072bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d031      	beq.n	8007328 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <remove_chain+0x64>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e02e      	b.n	800732c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d4:	d101      	bne.n	80072da <remove_chain+0x70>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e028      	b.n	800732c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80072da:	2200      	movs	r2, #0
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	69b8      	ldr	r0, [r7, #24]
 80072e0:	f7ff fed9 	bl	8007096 <put_fat>
 80072e4:	4603      	mov	r3, r0
 80072e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80072e8:	7ffb      	ldrb	r3, [r7, #31]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <remove_chain+0x88>
 80072ee:	7ffb      	ldrb	r3, [r7, #31]
 80072f0:	e01c      	b.n	800732c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	3b02      	subs	r3, #2
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d20b      	bcs.n	8007318 <remove_chain+0xae>
			fs->free_clst++;
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	791b      	ldrb	r3, [r3, #4]
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	b2da      	uxtb	r2, r3
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	d3c6      	bcc.n	80072b4 <remove_chain+0x4a>
 8007326:	e000      	b.n	800732a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007328:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10d      	bne.n	8007366 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <create_chain+0x2c>
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	429a      	cmp	r2, r3
 800735e:	d31b      	bcc.n	8007398 <create_chain+0x64>
 8007360:	2301      	movs	r3, #1
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e018      	b.n	8007398 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fdec 	bl	8006f46 <get_fat>
 800736e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d801      	bhi.n	800737a <create_chain+0x46>
 8007376:	2301      	movs	r3, #1
 8007378:	e070      	b.n	800745c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007380:	d101      	bne.n	8007386 <create_chain+0x52>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	e06a      	b.n	800745c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d201      	bcs.n	8007394 <create_chain+0x60>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	e063      	b.n	800745c <create_chain+0x128>
		scl = clst;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	3301      	adds	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d307      	bcc.n	80073bc <create_chain+0x88>
				ncl = 2;
 80073ac:	2302      	movs	r3, #2
 80073ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d901      	bls.n	80073bc <create_chain+0x88>
 80073b8:	2300      	movs	r3, #0
 80073ba:	e04f      	b.n	800745c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fdc1 	bl	8006f46 <get_fat>
 80073c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d003      	beq.n	80073da <create_chain+0xa6>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d8:	d101      	bne.n	80073de <create_chain+0xaa>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	e03e      	b.n	800745c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d1da      	bne.n	800739c <create_chain+0x68>
 80073e6:	2300      	movs	r3, #0
 80073e8:	e038      	b.n	800745c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80073ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f7ff fe4f 	bl	8007096 <put_fat>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <create_chain+0xe2>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6938      	ldr	r0, [r7, #16]
 800740e:	f7ff fe42 	bl	8007096 <put_fat>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d116      	bne.n	800744a <create_chain+0x116>
		fs->last_clst = ncl;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	3b02      	subs	r3, #2
 800742c:	429a      	cmp	r2, r3
 800742e:	d804      	bhi.n	800743a <create_chain+0x106>
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	1e5a      	subs	r2, r3, #1
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	791b      	ldrb	r3, [r3, #4]
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	b2da      	uxtb	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	711a      	strb	r2, [r3, #4]
 8007448:	e007      	b.n	800745a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d102      	bne.n	8007456 <create_chain+0x122>
 8007450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007454:	e000      	b.n	8007458 <create_chain+0x124>
 8007456:	2301      	movs	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800745a:	69fb      	ldr	r3, [r7, #28]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	3304      	adds	r3, #4
 800747a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	0a5b      	lsrs	r3, r3, #9
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	8952      	ldrh	r2, [r2, #10]
 8007484:	fbb3 f3f2 	udiv	r3, r3, r2
 8007488:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1d1a      	adds	r2, r3, #4
 800748e:	613a      	str	r2, [r7, #16]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <clmt_clust+0x3a>
 800749a:	2300      	movs	r3, #0
 800749c:	e010      	b.n	80074c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d307      	bcc.n	80074b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	3304      	adds	r3, #4
 80074b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074b4:	e7e9      	b.n	800748a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80074b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	4413      	add	r3, r2
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074e2:	d204      	bcs.n	80074ee <dir_sdi+0x22>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80074ee:	2302      	movs	r3, #2
 80074f0:	e063      	b.n	80075ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <dir_sdi+0x46>
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d902      	bls.n	8007512 <dir_sdi+0x46>
		clst = fs->dirbase;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10c      	bne.n	8007532 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	8912      	ldrh	r2, [r2, #8]
 8007520:	4293      	cmp	r3, r2
 8007522:	d301      	bcc.n	8007528 <dir_sdi+0x5c>
 8007524:	2302      	movs	r3, #2
 8007526:	e048      	b.n	80075ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	61da      	str	r2, [r3, #28]
 8007530:	e029      	b.n	8007586 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	895b      	ldrh	r3, [r3, #10]
 8007536:	025b      	lsls	r3, r3, #9
 8007538:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800753a:	e019      	b.n	8007570 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6979      	ldr	r1, [r7, #20]
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff fd00 	bl	8006f46 <get_fat>
 8007546:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754e:	d101      	bne.n	8007554 <dir_sdi+0x88>
 8007550:	2301      	movs	r3, #1
 8007552:	e032      	b.n	80075ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d904      	bls.n	8007564 <dir_sdi+0x98>
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	429a      	cmp	r2, r3
 8007562:	d301      	bcc.n	8007568 <dir_sdi+0x9c>
 8007564:	2302      	movs	r3, #2
 8007566:	e028      	b.n	80075ba <dir_sdi+0xee>
			ofs -= csz;
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	429a      	cmp	r2, r3
 8007576:	d2e1      	bcs.n	800753c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007578:	6979      	ldr	r1, [r7, #20]
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f7ff fcc4 	bl	8006f08 <clust2sect>
 8007580:	4602      	mov	r2, r0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <dir_sdi+0xcc>
 8007594:	2302      	movs	r3, #2
 8007596:	e010      	b.n	80075ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	0a5b      	lsrs	r3, r3, #9
 80075a0:	441a      	add	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	441a      	add	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	3320      	adds	r3, #32
 80075d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <dir_next+0x28>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075e8:	d301      	bcc.n	80075ee <dir_next+0x2c>
 80075ea:	2304      	movs	r3, #4
 80075ec:	e0aa      	b.n	8007744 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f040 8098 	bne.w	800772a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	8912      	ldrh	r2, [r2, #8]
 8007614:	4293      	cmp	r3, r2
 8007616:	f0c0 8088 	bcc.w	800772a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	61da      	str	r2, [r3, #28]
 8007620:	2304      	movs	r3, #4
 8007622:	e08f      	b.n	8007744 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	0a5b      	lsrs	r3, r3, #9
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	8952      	ldrh	r2, [r2, #10]
 800762c:	3a01      	subs	r2, #1
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d17a      	bne.n	800772a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f7ff fc82 	bl	8006f46 <get_fat>
 8007642:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d801      	bhi.n	800764e <dir_next+0x8c>
 800764a:	2302      	movs	r3, #2
 800764c:	e07a      	b.n	8007744 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007654:	d101      	bne.n	800765a <dir_next+0x98>
 8007656:	2301      	movs	r3, #1
 8007658:	e074      	b.n	8007744 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	429a      	cmp	r2, r3
 8007662:	d358      	bcc.n	8007716 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d104      	bne.n	8007674 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	61da      	str	r2, [r3, #28]
 8007670:	2304      	movs	r3, #4
 8007672:	e067      	b.n	8007744 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7ff fe59 	bl	8007334 <create_chain>
 8007682:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <dir_next+0xcc>
 800768a:	2307      	movs	r3, #7
 800768c:	e05a      	b.n	8007744 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <dir_next+0xd6>
 8007694:	2302      	movs	r3, #2
 8007696:	e055      	b.n	8007744 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800769e:	d101      	bne.n	80076a4 <dir_next+0xe2>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e04f      	b.n	8007744 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fb4f 	bl	8006d48 <sync_window>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <dir_next+0xf2>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e047      	b.n	8007744 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3330      	adds	r3, #48	; 0x30
 80076b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff f979 	bl	80069b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fc1c 	bl	8006f08 <clust2sect>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80076d6:	e012      	b.n	80076fe <dir_next+0x13c>
						fs->wflag = 1;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fb32 	bl	8006d48 <sync_window>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <dir_next+0x12c>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e02a      	b.n	8007744 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3301      	adds	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	895b      	ldrh	r3, [r3, #10]
 8007702:	461a      	mov	r2, r3
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4293      	cmp	r3, r2
 8007708:	d3e6      	bcc.n	80076d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad2      	subs	r2, r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff fbf2 	bl	8006f08 <clust2sect>
 8007724:	4602      	mov	r2, r0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773c:	441a      	add	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff feb4 	bl	80074cc <dir_sdi>
 8007764:	4603      	mov	r3, r0
 8007766:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d12b      	bne.n	80077c6 <dir_alloc+0x7a>
		n = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	4619      	mov	r1, r3
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff fb29 	bl	8006dd0 <move_window>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d11d      	bne.n	80077c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2be5      	cmp	r3, #229	; 0xe5
 8007790:	d004      	beq.n	800779c <dir_alloc+0x50>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d107      	bne.n	80077ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	3301      	adds	r3, #1
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d102      	bne.n	80077b0 <dir_alloc+0x64>
 80077aa:	e00c      	b.n	80077c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80077ac:	2300      	movs	r3, #0
 80077ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80077b0:	2101      	movs	r1, #1
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff ff05 	bl	80075c2 <dir_next>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0d7      	beq.n	8007772 <dir_alloc+0x26>
 80077c2:	e000      	b.n	80077c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80077c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d101      	bne.n	80077d0 <dir_alloc+0x84>
 80077cc:	2307      	movs	r3, #7
 80077ce:	75fb      	strb	r3, [r7, #23]
	return res;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	331a      	adds	r3, #26
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff f841 	bl	8006870 <ld_word>
 80077ee:	4603      	mov	r3, r0
 80077f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d109      	bne.n	800780e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff f836 	bl	8006870 <ld_word>
 8007804:	4603      	mov	r3, r0
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800780e:	68fb      	ldr	r3, [r7, #12]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	331a      	adds	r3, #26
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	b292      	uxth	r2, r2
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff f859 	bl	80068e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d109      	bne.n	8007850 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f103 0214 	add.w	r2, r3, #20
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	0c1b      	lsrs	r3, r3, #16
 8007846:	b29b      	uxth	r3, r3
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f7ff f84b 	bl	80068e6 <st_word>
	}
}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007866:	2100      	movs	r1, #0
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fe2f 	bl	80074cc <dir_sdi>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <dir_find+0x24>
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	e03e      	b.n	80078fa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	4619      	mov	r1, r3
 8007882:	6938      	ldr	r0, [r7, #16]
 8007884:	f7ff faa4 	bl	8006dd0 <move_window>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d12f      	bne.n	80078f2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <dir_find+0x4e>
 80078a0:	2304      	movs	r3, #4
 80078a2:	75fb      	strb	r3, [r7, #23]
 80078a4:	e028      	b.n	80078f8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	330b      	adds	r3, #11
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	330b      	adds	r3, #11
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <dir_find+0x86>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a18      	ldr	r0, [r3, #32]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	220b      	movs	r2, #11
 80078d2:	4619      	mov	r1, r3
 80078d4:	f7ff f88a 	bl	80069ec <mem_cmp>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80078de:	2100      	movs	r1, #0
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff fe6e 	bl	80075c2 <dir_next>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0c5      	beq.n	800787c <dir_find+0x24>
 80078f0:	e002      	b.n	80078f8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80078f2:	bf00      	nop
 80078f4:	e000      	b.n	80078f8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80078f6:	bf00      	nop

	return res;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff ff1a 	bl	800774c <dir_alloc>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d11c      	bne.n	800795c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	4619      	mov	r1, r3
 8007928:	68b8      	ldr	r0, [r7, #8]
 800792a:	f7ff fa51 	bl	8006dd0 <move_window>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d111      	bne.n	800795c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	2220      	movs	r2, #32
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff f838 	bl	80069b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a18      	ldr	r0, [r3, #32]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	220b      	movs	r2, #11
 8007950:	4619      	mov	r1, r3
 8007952:	f7ff f80f 	bl	8006974 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2201      	movs	r2, #1
 800795a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3324      	adds	r3, #36	; 0x24
 800797c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800797e:	220b      	movs	r2, #11
 8007980:	2120      	movs	r1, #32
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7ff f817 	bl	80069b6 <mem_set>
	si = i = 0; ni = 8;
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	2308      	movs	r3, #8
 8007992:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	61fa      	str	r2, [r7, #28]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80079a2:	7efb      	ldrb	r3, [r7, #27]
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d94e      	bls.n	8007a46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80079a8:	7efb      	ldrb	r3, [r7, #27]
 80079aa:	2b2f      	cmp	r3, #47	; 0x2f
 80079ac:	d006      	beq.n	80079bc <create_name+0x54>
 80079ae:	7efb      	ldrb	r3, [r7, #27]
 80079b0:	2b5c      	cmp	r3, #92	; 0x5c
 80079b2:	d110      	bne.n	80079d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80079b4:	e002      	b.n	80079bc <create_name+0x54>
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b2f      	cmp	r3, #47	; 0x2f
 80079c6:	d0f6      	beq.n	80079b6 <create_name+0x4e>
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b5c      	cmp	r3, #92	; 0x5c
 80079d2:	d0f0      	beq.n	80079b6 <create_name+0x4e>
			break;
 80079d4:	e038      	b.n	8007a48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80079d6:	7efb      	ldrb	r3, [r7, #27]
 80079d8:	2b2e      	cmp	r3, #46	; 0x2e
 80079da:	d003      	beq.n	80079e4 <create_name+0x7c>
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d30c      	bcc.n	80079fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b0b      	cmp	r3, #11
 80079e8:	d002      	beq.n	80079f0 <create_name+0x88>
 80079ea:	7efb      	ldrb	r3, [r7, #27]
 80079ec:	2b2e      	cmp	r3, #46	; 0x2e
 80079ee:	d001      	beq.n	80079f4 <create_name+0x8c>
 80079f0:	2306      	movs	r3, #6
 80079f2:	e044      	b.n	8007a7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80079f4:	2308      	movs	r3, #8
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	230b      	movs	r3, #11
 80079fa:	617b      	str	r3, [r7, #20]
			continue;
 80079fc:	e022      	b.n	8007a44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80079fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da04      	bge.n	8007a10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007a06:	7efb      	ldrb	r3, [r7, #27]
 8007a08:	3b80      	subs	r3, #128	; 0x80
 8007a0a:	4a1f      	ldr	r2, [pc, #124]	; (8007a88 <create_name+0x120>)
 8007a0c:	5cd3      	ldrb	r3, [r2, r3]
 8007a0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007a10:	7efb      	ldrb	r3, [r7, #27]
 8007a12:	4619      	mov	r1, r3
 8007a14:	481d      	ldr	r0, [pc, #116]	; (8007a8c <create_name+0x124>)
 8007a16:	f7ff f810 	bl	8006a3a <chk_chr>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <create_name+0xbc>
 8007a20:	2306      	movs	r3, #6
 8007a22:	e02c      	b.n	8007a7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007a24:	7efb      	ldrb	r3, [r7, #27]
 8007a26:	2b60      	cmp	r3, #96	; 0x60
 8007a28:	d905      	bls.n	8007a36 <create_name+0xce>
 8007a2a:	7efb      	ldrb	r3, [r7, #27]
 8007a2c:	2b7a      	cmp	r3, #122	; 0x7a
 8007a2e:	d802      	bhi.n	8007a36 <create_name+0xce>
 8007a30:	7efb      	ldrb	r3, [r7, #27]
 8007a32:	3b20      	subs	r3, #32
 8007a34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	613a      	str	r2, [r7, #16]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	4413      	add	r3, r2
 8007a40:	7efa      	ldrb	r2, [r7, #27]
 8007a42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007a44:	e7a6      	b.n	8007994 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <create_name+0xf4>
 8007a58:	2306      	movs	r3, #6
 8007a5a:	e010      	b.n	8007a7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2be5      	cmp	r3, #229	; 0xe5
 8007a62:	d102      	bne.n	8007a6a <create_name+0x102>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2205      	movs	r2, #5
 8007a68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a6a:	7efb      	ldrb	r3, [r7, #27]
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d801      	bhi.n	8007a74 <create_name+0x10c>
 8007a70:	2204      	movs	r2, #4
 8007a72:	e000      	b.n	8007a76 <create_name+0x10e>
 8007a74:	2200      	movs	r2, #0
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	330b      	adds	r3, #11
 8007a7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007a7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	0800cbf0 	.word	0x0800cbf0
 8007a8c:	0800cb54 	.word	0x0800cb54

08007a90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007aa4:	e002      	b.n	8007aac <follow_path+0x1c>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8007ab2:	d0f8      	beq.n	8007aa6 <follow_path+0x16>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b5c      	cmp	r3, #92	; 0x5c
 8007aba:	d0f4      	beq.n	8007aa6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b1f      	cmp	r3, #31
 8007ac8:	d80a      	bhi.n	8007ae0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2280      	movs	r2, #128	; 0x80
 8007ace:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff fcf9 	bl	80074cc <dir_sdi>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]
 8007ade:	e043      	b.n	8007b68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ff3f 	bl	8007968 <create_name>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d134      	bne.n	8007b5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff feaf 	bl	8007858 <dir_find>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d127      	bne.n	8007b62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d122      	bne.n	8007b62 <follow_path+0xd2>
 8007b1c:	2305      	movs	r3, #5
 8007b1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b20:	e01f      	b.n	8007b62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11c      	bne.n	8007b66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	799b      	ldrb	r3, [r3, #6]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d102      	bne.n	8007b3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b38:	2305      	movs	r3, #5
 8007b3a:	75fb      	strb	r3, [r7, #23]
 8007b3c:	e014      	b.n	8007b68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4c:	4413      	add	r3, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff fe42 	bl	80077da <ld_clust>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b5c:	e7c0      	b.n	8007ae0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007b5e:	bf00      	nop
 8007b60:	e002      	b.n	8007b68 <follow_path+0xd8>
				break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b66:	bf00      	nop
			}
		}
	}

	return res;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b087      	sub	sp, #28
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d031      	beq.n	8007bec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	e002      	b.n	8007b96 <get_ldnumber+0x24>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	3301      	adds	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d903      	bls.n	8007ba6 <get_ldnumber+0x34>
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b3a      	cmp	r3, #58	; 0x3a
 8007ba4:	d1f4      	bne.n	8007b90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b3a      	cmp	r3, #58	; 0x3a
 8007bac:	d11c      	bne.n	8007be8 <get_ldnumber+0x76>
			tp = *path;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	60fa      	str	r2, [r7, #12]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	3b30      	subs	r3, #48	; 0x30
 8007bbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d80e      	bhi.n	8007be4 <get_ldnumber+0x72>
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d10a      	bne.n	8007be4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <get_ldnumber+0x72>
					vol = (int)i;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	e002      	b.n	8007bee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007bec:	693b      	ldr	r3, [r7, #16]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	70da      	strb	r2, [r3, #3]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c12:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff f8da 	bl	8006dd0 <move_window>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <check_fs+0x2a>
 8007c22:	2304      	movs	r3, #4
 8007c24:	e038      	b.n	8007c98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3330      	adds	r3, #48	; 0x30
 8007c2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fe1e 	bl	8006870 <ld_word>
 8007c34:	4603      	mov	r3, r0
 8007c36:	461a      	mov	r2, r3
 8007c38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d001      	beq.n	8007c44 <check_fs+0x48>
 8007c40:	2303      	movs	r3, #3
 8007c42:	e029      	b.n	8007c98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c4a:	2be9      	cmp	r3, #233	; 0xe9
 8007c4c:	d009      	beq.n	8007c62 <check_fs+0x66>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c54:	2beb      	cmp	r3, #235	; 0xeb
 8007c56:	d11e      	bne.n	8007c96 <check_fs+0x9a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007c5e:	2b90      	cmp	r3, #144	; 0x90
 8007c60:	d119      	bne.n	8007c96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3330      	adds	r3, #48	; 0x30
 8007c66:	3336      	adds	r3, #54	; 0x36
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fe19 	bl	80068a0 <ld_dword>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c74:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <check_fs+0xa4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <check_fs+0x82>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e00c      	b.n	8007c98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3330      	adds	r3, #48	; 0x30
 8007c82:	3352      	adds	r3, #82	; 0x52
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fe0b 	bl	80068a0 <ld_dword>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4a05      	ldr	r2, [pc, #20]	; (8007ca4 <check_fs+0xa8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d101      	bne.n	8007c96 <check_fs+0x9a>
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c96:	2302      	movs	r3, #2
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	00544146 	.word	0x00544146
 8007ca4:	33544146 	.word	0x33544146

08007ca8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b096      	sub	sp, #88	; 0x58
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff ff58 	bl	8007b72 <get_ldnumber>
 8007cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da01      	bge.n	8007cce <find_volume+0x26>
 8007cca:	230b      	movs	r3, #11
 8007ccc:	e22d      	b.n	800812a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007cce:	4aa1      	ldr	r2, [pc, #644]	; (8007f54 <find_volume+0x2ac>)
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <find_volume+0x3a>
 8007cde:	230c      	movs	r3, #12
 8007ce0:	e223      	b.n	800812a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	f023 0301 	bic.w	r3, r3, #1
 8007cee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01a      	beq.n	8007d2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fe fd19 	bl	8006734 <disk_status>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10c      	bne.n	8007d2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <find_volume+0x82>
 8007d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007d26:	230a      	movs	r3, #10
 8007d28:	e1ff      	b.n	800812a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e1fd      	b.n	800812a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fd11 	bl	8006768 <disk_initialize>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e1e6      	b.n	800812a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <find_volume+0xca>
 8007d62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d6e:	230a      	movs	r3, #10
 8007d70:	e1db      	b.n	800812a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d7a:	f7ff ff3f 	bl	8007bfc <check_fs>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d149      	bne.n	8007e20 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d90:	e01e      	b.n	8007dd0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007da0:	4413      	add	r3, r2
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	3304      	adds	r3, #4
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d006      	beq.n	8007dbc <find_volume+0x114>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	3308      	adds	r3, #8
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fd74 	bl	80068a0 <ld_dword>
 8007db8:	4602      	mov	r2, r0
 8007dba:	e000      	b.n	8007dbe <find_volume+0x116>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	3358      	adds	r3, #88	; 0x58
 8007dc4:	443b      	add	r3, r7
 8007dc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dcc:	3301      	adds	r3, #1
 8007dce:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d9dd      	bls.n	8007d92 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <find_volume+0x13e>
 8007de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de2:	3b01      	subs	r3, #1
 8007de4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	3358      	adds	r3, #88	; 0x58
 8007dec:	443b      	add	r3, r7
 8007dee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007df2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <find_volume+0x15e>
 8007dfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dfe:	f7ff fefd 	bl	8007bfc <check_fs>
 8007e02:	4603      	mov	r3, r0
 8007e04:	e000      	b.n	8007e08 <find_volume+0x160>
 8007e06:	2303      	movs	r3, #3
 8007e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d905      	bls.n	8007e20 <find_volume+0x178>
 8007e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e16:	3301      	adds	r3, #1
 8007e18:	643b      	str	r3, [r7, #64]	; 0x40
 8007e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d9e2      	bls.n	8007de6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d101      	bne.n	8007e2c <find_volume+0x184>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e17e      	b.n	800812a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d901      	bls.n	8007e38 <find_volume+0x190>
 8007e34:	230d      	movs	r3, #13
 8007e36:	e178      	b.n	800812a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	3330      	adds	r3, #48	; 0x30
 8007e3c:	330b      	adds	r3, #11
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fd16 	bl	8006870 <ld_word>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4a:	d001      	beq.n	8007e50 <find_volume+0x1a8>
 8007e4c:	230d      	movs	r3, #13
 8007e4e:	e16c      	b.n	800812a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	3330      	adds	r3, #48	; 0x30
 8007e54:	3316      	adds	r3, #22
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fd0a 	bl	8006870 <ld_word>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <find_volume+0x1cc>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	3330      	adds	r3, #48	; 0x30
 8007e6a:	3324      	adds	r3, #36	; 0x24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fd17 	bl	80068a0 <ld_dword>
 8007e72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e78:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	789b      	ldrb	r3, [r3, #2]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d005      	beq.n	8007e98 <find_volume+0x1f0>
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d001      	beq.n	8007e98 <find_volume+0x1f0>
 8007e94:	230d      	movs	r3, #13
 8007e96:	e148      	b.n	800812a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea0:	fb02 f303 	mul.w	r3, r2, r3
 8007ea4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	895b      	ldrh	r3, [r3, #10]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d008      	beq.n	8007ecc <find_volume+0x224>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	895b      	ldrh	r3, [r3, #10]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <find_volume+0x228>
 8007ecc:	230d      	movs	r3, #13
 8007ece:	e12c      	b.n	800812a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	3330      	adds	r3, #48	; 0x30
 8007ed4:	3311      	adds	r3, #17
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fcca 	bl	8006870 <ld_word>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	891b      	ldrh	r3, [r3, #8]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <find_volume+0x24e>
 8007ef2:	230d      	movs	r3, #13
 8007ef4:	e119      	b.n	800812a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	3330      	adds	r3, #48	; 0x30
 8007efa:	3313      	adds	r3, #19
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fcb7 	bl	8006870 <ld_word>
 8007f02:	4603      	mov	r3, r0
 8007f04:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <find_volume+0x272>
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	3330      	adds	r3, #48	; 0x30
 8007f10:	3320      	adds	r3, #32
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe fcc4 	bl	80068a0 <ld_dword>
 8007f18:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	3330      	adds	r3, #48	; 0x30
 8007f1e:	330e      	adds	r3, #14
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fca5 	bl	8006870 <ld_word>
 8007f26:	4603      	mov	r3, r0
 8007f28:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <find_volume+0x28c>
 8007f30:	230d      	movs	r3, #13
 8007f32:	e0fa      	b.n	800812a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f38:	4413      	add	r3, r2
 8007f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f3c:	8912      	ldrh	r2, [r2, #8]
 8007f3e:	0912      	lsrs	r2, r2, #4
 8007f40:	b292      	uxth	r2, r2
 8007f42:	4413      	add	r3, r2
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d204      	bcs.n	8007f58 <find_volume+0x2b0>
 8007f4e:	230d      	movs	r3, #13
 8007f50:	e0eb      	b.n	800812a <find_volume+0x482>
 8007f52:	bf00      	nop
 8007f54:	2000193c 	.word	0x2000193c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f60:	8952      	ldrh	r2, [r2, #10]
 8007f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <find_volume+0x2ca>
 8007f6e:	230d      	movs	r3, #13
 8007f70:	e0db      	b.n	800812a <find_volume+0x482>
		fmt = FS_FAT32;
 8007f72:	2303      	movs	r3, #3
 8007f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d802      	bhi.n	8007f88 <find_volume+0x2e0>
 8007f82:	2302      	movs	r3, #2
 8007f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d802      	bhi.n	8007f98 <find_volume+0x2f0>
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	1c9a      	adds	r2, r3, #2
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fa4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007fa6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007faa:	441a      	add	r2, r3
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	441a      	add	r2, r3
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007fba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d11e      	bne.n	8008000 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	3330      	adds	r3, #48	; 0x30
 8007fc6:	332a      	adds	r3, #42	; 0x2a
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe fc51 	bl	8006870 <ld_word>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <find_volume+0x330>
 8007fd4:	230d      	movs	r3, #13
 8007fd6:	e0a8      	b.n	800812a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	891b      	ldrh	r3, [r3, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <find_volume+0x33c>
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	e0a2      	b.n	800812a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	3330      	adds	r3, #48	; 0x30
 8007fe8:	332c      	adds	r3, #44	; 0x2c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fc58 	bl	80068a0 <ld_dword>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8007ffe:	e01f      	b.n	8008040 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	891b      	ldrh	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <find_volume+0x364>
 8008008:	230d      	movs	r3, #13
 800800a:	e08e      	b.n	800812a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008012:	441a      	add	r2, r3
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800801c:	2b02      	cmp	r3, #2
 800801e:	d103      	bne.n	8008028 <find_volume+0x380>
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	e00a      	b.n	800803e <find_volume+0x396>
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	4613      	mov	r3, r2
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	4413      	add	r3, r2
 8008032:	085a      	lsrs	r2, r3, #1
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800803e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008046:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800804a:	0a5b      	lsrs	r3, r3, #9
 800804c:	429a      	cmp	r2, r3
 800804e:	d201      	bcs.n	8008054 <find_volume+0x3ac>
 8008050:	230d      	movs	r3, #13
 8008052:	e06a      	b.n	800812a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800805a:	611a      	str	r2, [r3, #16]
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	2280      	movs	r2, #128	; 0x80
 8008068:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800806a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800806e:	2b03      	cmp	r3, #3
 8008070:	d149      	bne.n	8008106 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	3330      	adds	r3, #48	; 0x30
 8008076:	3330      	adds	r3, #48	; 0x30
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fbf9 	bl	8006870 <ld_word>
 800807e:	4603      	mov	r3, r0
 8008080:	2b01      	cmp	r3, #1
 8008082:	d140      	bne.n	8008106 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008086:	3301      	adds	r3, #1
 8008088:	4619      	mov	r1, r3
 800808a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800808c:	f7fe fea0 	bl	8006dd0 <move_window>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d137      	bne.n	8008106 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	2200      	movs	r2, #0
 800809a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	3330      	adds	r3, #48	; 0x30
 80080a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe fbe3 	bl	8006870 <ld_word>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d127      	bne.n	8008106 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	3330      	adds	r3, #48	; 0x30
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fbf0 	bl	80068a0 <ld_dword>
 80080c0:	4603      	mov	r3, r0
 80080c2:	4a1c      	ldr	r2, [pc, #112]	; (8008134 <find_volume+0x48c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d11e      	bne.n	8008106 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	3330      	adds	r3, #48	; 0x30
 80080cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fbe5 	bl	80068a0 <ld_dword>
 80080d6:	4603      	mov	r3, r0
 80080d8:	4a17      	ldr	r2, [pc, #92]	; (8008138 <find_volume+0x490>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d113      	bne.n	8008106 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	3330      	adds	r3, #48	; 0x30
 80080e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fbda 	bl	80068a0 <ld_dword>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	3330      	adds	r3, #48	; 0x30
 80080f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fbd0 	bl	80068a0 <ld_dword>
 8008100:	4602      	mov	r2, r0
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800810c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <find_volume+0x494>)
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <find_volume+0x494>)
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <find_volume+0x494>)
 800811c:	881a      	ldrh	r2, [r3, #0]
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008122:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008124:	f7fe fdec 	bl	8006d00 <clear_lock>
#endif
	return FR_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3758      	adds	r7, #88	; 0x58
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	41615252 	.word	0x41615252
 8008138:	61417272 	.word	0x61417272
 800813c:	20001940 	.word	0x20001940

08008140 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800814a:	2309      	movs	r3, #9
 800814c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01c      	beq.n	800818e <validate+0x4e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d018      	beq.n	800818e <validate+0x4e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d013      	beq.n	800818e <validate+0x4e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	889a      	ldrh	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	88db      	ldrh	r3, [r3, #6]
 8008170:	429a      	cmp	r2, r3
 8008172:	d10c      	bne.n	800818e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fada 	bl	8006734 <disk_status>
 8008180:	4603      	mov	r3, r0
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <validate+0x4e>
			res = FR_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <validate+0x5a>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	e000      	b.n	800819c <validate+0x5c>
 800819a:	2300      	movs	r3, #0
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	6013      	str	r3, [r2, #0]
	return res;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80081be:	f107 0310 	add.w	r3, r7, #16
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fcd5 	bl	8007b72 <get_ldnumber>
 80081c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da01      	bge.n	80081d4 <f_mount+0x28>
 80081d0:	230b      	movs	r3, #11
 80081d2:	e02b      	b.n	800822c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80081d4:	4a17      	ldr	r2, [pc, #92]	; (8008234 <f_mount+0x88>)
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081e4:	69b8      	ldr	r0, [r7, #24]
 80081e6:	f7fe fd8b 	bl	8006d00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	490d      	ldr	r1, [pc, #52]	; (8008234 <f_mount+0x88>)
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <f_mount+0x66>
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d001      	beq.n	8008216 <f_mount+0x6a>
 8008212:	2300      	movs	r3, #0
 8008214:	e00a      	b.n	800822c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008216:	f107 010c 	add.w	r1, r7, #12
 800821a:	f107 0308 	add.w	r3, r7, #8
 800821e:	2200      	movs	r2, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fd41 	bl	8007ca8 <find_volume>
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800822a:	7dfb      	ldrb	r3, [r7, #23]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000193c 	.word	0x2000193c

08008238 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b098      	sub	sp, #96	; 0x60
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <f_open+0x18>
 800824c:	2309      	movs	r3, #9
 800824e:	e1ad      	b.n	80085ac <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008256:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008258:	79fa      	ldrb	r2, [r7, #7]
 800825a:	f107 0110 	add.w	r1, r7, #16
 800825e:	f107 0308 	add.w	r3, r7, #8
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fd20 	bl	8007ca8 <find_volume>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800826e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 8191 	bne.w	800859a <f_open+0x362>
		dj.obj.fs = fs;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	f107 0314 	add.w	r3, r7, #20
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fc03 	bl	8007a90 <follow_path>
 800828a:	4603      	mov	r3, r0
 800828c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008294:	2b00      	cmp	r3, #0
 8008296:	d11a      	bne.n	80082ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008298:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800829c:	b25b      	sxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da03      	bge.n	80082aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80082a2:	2306      	movs	r3, #6
 80082a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082a8:	e011      	b.n	80082ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf14      	ite	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2300      	moveq	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fbd4 	bl	8006a70 <chk_lock>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	f003 031c 	and.w	r3, r3, #28
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d07f      	beq.n	80083d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80082d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d017      	beq.n	8008310 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d10e      	bne.n	8008306 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082e8:	f7fe fc1e 	bl	8006b28 <enq_lock>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d006      	beq.n	8008300 <f_open+0xc8>
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff fb03 	bl	8007902 <dir_register>
 80082fc:	4603      	mov	r3, r0
 80082fe:	e000      	b.n	8008302 <f_open+0xca>
 8008300:	2312      	movs	r3, #18
 8008302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	f043 0308 	orr.w	r3, r3, #8
 800830c:	71fb      	strb	r3, [r7, #7]
 800830e:	e010      	b.n	8008332 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008310:	7ebb      	ldrb	r3, [r7, #26]
 8008312:	f003 0311 	and.w	r3, r3, #17
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <f_open+0xea>
					res = FR_DENIED;
 800831a:	2307      	movs	r3, #7
 800831c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008320:	e007      	b.n	8008332 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <f_open+0xfa>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008336:	2b00      	cmp	r3, #0
 8008338:	d168      	bne.n	800840c <f_open+0x1d4>
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d063      	beq.n	800840c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008344:	f7fd fcbe 	bl	8005cc4 <get_fattime>
 8008348:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834c:	330e      	adds	r3, #14
 800834e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fae3 	bl	800691c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008358:	3316      	adds	r3, #22
 800835a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe fadd 	bl	800691c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	330b      	adds	r3, #11
 8008366:	2220      	movs	r2, #32
 8008368:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800836e:	4611      	mov	r1, r2
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fa32 	bl	80077da <ld_clust>
 8008376:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800837c:	2200      	movs	r2, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fa4a 	bl	8007818 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008386:	331c      	adds	r3, #28
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fac6 	bl	800691c <st_dword>
					fs->wflag = 1;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2201      	movs	r2, #1
 8008394:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d037      	beq.n	800840c <f_open+0x1d4>
						dw = fs->winsect;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80083a2:	f107 0314 	add.w	r3, r7, #20
 80083a6:	2200      	movs	r2, #0
 80083a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe ff5d 	bl	800726a <remove_chain>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80083b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d126      	bne.n	800840c <f_open+0x1d4>
							res = move_window(fs, dw);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd04 	bl	8006dd0 <move_window>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d2:	3a01      	subs	r2, #1
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e019      	b.n	800840c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d115      	bne.n	800840c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083e0:	7ebb      	ldrb	r3, [r7, #26]
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80083ea:	2304      	movs	r3, #4
 80083ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083f0:	e00c      	b.n	800840c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <f_open+0x1d4>
 80083fc:	7ebb      	ldrb	r3, [r7, #26]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <f_open+0x1d4>
						res = FR_DENIED;
 8008406:	2307      	movs	r3, #7
 8008408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800840c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008410:	2b00      	cmp	r3, #0
 8008412:	d128      	bne.n	8008466 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008424:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800842e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf14      	ite	ne
 800843e:	2301      	movne	r3, #1
 8008440:	2300      	moveq	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	f107 0314 	add.w	r3, r7, #20
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe fb8d 	bl	8006b6c <inc_lock>
 8008452:	4602      	mov	r2, r0
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <f_open+0x22e>
 8008460:	2302      	movs	r3, #2
 8008462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800846a:	2b00      	cmp	r3, #0
 800846c:	f040 8095 	bne.w	800859a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f9af 	bl	80077da <ld_clust>
 800847c:	4602      	mov	r2, r0
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	331c      	adds	r3, #28
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fa0a 	bl	80068a0 <ld_dword>
 800848c:	4602      	mov	r2, r0
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	88da      	ldrh	r2, [r3, #6]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	79fa      	ldrb	r2, [r7, #7]
 80084aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3330      	adds	r3, #48	; 0x30
 80084c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe fa74 	bl	80069b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d060      	beq.n	800859a <f_open+0x362>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d05c      	beq.n	800859a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	895b      	ldrh	r3, [r3, #10]
 80084ec:	025b      	lsls	r3, r3, #9
 80084ee:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	657b      	str	r3, [r7, #84]	; 0x54
 80084fc:	e016      	b.n	800852c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fd1f 	bl	8006f46 <get_fat>
 8008508:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800850a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800850c:	2b01      	cmp	r3, #1
 800850e:	d802      	bhi.n	8008516 <f_open+0x2de>
 8008510:	2302      	movs	r3, #2
 8008512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851c:	d102      	bne.n	8008524 <f_open+0x2ec>
 800851e:	2301      	movs	r3, #1
 8008520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	657b      	str	r3, [r7, #84]	; 0x54
 800852c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <f_open+0x304>
 8008534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008538:	429a      	cmp	r2, r3
 800853a:	d8e0      	bhi.n	80084fe <f_open+0x2c6>
				}
				fp->clust = clst;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008540:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008546:	2b00      	cmp	r3, #0
 8008548:	d127      	bne.n	800859a <f_open+0x362>
 800854a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	2b00      	cmp	r3, #0
 8008552:	d022      	beq.n	800859a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fcd5 	bl	8006f08 <clust2sect>
 800855e:	6478      	str	r0, [r7, #68]	; 0x44
 8008560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <f_open+0x336>
						res = FR_INT_ERR;
 8008566:	2302      	movs	r3, #2
 8008568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800856c:	e015      	b.n	800859a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800856e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008570:	0a5a      	lsrs	r2, r3, #9
 8008572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	7858      	ldrb	r0, [r3, #1]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a1a      	ldr	r2, [r3, #32]
 8008588:	2301      	movs	r3, #1
 800858a:	f7fe f913 	bl	80067b4 <disk_read>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <f_open+0x362>
 8008594:	2301      	movs	r3, #1
 8008596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800859a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <f_open+0x370>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80085a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3760      	adds	r7, #96	; 0x60
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08c      	sub	sp, #48	; 0x30
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f107 0210 	add.w	r2, r7, #16
 80085d2:	4611      	mov	r1, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fdb3 	bl	8008140 <validate>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d107      	bne.n	80085f8 <f_write+0x44>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7d5b      	ldrb	r3, [r3, #21]
 80085ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <f_write+0x4a>
 80085f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085fc:	e14b      	b.n	8008896 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	7d1b      	ldrb	r3, [r3, #20]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <f_write+0x5a>
 800860a:	2307      	movs	r3, #7
 800860c:	e143      	b.n	8008896 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	429a      	cmp	r2, r3
 800861c:	f080 812d 	bcs.w	800887a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	43db      	mvns	r3, r3
 8008626:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008628:	e127      	b.n	800887a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 80e3 	bne.w	80087fe <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	0a5b      	lsrs	r3, r3, #9
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	8952      	ldrh	r2, [r2, #10]
 8008642:	3a01      	subs	r2, #1
 8008644:	4013      	ands	r3, r2
 8008646:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d143      	bne.n	80086d6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10c      	bne.n	8008670 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	d11a      	bne.n	8008698 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fe64 	bl	8007334 <create_chain>
 800866c:	62b8      	str	r0, [r7, #40]	; 0x28
 800866e:	e013      	b.n	8008698 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	4619      	mov	r1, r3
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7fe fef0 	bl	8007464 <clmt_clust>
 8008684:	62b8      	str	r0, [r7, #40]	; 0x28
 8008686:	e007      	b.n	8008698 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fe fe4f 	bl	8007334 <create_chain>
 8008696:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 80f2 	beq.w	8008884 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d104      	bne.n	80086b0 <f_write+0xfc>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2202      	movs	r2, #2
 80086aa:	755a      	strb	r2, [r3, #21]
 80086ac:	2302      	movs	r3, #2
 80086ae:	e0f2      	b.n	8008896 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b6:	d104      	bne.n	80086c2 <f_write+0x10e>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	755a      	strb	r2, [r3, #21]
 80086be:	2301      	movs	r3, #1
 80086c0:	e0e9      	b.n	8008896 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <f_write+0x122>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	7d1b      	ldrb	r3, [r3, #20]
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da18      	bge.n	8008712 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	7858      	ldrb	r0, [r3, #1]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	2301      	movs	r3, #1
 80086f0:	f7fe f880 	bl	80067f4 <disk_write>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <f_write+0x150>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	755a      	strb	r2, [r3, #21]
 8008700:	2301      	movs	r3, #1
 8008702:	e0c8      	b.n	8008896 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fbf4 	bl	8006f08 <clust2sect>
 8008720:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <f_write+0x17e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	755a      	strb	r2, [r3, #21]
 800872e:	2302      	movs	r3, #2
 8008730:	e0b1      	b.n	8008896 <f_write+0x2e2>
			sect += csect;
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	4413      	add	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	0a5b      	lsrs	r3, r3, #9
 800873e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d03c      	beq.n	80087c0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	4413      	add	r3, r2
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	8952      	ldrh	r2, [r2, #10]
 8008750:	4293      	cmp	r3, r2
 8008752:	d905      	bls.n	8008760 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	895b      	ldrh	r3, [r3, #10]
 8008758:	461a      	mov	r2, r3
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	7858      	ldrb	r0, [r3, #1]
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	69f9      	ldr	r1, [r7, #28]
 800876a:	f7fe f843 	bl	80067f4 <disk_write>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <f_write+0x1ca>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	755a      	strb	r2, [r3, #21]
 800877a:	2301      	movs	r3, #1
 800877c:	e08b      	b.n	8008896 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a1a      	ldr	r2, [r3, #32]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	6a3a      	ldr	r2, [r7, #32]
 8008788:	429a      	cmp	r2, r3
 800878a:	d915      	bls.n	80087b8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1a      	ldr	r2, [r3, #32]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	025b      	lsls	r3, r3, #9
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a4:	4619      	mov	r1, r3
 80087a6:	f7fe f8e5 	bl	8006974 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	7d1b      	ldrb	r3, [r3, #20]
 80087ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	025b      	lsls	r3, r3, #9
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80087be:	e03f      	b.n	8008840 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d016      	beq.n	80087f8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d210      	bcs.n	80087f8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	7858      	ldrb	r0, [r3, #1]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087e0:	2301      	movs	r3, #1
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	f7fd ffe6 	bl	80067b4 <disk_read>
 80087e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	755a      	strb	r2, [r3, #21]
 80087f4:	2301      	movs	r3, #1
 80087f6:	e04e      	b.n	8008896 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800880c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d901      	bls.n	8008818 <f_write+0x264>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	4413      	add	r3, r2
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	69f9      	ldr	r1, [r7, #28]
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe f8a1 	bl	8006974 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	7d1b      	ldrb	r3, [r3, #20]
 8008836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800883a:	b2da      	uxtb	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	4413      	add	r3, r2
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	441a      	add	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	619a      	str	r2, [r3, #24]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	429a      	cmp	r2, r3
 800885e:	bf38      	it	cc
 8008860:	461a      	movcc	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	60da      	str	r2, [r3, #12]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	441a      	add	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f aed4 	bne.w	800862a <f_write+0x76>
 8008882:	e000      	b.n	8008886 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008884:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	7d1b      	ldrb	r3, [r3, #20]
 800888a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888e:	b2da      	uxtb	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3730      	adds	r7, #48	; 0x30
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f107 0208 	add.w	r2, r7, #8
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff fc46 	bl	8008140 <validate>
 80088b4:	4603      	mov	r3, r0
 80088b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d168      	bne.n	8008990 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7d1b      	ldrb	r3, [r3, #20]
 80088c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d062      	beq.n	8008990 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7d1b      	ldrb	r3, [r3, #20]
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	da15      	bge.n	8008900 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	7858      	ldrb	r0, [r3, #1]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1a      	ldr	r2, [r3, #32]
 80088e2:	2301      	movs	r3, #1
 80088e4:	f7fd ff86 	bl	80067f4 <disk_write>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <f_sync+0x54>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e04f      	b.n	8008992 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008900:	f7fd f9e0 	bl	8005cc4 <get_fattime>
 8008904:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f7fe fa5e 	bl	8006dd0 <move_window>
 8008914:	4603      	mov	r3, r0
 8008916:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d138      	bne.n	8008990 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008922:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	330b      	adds	r3, #11
 8008928:	781a      	ldrb	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	330b      	adds	r3, #11
 800892e:	f042 0220 	orr.w	r2, r2, #32
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	461a      	mov	r2, r3
 8008940:	68f9      	ldr	r1, [r7, #12]
 8008942:	f7fe ff69 	bl	8007818 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f103 021c 	add.w	r2, r3, #28
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7fd ffe2 	bl	800691c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3316      	adds	r3, #22
 800895c:	6939      	ldr	r1, [r7, #16]
 800895e:	4618      	mov	r0, r3
 8008960:	f7fd ffdc 	bl	800691c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3312      	adds	r3, #18
 8008968:	2100      	movs	r1, #0
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd ffbb 	bl	80068e6 <st_word>
					fs->wflag = 1;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2201      	movs	r2, #1
 8008974:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fa57 	bl	8006e2c <sync_fs>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7d1b      	ldrb	r3, [r3, #20]
 8008986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898a:	b2da      	uxtb	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff ff7b 	bl	800889e <f_sync>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d118      	bne.n	80089e4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f107 0208 	add.w	r2, r7, #8
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fbc0 	bl	8008140 <validate>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10c      	bne.n	80089e4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe f95a 	bl	8006c88 <dec_lock>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b090      	sub	sp, #64	; 0x40
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f107 0208 	add.w	r2, r7, #8
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff fb9d 	bl	8008140 <validate>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <f_lseek+0x2e>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7d5b      	ldrb	r3, [r3, #21]
 8008a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <f_lseek+0x3c>
 8008a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a28:	e1e6      	b.n	8008df8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80d1 	beq.w	8008bd6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a3a:	d15a      	bne.n	8008af2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	1d1a      	adds	r2, r3, #4
 8008a46:	627a      	str	r2, [r7, #36]	; 0x24
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	617b      	str	r3, [r7, #20]
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d03a      	beq.n	8008ad2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	2300      	movs	r3, #0
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	3302      	adds	r3, #2
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	3301      	adds	r3, #1
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fe fa64 	bl	8006f46 <get_fat>
 8008a7e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d804      	bhi.n	8008a90 <f_lseek+0xa2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	755a      	strb	r2, [r3, #21]
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e1b3      	b.n	8008df8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a96:	d104      	bne.n	8008aa2 <f_lseek+0xb4>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	755a      	strb	r2, [r3, #21]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e1aa      	b.n	8008df8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d0de      	beq.n	8008a6a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d809      	bhi.n	8008ac8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8008aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	627a      	str	r2, [r7, #36]	; 0x24
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d3c4      	bcc.n	8008a5c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ad8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d803      	bhi.n	8008aea <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	e184      	b.n	8008df4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008aea:	2311      	movs	r3, #17
 8008aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008af0:	e180      	b.n	8008df4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d902      	bls.n	8008b02 <f_lseek+0x114>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8172 	beq.w	8008df4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7fe fca4 	bl	8007464 <clmt_clust>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f7fe f9ec 	bl	8006f08 <clust2sect>
 8008b30:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <f_lseek+0x154>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	755a      	strb	r2, [r3, #21]
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e15a      	b.n	8008df8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	0a5b      	lsrs	r3, r3, #9
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	8952      	ldrh	r2, [r2, #10]
 8008b4c:	3a01      	subs	r2, #1
 8008b4e:	4013      	ands	r3, r2
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4413      	add	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 8148 	beq.w	8008df4 <f_lseek+0x406>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	f000 8142 	beq.w	8008df4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7d1b      	ldrb	r3, [r3, #20]
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da18      	bge.n	8008bac <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	7858      	ldrb	r0, [r3, #1]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a1a      	ldr	r2, [r3, #32]
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f7fd fe33 	bl	80067f4 <disk_write>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <f_lseek+0x1b0>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	755a      	strb	r2, [r3, #21]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e12c      	b.n	8008df8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7d1b      	ldrb	r3, [r3, #20]
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	7858      	ldrb	r0, [r3, #1]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	f7fd fdfb 	bl	80067b4 <disk_read>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <f_lseek+0x1e0>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	755a      	strb	r2, [r3, #21]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e114      	b.n	8008df8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	621a      	str	r2, [r3, #32]
 8008bd4:	e10e      	b.n	8008df4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d908      	bls.n	8008bf2 <f_lseek+0x204>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	7d1b      	ldrb	r3, [r3, #20]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c00:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80a7 	beq.w	8008d58 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	895b      	ldrh	r3, [r3, #10]
 8008c0e:	025b      	lsls	r3, r3, #9
 8008c10:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01b      	beq.n	8008c50 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	1e5a      	subs	r2, r3, #1
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	1e59      	subs	r1, r3, #1
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d30f      	bcc.n	8008c50 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	1e5a      	subs	r2, r3, #1
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	425b      	negs	r3, r3
 8008c38:	401a      	ands	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c4e:	e022      	b.n	8008c96 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d119      	bne.n	8008c90 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fb67 	bl	8007334 <create_chain>
 8008c66:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d104      	bne.n	8008c78 <f_lseek+0x28a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2202      	movs	r2, #2
 8008c72:	755a      	strb	r2, [r3, #21]
 8008c74:	2302      	movs	r3, #2
 8008c76:	e0bf      	b.n	8008df8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c7e:	d104      	bne.n	8008c8a <f_lseek+0x29c>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	755a      	strb	r2, [r3, #21]
 8008c86:	2301      	movs	r3, #1
 8008c88:	e0b6      	b.n	8008df8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c8e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c94:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d05d      	beq.n	8008d58 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008c9c:	e03a      	b.n	8008d14 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	603b      	str	r3, [r7, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699a      	ldr	r2, [r3, #24]
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	441a      	add	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7d1b      	ldrb	r3, [r3, #20]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fb36 	bl	8007334 <create_chain>
 8008cc8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d108      	bne.n	8008ce2 <f_lseek+0x2f4>
							ofs = 0; break;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	e022      	b.n	8008d1c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe f933 	bl	8006f46 <get_fat>
 8008ce0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce8:	d104      	bne.n	8008cf4 <f_lseek+0x306>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	755a      	strb	r2, [r3, #21]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e081      	b.n	8008df8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d904      	bls.n	8008d04 <f_lseek+0x316>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d304      	bcc.n	8008d0e <f_lseek+0x320>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	755a      	strb	r2, [r3, #21]
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e074      	b.n	8008df8 <f_lseek+0x40a>
					fp->clust = clst;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d12:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d8c0      	bhi.n	8008c9e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699a      	ldr	r2, [r3, #24]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	441a      	add	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d012      	beq.n	8008d58 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe f8e6 	bl	8006f08 <clust2sect>
 8008d3c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <f_lseek+0x360>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	755a      	strb	r2, [r3, #21]
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e054      	b.n	8008df8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	0a5b      	lsrs	r3, r3, #9
 8008d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d54:	4413      	add	r3, r2
 8008d56:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699a      	ldr	r2, [r3, #24]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d90a      	bls.n	8008d7a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7d1b      	ldrb	r3, [r3, #20]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d036      	beq.n	8008df4 <f_lseek+0x406>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d031      	beq.n	8008df4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	7d1b      	ldrb	r3, [r3, #20]
 8008d94:	b25b      	sxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da18      	bge.n	8008dcc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	7858      	ldrb	r0, [r3, #1]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1a      	ldr	r2, [r3, #32]
 8008da8:	2301      	movs	r3, #1
 8008daa:	f7fd fd23 	bl	80067f4 <disk_write>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <f_lseek+0x3d0>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	755a      	strb	r2, [r3, #21]
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e01c      	b.n	8008df8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7d1b      	ldrb	r3, [r3, #20]
 8008dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	7858      	ldrb	r0, [r3, #1]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dda:	f7fd fceb 	bl	80067b4 <disk_read>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d004      	beq.n	8008dee <f_lseek+0x400>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	755a      	strb	r2, [r3, #21]
 8008dea:	2301      	movs	r3, #1
 8008dec:	e004      	b.n	8008df8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008df2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008df4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3740      	adds	r7, #64	; 0x40
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e16:	4b1f      	ldr	r3, [pc, #124]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e18:	7a5b      	ldrb	r3, [r3, #9]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d131      	bne.n	8008e84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e20:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e22:	7a5b      	ldrb	r3, [r3, #9]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e2e:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e30:	7a5b      	ldrb	r3, [r3, #9]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	4a17      	ldr	r2, [pc, #92]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e40:	7a5b      	ldrb	r3, [r3, #9]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e48:	4413      	add	r3, r2
 8008e4a:	79fa      	ldrb	r2, [r7, #7]
 8008e4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e4e:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e50:	7a5b      	ldrb	r3, [r3, #9]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	b2d1      	uxtb	r1, r2
 8008e58:	4a0e      	ldr	r2, [pc, #56]	; (8008e94 <FATFS_LinkDriverEx+0x94>)
 8008e5a:	7251      	strb	r1, [r2, #9]
 8008e5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e5e:	7dbb      	ldrb	r3, [r7, #22]
 8008e60:	3330      	adds	r3, #48	; 0x30
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	223a      	movs	r2, #58	; 0x3a
 8008e6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	3302      	adds	r3, #2
 8008e74:	222f      	movs	r2, #47	; 0x2f
 8008e76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	3303      	adds	r3, #3
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20001964 	.word	0x20001964

08008e98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff ffaa 	bl	8008e00 <FATFS_LinkDriverEx>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8008ebc:	4b10      	ldr	r3, [pc, #64]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2100028088;
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008eca:	4a0e      	ldr	r2, [pc, #56]	; (8008f04 <MX_PDM2PCM_Init+0x4c>)
 8008ecc:	605a      	str	r2, [r3, #4]
  //PDM1_filter_handler.high_pass_tap = 2122358088;
  PDM1_filter_handler.in_ptr_channels = 2;
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008eda:	4809      	ldr	r0, [pc, #36]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008edc:	f001 fd66 	bl	800a9ac <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8008ee0:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <MX_PDM2PCM_Init+0x50>)
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8008ee6:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <MX_PDM2PCM_Init+0x50>)
 8008ee8:	2210      	movs	r2, #16
 8008eea:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 8008eec:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <MX_PDM2PCM_Init+0x50>)
 8008eee:	2218      	movs	r2, #24
 8008ef0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008ef2:	4905      	ldr	r1, [pc, #20]	; (8008f08 <MX_PDM2PCM_Init+0x50>)
 8008ef4:	4802      	ldr	r0, [pc, #8]	; (8008f00 <MX_PDM2PCM_Init+0x48>)
 8008ef6:	f001 fde3 	bl	800aac0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008efa:	bf00      	nop
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20001970 	.word	0x20001970
 8008f04:	7d2be2b8 	.word	0x7d2be2b8
 8008f08:	200019bc 	.word	0x200019bc

08008f0c <D16_GENERIC>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	b089      	sub	sp, #36	; 0x24
 8008f12:	68d4      	ldr	r4, [r2, #12]
 8008f14:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008f16:	6993      	ldr	r3, [r2, #24]
 8008f18:	9407      	str	r4, [sp, #28]
 8008f1a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008f1c:	9306      	str	r3, [sp, #24]
 8008f1e:	9402      	str	r4, [sp, #8]
 8008f20:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8008f24:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8008f28:	69d3      	ldr	r3, [r2, #28]
 8008f2a:	6896      	ldr	r6, [r2, #8]
 8008f2c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008f2e:	9103      	str	r1, [sp, #12]
 8008f30:	2d00      	cmp	r5, #0
 8008f32:	d066      	beq.n	8009002 <D16_GENERIC+0xf6>
 8008f34:	f004 0510 	and.w	r5, r4, #16
 8008f38:	f004 0420 	and.w	r4, r4, #32
 8008f3c:	9504      	str	r5, [sp, #16]
 8008f3e:	4938      	ldr	r1, [pc, #224]	; (8009020 <D16_GENERIC+0x114>)
 8008f40:	9405      	str	r4, [sp, #20]
 8008f42:	f04f 0e00 	mov.w	lr, #0
 8008f46:	4635      	mov	r5, r6
 8008f48:	e04f      	b.n	8008fea <D16_GENERIC+0xde>
 8008f4a:	5d87      	ldrb	r7, [r0, r6]
 8008f4c:	7804      	ldrb	r4, [r0, #0]
 8008f4e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008f52:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8008f56:	b2e6      	uxtb	r6, r4
 8008f58:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008f5c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008f60:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008f64:	4433      	add	r3, r6
 8008f66:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8008f6a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8008f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f72:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8008f76:	0aa3      	lsrs	r3, r4, #10
 8008f78:	4c2a      	ldr	r4, [pc, #168]	; (8009024 <D16_GENERIC+0x118>)
 8008f7a:	fb26 5404 	smlad	r4, r6, r4, r5
 8008f7e:	4d2a      	ldr	r5, [pc, #168]	; (8009028 <D16_GENERIC+0x11c>)
 8008f80:	fb26 f505 	smuad	r5, r6, r5
 8008f84:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8008f88:	eb04 080a 	add.w	r8, r4, sl
 8008f8c:	eba8 080b 	sub.w	r8, r8, fp
 8008f90:	4646      	mov	r6, r8
 8008f92:	17f7      	asrs	r7, r6, #31
 8008f94:	e9cd 6700 	strd	r6, r7, [sp]
 8008f98:	9e04      	ldr	r6, [sp, #16]
 8008f9a:	f10e 0c01 	add.w	ip, lr, #1
 8008f9e:	b16e      	cbz	r6, 8008fbc <D16_GENERIC+0xb0>
 8008fa0:	6a16      	ldr	r6, [r2, #32]
 8008fa2:	9f01      	ldr	r7, [sp, #4]
 8008fa4:	fba8 8906 	umull	r8, r9, r8, r6
 8008fa8:	fb06 9907 	mla	r9, r6, r7, r9
 8008fac:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8008fb0:	f149 0900 	adc.w	r9, r9, #0
 8008fb4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8008fb8:	46a3      	mov	fp, r4
 8008fba:	4654      	mov	r4, sl
 8008fbc:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8008fbe:	9f02      	ldr	r7, [sp, #8]
 8008fc0:	0424      	lsls	r4, r4, #16
 8008fc2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008fc6:	f04f 0900 	mov.w	r9, #0
 8008fca:	fb0e fe06 	mul.w	lr, lr, r6
 8008fce:	fbc7 8904 	smlal	r8, r9, r7, r4
 8008fd2:	9e03      	ldr	r6, [sp, #12]
 8008fd4:	464f      	mov	r7, r9
 8008fd6:	10bc      	asrs	r4, r7, #2
 8008fd8:	f304 040f 	ssat	r4, #16, r4
 8008fdc:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8008fe0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008fe2:	fa1f fe8c 	uxth.w	lr, ip
 8008fe6:	4574      	cmp	r4, lr
 8008fe8:	d90a      	bls.n	8009000 <D16_GENERIC+0xf4>
 8008fea:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8008fec:	2c01      	cmp	r4, #1
 8008fee:	b2e6      	uxtb	r6, r4
 8008ff0:	d1ab      	bne.n	8008f4a <D16_GENERIC+0x3e>
 8008ff2:	9e05      	ldr	r6, [sp, #20]
 8008ff4:	f850 4b02 	ldr.w	r4, [r0], #2
 8008ff8:	2e00      	cmp	r6, #0
 8008ffa:	d0ac      	beq.n	8008f56 <D16_GENERIC+0x4a>
 8008ffc:	ba64      	rev16	r4, r4
 8008ffe:	e7aa      	b.n	8008f56 <D16_GENERIC+0x4a>
 8009000:	462e      	mov	r6, r5
 8009002:	9907      	ldr	r1, [sp, #28]
 8009004:	61d3      	str	r3, [r2, #28]
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	6096      	str	r6, [r2, #8]
 800900a:	2000      	movs	r0, #0
 800900c:	60d1      	str	r1, [r2, #12]
 800900e:	f8c2 a010 	str.w	sl, [r2, #16]
 8009012:	f8c2 b014 	str.w	fp, [r2, #20]
 8009016:	6193      	str	r3, [r2, #24]
 8009018:	b009      	add	sp, #36	; 0x24
 800901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901e:	bf00      	nop
 8009020:	20000000 	.word	0x20000000
 8009024:	00030001 	.word	0x00030001
 8009028:	00010003 	.word	0x00010003

0800902c <D24_GENERIC>:
 800902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009032:	6993      	ldr	r3, [r2, #24]
 8009034:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009036:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800903a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800903e:	6894      	ldr	r4, [r2, #8]
 8009040:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8009044:	b089      	sub	sp, #36	; 0x24
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	9503      	str	r5, [sp, #12]
 800904a:	69d3      	ldr	r3, [r2, #28]
 800904c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800904e:	9104      	str	r1, [sp, #16]
 8009050:	2e00      	cmp	r6, #0
 8009052:	f000 8096 	beq.w	8009182 <D24_GENERIC+0x156>
 8009056:	f005 0610 	and.w	r6, r5, #16
 800905a:	f005 0520 	and.w	r5, r5, #32
 800905e:	4954      	ldr	r1, [pc, #336]	; (80091b0 <D24_GENERIC+0x184>)
 8009060:	9605      	str	r6, [sp, #20]
 8009062:	9506      	str	r5, [sp, #24]
 8009064:	f04f 0e00 	mov.w	lr, #0
 8009068:	f8cd 9008 	str.w	r9, [sp, #8]
 800906c:	e06a      	b.n	8009144 <D24_GENERIC+0x118>
 800906e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009072:	f810 8007 	ldrb.w	r8, [r0, r7]
 8009076:	f890 c000 	ldrb.w	ip, [r0]
 800907a:	042d      	lsls	r5, r5, #16
 800907c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009080:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8009084:	44ac      	add	ip, r5
 8009086:	4438      	add	r0, r7
 8009088:	fa5f f68c 	uxtb.w	r6, ip
 800908c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009090:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009094:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8009098:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800909c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80090a0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80090a4:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80090a8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80090ac:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80090b0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80090b4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80090b8:	4d3e      	ldr	r5, [pc, #248]	; (80091b4 <D24_GENERIC+0x188>)
 80090ba:	fb26 b705 	smlad	r7, r6, r5, fp
 80090be:	4d3e      	ldr	r5, [pc, #248]	; (80091b8 <D24_GENERIC+0x18c>)
 80090c0:	fb26 4b05 	smlad	fp, r6, r5, r4
 80090c4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80090c8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80090cc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80090d0:	2401      	movs	r4, #1
 80090d2:	fb26 f604 	smuad	r6, r6, r4
 80090d6:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80090da:	9f02      	ldr	r7, [sp, #8]
 80090dc:	eb0e 0c04 	add.w	ip, lr, r4
 80090e0:	eb08 0406 	add.w	r4, r8, r6
 80090e4:	eb05 060a 	add.w	r6, r5, sl
 80090e8:	1bf6      	subs	r6, r6, r7
 80090ea:	4637      	mov	r7, r6
 80090ec:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80090f0:	e9cd 7800 	strd	r7, r8, [sp]
 80090f4:	9f05      	ldr	r7, [sp, #20]
 80090f6:	b177      	cbz	r7, 8009116 <D24_GENERIC+0xea>
 80090f8:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80090fc:	9502      	str	r5, [sp, #8]
 80090fe:	fba6 9a08 	umull	r9, sl, r6, r8
 8009102:	9e01      	ldr	r6, [sp, #4]
 8009104:	fb08 aa06 	mla	sl, r8, r6, sl
 8009108:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800910c:	f14a 0700 	adc.w	r7, sl, #0
 8009110:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8009114:	4655      	mov	r5, sl
 8009116:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009118:	9f03      	ldr	r7, [sp, #12]
 800911a:	03ad      	lsls	r5, r5, #14
 800911c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009120:	f04f 0900 	mov.w	r9, #0
 8009124:	fb0e fe06 	mul.w	lr, lr, r6
 8009128:	fbc7 8905 	smlal	r8, r9, r7, r5
 800912c:	9e04      	ldr	r6, [sp, #16]
 800912e:	464f      	mov	r7, r9
 8009130:	10bd      	asrs	r5, r7, #2
 8009132:	f305 050f 	ssat	r5, #16, r5
 8009136:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800913a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800913c:	fa1f fe8c 	uxth.w	lr, ip
 8009140:	4575      	cmp	r5, lr
 8009142:	d91c      	bls.n	800917e <D24_GENERIC+0x152>
 8009144:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009146:	b2ef      	uxtb	r7, r5
 8009148:	2d01      	cmp	r5, #1
 800914a:	b23e      	sxth	r6, r7
 800914c:	d18f      	bne.n	800906e <D24_GENERIC+0x42>
 800914e:	9d06      	ldr	r5, [sp, #24]
 8009150:	b15d      	cbz	r5, 800916a <D24_GENERIC+0x13e>
 8009152:	f01e 0f01 	tst.w	lr, #1
 8009156:	d122      	bne.n	800919e <D24_GENERIC+0x172>
 8009158:	7805      	ldrb	r5, [r0, #0]
 800915a:	78c7      	ldrb	r7, [r0, #3]
 800915c:	7846      	ldrb	r6, [r0, #1]
 800915e:	022d      	lsls	r5, r5, #8
 8009160:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8009164:	44b4      	add	ip, r6
 8009166:	3002      	adds	r0, #2
 8009168:	e78e      	b.n	8009088 <D24_GENERIC+0x5c>
 800916a:	7846      	ldrb	r6, [r0, #1]
 800916c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8009170:	f810 5b03 	ldrb.w	r5, [r0], #3
 8009174:	0236      	lsls	r6, r6, #8
 8009176:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800917a:	44ac      	add	ip, r5
 800917c:	e784      	b.n	8009088 <D24_GENERIC+0x5c>
 800917e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009182:	61d3      	str	r3, [r2, #28]
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	6094      	str	r4, [r2, #8]
 8009188:	2000      	movs	r0, #0
 800918a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800918e:	f8c2 a010 	str.w	sl, [r2, #16]
 8009192:	f8c2 9014 	str.w	r9, [r2, #20]
 8009196:	6193      	str	r3, [r2, #24]
 8009198:	b009      	add	sp, #36	; 0x24
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	78c5      	ldrb	r5, [r0, #3]
 80091a0:	7887      	ldrb	r7, [r0, #2]
 80091a2:	f810 6b04 	ldrb.w	r6, [r0], #4
 80091a6:	022d      	lsls	r5, r5, #8
 80091a8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80091ac:	44b4      	add	ip, r6
 80091ae:	e76b      	b.n	8009088 <D24_GENERIC+0x5c>
 80091b0:	20000000 	.word	0x20000000
 80091b4:	00030001 	.word	0x00030001
 80091b8:	00060007 	.word	0x00060007

080091bc <D32_GENERIC>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80091c2:	6993      	ldr	r3, [r2, #24]
 80091c4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80091c6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80091ca:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80091ce:	69d6      	ldr	r6, [r2, #28]
 80091d0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80091d4:	b089      	sub	sp, #36	; 0x24
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	9403      	str	r4, [sp, #12]
 80091da:	6893      	ldr	r3, [r2, #8]
 80091dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80091de:	9104      	str	r1, [sp, #16]
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	f000 809f 	beq.w	8009324 <D32_GENERIC+0x168>
 80091e6:	f004 0510 	and.w	r5, r4, #16
 80091ea:	f004 0420 	and.w	r4, r4, #32
 80091ee:	9505      	str	r5, [sp, #20]
 80091f0:	4953      	ldr	r1, [pc, #332]	; (8009340 <D32_GENERIC+0x184>)
 80091f2:	9406      	str	r4, [sp, #24]
 80091f4:	f04f 0c00 	mov.w	ip, #0
 80091f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80091fc:	461d      	mov	r5, r3
 80091fe:	4617      	mov	r7, r2
 8009200:	e077      	b.n	80092f2 <D32_GENERIC+0x136>
 8009202:	f818 3003 	ldrb.w	r3, [r8, r3]
 8009206:	f810 800e 	ldrb.w	r8, [r0, lr]
 800920a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800920e:	7800      	ldrb	r0, [r0, #0]
 8009210:	041b      	lsls	r3, r3, #16
 8009212:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009216:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800921a:	4403      	add	r3, r0
 800921c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8009220:	b2dc      	uxtb	r4, r3
 8009222:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009226:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800922a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800922e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009232:	0e1b      	lsrs	r3, r3, #24
 8009234:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8009238:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800923c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009240:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009244:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8009248:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800924c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009250:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009254:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009258:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800925c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8009260:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009264:	4b37      	ldr	r3, [pc, #220]	; (8009344 <D32_GENERIC+0x188>)
 8009266:	fb22 b403 	smlad	r4, r2, r3, fp
 800926a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800926e:	fb2e 4803 	smlad	r8, lr, r3, r4
 8009272:	4b35      	ldr	r3, [pc, #212]	; (8009348 <D32_GENERIC+0x18c>)
 8009274:	fb22 5503 	smlad	r5, r2, r3, r5
 8009278:	4b34      	ldr	r3, [pc, #208]	; (800934c <D32_GENERIC+0x190>)
 800927a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800927e:	2301      	movs	r3, #1
 8009280:	fb22 f203 	smuad	r2, r2, r3
 8009284:	4b32      	ldr	r3, [pc, #200]	; (8009350 <D32_GENERIC+0x194>)
 8009286:	fb2e 2503 	smlad	r5, lr, r3, r2
 800928a:	9b02      	ldr	r3, [sp, #8]
 800928c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8009290:	eb04 080a 	add.w	r8, r4, sl
 8009294:	eba8 0803 	sub.w	r8, r8, r3
 8009298:	4642      	mov	r2, r8
 800929a:	17d3      	asrs	r3, r2, #31
 800929c:	e9cd 2300 	strd	r2, r3, [sp]
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	f10c 0e01 	add.w	lr, ip, #1
 80092a6:	b16b      	cbz	r3, 80092c4 <D32_GENERIC+0x108>
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	9402      	str	r4, [sp, #8]
 80092ae:	fba8 8902 	umull	r8, r9, r8, r2
 80092b2:	fb02 9903 	mla	r9, r2, r3, r9
 80092b6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80092ba:	f149 0900 	adc.w	r9, r9, #0
 80092be:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80092c2:	4654      	mov	r4, sl
 80092c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092c6:	9a04      	ldr	r2, [sp, #16]
 80092c8:	fb0c fc03 	mul.w	ip, ip, r3
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	0364      	lsls	r4, r4, #13
 80092d0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80092d4:	f04f 0900 	mov.w	r9, #0
 80092d8:	fbc3 8904 	smlal	r8, r9, r3, r4
 80092dc:	464b      	mov	r3, r9
 80092de:	109b      	asrs	r3, r3, #2
 80092e0:	f303 030f 	ssat	r3, #16, r3
 80092e4:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80092e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092ea:	fa1f fc8e 	uxth.w	ip, lr
 80092ee:	4563      	cmp	r3, ip
 80092f0:	d914      	bls.n	800931c <D32_GENERIC+0x160>
 80092f2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80092f4:	b2e2      	uxtb	r2, r4
 80092f6:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80092fa:	eb00 080e 	add.w	r8, r0, lr
 80092fe:	4253      	negs	r3, r2
 8009300:	2c01      	cmp	r4, #1
 8009302:	eb08 0403 	add.w	r4, r8, r3
 8009306:	f47f af7c 	bne.w	8009202 <D32_GENERIC+0x46>
 800930a:	1d02      	adds	r2, r0, #4
 800930c:	6803      	ldr	r3, [r0, #0]
 800930e:	9806      	ldr	r0, [sp, #24]
 8009310:	b110      	cbz	r0, 8009318 <D32_GENERIC+0x15c>
 8009312:	ba5b      	rev16	r3, r3
 8009314:	4610      	mov	r0, r2
 8009316:	e783      	b.n	8009220 <D32_GENERIC+0x64>
 8009318:	4610      	mov	r0, r2
 800931a:	e781      	b.n	8009220 <D32_GENERIC+0x64>
 800931c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009320:	462b      	mov	r3, r5
 8009322:	463a      	mov	r2, r7
 8009324:	6093      	str	r3, [r2, #8]
 8009326:	9b07      	ldr	r3, [sp, #28]
 8009328:	f8c2 b00c 	str.w	fp, [r2, #12]
 800932c:	2000      	movs	r0, #0
 800932e:	61d6      	str	r6, [r2, #28]
 8009330:	f8c2 a010 	str.w	sl, [r2, #16]
 8009334:	f8c2 9014 	str.w	r9, [r2, #20]
 8009338:	6193      	str	r3, [r2, #24]
 800933a:	b009      	add	sp, #36	; 0x24
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	20000000 	.word	0x20000000
 8009344:	00060003 	.word	0x00060003
 8009348:	000a000c 	.word	0x000a000c
 800934c:	000c000a 	.word	0x000c000a
 8009350:	00030006 	.word	0x00030006

08009354 <D48_GENERIC>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	b089      	sub	sp, #36	; 0x24
 800935a:	6953      	ldr	r3, [r2, #20]
 800935c:	68d4      	ldr	r4, [r2, #12]
 800935e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009360:	9302      	str	r3, [sp, #8]
 8009362:	9400      	str	r4, [sp, #0]
 8009364:	6993      	ldr	r3, [r2, #24]
 8009366:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	9403      	str	r4, [sp, #12]
 800936c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009370:	69d6      	ldr	r6, [r2, #28]
 8009372:	6893      	ldr	r3, [r2, #8]
 8009374:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009376:	9104      	str	r1, [sp, #16]
 8009378:	2d00      	cmp	r5, #0
 800937a:	f000 80c5 	beq.w	8009508 <D48_GENERIC+0x1b4>
 800937e:	f004 0510 	and.w	r5, r4, #16
 8009382:	f004 0420 	and.w	r4, r4, #32
 8009386:	4967      	ldr	r1, [pc, #412]	; (8009524 <D48_GENERIC+0x1d0>)
 8009388:	9505      	str	r5, [sp, #20]
 800938a:	9406      	str	r4, [sp, #24]
 800938c:	f04f 0c00 	mov.w	ip, #0
 8009390:	4657      	mov	r7, sl
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	e09c      	b.n	80094d0 <D48_GENERIC+0x17c>
 8009396:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800939a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800939e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80093a2:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80093a6:	7800      	ldrb	r0, [r0, #0]
 80093a8:	0424      	lsls	r4, r4, #16
 80093aa:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80093ae:	f818 4005 	ldrb.w	r4, [r8, r5]
 80093b2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80093b6:	44a8      	add	r8, r5
 80093b8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80093bc:	eb0b 0500 	add.w	r5, fp, r0
 80093c0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80093c4:	fa5f f885 	uxtb.w	r8, r5
 80093c8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80093cc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80093d0:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80093d4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80093d8:	0e2d      	lsrs	r5, r5, #24
 80093da:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80093de:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80093e2:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80093e6:	b2e6      	uxtb	r6, r4
 80093e8:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80093ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80093f0:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80093f4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80093f8:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80093fc:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8009400:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8009404:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8009408:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800940c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009410:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8009414:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009418:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800941c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009420:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8009424:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8009428:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800942c:	4c3e      	ldr	r4, [pc, #248]	; (8009528 <D48_GENERIC+0x1d4>)
 800942e:	9d00      	ldr	r5, [sp, #0]
 8009430:	fb2a 5404 	smlad	r4, sl, r4, r5
 8009434:	4d3d      	ldr	r5, [pc, #244]	; (800952c <D48_GENERIC+0x1d8>)
 8009436:	fb28 4405 	smlad	r4, r8, r5, r4
 800943a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800943e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8009442:	4c3b      	ldr	r4, [pc, #236]	; (8009530 <D48_GENERIC+0x1dc>)
 8009444:	9b01      	ldr	r3, [sp, #4]
 8009446:	fb2a 3304 	smlad	r3, sl, r4, r3
 800944a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800944e:	fb28 3304 	smlad	r3, r8, r4, r3
 8009452:	4c38      	ldr	r4, [pc, #224]	; (8009534 <D48_GENERIC+0x1e0>)
 8009454:	fb2e 3304 	smlad	r3, lr, r4, r3
 8009458:	2501      	movs	r5, #1
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	fb2a fa05 	smuad	sl, sl, r5
 8009460:	4b35      	ldr	r3, [pc, #212]	; (8009538 <D48_GENERIC+0x1e4>)
 8009462:	fb28 a803 	smlad	r8, r8, r3, sl
 8009466:	4b35      	ldr	r3, [pc, #212]	; (800953c <D48_GENERIC+0x1e8>)
 8009468:	fb2e 8303 	smlad	r3, lr, r3, r8
 800946c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	9b02      	ldr	r3, [sp, #8]
 8009474:	eb04 0807 	add.w	r8, r4, r7
 8009478:	eba8 0803 	sub.w	r8, r8, r3
 800947c:	9b05      	ldr	r3, [sp, #20]
 800947e:	4465      	add	r5, ip
 8009480:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8009484:	b163      	cbz	r3, 80094a0 <D48_GENERIC+0x14c>
 8009486:	6a17      	ldr	r7, [r2, #32]
 8009488:	9402      	str	r4, [sp, #8]
 800948a:	fba8 8907 	umull	r8, r9, r8, r7
 800948e:	fb07 990b 	mla	r9, r7, fp, r9
 8009492:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8009496:	f149 0900 	adc.w	r9, r9, #0
 800949a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800949e:	463c      	mov	r4, r7
 80094a0:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	02e4      	lsls	r4, r4, #11
 80094a8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80094ac:	f04f 0900 	mov.w	r9, #0
 80094b0:	fb0c fc0e 	mul.w	ip, ip, lr
 80094b4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80094be:	f304 040f 	ssat	r4, #16, r4
 80094c2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80094c6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80094c8:	fa1f fc85 	uxth.w	ip, r5
 80094cc:	4564      	cmp	r4, ip
 80094ce:	d919      	bls.n	8009504 <D48_GENERIC+0x1b0>
 80094d0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80094d2:	fa5f fe84 	uxtb.w	lr, r4
 80094d6:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80094da:	f1ce 0500 	rsb	r5, lr, #0
 80094de:	eb00 0b09 	add.w	fp, r0, r9
 80094e2:	eb0b 0a05 	add.w	sl, fp, r5
 80094e6:	2c01      	cmp	r4, #1
 80094e8:	eb0a 0809 	add.w	r8, sl, r9
 80094ec:	f47f af53 	bne.w	8009396 <D48_GENERIC+0x42>
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	6805      	ldr	r5, [r0, #0]
 80094f4:	6844      	ldr	r4, [r0, #4]
 80094f6:	3006      	adds	r0, #6
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f43f af63 	beq.w	80093c4 <D48_GENERIC+0x70>
 80094fe:	ba6d      	rev16	r5, r5
 8009500:	ba64      	rev16	r4, r4
 8009502:	e75f      	b.n	80093c4 <D48_GENERIC+0x70>
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	46ba      	mov	sl, r7
 8009508:	6093      	str	r3, [r2, #8]
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	60d3      	str	r3, [r2, #12]
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	6153      	str	r3, [r2, #20]
 8009512:	9b07      	ldr	r3, [sp, #28]
 8009514:	61d6      	str	r6, [r2, #28]
 8009516:	2000      	movs	r0, #0
 8009518:	f8c2 a010 	str.w	sl, [r2, #16]
 800951c:	6193      	str	r3, [r2, #24]
 800951e:	b009      	add	sp, #36	; 0x24
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	20000000 	.word	0x20000000
 8009528:	000f000a 	.word	0x000f000a
 800952c:	00060003 	.word	0x00060003
 8009530:	00150019 	.word	0x00150019
 8009534:	00190015 	.word	0x00190015
 8009538:	00030006 	.word	0x00030006
 800953c:	000a000f 	.word	0x000a000f

08009540 <D64_GENERIC>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	b089      	sub	sp, #36	; 0x24
 8009546:	6913      	ldr	r3, [r2, #16]
 8009548:	6895      	ldr	r5, [r2, #8]
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	9501      	str	r5, [sp, #4]
 800954e:	6953      	ldr	r3, [r2, #20]
 8009550:	68d5      	ldr	r5, [r2, #12]
 8009552:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009554:	9304      	str	r3, [sp, #16]
 8009556:	9500      	str	r5, [sp, #0]
 8009558:	6993      	ldr	r3, [r2, #24]
 800955a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800955c:	9307      	str	r3, [sp, #28]
 800955e:	9505      	str	r5, [sp, #20]
 8009560:	69d3      	ldr	r3, [r2, #28]
 8009562:	9106      	str	r1, [sp, #24]
 8009564:	2c00      	cmp	r4, #0
 8009566:	f000 80d9 	beq.w	800971c <D64_GENERIC+0x1dc>
 800956a:	6a11      	ldr	r1, [r2, #32]
 800956c:	9102      	str	r1, [sp, #8]
 800956e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800975c <D64_GENERIC+0x21c>
 8009572:	f04f 0c00 	mov.w	ip, #0
 8009576:	4681      	mov	r9, r0
 8009578:	e0c1      	b.n	80096fe <D64_GENERIC+0x1be>
 800957a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800957e:	4274      	negs	r4, r6
 8009580:	eb09 0708 	add.w	r7, r9, r8
 8009584:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8009588:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800958c:	5d38      	ldrb	r0, [r7, r4]
 800958e:	5d29      	ldrb	r1, [r5, r4]
 8009590:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8009594:	f819 a008 	ldrb.w	sl, [r9, r8]
 8009598:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800959c:	f899 7000 	ldrb.w	r7, [r9]
 80095a0:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80095a4:	4425      	add	r5, r4
 80095a6:	0409      	lsls	r1, r1, #16
 80095a8:	0400      	lsls	r0, r0, #16
 80095aa:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80095ae:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80095b2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80095b6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80095ba:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80095be:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80095c2:	4459      	add	r1, fp
 80095c4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80095c8:	4438      	add	r0, r7
 80095ca:	b2c5      	uxtb	r5, r0
 80095cc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80095d0:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80095d4:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80095d8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80095dc:	0e00      	lsrs	r0, r0, #24
 80095de:	eb03 0806 	add.w	r8, r3, r6
 80095e2:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80095e6:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80095ea:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80095ee:	b2c8      	uxtb	r0, r1
 80095f0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80095f4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80095f8:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80095fc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8009600:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009604:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8009608:	0e09      	lsrs	r1, r1, #24
 800960a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800960e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8009612:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8009616:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800961a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800961e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009622:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8009626:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800962a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800962e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009632:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8009636:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800963a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800963e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009642:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009646:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800964a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800964e:	0a8b      	lsrs	r3, r1, #10
 8009650:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009654:	4939      	ldr	r1, [pc, #228]	; (800973c <D64_GENERIC+0x1fc>)
 8009656:	9c00      	ldr	r4, [sp, #0]
 8009658:	fb28 4101 	smlad	r1, r8, r1, r4
 800965c:	4c38      	ldr	r4, [pc, #224]	; (8009740 <D64_GENERIC+0x200>)
 800965e:	fb27 1104 	smlad	r1, r7, r4, r1
 8009662:	4c38      	ldr	r4, [pc, #224]	; (8009744 <D64_GENERIC+0x204>)
 8009664:	fb20 1104 	smlad	r1, r0, r4, r1
 8009668:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800966c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8009670:	4c35      	ldr	r4, [pc, #212]	; (8009748 <D64_GENERIC+0x208>)
 8009672:	9d01      	ldr	r5, [sp, #4]
 8009674:	fb28 5404 	smlad	r4, r8, r4, r5
 8009678:	4d33      	ldr	r5, [pc, #204]	; (8009748 <D64_GENERIC+0x208>)
 800967a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800967e:	4d33      	ldr	r5, [pc, #204]	; (800974c <D64_GENERIC+0x20c>)
 8009680:	fb27 4405 	smlad	r4, r7, r5, r4
 8009684:	fb20 4415 	smladx	r4, r0, r5, r4
 8009688:	2501      	movs	r5, #1
 800968a:	9400      	str	r4, [sp, #0]
 800968c:	fb28 f805 	smuad	r8, r8, r5
 8009690:	4c2f      	ldr	r4, [pc, #188]	; (8009750 <D64_GENERIC+0x210>)
 8009692:	fb27 8704 	smlad	r7, r7, r4, r8
 8009696:	4c2f      	ldr	r4, [pc, #188]	; (8009754 <D64_GENERIC+0x214>)
 8009698:	fb20 7004 	smlad	r0, r0, r4, r7
 800969c:	4c2e      	ldr	r4, [pc, #184]	; (8009758 <D64_GENERIC+0x218>)
 800969e:	fb2a 0004 	smlad	r0, sl, r4, r0
 80096a2:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80096a6:	9902      	ldr	r1, [sp, #8]
 80096a8:	9001      	str	r0, [sp, #4]
 80096aa:	b189      	cbz	r1, 80096d0 <D64_GENERIC+0x190>
 80096ac:	9803      	ldr	r0, [sp, #12]
 80096ae:	9c04      	ldr	r4, [sp, #16]
 80096b0:	9604      	str	r6, [sp, #16]
 80096b2:	4430      	add	r0, r6
 80096b4:	1b00      	subs	r0, r0, r4
 80096b6:	17c5      	asrs	r5, r0, #31
 80096b8:	460f      	mov	r7, r1
 80096ba:	fba0 0101 	umull	r0, r1, r0, r1
 80096be:	fb07 1105 	mla	r1, r7, r5, r1
 80096c2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80096c6:	f141 0100 	adc.w	r1, r1, #0
 80096ca:	0049      	lsls	r1, r1, #1
 80096cc:	9103      	str	r1, [sp, #12]
 80096ce:	460e      	mov	r6, r1
 80096d0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80096d2:	9905      	ldr	r1, [sp, #20]
 80096d4:	9806      	ldr	r0, [sp, #24]
 80096d6:	02b6      	lsls	r6, r6, #10
 80096d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80096dc:	f04f 0800 	mov.w	r8, #0
 80096e0:	fb0c f404 	mul.w	r4, ip, r4
 80096e4:	fbc1 7806 	smlal	r7, r8, r1, r6
 80096e8:	4641      	mov	r1, r8
 80096ea:	1089      	asrs	r1, r1, #2
 80096ec:	f301 010f 	ssat	r1, #16, r1
 80096f0:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80096f4:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80096f6:	f10c 0c01 	add.w	ip, ip, #1
 80096fa:	4561      	cmp	r1, ip
 80096fc:	dd0e      	ble.n	800971c <D64_GENERIC+0x1dc>
 80096fe:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8009700:	2e01      	cmp	r6, #1
 8009702:	f47f af3a 	bne.w	800957a <D64_GENERIC+0x3a>
 8009706:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009708:	06b4      	lsls	r4, r6, #26
 800970a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800970e:	f109 0908 	add.w	r9, r9, #8
 8009712:	f57f af5a 	bpl.w	80095ca <D64_GENERIC+0x8a>
 8009716:	ba40      	rev16	r0, r0
 8009718:	ba49      	rev16	r1, r1
 800971a:	e756      	b.n	80095ca <D64_GENERIC+0x8a>
 800971c:	61d3      	str	r3, [r2, #28]
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	9901      	ldr	r1, [sp, #4]
 8009722:	6113      	str	r3, [r2, #16]
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	6091      	str	r1, [r2, #8]
 8009728:	6153      	str	r3, [r2, #20]
 800972a:	9900      	ldr	r1, [sp, #0]
 800972c:	9b07      	ldr	r3, [sp, #28]
 800972e:	60d1      	str	r1, [r2, #12]
 8009730:	2000      	movs	r0, #0
 8009732:	6193      	str	r3, [r2, #24]
 8009734:	b009      	add	sp, #36	; 0x24
 8009736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973a:	bf00      	nop
 800973c:	001c0015 	.word	0x001c0015
 8009740:	000f000a 	.word	0x000f000a
 8009744:	00060003 	.word	0x00060003
 8009748:	0024002a 	.word	0x0024002a
 800974c:	002e0030 	.word	0x002e0030
 8009750:	00030006 	.word	0x00030006
 8009754:	000a000f 	.word	0x000a000f
 8009758:	0015001c 	.word	0x0015001c
 800975c:	20000000 	.word	0x20000000

08009760 <D80_GENERIC>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	b08b      	sub	sp, #44	; 0x2c
 8009766:	6914      	ldr	r4, [r2, #16]
 8009768:	9404      	str	r4, [sp, #16]
 800976a:	6954      	ldr	r4, [r2, #20]
 800976c:	9405      	str	r4, [sp, #20]
 800976e:	6994      	ldr	r4, [r2, #24]
 8009770:	9409      	str	r4, [sp, #36]	; 0x24
 8009772:	6894      	ldr	r4, [r2, #8]
 8009774:	9402      	str	r4, [sp, #8]
 8009776:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009778:	68d4      	ldr	r4, [r2, #12]
 800977a:	9401      	str	r4, [sp, #4]
 800977c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800977e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8009782:	9406      	str	r4, [sp, #24]
 8009784:	9107      	str	r1, [sp, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 810f 	beq.w	80099aa <D80_GENERIC+0x24a>
 800978c:	6a13      	ldr	r3, [r2, #32]
 800978e:	9308      	str	r3, [sp, #32]
 8009790:	2300      	movs	r3, #0
 8009792:	9200      	str	r2, [sp, #0]
 8009794:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80099fc <D80_GENERIC+0x29c>
 8009798:	f8cd b00c 	str.w	fp, [sp, #12]
 800979c:	461a      	mov	r2, r3
 800979e:	e0ed      	b.n	800997c <D80_GENERIC+0x21c>
 80097a0:	fa5f fc8c 	uxtb.w	ip, ip
 80097a4:	fa0f f48c 	sxth.w	r4, ip
 80097a8:	0066      	lsls	r6, r4, #1
 80097aa:	eb06 0804 	add.w	r8, r6, r4
 80097ae:	f1cc 0500 	rsb	r5, ip, #0
 80097b2:	eb00 0108 	add.w	r1, r0, r8
 80097b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80097ba:	194b      	adds	r3, r1, r5
 80097bc:	5d49      	ldrb	r1, [r1, r5]
 80097be:	f810 a008 	ldrb.w	sl, [r0, r8]
 80097c2:	f813 b004 	ldrb.w	fp, [r3, r4]
 80097c6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80097ca:	f890 8000 	ldrb.w	r8, [r0]
 80097ce:	eb03 0e04 	add.w	lr, r3, r4
 80097d2:	eb0e 0705 	add.w	r7, lr, r5
 80097d6:	0409      	lsls	r1, r1, #16
 80097d8:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80097dc:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80097e0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80097e4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80097e8:	eb0a 0004 	add.w	r0, sl, r4
 80097ec:	041b      	lsls	r3, r3, #16
 80097ee:	f81a a004 	ldrb.w	sl, [sl, r4]
 80097f2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80097f6:	5d44      	ldrb	r4, [r0, r5]
 80097f8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80097fc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009800:	4428      	add	r0, r5
 8009802:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009806:	4441      	add	r1, r8
 8009808:	4430      	add	r0, r6
 800980a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800980e:	441f      	add	r7, r3
 8009810:	b2cd      	uxtb	r5, r1
 8009812:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009816:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800981a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009824:	0e09      	lsrs	r1, r1, #24
 8009826:	4433      	add	r3, r6
 8009828:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800982c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8009830:	b2fd      	uxtb	r5, r7
 8009832:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8009836:	469b      	mov	fp, r3
 8009838:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800983c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009840:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8009844:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009848:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800984c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009850:	0e3b      	lsrs	r3, r7, #24
 8009852:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009856:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800985a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800985e:	fa5f fe84 	uxtb.w	lr, r4
 8009862:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8009866:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800986a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800986e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8009872:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009876:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800987a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800987e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009882:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800988a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800988e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009892:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009896:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800989a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800989e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80098a2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80098a6:	0aa3      	lsrs	r3, r4, #10
 80098a8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80098ac:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80098b0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80098b4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80098be:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 80098c2:	4b42      	ldr	r3, [pc, #264]	; (80099cc <D80_GENERIC+0x26c>)
 80098c4:	9901      	ldr	r1, [sp, #4]
 80098c6:	fb2b 1303 	smlad	r3, fp, r3, r1
 80098ca:	4941      	ldr	r1, [pc, #260]	; (80099d0 <D80_GENERIC+0x270>)
 80098cc:	fb28 3301 	smlad	r3, r8, r1, r3
 80098d0:	4940      	ldr	r1, [pc, #256]	; (80099d4 <D80_GENERIC+0x274>)
 80098d2:	fb2c 3301 	smlad	r3, ip, r1, r3
 80098d6:	4940      	ldr	r1, [pc, #256]	; (80099d8 <D80_GENERIC+0x278>)
 80098d8:	fb27 3301 	smlad	r3, r7, r1, r3
 80098dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80098e0:	fb2e 3301 	smlad	r3, lr, r1, r3
 80098e4:	493d      	ldr	r1, [pc, #244]	; (80099dc <D80_GENERIC+0x27c>)
 80098e6:	9c02      	ldr	r4, [sp, #8]
 80098e8:	fb2b 4401 	smlad	r4, fp, r1, r4
 80098ec:	493c      	ldr	r1, [pc, #240]	; (80099e0 <D80_GENERIC+0x280>)
 80098ee:	fb28 4401 	smlad	r4, r8, r1, r4
 80098f2:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 80098f6:	fb2c 4101 	smlad	r1, ip, r1, r4
 80098fa:	4c3a      	ldr	r4, [pc, #232]	; (80099e4 <D80_GENERIC+0x284>)
 80098fc:	fb27 1104 	smlad	r1, r7, r4, r1
 8009900:	4c39      	ldr	r4, [pc, #228]	; (80099e8 <D80_GENERIC+0x288>)
 8009902:	fb2e 1104 	smlad	r1, lr, r4, r1
 8009906:	9101      	str	r1, [sp, #4]
 8009908:	2101      	movs	r1, #1
 800990a:	fb2b fb01 	smuad	fp, fp, r1
 800990e:	4937      	ldr	r1, [pc, #220]	; (80099ec <D80_GENERIC+0x28c>)
 8009910:	fb28 b801 	smlad	r8, r8, r1, fp
 8009914:	4d36      	ldr	r5, [pc, #216]	; (80099f0 <D80_GENERIC+0x290>)
 8009916:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800991a:	4d36      	ldr	r5, [pc, #216]	; (80099f4 <D80_GENERIC+0x294>)
 800991c:	fb27 c705 	smlad	r7, r7, r5, ip
 8009920:	4d35      	ldr	r5, [pc, #212]	; (80099f8 <D80_GENERIC+0x298>)
 8009922:	fb2e 7105 	smlad	r1, lr, r5, r7
 8009926:	9102      	str	r1, [sp, #8]
 8009928:	9908      	ldr	r1, [sp, #32]
 800992a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800992e:	b181      	cbz	r1, 8009952 <D80_GENERIC+0x1f2>
 8009930:	9c04      	ldr	r4, [sp, #16]
 8009932:	9d05      	ldr	r5, [sp, #20]
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	441c      	add	r4, r3
 8009938:	1b64      	subs	r4, r4, r5
 800993a:	17e7      	asrs	r7, r4, #31
 800993c:	fba4 4501 	umull	r4, r5, r4, r1
 8009940:	fb01 5507 	mla	r5, r1, r7, r5
 8009944:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009948:	f145 0500 	adc.w	r5, r5, #0
 800994c:	0069      	lsls	r1, r5, #1
 800994e:	9104      	str	r1, [sp, #16]
 8009950:	460b      	mov	r3, r1
 8009952:	9e00      	ldr	r6, [sp, #0]
 8009954:	9f06      	ldr	r7, [sp, #24]
 8009956:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8009958:	025b      	lsls	r3, r3, #9
 800995a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800995e:	2500      	movs	r5, #0
 8009960:	fb02 f101 	mul.w	r1, r2, r1
 8009964:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009968:	9c07      	ldr	r4, [sp, #28]
 800996a:	10ab      	asrs	r3, r5, #2
 800996c:	f303 030f 	ssat	r3, #16, r3
 8009970:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009974:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009976:	3201      	adds	r2, #1
 8009978:	4293      	cmp	r3, r2
 800997a:	dd13      	ble.n	80099a4 <D80_GENERIC+0x244>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8009982:	f1bc 0f01 	cmp.w	ip, #1
 8009986:	f47f af0b 	bne.w	80097a0 <D80_GENERIC+0x40>
 800998a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998c:	6884      	ldr	r4, [r0, #8]
 800998e:	069b      	lsls	r3, r3, #26
 8009990:	e890 0082 	ldmia.w	r0, {r1, r7}
 8009994:	f100 000a 	add.w	r0, r0, #10
 8009998:	f57f af3a 	bpl.w	8009810 <D80_GENERIC+0xb0>
 800999c:	ba49      	rev16	r1, r1
 800999e:	ba7f      	rev16	r7, r7
 80099a0:	ba64      	rev16	r4, r4
 80099a2:	e735      	b.n	8009810 <D80_GENERIC+0xb0>
 80099a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80099a8:	4632      	mov	r2, r6
 80099aa:	9b02      	ldr	r3, [sp, #8]
 80099ac:	6093      	str	r3, [r2, #8]
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	60d3      	str	r3, [r2, #12]
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	6113      	str	r3, [r2, #16]
 80099b6:	9b05      	ldr	r3, [sp, #20]
 80099b8:	6153      	str	r3, [r2, #20]
 80099ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099bc:	f8c2 b01c 	str.w	fp, [r2, #28]
 80099c0:	2000      	movs	r0, #0
 80099c2:	6193      	str	r3, [r2, #24]
 80099c4:	b00b      	add	sp, #44	; 0x2c
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ca:	bf00      	nop
 80099cc:	002d0024 	.word	0x002d0024
 80099d0:	001c0015 	.word	0x001c0015
 80099d4:	000f000a 	.word	0x000f000a
 80099d8:	00060003 	.word	0x00060003
 80099dc:	0037003f 	.word	0x0037003f
 80099e0:	00450049 	.word	0x00450049
 80099e4:	00490045 	.word	0x00490045
 80099e8:	003f0037 	.word	0x003f0037
 80099ec:	00030006 	.word	0x00030006
 80099f0:	000a000f 	.word	0x000a000f
 80099f4:	0015001c 	.word	0x0015001c
 80099f8:	0024002d 	.word	0x0024002d
 80099fc:	20000000 	.word	0x20000000

08009a00 <D128_GENERIC>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	b093      	sub	sp, #76	; 0x4c
 8009a06:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009a08:	9005      	str	r0, [sp, #20]
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	9201      	str	r2, [sp, #4]
 8009a0e:	6912      	ldr	r2, [r2, #16]
 8009a10:	920c      	str	r2, [sp, #48]	; 0x30
 8009a12:	4602      	mov	r2, r0
 8009a14:	6940      	ldr	r0, [r0, #20]
 8009a16:	900d      	str	r0, [sp, #52]	; 0x34
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	6992      	ldr	r2, [r2, #24]
 8009a1e:	9211      	str	r2, [sp, #68]	; 0x44
 8009a20:	69c2      	ldr	r2, [r0, #28]
 8009a22:	9202      	str	r2, [sp, #8]
 8009a24:	68e2      	ldr	r2, [r4, #12]
 8009a26:	6880      	ldr	r0, [r0, #8]
 8009a28:	9203      	str	r2, [sp, #12]
 8009a2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009a2c:	9004      	str	r0, [sp, #16]
 8009a2e:	920e      	str	r2, [sp, #56]	; 0x38
 8009a30:	910f      	str	r1, [sp, #60]	; 0x3c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 819b 	beq.w	8009d6e <D128_GENERIC+0x36e>
 8009a38:	6a23      	ldr	r3, [r4, #32]
 8009a3a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8009de8 <D128_GENERIC+0x3e8>
 8009a42:	9306      	str	r3, [sp, #24]
 8009a44:	e17a      	b.n	8009d3c <D128_GENERIC+0x33c>
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	9d05      	ldr	r5, [sp, #20]
 8009a4a:	b214      	sxth	r4, r2
 8009a4c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009a50:	4250      	negs	r0, r2
 8009a52:	eb05 010a 	add.w	r1, r5, sl
 8009a56:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a5a:	eb01 0800 	add.w	r8, r1, r0
 8009a5e:	eb0b 0c04 	add.w	ip, fp, r4
 8009a62:	eb08 070c 	add.w	r7, r8, ip
 8009a66:	183b      	adds	r3, r7, r0
 8009a68:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009a6c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8009a70:	eb0e 0604 	add.w	r6, lr, r4
 8009a74:	9307      	str	r3, [sp, #28]
 8009a76:	1833      	adds	r3, r6, r0
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	462b      	mov	r3, r5
 8009a7c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8009a80:	f8cd a020 	str.w	sl, [sp, #32]
 8009a84:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8009a88:	f813 c002 	ldrb.w	ip, [r3, r2]
 8009a8c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8009a90:	5c3a      	ldrb	r2, [r7, r0]
 8009a92:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8009a96:	781f      	ldrb	r7, [r3, #0]
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	9d05      	ldr	r5, [sp, #20]
 8009a9c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009aa0:	5c09      	ldrb	r1, [r1, r0]
 8009aa2:	9709      	str	r7, [sp, #36]	; 0x24
 8009aa4:	9307      	str	r3, [sp, #28]
 8009aa6:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009aaa:	5c33      	ldrb	r3, [r6, r0]
 8009aac:	0412      	lsls	r2, r2, #16
 8009aae:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8009ab2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009ab6:	9d08      	ldr	r5, [sp, #32]
 8009ab8:	eb06 0a04 	add.w	sl, r6, r4
 8009abc:	0409      	lsls	r1, r1, #16
 8009abe:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8009ac2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009ac6:	5d36      	ldrb	r6, [r6, r4]
 8009ac8:	9c05      	ldr	r4, [sp, #20]
 8009aca:	042d      	lsls	r5, r5, #16
 8009acc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009ad0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009ad4:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8009ad8:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8009adc:	eb0a 0c00 	add.w	ip, sl, r0
 8009ae0:	041b      	lsls	r3, r3, #16
 8009ae2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009ae6:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8009aea:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8009aee:	9d07      	ldr	r5, [sp, #28]
 8009af0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8009af4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8009af8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009afa:	4458      	add	r0, fp
 8009afc:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8009b00:	9005      	str	r0, [sp, #20]
 8009b02:	4439      	add	r1, r7
 8009b04:	442a      	add	r2, r5
 8009b06:	44b2      	add	sl, r6
 8009b08:	1918      	adds	r0, r3, r4
 8009b0a:	b2cb      	uxtb	r3, r1
 8009b0c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009b10:	9e02      	ldr	r6, [sp, #8]
 8009b12:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009b16:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009b1a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8009b1e:	441e      	add	r6, r3
 8009b20:	0e09      	lsrs	r1, r1, #24
 8009b22:	4633      	mov	r3, r6
 8009b24:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009b28:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8009b2c:	b2d4      	uxtb	r4, r2
 8009b2e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009b32:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009b36:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009b3a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009b3e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b42:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009b46:	0e12      	lsrs	r2, r2, #24
 8009b48:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009b4c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8009b50:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009b54:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009b58:	9702      	str	r7, [sp, #8]
 8009b5a:	b2c2      	uxtb	r2, r0
 8009b5c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009b60:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8009b64:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8009b68:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009b6c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009b70:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8009b74:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009b78:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009b7c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8009b80:	0e00      	lsrs	r0, r0, #24
 8009b82:	fa5f f68a 	uxtb.w	r6, sl
 8009b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009b90:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8009b94:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8009b98:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009b9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009ba0:	950a      	str	r5, [sp, #40]	; 0x28
 8009ba2:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009ba6:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009baa:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009bae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009bb2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8009bb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009bba:	920b      	str	r2, [sp, #44]	; 0x2c
 8009bbc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009bc6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009bca:	9307      	str	r3, [sp, #28]
 8009bcc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009bd0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	f8cd c008 	str.w	ip, [sp, #8]
 8009bda:	4694      	mov	ip, r2
 8009bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bde:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8009be2:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8009be6:	9a02      	ldr	r2, [sp, #8]
 8009be8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009bec:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009bf0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bf6:	f8cd a020 	str.w	sl, [sp, #32]
 8009bfa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009bfe:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009c02:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009c06:	9b07      	ldr	r3, [sp, #28]
 8009c08:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009c0c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8009c10:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8009c14:	9a08      	ldr	r2, [sp, #32]
 8009c16:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c1e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009c22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009c26:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8009c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009c2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009c32:	0a96      	lsrs	r6, r2, #10
 8009c34:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009c38:	9602      	str	r6, [sp, #8]
 8009c3a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009c3e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8009c42:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8009c46:	4e53      	ldr	r6, [pc, #332]	; (8009d94 <D128_GENERIC+0x394>)
 8009c48:	9f03      	ldr	r7, [sp, #12]
 8009c4a:	fb2c 7606 	smlad	r6, ip, r6, r7
 8009c4e:	4f52      	ldr	r7, [pc, #328]	; (8009d98 <D128_GENERIC+0x398>)
 8009c50:	fb2a 6607 	smlad	r6, sl, r7, r6
 8009c54:	4f51      	ldr	r7, [pc, #324]	; (8009d9c <D128_GENERIC+0x39c>)
 8009c56:	fb21 6607 	smlad	r6, r1, r7, r6
 8009c5a:	4f51      	ldr	r7, [pc, #324]	; (8009da0 <D128_GENERIC+0x3a0>)
 8009c5c:	fb24 6607 	smlad	r6, r4, r7, r6
 8009c60:	4f50      	ldr	r7, [pc, #320]	; (8009da4 <D128_GENERIC+0x3a4>)
 8009c62:	fb28 6607 	smlad	r6, r8, r7, r6
 8009c66:	4f50      	ldr	r7, [pc, #320]	; (8009da8 <D128_GENERIC+0x3a8>)
 8009c68:	fb20 6607 	smlad	r6, r0, r7, r6
 8009c6c:	4f4f      	ldr	r7, [pc, #316]	; (8009dac <D128_GENERIC+0x3ac>)
 8009c6e:	fb23 6607 	smlad	r6, r3, r7, r6
 8009c72:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8009c76:	fb25 6607 	smlad	r6, r5, r7, r6
 8009c7a:	4f4d      	ldr	r7, [pc, #308]	; (8009db0 <D128_GENERIC+0x3b0>)
 8009c7c:	9a04      	ldr	r2, [sp, #16]
 8009c7e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8009c82:	4a4c      	ldr	r2, [pc, #304]	; (8009db4 <D128_GENERIC+0x3b4>)
 8009c84:	fb2a ee02 	smlad	lr, sl, r2, lr
 8009c88:	4f4b      	ldr	r7, [pc, #300]	; (8009db8 <D128_GENERIC+0x3b8>)
 8009c8a:	fb21 ee07 	smlad	lr, r1, r7, lr
 8009c8e:	4f4b      	ldr	r7, [pc, #300]	; (8009dbc <D128_GENERIC+0x3bc>)
 8009c90:	fb24 ee07 	smlad	lr, r4, r7, lr
 8009c94:	4f4a      	ldr	r7, [pc, #296]	; (8009dc0 <D128_GENERIC+0x3c0>)
 8009c96:	fb28 ee07 	smlad	lr, r8, r7, lr
 8009c9a:	4f4a      	ldr	r7, [pc, #296]	; (8009dc4 <D128_GENERIC+0x3c4>)
 8009c9c:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009ca0:	4f49      	ldr	r7, [pc, #292]	; (8009dc8 <D128_GENERIC+0x3c8>)
 8009ca2:	fb23 e707 	smlad	r7, r3, r7, lr
 8009ca6:	f8df e144 	ldr.w	lr, [pc, #324]	; 8009dec <D128_GENERIC+0x3ec>
 8009caa:	fb25 720e 	smlad	r2, r5, lr, r7
 8009cae:	f04f 0b01 	mov.w	fp, #1
 8009cb2:	9203      	str	r2, [sp, #12]
 8009cb4:	fb2c fb0b 	smuad	fp, ip, fp
 8009cb8:	4f44      	ldr	r7, [pc, #272]	; (8009dcc <D128_GENERIC+0x3cc>)
 8009cba:	fb2a ba07 	smlad	sl, sl, r7, fp
 8009cbe:	4f44      	ldr	r7, [pc, #272]	; (8009dd0 <D128_GENERIC+0x3d0>)
 8009cc0:	fb21 aa07 	smlad	sl, r1, r7, sl
 8009cc4:	4f43      	ldr	r7, [pc, #268]	; (8009dd4 <D128_GENERIC+0x3d4>)
 8009cc6:	fb24 aa07 	smlad	sl, r4, r7, sl
 8009cca:	4f43      	ldr	r7, [pc, #268]	; (8009dd8 <D128_GENERIC+0x3d8>)
 8009ccc:	fb28 a707 	smlad	r7, r8, r7, sl
 8009cd0:	4a42      	ldr	r2, [pc, #264]	; (8009ddc <D128_GENERIC+0x3dc>)
 8009cd2:	fb20 7702 	smlad	r7, r0, r2, r7
 8009cd6:	4a42      	ldr	r2, [pc, #264]	; (8009de0 <D128_GENERIC+0x3e0>)
 8009cd8:	fb23 7702 	smlad	r7, r3, r2, r7
 8009cdc:	4b41      	ldr	r3, [pc, #260]	; (8009de4 <D128_GENERIC+0x3e4>)
 8009cde:	fb25 7303 	smlad	r3, r5, r3, r7
 8009ce2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8009cea:	b185      	cbz	r5, 8009d0e <D128_GENERIC+0x30e>
 8009cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cf0:	960d      	str	r6, [sp, #52]	; 0x34
 8009cf2:	4432      	add	r2, r6
 8009cf4:	1a52      	subs	r2, r2, r1
 8009cf6:	17d1      	asrs	r1, r2, #31
 8009cf8:	fba2 2305 	umull	r2, r3, r2, r5
 8009cfc:	fb05 3301 	mla	r3, r5, r1, r3
 8009d00:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009d04:	f143 0300 	adc.w	r3, r3, #0
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d0c:	461e      	mov	r6, r3
 8009d0e:	9801      	ldr	r0, [sp, #4]
 8009d10:	9c06      	ldr	r4, [sp, #24]
 8009d12:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8009d14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009d16:	01f6      	lsls	r6, r6, #7
 8009d18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8009d22:	fb04 f101 	mul.w	r1, r4, r1
 8009d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d28:	109b      	asrs	r3, r3, #2
 8009d2a:	f303 030f 	ssat	r3, #16, r3
 8009d2e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8009d32:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8009d34:	1c62      	adds	r2, r4, #1
 8009d36:	4293      	cmp	r3, r2
 8009d38:	9206      	str	r2, [sp, #24]
 8009d3a:	dd18      	ble.n	8009d6e <D128_GENERIC+0x36e>
 8009d3c:	9b01      	ldr	r3, [sp, #4]
 8009d3e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009d40:	2a01      	cmp	r2, #1
 8009d42:	f47f ae80 	bne.w	8009a46 <D128_GENERIC+0x46>
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	9d05      	ldr	r5, [sp, #20]
 8009d4a:	069b      	lsls	r3, r3, #26
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	686a      	ldr	r2, [r5, #4]
 8009d50:	68a8      	ldr	r0, [r5, #8]
 8009d52:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009d56:	f105 0410 	add.w	r4, r5, #16
 8009d5a:	d506      	bpl.n	8009d6a <D128_GENERIC+0x36a>
 8009d5c:	ba49      	rev16	r1, r1
 8009d5e:	ba52      	rev16	r2, r2
 8009d60:	ba40      	rev16	r0, r0
 8009d62:	fa9a fa9a 	rev16.w	sl, sl
 8009d66:	9405      	str	r4, [sp, #20]
 8009d68:	e6cf      	b.n	8009b0a <D128_GENERIC+0x10a>
 8009d6a:	9405      	str	r4, [sp, #20]
 8009d6c:	e6cd      	b.n	8009b0a <D128_GENERIC+0x10a>
 8009d6e:	9a01      	ldr	r2, [sp, #4]
 8009d70:	9904      	ldr	r1, [sp, #16]
 8009d72:	6091      	str	r1, [r2, #8]
 8009d74:	9903      	ldr	r1, [sp, #12]
 8009d76:	60d1      	str	r1, [r2, #12]
 8009d78:	9b02      	ldr	r3, [sp, #8]
 8009d7a:	61d3      	str	r3, [r2, #28]
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4613      	mov	r3, r2
 8009d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d82:	610a      	str	r2, [r1, #16]
 8009d84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d86:	6159      	str	r1, [r3, #20]
 8009d88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d8a:	6199      	str	r1, [r3, #24]
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	b013      	add	sp, #76	; 0x4c
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d94:	00780069 	.word	0x00780069
 8009d98:	005b004e 	.word	0x005b004e
 8009d9c:	00420037 	.word	0x00420037
 8009da0:	002d0024 	.word	0x002d0024
 8009da4:	001c0015 	.word	0x001c0015
 8009da8:	000f000a 	.word	0x000f000a
 8009dac:	00060003 	.word	0x00060003
 8009db0:	00880096 	.word	0x00880096
 8009db4:	00a200ac 	.word	0x00a200ac
 8009db8:	00b400ba 	.word	0x00b400ba
 8009dbc:	00be00c0 	.word	0x00be00c0
 8009dc0:	00c000be 	.word	0x00c000be
 8009dc4:	00ba00b4 	.word	0x00ba00b4
 8009dc8:	00ac00a2 	.word	0x00ac00a2
 8009dcc:	00030006 	.word	0x00030006
 8009dd0:	000a000f 	.word	0x000a000f
 8009dd4:	0015001c 	.word	0x0015001c
 8009dd8:	0024002d 	.word	0x0024002d
 8009ddc:	00370042 	.word	0x00370042
 8009de0:	004e005b 	.word	0x004e005b
 8009de4:	00690078 	.word	0x00690078
 8009de8:	20000000 	.word	0x20000000
 8009dec:	00960088 	.word	0x00960088

08009df0 <D16_1CH_HTONS_VOL_HP>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	4691      	mov	r9, r2
 8009df6:	b083      	sub	sp, #12
 8009df8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8009dfa:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8009dfe:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4680      	mov	r8, r0
 8009e06:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8009e0a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009e0e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e12:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8009e16:	9401      	str	r4, [sp, #4]
 8009e18:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8009e1c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8009e20:	2a00      	cmp	r2, #0
 8009e22:	d04e      	beq.n	8009ec2 <D16_1CH_HTONS_VOL_HP+0xd2>
 8009e24:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8009ed0 <D16_1CH_HTONS_VOL_HP+0xe0>
 8009e28:	1e8c      	subs	r4, r1, #2
 8009e2a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8009e2e:	f858 2b02 	ldr.w	r2, [r8], #2
 8009e32:	ba52      	rev16	r2, r2
 8009e34:	b2d6      	uxtb	r6, r2
 8009e36:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009e3a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8009e3e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009e42:	4413      	add	r3, r2
 8009e44:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8009e48:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8009e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009e54:	0a93      	lsrs	r3, r2, #10
 8009e56:	4a1c      	ldr	r2, [pc, #112]	; (8009ec8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009e58:	fb21 5202 	smlad	r2, r1, r2, r5
 8009e5c:	4d1b      	ldr	r5, [pc, #108]	; (8009ecc <D16_1CH_HTONS_VOL_HP+0xdc>)
 8009e5e:	fb21 f505 	smuad	r5, r1, r5
 8009e62:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8009e66:	4410      	add	r0, r2
 8009e68:	1bc0      	subs	r0, r0, r7
 8009e6a:	17c7      	asrs	r7, r0, #31
 8009e6c:	fba0 010e 	umull	r0, r1, r0, lr
 8009e70:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8009e74:	fb0e 1107 	mla	r1, lr, r7, r1
 8009e78:	f141 0100 	adc.w	r1, r1, #0
 8009e7c:	0448      	lsls	r0, r1, #17
 8009e7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e82:	2700      	movs	r7, #0
 8009e84:	fbc0 670a 	smlal	r6, r7, r0, sl
 8009e88:	45d8      	cmp	r8, fp
 8009e8a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8009e8e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8009e92:	4617      	mov	r7, r2
 8009e94:	f301 010f 	ssat	r1, #16, r1
 8009e98:	f824 1f02 	strh.w	r1, [r4, #2]!
 8009e9c:	d1c7      	bne.n	8009e2e <D16_1CH_HTONS_VOL_HP+0x3e>
 8009e9e:	9901      	ldr	r1, [sp, #4]
 8009ea0:	f8c9 301c 	str.w	r3, [r9, #28]
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	f8c9 0010 	str.w	r0, [r9, #16]
 8009eaa:	2000      	movs	r0, #0
 8009eac:	f8c9 5008 	str.w	r5, [r9, #8]
 8009eb0:	f8c9 100c 	str.w	r1, [r9, #12]
 8009eb4:	f8c9 2014 	str.w	r2, [r9, #20]
 8009eb8:	f8c9 3018 	str.w	r3, [r9, #24]
 8009ebc:	b003      	add	sp, #12
 8009ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec2:	463a      	mov	r2, r7
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	e7eb      	b.n	8009ea0 <D16_1CH_HTONS_VOL_HP+0xb0>
 8009ec8:	00030001 	.word	0x00030001
 8009ecc:	00010003 	.word	0x00010003
 8009ed0:	20000000 	.word	0x20000000

08009ed4 <D24_1CH_HTONS_VOL_HP>:
 8009ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed8:	b089      	sub	sp, #36	; 0x24
 8009eda:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009edc:	6996      	ldr	r6, [r2, #24]
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8009ee2:	9207      	str	r2, [sp, #28]
 8009ee4:	6915      	ldr	r5, [r2, #16]
 8009ee6:	6954      	ldr	r4, [r2, #20]
 8009ee8:	9606      	str	r6, [sp, #24]
 8009eea:	6893      	ldr	r3, [r2, #8]
 8009eec:	69d6      	ldr	r6, [r2, #28]
 8009eee:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8009ef2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009ef6:	9a04      	ldr	r2, [sp, #16]
 8009ef8:	9705      	str	r7, [sp, #20]
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	d07e      	beq.n	8009ffc <D24_1CH_HTONS_VOL_HP+0x128>
 8009efe:	f1a1 0b02 	sub.w	fp, r1, #2
 8009f02:	2700      	movs	r7, #0
 8009f04:	46a8      	mov	r8, r5
 8009f06:	f8cd b004 	str.w	fp, [sp, #4]
 8009f0a:	4655      	mov	r5, sl
 8009f0c:	46e3      	mov	fp, ip
 8009f0e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800a008 <D24_1CH_HTONS_VOL_HP+0x134>
 8009f12:	46ba      	mov	sl, r7
 8009f14:	469c      	mov	ip, r3
 8009f16:	e055      	b.n	8009fc4 <D24_1CH_HTONS_VOL_HP+0xf0>
 8009f18:	7802      	ldrb	r2, [r0, #0]
 8009f1a:	78c3      	ldrb	r3, [r0, #3]
 8009f1c:	7841      	ldrb	r1, [r0, #1]
 8009f1e:	0212      	lsls	r2, r2, #8
 8009f20:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8009f24:	440b      	add	r3, r1
 8009f26:	3002      	adds	r0, #2
 8009f28:	b2d9      	uxtb	r1, r3
 8009f2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009f2e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8009f32:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8009f36:	0c1b      	lsrs	r3, r3, #16
 8009f38:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009f3c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8009f40:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8009f44:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8009f48:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009f4c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8009f50:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009f54:	4a2a      	ldr	r2, [pc, #168]	; (800a000 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8009f56:	fb23 b102 	smlad	r1, r3, r2, fp
 8009f5a:	4a2a      	ldr	r2, [pc, #168]	; (800a004 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009f5c:	fb23 cb02 	smlad	fp, r3, r2, ip
 8009f60:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8009f64:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8009f68:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	fb23 f702 	smuad	r7, r3, r2
 8009f72:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8009f76:	eb01 0208 	add.w	r2, r1, r8
 8009f7a:	1b12      	subs	r2, r2, r4
 8009f7c:	17d4      	asrs	r4, r2, #31
 8009f7e:	fba2 2305 	umull	r2, r3, r2, r5
 8009f82:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009f86:	fb05 3304 	mla	r3, r5, r4, r3
 8009f8a:	f143 0300 	adc.w	r3, r3, #0
 8009f8e:	9c05      	ldr	r4, [sp, #20]
 8009f90:	03da      	lsls	r2, r3, #15
 8009f92:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009f96:	f04f 0900 	mov.w	r9, #0
 8009f9a:	fbc4 8902 	smlal	r8, r9, r4, r2
 8009f9e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009fa2:	9a01      	ldr	r2, [sp, #4]
 8009fa4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	109b      	asrs	r3, r3, #2
 8009fac:	f303 030f 	ssat	r3, #16, r3
 8009fb0:	f822 3f02 	strh.w	r3, [r2, #2]!
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	9201      	str	r2, [sp, #4]
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	459a      	cmp	sl, r3
 8009fbe:	44bc      	add	ip, r7
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	d00b      	beq.n	8009fdc <D24_1CH_HTONS_VOL_HP+0x108>
 8009fc4:	f01a 0f01 	tst.w	sl, #1
 8009fc8:	d0a6      	beq.n	8009f18 <D24_1CH_HTONS_VOL_HP+0x44>
 8009fca:	78c2      	ldrb	r2, [r0, #3]
 8009fcc:	7883      	ldrb	r3, [r0, #2]
 8009fce:	f810 1b04 	ldrb.w	r1, [r0], #4
 8009fd2:	0212      	lsls	r2, r2, #8
 8009fd4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8009fd8:	440b      	add	r3, r1
 8009fda:	e7a5      	b.n	8009f28 <D24_1CH_HTONS_VOL_HP+0x54>
 8009fdc:	4663      	mov	r3, ip
 8009fde:	4645      	mov	r5, r8
 8009fe0:	46dc      	mov	ip, fp
 8009fe2:	9807      	ldr	r0, [sp, #28]
 8009fe4:	6141      	str	r1, [r0, #20]
 8009fe6:	9906      	ldr	r1, [sp, #24]
 8009fe8:	6083      	str	r3, [r0, #8]
 8009fea:	f8c0 c00c 	str.w	ip, [r0, #12]
 8009fee:	61c6      	str	r6, [r0, #28]
 8009ff0:	6105      	str	r5, [r0, #16]
 8009ff2:	6181      	str	r1, [r0, #24]
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	b009      	add	sp, #36	; 0x24
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	e7f0      	b.n	8009fe2 <D24_1CH_HTONS_VOL_HP+0x10e>
 800a000:	00030001 	.word	0x00030001
 800a004:	00060007 	.word	0x00060007
 800a008:	20000000 	.word	0x20000000

0800a00c <D32_1CH_HTONS_VOL_HP>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	4692      	mov	sl, r2
 800a012:	b087      	sub	sp, #28
 800a014:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a016:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a01a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	f8da 4010 	ldr.w	r4, [sl, #16]
 800a024:	f8da 8014 	ldr.w	r8, [sl, #20]
 800a028:	f8da 601c 	ldr.w	r6, [sl, #28]
 800a02c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a030:	f8da e00c 	ldr.w	lr, [sl, #12]
 800a034:	9501      	str	r5, [sp, #4]
 800a036:	f8da c020 	ldr.w	ip, [sl, #32]
 800a03a:	2a00      	cmp	r2, #0
 800a03c:	d07b      	beq.n	800a136 <D32_1CH_HTONS_VOL_HP+0x12a>
 800a03e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a042:	4f3e      	ldr	r7, [pc, #248]	; (800a13c <D32_1CH_HTONS_VOL_HP+0x130>)
 800a044:	f8cd c00c 	str.w	ip, [sp, #12]
 800a048:	9202      	str	r2, [sp, #8]
 800a04a:	460d      	mov	r5, r1
 800a04c:	46a1      	mov	r9, r4
 800a04e:	4684      	mov	ip, r0
 800a050:	f8cd a014 	str.w	sl, [sp, #20]
 800a054:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a058:	ba49      	rev16	r1, r1
 800a05a:	b2c8      	uxtb	r0, r1
 800a05c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a060:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800a064:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a068:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a06c:	0e09      	lsrs	r1, r1, #24
 800a06e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a072:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800a076:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a07a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800a07e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800a082:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800a086:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a08a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800a08e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a092:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a096:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800a09a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a09e:	4a28      	ldr	r2, [pc, #160]	; (800a140 <D32_1CH_HTONS_VOL_HP+0x134>)
 800a0a0:	fb20 e202 	smlad	r2, r0, r2, lr
 800a0a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a0a8:	fb2a 2101 	smlad	r1, sl, r1, r2
 800a0ac:	4a25      	ldr	r2, [pc, #148]	; (800a144 <D32_1CH_HTONS_VOL_HP+0x138>)
 800a0ae:	fb20 3302 	smlad	r3, r0, r2, r3
 800a0b2:	4a25      	ldr	r2, [pc, #148]	; (800a148 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800a0b4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	fb20 f003 	smuad	r0, r0, r3
 800a0be:	4b23      	ldr	r3, [pc, #140]	; (800a14c <D32_1CH_HTONS_VOL_HP+0x140>)
 800a0c0:	fb2a 0303 	smlad	r3, sl, r3, r0
 800a0c4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800a0c8:	9c03      	ldr	r4, [sp, #12]
 800a0ca:	eb02 0009 	add.w	r0, r2, r9
 800a0ce:	eba0 0008 	sub.w	r0, r0, r8
 800a0d2:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800a0d6:	fba0 0104 	umull	r0, r1, r0, r4
 800a0da:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a0de:	fb04 110b 	mla	r1, r4, fp, r1
 800a0e2:	f141 0100 	adc.w	r1, r1, #0
 800a0e6:	9c01      	ldr	r4, [sp, #4]
 800a0e8:	0388      	lsls	r0, r1, #14
 800a0ea:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a0ee:	f04f 0900 	mov.w	r9, #0
 800a0f2:	fbc0 8904 	smlal	r8, r9, r0, r4
 800a0f6:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800a0fa:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800a0fe:	f300 000f 	ssat	r0, #16, r0
 800a102:	9902      	ldr	r1, [sp, #8]
 800a104:	f825 0b02 	strh.w	r0, [r5], #2
 800a108:	428d      	cmp	r5, r1
 800a10a:	4690      	mov	r8, r2
 800a10c:	d1a2      	bne.n	800a054 <D32_1CH_HTONS_VOL_HP+0x48>
 800a10e:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a112:	464c      	mov	r4, r9
 800a114:	f8ca 3008 	str.w	r3, [sl, #8]
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	f8ca e00c 	str.w	lr, [sl, #12]
 800a11e:	2000      	movs	r0, #0
 800a120:	f8ca 601c 	str.w	r6, [sl, #28]
 800a124:	f8ca 4010 	str.w	r4, [sl, #16]
 800a128:	f8ca 2014 	str.w	r2, [sl, #20]
 800a12c:	f8ca 3018 	str.w	r3, [sl, #24]
 800a130:	b007      	add	sp, #28
 800a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a136:	4642      	mov	r2, r8
 800a138:	e7ec      	b.n	800a114 <D32_1CH_HTONS_VOL_HP+0x108>
 800a13a:	bf00      	nop
 800a13c:	20000000 	.word	0x20000000
 800a140:	00060003 	.word	0x00060003
 800a144:	000a000c 	.word	0x000a000c
 800a148:	000c000a 	.word	0x000c000a
 800a14c:	00030006 	.word	0x00030006

0800a150 <D48_1CH_HTONS_VOL_HP>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4613      	mov	r3, r2
 800a156:	461c      	mov	r4, r3
 800a158:	b087      	sub	sp, #28
 800a15a:	4625      	mov	r5, r4
 800a15c:	4626      	mov	r6, r4
 800a15e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800a160:	9205      	str	r2, [sp, #20]
 800a162:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a164:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800a168:	9501      	str	r5, [sp, #4]
 800a16a:	4680      	mov	r8, r0
 800a16c:	6a35      	ldr	r5, [r6, #32]
 800a16e:	6918      	ldr	r0, [r3, #16]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800a178:	68a3      	ldr	r3, [r4, #8]
 800a17a:	9502      	str	r5, [sp, #8]
 800a17c:	68e4      	ldr	r4, [r4, #12]
 800a17e:	2a00      	cmp	r2, #0
 800a180:	f000 808c 	beq.w	800a29c <D48_1CH_HTONS_VOL_HP+0x14c>
 800a184:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a188:	4d45      	ldr	r5, [pc, #276]	; (800a2a0 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a18a:	9203      	str	r2, [sp, #12]
 800a18c:	468c      	mov	ip, r1
 800a18e:	e898 0044 	ldmia.w	r8, {r2, r6}
 800a192:	f108 0806 	add.w	r8, r8, #6
 800a196:	ba52      	rev16	r2, r2
 800a198:	ba76      	rev16	r6, r6
 800a19a:	b2d7      	uxtb	r7, r2
 800a19c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a1a0:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800a1a4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a1a8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800a1ac:	0e12      	lsrs	r2, r2, #24
 800a1ae:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800a1b2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800a1b6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a1ba:	fa5f fb86 	uxtb.w	fp, r6
 800a1be:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a1c2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800a1c6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a1ca:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800a1ce:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800a1d2:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a1d6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a1da:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a1de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a1e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a1e6:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800a1ea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a1ee:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a1f2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a1f6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a1fa:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a1fe:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800a202:	4a28      	ldr	r2, [pc, #160]	; (800a2a4 <D48_1CH_HTONS_VOL_HP+0x154>)
 800a204:	fb2a 4202 	smlad	r2, sl, r2, r4
 800a208:	4927      	ldr	r1, [pc, #156]	; (800a2a8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a20a:	fb27 2201 	smlad	r2, r7, r1, r2
 800a20e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a212:	fb26 2201 	smlad	r2, r6, r1, r2
 800a216:	4925      	ldr	r1, [pc, #148]	; (800a2ac <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a218:	fb2a 3401 	smlad	r4, sl, r1, r3
 800a21c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a220:	fb27 4403 	smlad	r4, r7, r3, r4
 800a224:	4b22      	ldr	r3, [pc, #136]	; (800a2b0 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a226:	fb26 4403 	smlad	r4, r6, r3, r4
 800a22a:	2101      	movs	r1, #1
 800a22c:	fb2a fa01 	smuad	sl, sl, r1
 800a230:	4b20      	ldr	r3, [pc, #128]	; (800a2b4 <D48_1CH_HTONS_VOL_HP+0x164>)
 800a232:	fb27 a703 	smlad	r7, r7, r3, sl
 800a236:	4b20      	ldr	r3, [pc, #128]	; (800a2b8 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a238:	fb26 7303 	smlad	r3, r6, r3, r7
 800a23c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800a240:	9e02      	ldr	r6, [sp, #8]
 800a242:	9f01      	ldr	r7, [sp, #4]
 800a244:	4410      	add	r0, r2
 800a246:	eba0 0009 	sub.w	r0, r0, r9
 800a24a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800a24e:	fba0 0106 	umull	r0, r1, r0, r6
 800a252:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a256:	fb06 110a 	mla	r1, r6, sl, r1
 800a25a:	f141 0100 	adc.w	r1, r1, #0
 800a25e:	0308      	lsls	r0, r1, #12
 800a260:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a264:	f04f 0a00 	mov.w	sl, #0
 800a268:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800a26c:	4657      	mov	r7, sl
 800a26e:	10b8      	asrs	r0, r7, #2
 800a270:	f300 000f 	ssat	r0, #16, r0
 800a274:	f82c 0b02 	strh.w	r0, [ip], #2
 800a278:	0048      	lsls	r0, r1, #1
 800a27a:	9903      	ldr	r1, [sp, #12]
 800a27c:	458c      	cmp	ip, r1
 800a27e:	4691      	mov	r9, r2
 800a280:	d185      	bne.n	800a18e <D48_1CH_HTONS_VOL_HP+0x3e>
 800a282:	9d05      	ldr	r5, [sp, #20]
 800a284:	616a      	str	r2, [r5, #20]
 800a286:	9a04      	ldr	r2, [sp, #16]
 800a288:	6128      	str	r0, [r5, #16]
 800a28a:	2000      	movs	r0, #0
 800a28c:	60ab      	str	r3, [r5, #8]
 800a28e:	60ec      	str	r4, [r5, #12]
 800a290:	f8c5 e01c 	str.w	lr, [r5, #28]
 800a294:	61aa      	str	r2, [r5, #24]
 800a296:	b007      	add	sp, #28
 800a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29c:	464a      	mov	r2, r9
 800a29e:	e7f0      	b.n	800a282 <D48_1CH_HTONS_VOL_HP+0x132>
 800a2a0:	20000000 	.word	0x20000000
 800a2a4:	000f000a 	.word	0x000f000a
 800a2a8:	00060003 	.word	0x00060003
 800a2ac:	00150019 	.word	0x00150019
 800a2b0:	00190015 	.word	0x00190015
 800a2b4:	00030006 	.word	0x00030006
 800a2b8:	000a000f 	.word	0x000a000f

0800a2bc <D64_1CH_HTONS_VOL_HP>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	b089      	sub	sp, #36	; 0x24
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	9207      	str	r2, [sp, #28]
 800a2c6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a2c8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800a2cc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800a2d0:	6992      	ldr	r2, [r2, #24]
 800a2d2:	9206      	str	r2, [sp, #24]
 800a2d4:	68e2      	ldr	r2, [r4, #12]
 800a2d6:	9201      	str	r2, [sp, #4]
 800a2d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a2da:	9203      	str	r2, [sp, #12]
 800a2dc:	6a22      	ldr	r2, [r4, #32]
 800a2de:	69e5      	ldr	r5, [r4, #28]
 800a2e0:	68a6      	ldr	r6, [r4, #8]
 800a2e2:	9204      	str	r2, [sp, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 80b0 	beq.w	800a44a <D64_1CH_HTONS_VOL_HP+0x18e>
 800a2ea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a2ee:	4f58      	ldr	r7, [pc, #352]	; (800a450 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a2f0:	9305      	str	r3, [sp, #20]
 800a2f2:	9102      	str	r1, [sp, #8]
 800a2f4:	f850 2b08 	ldr.w	r2, [r0], #8
 800a2f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a2fc:	ba52      	rev16	r2, r2
 800a2fe:	fa93 f993 	rev16.w	r9, r3
 800a302:	b2d4      	uxtb	r4, r2
 800a304:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a308:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800a30c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a310:	9901      	ldr	r1, [sp, #4]
 800a312:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a316:	0e12      	lsrs	r2, r2, #24
 800a318:	44ab      	add	fp, r5
 800a31a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a31e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800a322:	fa5f f289 	uxtb.w	r2, r9
 800a326:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800a32a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a32e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800a332:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a336:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a33a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800a33e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800a342:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a346:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a34a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a34e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800a352:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800a356:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a35a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a35e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a362:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a366:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a36a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a36e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a372:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800a376:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a37a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800a37e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a382:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a386:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800a38a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a38e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800a392:	4b30      	ldr	r3, [pc, #192]	; (800a454 <D64_1CH_HTONS_VOL_HP+0x198>)
 800a394:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a398:	492f      	ldr	r1, [pc, #188]	; (800a458 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a39a:	fb24 3301 	smlad	r3, r4, r1, r3
 800a39e:	492f      	ldr	r1, [pc, #188]	; (800a45c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a3a0:	fb22 3301 	smlad	r3, r2, r1, r3
 800a3a4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a3a8:	fb2e 390a 	smlad	r9, lr, sl, r3
 800a3ac:	4b2c      	ldr	r3, [pc, #176]	; (800a460 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a3ae:	fb2b 6603 	smlad	r6, fp, r3, r6
 800a3b2:	fb2e 6613 	smladx	r6, lr, r3, r6
 800a3b6:	4b2b      	ldr	r3, [pc, #172]	; (800a464 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a3b8:	fb24 6603 	smlad	r6, r4, r3, r6
 800a3bc:	fb22 6313 	smladx	r3, r2, r3, r6
 800a3c0:	f04f 0a01 	mov.w	sl, #1
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	fb2b fb0a 	smuad	fp, fp, sl
 800a3ca:	4b27      	ldr	r3, [pc, #156]	; (800a468 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800a3cc:	fb24 ba03 	smlad	sl, r4, r3, fp
 800a3d0:	4b26      	ldr	r3, [pc, #152]	; (800a46c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800a3d2:	fb22 a203 	smlad	r2, r2, r3, sl
 800a3d6:	4b26      	ldr	r3, [pc, #152]	; (800a470 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800a3d8:	fb2e 2603 	smlad	r6, lr, r3, r2
 800a3dc:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800a3e0:	eb0a 020c 	add.w	r2, sl, ip
 800a3e4:	9c04      	ldr	r4, [sp, #16]
 800a3e6:	9903      	ldr	r1, [sp, #12]
 800a3e8:	eba2 0208 	sub.w	r2, r2, r8
 800a3ec:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a3f0:	fba2 2304 	umull	r2, r3, r2, r4
 800a3f4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a3f8:	fb04 3309 	mla	r3, r4, r9, r3
 800a3fc:	f143 0300 	adc.w	r3, r3, #0
 800a400:	02da      	lsls	r2, r3, #11
 800a402:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a406:	f04f 0900 	mov.w	r9, #0
 800a40a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800a40e:	9902      	ldr	r1, [sp, #8]
 800a410:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800a414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a418:	f302 020f 	ssat	r2, #16, r2
 800a41c:	9b05      	ldr	r3, [sp, #20]
 800a41e:	f821 2b02 	strh.w	r2, [r1], #2
 800a422:	4299      	cmp	r1, r3
 800a424:	9102      	str	r1, [sp, #8]
 800a426:	46d0      	mov	r8, sl
 800a428:	f47f af64 	bne.w	800a2f4 <D64_1CH_HTONS_VOL_HP+0x38>
 800a42c:	9a07      	ldr	r2, [sp, #28]
 800a42e:	9901      	ldr	r1, [sp, #4]
 800a430:	60d1      	str	r1, [r2, #12]
 800a432:	9906      	ldr	r1, [sp, #24]
 800a434:	6096      	str	r6, [r2, #8]
 800a436:	2000      	movs	r0, #0
 800a438:	61d5      	str	r5, [r2, #28]
 800a43a:	f8c2 c010 	str.w	ip, [r2, #16]
 800a43e:	f8c2 a014 	str.w	sl, [r2, #20]
 800a442:	6191      	str	r1, [r2, #24]
 800a444:	b009      	add	sp, #36	; 0x24
 800a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44a:	46c2      	mov	sl, r8
 800a44c:	4622      	mov	r2, r4
 800a44e:	e7ee      	b.n	800a42e <D64_1CH_HTONS_VOL_HP+0x172>
 800a450:	20000000 	.word	0x20000000
 800a454:	001c0015 	.word	0x001c0015
 800a458:	000f000a 	.word	0x000f000a
 800a45c:	00060003 	.word	0x00060003
 800a460:	0024002a 	.word	0x0024002a
 800a464:	002e0030 	.word	0x002e0030
 800a468:	00030006 	.word	0x00030006
 800a46c:	000a000f 	.word	0x000a000f
 800a470:	0015001c 	.word	0x0015001c

0800a474 <D80_1CH_HTONS_VOL_HP>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	4613      	mov	r3, r2
 800a47a:	b089      	sub	sp, #36	; 0x24
 800a47c:	4686      	mov	lr, r0
 800a47e:	6918      	ldr	r0, [r3, #16]
 800a480:	9000      	str	r0, [sp, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	461c      	mov	r4, r3
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	9302      	str	r3, [sp, #8]
 800a48a:	6983      	ldr	r3, [r0, #24]
 800a48c:	9306      	str	r3, [sp, #24]
 800a48e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a492:	69c3      	ldr	r3, [r0, #28]
 800a494:	68c0      	ldr	r0, [r0, #12]
 800a496:	9207      	str	r2, [sp, #28]
 800a498:	9001      	str	r0, [sp, #4]
 800a49a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a49c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a49e:	9003      	str	r0, [sp, #12]
 800a4a0:	6a20      	ldr	r0, [r4, #32]
 800a4a2:	9004      	str	r0, [sp, #16]
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	f000 80d2 	beq.w	800a64e <D80_1CH_HTONS_VOL_HP+0x1da>
 800a4aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a4ae:	4869      	ldr	r0, [pc, #420]	; (800a654 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a4b0:	9205      	str	r2, [sp, #20]
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	f8de 5000 	ldr.w	r5, [lr]
 800a4b8:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a4bc:	f8de 3008 	ldr.w	r3, [lr, #8]
 800a4c0:	f10e 0e0a 	add.w	lr, lr, #10
 800a4c4:	ba6d      	rev16	r5, r5
 800a4c6:	ba52      	rev16	r2, r2
 800a4c8:	fa93 fb93 	rev16.w	fp, r3
 800a4cc:	b2ee      	uxtb	r6, r5
 800a4ce:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a4d2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800a4d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a4da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800a4de:	eb04 0a07 	add.w	sl, r4, r7
 800a4e2:	0e2d      	lsrs	r5, r5, #24
 800a4e4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800a4e8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800a4ec:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800a4f0:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800a4f4:	b2d5      	uxtb	r5, r2
 800a4f6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a4fa:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800a4fe:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a502:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a506:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a50a:	0e12      	lsrs	r2, r2, #24
 800a50c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800a510:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800a514:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a518:	fa5f f48b 	uxtb.w	r4, fp
 800a51c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a520:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800a524:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a528:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800a52c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800a530:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a534:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a538:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800a53c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a540:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a544:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a548:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a54c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a550:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a554:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800a558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a55c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800a560:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a564:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a568:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a56c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a570:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800a574:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a578:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800a57c:	4d36      	ldr	r5, [pc, #216]	; (800a658 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a57e:	9f01      	ldr	r7, [sp, #4]
 800a580:	fb23 7505 	smlad	r5, r3, r5, r7
 800a584:	4f35      	ldr	r7, [pc, #212]	; (800a65c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a586:	fb29 5507 	smlad	r5, r9, r7, r5
 800a58a:	4f35      	ldr	r7, [pc, #212]	; (800a660 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a58c:	fb28 5507 	smlad	r5, r8, r7, r5
 800a590:	4f34      	ldr	r7, [pc, #208]	; (800a664 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a592:	fb22 5507 	smlad	r5, r2, r7, r5
 800a596:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a59a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800a59e:	4d32      	ldr	r5, [pc, #200]	; (800a668 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a5a0:	fb23 cc05 	smlad	ip, r3, r5, ip
 800a5a4:	4d31      	ldr	r5, [pc, #196]	; (800a66c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a5a6:	fb29 cc05 	smlad	ip, r9, r5, ip
 800a5aa:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800a5ae:	fb28 c505 	smlad	r5, r8, r5, ip
 800a5b2:	4f2f      	ldr	r7, [pc, #188]	; (800a670 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800a5b4:	fb22 5507 	smlad	r5, r2, r7, r5
 800a5b8:	4f2e      	ldr	r7, [pc, #184]	; (800a674 <D80_1CH_HTONS_VOL_HP+0x200>)
 800a5ba:	fb26 5507 	smlad	r5, r6, r7, r5
 800a5be:	f04f 0a01 	mov.w	sl, #1
 800a5c2:	9501      	str	r5, [sp, #4]
 800a5c4:	fb23 fa0a 	smuad	sl, r3, sl
 800a5c8:	4b2b      	ldr	r3, [pc, #172]	; (800a678 <D80_1CH_HTONS_VOL_HP+0x204>)
 800a5ca:	fb29 a903 	smlad	r9, r9, r3, sl
 800a5ce:	4d2b      	ldr	r5, [pc, #172]	; (800a67c <D80_1CH_HTONS_VOL_HP+0x208>)
 800a5d0:	fb28 9805 	smlad	r8, r8, r5, r9
 800a5d4:	4d2a      	ldr	r5, [pc, #168]	; (800a680 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800a5d6:	fb22 8205 	smlad	r2, r2, r5, r8
 800a5da:	4b2a      	ldr	r3, [pc, #168]	; (800a684 <D80_1CH_HTONS_VOL_HP+0x210>)
 800a5dc:	fb26 2c03 	smlad	ip, r6, r3, r2
 800a5e0:	9b00      	ldr	r3, [sp, #0]
 800a5e2:	9d04      	ldr	r5, [sp, #16]
 800a5e4:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800a5e8:	4453      	add	r3, sl
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	9b02      	ldr	r3, [sp, #8]
 800a5ee:	f8cd a008 	str.w	sl, [sp, #8]
 800a5f2:	1ad2      	subs	r2, r2, r3
 800a5f4:	17d7      	asrs	r7, r2, #31
 800a5f6:	fba2 2305 	umull	r2, r3, r2, r5
 800a5fa:	fb05 3307 	mla	r3, r5, r7, r3
 800a5fe:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a602:	f143 0300 	adc.w	r3, r3, #0
 800a606:	9d03      	ldr	r5, [sp, #12]
 800a608:	029a      	lsls	r2, r3, #10
 800a60a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a60e:	2700      	movs	r7, #0
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	fbc5 6702 	smlal	r6, r7, r5, r2
 800a616:	10ba      	asrs	r2, r7, #2
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	f302 020f 	ssat	r2, #16, r2
 800a61e:	9b05      	ldr	r3, [sp, #20]
 800a620:	f821 2b02 	strh.w	r2, [r1], #2
 800a624:	4299      	cmp	r1, r3
 800a626:	f47f af45 	bne.w	800a4b4 <D80_1CH_HTONS_VOL_HP+0x40>
 800a62a:	4623      	mov	r3, r4
 800a62c:	9907      	ldr	r1, [sp, #28]
 800a62e:	9801      	ldr	r0, [sp, #4]
 800a630:	60c8      	str	r0, [r1, #12]
 800a632:	9a00      	ldr	r2, [sp, #0]
 800a634:	f8c1 c008 	str.w	ip, [r1, #8]
 800a638:	4608      	mov	r0, r1
 800a63a:	61cb      	str	r3, [r1, #28]
 800a63c:	610a      	str	r2, [r1, #16]
 800a63e:	f8c1 a014 	str.w	sl, [r1, #20]
 800a642:	9906      	ldr	r1, [sp, #24]
 800a644:	6181      	str	r1, [r0, #24]
 800a646:	2000      	movs	r0, #0
 800a648:	b009      	add	sp, #36	; 0x24
 800a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a652:	e7eb      	b.n	800a62c <D80_1CH_HTONS_VOL_HP+0x1b8>
 800a654:	20000000 	.word	0x20000000
 800a658:	002d0024 	.word	0x002d0024
 800a65c:	001c0015 	.word	0x001c0015
 800a660:	000f000a 	.word	0x000f000a
 800a664:	00060003 	.word	0x00060003
 800a668:	0037003f 	.word	0x0037003f
 800a66c:	00450049 	.word	0x00450049
 800a670:	00490045 	.word	0x00490045
 800a674:	003f0037 	.word	0x003f0037
 800a678:	00030006 	.word	0x00030006
 800a67c:	000a000f 	.word	0x000a000f
 800a680:	0015001c 	.word	0x0015001c
 800a684:	0024002d 	.word	0x0024002d

0800a688 <D128_1CH_HTONS_VOL_HP>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	b093      	sub	sp, #76	; 0x4c
 800a68e:	4614      	mov	r4, r2
 800a690:	9211      	str	r2, [sp, #68]	; 0x44
 800a692:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a694:	6912      	ldr	r2, [r2, #16]
 800a696:	9203      	str	r2, [sp, #12]
 800a698:	4622      	mov	r2, r4
 800a69a:	4615      	mov	r5, r2
 800a69c:	6964      	ldr	r4, [r4, #20]
 800a69e:	9406      	str	r4, [sp, #24]
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	6992      	ldr	r2, [r2, #24]
 800a6a4:	9210      	str	r2, [sp, #64]	; 0x40
 800a6a6:	68ea      	ldr	r2, [r5, #12]
 800a6a8:	9204      	str	r2, [sp, #16]
 800a6aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a6ac:	69e6      	ldr	r6, [r4, #28]
 800a6ae:	920d      	str	r2, [sp, #52]	; 0x34
 800a6b0:	68a4      	ldr	r4, [r4, #8]
 800a6b2:	6a2a      	ldr	r2, [r5, #32]
 800a6b4:	9405      	str	r4, [sp, #20]
 800a6b6:	920e      	str	r2, [sp, #56]	; 0x38
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 8145 	beq.w	800a948 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800a6be:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a6c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6c4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800a9a4 <D128_1CH_HTONS_VOL_HP+0x31c>
 800a6c8:	9107      	str	r1, [sp, #28]
 800a6ca:	f100 0310 	add.w	r3, r0, #16
 800a6ce:	4699      	mov	r9, r3
 800a6d0:	f1a9 0110 	sub.w	r1, r9, #16
 800a6d4:	c90e      	ldmia	r1, {r1, r2, r3}
 800a6d6:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800a6da:	ba49      	rev16	r1, r1
 800a6dc:	ba52      	rev16	r2, r2
 800a6de:	ba5b      	rev16	r3, r3
 800a6e0:	fa90 fa90 	rev16.w	sl, r0
 800a6e4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a6e8:	b2cc      	uxtb	r4, r1
 800a6ea:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800a6ee:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800a6f2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a6f6:	0e09      	lsrs	r1, r1, #24
 800a6f8:	4426      	add	r6, r4
 800a6fa:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800a6fe:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800a702:	b2d0      	uxtb	r0, r2
 800a704:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a708:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800a70c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a710:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800a714:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a718:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800a71c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a720:	0e12      	lsrs	r2, r2, #24
 800a722:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800a726:	9701      	str	r7, [sp, #4]
 800a728:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800a72c:	4627      	mov	r7, r4
 800a72e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800a732:	9702      	str	r7, [sp, #8]
 800a734:	b2da      	uxtb	r2, r3
 800a736:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a73a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800a73e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800a742:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a746:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800a74a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a74e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a752:	0e1b      	lsrs	r3, r3, #24
 800a754:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800a758:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a75c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800a760:	fa5f f38a 	uxtb.w	r3, sl
 800a764:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a768:	960a      	str	r6, [sp, #40]	; 0x28
 800a76a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800a76e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800a772:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a776:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800a77a:	950b      	str	r5, [sp, #44]	; 0x2c
 800a77c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800a780:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800a784:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800a788:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800a78c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800a790:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a794:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800a798:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800a79c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800a7a0:	9308      	str	r3, [sp, #32]
 800a7a2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a7ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a7b0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800a7b4:	9b02      	ldr	r3, [sp, #8]
 800a7b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7ba:	9302      	str	r3, [sp, #8]
 800a7bc:	9b08      	ldr	r3, [sp, #32]
 800a7be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c2:	9308      	str	r3, [sp, #32]
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7ca:	950c      	str	r5, [sp, #48]	; 0x30
 800a7cc:	461d      	mov	r5, r3
 800a7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a7d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a7d8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800a7dc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	9202      	str	r2, [sp, #8]
 800a7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a7ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a7f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800a7f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a7fa:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800a7fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a802:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800a806:	9b08      	ldr	r3, [sp, #32]
 800a808:	9f01      	ldr	r7, [sp, #4]
 800a80a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a80e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a812:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a816:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a81a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a81e:	46be      	mov	lr, r7
 800a820:	0a96      	lsrs	r6, r2, #10
 800a822:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800a826:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a82a:	4f49      	ldr	r7, [pc, #292]	; (800a950 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a82c:	9a04      	ldr	r2, [sp, #16]
 800a82e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800a832:	4a48      	ldr	r2, [pc, #288]	; (800a954 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800a834:	fb2a ee02 	smlad	lr, sl, r2, lr
 800a838:	4a47      	ldr	r2, [pc, #284]	; (800a958 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800a83a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800a83e:	4a47      	ldr	r2, [pc, #284]	; (800a95c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800a840:	fb24 ee02 	smlad	lr, r4, r2, lr
 800a844:	4a46      	ldr	r2, [pc, #280]	; (800a960 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800a846:	9f02      	ldr	r7, [sp, #8]
 800a848:	fb27 ee02 	smlad	lr, r7, r2, lr
 800a84c:	4a45      	ldr	r2, [pc, #276]	; (800a964 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800a84e:	fb20 ee02 	smlad	lr, r0, r2, lr
 800a852:	4a45      	ldr	r2, [pc, #276]	; (800a968 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800a854:	fb23 e702 	smlad	r7, r3, r2, lr
 800a858:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800a85c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800a860:	9f01      	ldr	r7, [sp, #4]
 800a862:	4a42      	ldr	r2, [pc, #264]	; (800a96c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800a864:	46bc      	mov	ip, r7
 800a866:	9f05      	ldr	r7, [sp, #20]
 800a868:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800a86c:	4a40      	ldr	r2, [pc, #256]	; (800a970 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800a86e:	fb2a cc02 	smlad	ip, sl, r2, ip
 800a872:	4f40      	ldr	r7, [pc, #256]	; (800a974 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800a874:	fb21 cc07 	smlad	ip, r1, r7, ip
 800a878:	4f3f      	ldr	r7, [pc, #252]	; (800a978 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800a87a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800a87e:	4f3f      	ldr	r7, [pc, #252]	; (800a97c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800a880:	9a02      	ldr	r2, [sp, #8]
 800a882:	fb22 cc07 	smlad	ip, r2, r7, ip
 800a886:	4f3e      	ldr	r7, [pc, #248]	; (800a980 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800a888:	fb20 cc07 	smlad	ip, r0, r7, ip
 800a88c:	4f3d      	ldr	r7, [pc, #244]	; (800a984 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800a88e:	fb23 c707 	smlad	r7, r3, r7, ip
 800a892:	f8df c114 	ldr.w	ip, [pc, #276]	; 800a9a8 <D128_1CH_HTONS_VOL_HP+0x320>
 800a896:	fb25 720c 	smlad	r2, r5, ip, r7
 800a89a:	f04f 0b01 	mov.w	fp, #1
 800a89e:	9204      	str	r2, [sp, #16]
 800a8a0:	9f01      	ldr	r7, [sp, #4]
 800a8a2:	fb27 fb0b 	smuad	fp, r7, fp
 800a8a6:	4f38      	ldr	r7, [pc, #224]	; (800a988 <D128_1CH_HTONS_VOL_HP+0x300>)
 800a8a8:	fb2a ba07 	smlad	sl, sl, r7, fp
 800a8ac:	4f37      	ldr	r7, [pc, #220]	; (800a98c <D128_1CH_HTONS_VOL_HP+0x304>)
 800a8ae:	fb21 aa07 	smlad	sl, r1, r7, sl
 800a8b2:	4f37      	ldr	r7, [pc, #220]	; (800a990 <D128_1CH_HTONS_VOL_HP+0x308>)
 800a8b4:	fb24 aa07 	smlad	sl, r4, r7, sl
 800a8b8:	4f36      	ldr	r7, [pc, #216]	; (800a994 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800a8ba:	9a02      	ldr	r2, [sp, #8]
 800a8bc:	fb22 a707 	smlad	r7, r2, r7, sl
 800a8c0:	4a35      	ldr	r2, [pc, #212]	; (800a998 <D128_1CH_HTONS_VOL_HP+0x310>)
 800a8c2:	fb20 7702 	smlad	r7, r0, r2, r7
 800a8c6:	4a35      	ldr	r2, [pc, #212]	; (800a99c <D128_1CH_HTONS_VOL_HP+0x314>)
 800a8c8:	fb23 7702 	smlad	r7, r3, r2, r7
 800a8cc:	4b34      	ldr	r3, [pc, #208]	; (800a9a0 <D128_1CH_HTONS_VOL_HP+0x318>)
 800a8ce:	fb25 7303 	smlad	r3, r5, r3, r7
 800a8d2:	9305      	str	r3, [sp, #20]
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a8d8:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800a8dc:	4473      	add	r3, lr
 800a8de:	461a      	mov	r2, r3
 800a8e0:	9b06      	ldr	r3, [sp, #24]
 800a8e2:	f8cd e018 	str.w	lr, [sp, #24]
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	17d1      	asrs	r1, r2, #31
 800a8ea:	fba2 2304 	umull	r2, r3, r2, r4
 800a8ee:	fb04 3301 	mla	r3, r4, r1, r3
 800a8f2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a8f6:	f143 0300 	adc.w	r3, r3, #0
 800a8fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a8fc:	021a      	lsls	r2, r3, #8
 800a8fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a902:	2100      	movs	r1, #0
 800a904:	fbc4 0102 	smlal	r0, r1, r4, r2
 800a908:	108a      	asrs	r2, r1, #2
 800a90a:	9907      	ldr	r1, [sp, #28]
 800a90c:	f302 020f 	ssat	r2, #16, r2
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	f821 2b02 	strh.w	r2, [r1], #2
 800a916:	9303      	str	r3, [sp, #12]
 800a918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a91a:	9107      	str	r1, [sp, #28]
 800a91c:	4299      	cmp	r1, r3
 800a91e:	f109 0910 	add.w	r9, r9, #16
 800a922:	f47f aed5 	bne.w	800a6d0 <D128_1CH_HTONS_VOL_HP+0x48>
 800a926:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a928:	9905      	ldr	r1, [sp, #20]
 800a92a:	6091      	str	r1, [r2, #8]
 800a92c:	9904      	ldr	r1, [sp, #16]
 800a92e:	60d1      	str	r1, [r2, #12]
 800a930:	4613      	mov	r3, r2
 800a932:	61d6      	str	r6, [r2, #28]
 800a934:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a936:	9a03      	ldr	r2, [sp, #12]
 800a938:	611a      	str	r2, [r3, #16]
 800a93a:	2000      	movs	r0, #0
 800a93c:	f8c3 e014 	str.w	lr, [r3, #20]
 800a940:	6199      	str	r1, [r3, #24]
 800a942:	b013      	add	sp, #76	; 0x4c
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	f8dd e018 	ldr.w	lr, [sp, #24]
 800a94c:	e7eb      	b.n	800a926 <D128_1CH_HTONS_VOL_HP+0x29e>
 800a94e:	bf00      	nop
 800a950:	00780069 	.word	0x00780069
 800a954:	005b004e 	.word	0x005b004e
 800a958:	00420037 	.word	0x00420037
 800a95c:	002d0024 	.word	0x002d0024
 800a960:	001c0015 	.word	0x001c0015
 800a964:	000f000a 	.word	0x000f000a
 800a968:	00060003 	.word	0x00060003
 800a96c:	00880096 	.word	0x00880096
 800a970:	00a200ac 	.word	0x00a200ac
 800a974:	00b400ba 	.word	0x00b400ba
 800a978:	00be00c0 	.word	0x00be00c0
 800a97c:	00c000be 	.word	0x00c000be
 800a980:	00ba00b4 	.word	0x00ba00b4
 800a984:	00ac00a2 	.word	0x00ac00a2
 800a988:	00030006 	.word	0x00030006
 800a98c:	000a000f 	.word	0x000a000f
 800a990:	0015001c 	.word	0x0015001c
 800a994:	0024002d 	.word	0x0024002d
 800a998:	00370042 	.word	0x00370042
 800a99c:	004e005b 	.word	0x004e005b
 800a9a0:	00690078 	.word	0x00690078
 800a9a4:	20000000 	.word	0x20000000
 800a9a8:	00960088 	.word	0x00960088

0800a9ac <PDM_Filter_Init>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	2240      	movs	r2, #64	; 0x40
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	300c      	adds	r0, #12
 800a9b6:	f000 fc11 	bl	800b1dc <memset>
 800a9ba:	493b      	ldr	r1, [pc, #236]	; (800aaa8 <PDM_Filter_Init+0xfc>)
 800a9bc:	483b      	ldr	r0, [pc, #236]	; (800aaac <PDM_Filter_Init+0x100>)
 800a9be:	f000 f98d 	bl	800acdc <CRC_Lock>
 800a9c2:	8822      	ldrh	r2, [r4, #0]
 800a9c4:	8963      	ldrh	r3, [r4, #10]
 800a9c6:	4938      	ldr	r1, [pc, #224]	; (800aaa8 <PDM_Filter_Init+0xfc>)
 800a9c8:	8925      	ldrh	r5, [r4, #8]
 800a9ca:	86a3      	strh	r3, [r4, #52]	; 0x34
 800a9cc:	2801      	cmp	r0, #1
 800a9ce:	f04f 0300 	mov.w	r3, #0
 800a9d2:	bf18      	it	ne
 800a9d4:	2100      	movne	r1, #0
 800a9d6:	2a01      	cmp	r2, #1
 800a9d8:	6461      	str	r1, [r4, #68]	; 0x44
 800a9da:	86e5      	strh	r5, [r4, #54]	; 0x36
 800a9dc:	61a3      	str	r3, [r4, #24]
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	60e3      	str	r3, [r4, #12]
 800a9e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a9e6:	61e3      	str	r3, [r4, #28]
 800a9e8:	6223      	str	r3, [r4, #32]
 800a9ea:	6423      	str	r3, [r4, #64]	; 0x40
 800a9ec:	d918      	bls.n	800aa20 <PDM_Filter_Init+0x74>
 800a9ee:	2003      	movs	r0, #3
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	8862      	ldrh	r2, [r4, #2]
 800a9f4:	2a01      	cmp	r2, #1
 800a9f6:	d91d      	bls.n	800aa34 <PDM_Filter_Init+0x88>
 800a9f8:	2140      	movs	r1, #64	; 0x40
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a9fe:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800aa02:	6862      	ldr	r2, [r4, #4]
 800aa04:	bf04      	itt	eq
 800aa06:	6421      	streq	r1, [r4, #64]	; 0x40
 800aa08:	460b      	moveq	r3, r1
 800aa0a:	b11a      	cbz	r2, 800aa14 <PDM_Filter_Init+0x68>
 800aa0c:	f043 0310 	orr.w	r3, r3, #16
 800aa10:	6423      	str	r3, [r4, #64]	; 0x40
 800aa12:	62e2      	str	r2, [r4, #44]	; 0x2c
 800aa14:	2200      	movs	r2, #0
 800aa16:	8722      	strh	r2, [r4, #56]	; 0x38
 800aa18:	b908      	cbnz	r0, 800aa1e <PDM_Filter_Init+0x72>
 800aa1a:	3380      	adds	r3, #128	; 0x80
 800aa1c:	6423      	str	r3, [r4, #64]	; 0x40
 800aa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa20:	4d23      	ldr	r5, [pc, #140]	; (800aab0 <PDM_Filter_Init+0x104>)
 800aa22:	d010      	beq.n	800aa46 <PDM_Filter_Init+0x9a>
 800aa24:	782a      	ldrb	r2, [r5, #0]
 800aa26:	2a01      	cmp	r2, #1
 800aa28:	d027      	beq.n	800aa7a <PDM_Filter_Init+0xce>
 800aa2a:	8862      	ldrh	r2, [r4, #2]
 800aa2c:	2a01      	cmp	r2, #1
 800aa2e:	f04f 0001 	mov.w	r0, #1
 800aa32:	d8e1      	bhi.n	800a9f8 <PDM_Filter_Init+0x4c>
 800aa34:	d001      	beq.n	800aa3a <PDM_Filter_Init+0x8e>
 800aa36:	4618      	mov	r0, r3
 800aa38:	e7de      	b.n	800a9f8 <PDM_Filter_Init+0x4c>
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	6422      	str	r2, [r4, #64]	; 0x40
 800aa40:	4613      	mov	r3, r2
 800aa42:	2160      	movs	r1, #96	; 0x60
 800aa44:	e7da      	b.n	800a9fc <PDM_Filter_Init+0x50>
 800aa46:	7829      	ldrb	r1, [r5, #0]
 800aa48:	2900      	cmp	r1, #0
 800aa4a:	d1ee      	bne.n	800aa2a <PDM_Filter_Init+0x7e>
 800aa4c:	4919      	ldr	r1, [pc, #100]	; (800aab4 <PDM_Filter_Init+0x108>)
 800aa4e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800aabc <PDM_Filter_Init+0x110>
 800aa52:	4f19      	ldr	r7, [pc, #100]	; (800aab8 <PDM_Filter_Init+0x10c>)
 800aa54:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800aa58:	684a      	ldr	r2, [r1, #4]
 800aa5a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800aa5e:	ea02 0007 	and.w	r0, r2, r7
 800aa62:	4303      	orrs	r3, r0
 800aa64:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800aa68:	4413      	add	r3, r2
 800aa6a:	f841 3f04 	str.w	r3, [r1, #4]!
 800aa6e:	428e      	cmp	r6, r1
 800aa70:	d1f2      	bne.n	800aa58 <PDM_Filter_Init+0xac>
 800aa72:	2001      	movs	r0, #1
 800aa74:	7028      	strb	r0, [r5, #0]
 800aa76:	2300      	movs	r3, #0
 800aa78:	e7bb      	b.n	800a9f2 <PDM_Filter_Init+0x46>
 800aa7a:	490e      	ldr	r1, [pc, #56]	; (800aab4 <PDM_Filter_Init+0x108>)
 800aa7c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800aabc <PDM_Filter_Init+0x110>
 800aa80:	4f0d      	ldr	r7, [pc, #52]	; (800aab8 <PDM_Filter_Init+0x10c>)
 800aa82:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800aa86:	684a      	ldr	r2, [r1, #4]
 800aa88:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800aa8c:	ea02 0007 	and.w	r0, r2, r7
 800aa90:	4303      	orrs	r3, r0
 800aa92:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800aa96:	4413      	add	r3, r2
 800aa98:	f841 3f04 	str.w	r3, [r1, #4]!
 800aa9c:	428e      	cmp	r6, r1
 800aa9e:	d1f2      	bne.n	800aa86 <PDM_Filter_Init+0xda>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	702b      	strb	r3, [r5, #0]
 800aaa4:	e7c1      	b.n	800aa2a <PDM_Filter_Init+0x7e>
 800aaa6:	bf00      	nop
 800aaa8:	b5e8b5cd 	.word	0xb5e8b5cd
 800aaac:	f407a5c2 	.word	0xf407a5c2
 800aab0:	20000558 	.word	0x20000558
 800aab4:	1ffffffc 	.word	0x1ffffffc
 800aab8:	000ffc00 	.word	0x000ffc00
 800aabc:	3ff00000 	.word	0x3ff00000

0800aac0 <PDM_Filter_setConfig>:
 800aac0:	4b66      	ldr	r3, [pc, #408]	; (800ac5c <PDM_Filter_setConfig+0x19c>)
 800aac2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d001      	beq.n	800aacc <PDM_Filter_setConfig+0xc>
 800aac8:	2004      	movs	r0, #4
 800aaca:	4770      	bx	lr
 800aacc:	b530      	push	{r4, r5, lr}
 800aace:	880a      	ldrh	r2, [r1, #0]
 800aad0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aad2:	ed2d 8b04 	vpush	{d8-d9}
 800aad6:	4604      	mov	r4, r0
 800aad8:	460d      	mov	r5, r1
 800aada:	1e51      	subs	r1, r2, #1
 800aadc:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800aae0:	2906      	cmp	r1, #6
 800aae2:	b083      	sub	sp, #12
 800aae4:	6420      	str	r0, [r4, #64]	; 0x40
 800aae6:	d91a      	bls.n	800ab1e <PDM_Filter_setConfig+0x5e>
 800aae8:	2008      	movs	r0, #8
 800aaea:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800aaee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800aaf2:	4299      	cmp	r1, r3
 800aaf4:	d07e      	beq.n	800abf4 <PDM_Filter_setConfig+0x134>
 800aaf6:	f113 0f0c 	cmn.w	r3, #12
 800aafa:	da2a      	bge.n	800ab52 <PDM_Filter_setConfig+0x92>
 800aafc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ab00:	3040      	adds	r0, #64	; 0x40
 800ab02:	80ab      	strh	r3, [r5, #4]
 800ab04:	8622      	strh	r2, [r4, #48]	; 0x30
 800ab06:	886b      	ldrh	r3, [r5, #2]
 800ab08:	8663      	strh	r3, [r4, #50]	; 0x32
 800ab0a:	b920      	cbnz	r0, 800ab16 <PDM_Filter_setConfig+0x56>
 800ab0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab12:	6423      	str	r3, [r4, #64]	; 0x40
 800ab14:	2000      	movs	r0, #0
 800ab16:	b003      	add	sp, #12
 800ab18:	ecbd 8b04 	vpop	{d8-d9}
 800ab1c:	bd30      	pop	{r4, r5, pc}
 800ab1e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ab20:	4291      	cmp	r1, r2
 800ab22:	d06c      	beq.n	800abfe <PDM_Filter_setConfig+0x13e>
 800ab24:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800ab28:	f023 0301 	bic.w	r3, r3, #1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800ab32:	6423      	str	r3, [r4, #64]	; 0x40
 800ab34:	2970      	cmp	r1, #112	; 0x70
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ab3e:	d066      	beq.n	800ac0e <PDM_Filter_setConfig+0x14e>
 800ab40:	2b06      	cmp	r3, #6
 800ab42:	f200 8089 	bhi.w	800ac58 <PDM_Filter_setConfig+0x198>
 800ab46:	e8df f003 	tbb	[pc, r3]
 800ab4a:	4f52      	.short	0x4f52
 800ab4c:	3d43494c 	.word	0x3d43494c
 800ab50:	46          	.byte	0x46
 800ab51:	00          	.byte	0x00
 800ab52:	2b33      	cmp	r3, #51	; 0x33
 800ab54:	dc32      	bgt.n	800abbc <PDM_Filter_setConfig+0xfc>
 800ab56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ab58:	f002 020f 	and.w	r2, r2, #15
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	2a06      	cmp	r2, #6
 800ab60:	d872      	bhi.n	800ac48 <PDM_Filter_setConfig+0x188>
 800ab62:	493f      	ldr	r1, [pc, #252]	; (800ac60 <PDM_Filter_setConfig+0x1a0>)
 800ab64:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ab68:	ed92 9a00 	vldr	s18, [r2]
 800ab6c:	ed92 8a07 	vldr	s16, [r2, #28]
 800ab70:	9001      	str	r0, [sp, #4]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab7a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800ab7e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800ab82:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ab86:	f001 fa6a 	bl	800c05e <powf>
 800ab8a:	eddf 0a36 	vldr	s1, [pc, #216]	; 800ac64 <PDM_Filter_setConfig+0x1a4>
 800ab8e:	eef0 8a40 	vmov.f32	s17, s0
 800ab92:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800ab96:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ab9a:	f001 fa60 	bl	800c05e <powf>
 800ab9e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800aba2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800aba6:	f001 fabf 	bl	800c128 <roundf>
 800abaa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800abae:	88ab      	ldrh	r3, [r5, #4]
 800abb0:	882a      	ldrh	r2, [r5, #0]
 800abb2:	9801      	ldr	r0, [sp, #4]
 800abb4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800abb8:	8723      	strh	r3, [r4, #56]	; 0x38
 800abba:	e7a3      	b.n	800ab04 <PDM_Filter_setConfig+0x44>
 800abbc:	2333      	movs	r3, #51	; 0x33
 800abbe:	3040      	adds	r0, #64	; 0x40
 800abc0:	80ab      	strh	r3, [r5, #4]
 800abc2:	e79f      	b.n	800ab04 <PDM_Filter_setConfig+0x44>
 800abc4:	4b28      	ldr	r3, [pc, #160]	; (800ac68 <PDM_Filter_setConfig+0x1a8>)
 800abc6:	64a3      	str	r3, [r4, #72]	; 0x48
 800abc8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800abcc:	2000      	movs	r0, #0
 800abce:	e792      	b.n	800aaf6 <PDM_Filter_setConfig+0x36>
 800abd0:	4b26      	ldr	r3, [pc, #152]	; (800ac6c <PDM_Filter_setConfig+0x1ac>)
 800abd2:	64a3      	str	r3, [r4, #72]	; 0x48
 800abd4:	e7f8      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800abd6:	4b26      	ldr	r3, [pc, #152]	; (800ac70 <PDM_Filter_setConfig+0x1b0>)
 800abd8:	64a3      	str	r3, [r4, #72]	; 0x48
 800abda:	e7f5      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800abdc:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <PDM_Filter_setConfig+0x1b4>)
 800abde:	64a3      	str	r3, [r4, #72]	; 0x48
 800abe0:	e7f2      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800abe2:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <PDM_Filter_setConfig+0x1b8>)
 800abe4:	64a3      	str	r3, [r4, #72]	; 0x48
 800abe6:	e7ef      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800abe8:	4b24      	ldr	r3, [pc, #144]	; (800ac7c <PDM_Filter_setConfig+0x1bc>)
 800abea:	64a3      	str	r3, [r4, #72]	; 0x48
 800abec:	e7ec      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800abee:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <PDM_Filter_setConfig+0x1c0>)
 800abf0:	64a3      	str	r3, [r4, #72]	; 0x48
 800abf2:	e7e9      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800abf4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800abf6:	4291      	cmp	r1, r2
 800abf8:	f47f af7d 	bne.w	800aaf6 <PDM_Filter_setConfig+0x36>
 800abfc:	e783      	b.n	800ab06 <PDM_Filter_setConfig+0x46>
 800abfe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ac02:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ac06:	4299      	cmp	r1, r3
 800ac08:	d023      	beq.n	800ac52 <PDM_Filter_setConfig+0x192>
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	e773      	b.n	800aaf6 <PDM_Filter_setConfig+0x36>
 800ac0e:	2b06      	cmp	r3, #6
 800ac10:	d822      	bhi.n	800ac58 <PDM_Filter_setConfig+0x198>
 800ac12:	e8df f003 	tbb	[pc, r3]
 800ac16:	1316      	.short	0x1316
 800ac18:	070a0d10 	.word	0x070a0d10
 800ac1c:	04          	.byte	0x04
 800ac1d:	00          	.byte	0x00
 800ac1e:	4b19      	ldr	r3, [pc, #100]	; (800ac84 <PDM_Filter_setConfig+0x1c4>)
 800ac20:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac22:	e7d1      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac24:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <PDM_Filter_setConfig+0x1c8>)
 800ac26:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac28:	e7ce      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac2a:	4b18      	ldr	r3, [pc, #96]	; (800ac8c <PDM_Filter_setConfig+0x1cc>)
 800ac2c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac2e:	e7cb      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac30:	4b17      	ldr	r3, [pc, #92]	; (800ac90 <PDM_Filter_setConfig+0x1d0>)
 800ac32:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac34:	e7c8      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac36:	4b17      	ldr	r3, [pc, #92]	; (800ac94 <PDM_Filter_setConfig+0x1d4>)
 800ac38:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac3a:	e7c5      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac3c:	4b16      	ldr	r3, [pc, #88]	; (800ac98 <PDM_Filter_setConfig+0x1d8>)
 800ac3e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac40:	e7c2      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac42:	4b16      	ldr	r3, [pc, #88]	; (800ac9c <PDM_Filter_setConfig+0x1dc>)
 800ac44:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac46:	e7bf      	b.n	800abc8 <PDM_Filter_setConfig+0x108>
 800ac48:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800aca0 <PDM_Filter_setConfig+0x1e0>
 800ac4c:	eeb0 9a48 	vmov.f32	s18, s16
 800ac50:	e78e      	b.n	800ab70 <PDM_Filter_setConfig+0xb0>
 800ac52:	886b      	ldrh	r3, [r5, #2]
 800ac54:	8663      	strh	r3, [r4, #50]	; 0x32
 800ac56:	e759      	b.n	800ab0c <PDM_Filter_setConfig+0x4c>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e746      	b.n	800aaea <PDM_Filter_setConfig+0x2a>
 800ac5c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ac60:	0800cb98 	.word	0x0800cb98
 800ac64:	42000000 	.word	0x42000000
 800ac68:	0800902d 	.word	0x0800902d
 800ac6c:	08008f0d 	.word	0x08008f0d
 800ac70:	080091bd 	.word	0x080091bd
 800ac74:	08009a01 	.word	0x08009a01
 800ac78:	08009761 	.word	0x08009761
 800ac7c:	08009541 	.word	0x08009541
 800ac80:	08009355 	.word	0x08009355
 800ac84:	0800a00d 	.word	0x0800a00d
 800ac88:	08009ed5 	.word	0x08009ed5
 800ac8c:	08009df1 	.word	0x08009df1
 800ac90:	0800a689 	.word	0x0800a689
 800ac94:	0800a475 	.word	0x0800a475
 800ac98:	0800a2bd 	.word	0x0800a2bd
 800ac9c:	0800a151 	.word	0x0800a151
 800aca0:	00000000 	.word	0x00000000

0800aca4 <PDM_Filter>:
 800aca4:	b410      	push	{r4}
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <PDM_Filter+0x34>)
 800aca8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800acaa:	429c      	cmp	r4, r3
 800acac:	d003      	beq.n	800acb6 <PDM_Filter+0x12>
 800acae:	2004      	movs	r0, #4
 800acb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800acb8:	05dc      	lsls	r4, r3, #23
 800acba:	d407      	bmi.n	800accc <PDM_Filter+0x28>
 800acbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acc0:	bf14      	ite	ne
 800acc2:	2020      	movne	r0, #32
 800acc4:	2030      	moveq	r0, #48	; 0x30
 800acc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800acce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acd2:	320c      	adds	r2, #12
 800acd4:	4718      	bx	r3
 800acd6:	bf00      	nop
 800acd8:	b5e8b5cd 	.word	0xb5e8b5cd

0800acdc <CRC_Lock>:
 800acdc:	4a17      	ldr	r2, [pc, #92]	; (800ad3c <CRC_Lock+0x60>)
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	b410      	push	{r4}
 800ace2:	f023 0301 	bic.w	r3, r3, #1
 800ace6:	4c16      	ldr	r4, [pc, #88]	; (800ad40 <CRC_Lock+0x64>)
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	b933      	cbnz	r3, 800acfc <CRC_Lock+0x20>
 800acee:	4b15      	ldr	r3, [pc, #84]	; (800ad44 <CRC_Lock+0x68>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acf6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800acfa:	d00f      	beq.n	800ad1c <CRC_Lock+0x40>
 800acfc:	4a12      	ldr	r2, [pc, #72]	; (800ad48 <CRC_Lock+0x6c>)
 800acfe:	2301      	movs	r3, #1
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	6813      	ldr	r3, [r2, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1fc      	bne.n	800ad02 <CRC_Lock+0x26>
 800ad08:	4b10      	ldr	r3, [pc, #64]	; (800ad4c <CRC_Lock+0x70>)
 800ad0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad0e:	6018      	str	r0, [r3, #0]
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	1a08      	subs	r0, r1, r0
 800ad14:	fab0 f080 	clz	r0, r0
 800ad18:	0940      	lsrs	r0, r0, #5
 800ad1a:	4770      	bx	lr
 800ad1c:	4a0c      	ldr	r2, [pc, #48]	; (800ad50 <CRC_Lock+0x74>)
 800ad1e:	2301      	movs	r3, #1
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1fc      	bne.n	800ad22 <CRC_Lock+0x46>
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <CRC_Lock+0x78>)
 800ad2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2e:	6018      	str	r0, [r3, #0]
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	1a40      	subs	r0, r0, r1
 800ad34:	fab0 f080 	clz	r0, r0
 800ad38:	0940      	lsrs	r0, r0, #5
 800ad3a:	4770      	bx	lr
 800ad3c:	e0002000 	.word	0xe0002000
 800ad40:	e0042000 	.word	0xe0042000
 800ad44:	5c001000 	.word	0x5c001000
 800ad48:	40023008 	.word	0x40023008
 800ad4c:	40023000 	.word	0x40023000
 800ad50:	58024c08 	.word	0x58024c08
 800ad54:	58024c00 	.word	0x58024c00

0800ad58 <std>:
 800ad58:	2300      	movs	r3, #0
 800ad5a:	b510      	push	{r4, lr}
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad66:	6083      	str	r3, [r0, #8]
 800ad68:	8181      	strh	r1, [r0, #12]
 800ad6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad6c:	81c2      	strh	r2, [r0, #14]
 800ad6e:	6183      	str	r3, [r0, #24]
 800ad70:	4619      	mov	r1, r3
 800ad72:	2208      	movs	r2, #8
 800ad74:	305c      	adds	r0, #92	; 0x5c
 800ad76:	f000 fa31 	bl	800b1dc <memset>
 800ad7a:	4b0d      	ldr	r3, [pc, #52]	; (800adb0 <std+0x58>)
 800ad7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad7e:	4b0d      	ldr	r3, [pc, #52]	; (800adb4 <std+0x5c>)
 800ad80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad82:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <std+0x60>)
 800ad84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad86:	4b0d      	ldr	r3, [pc, #52]	; (800adbc <std+0x64>)
 800ad88:	6323      	str	r3, [r4, #48]	; 0x30
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <std+0x68>)
 800ad8c:	6224      	str	r4, [r4, #32]
 800ad8e:	429c      	cmp	r4, r3
 800ad90:	d006      	beq.n	800ada0 <std+0x48>
 800ad92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ad96:	4294      	cmp	r4, r2
 800ad98:	d002      	beq.n	800ada0 <std+0x48>
 800ad9a:	33d0      	adds	r3, #208	; 0xd0
 800ad9c:	429c      	cmp	r4, r3
 800ad9e:	d105      	bne.n	800adac <std+0x54>
 800ada0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ada4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada8:	f000 ba90 	b.w	800b2cc <__retarget_lock_init_recursive>
 800adac:	bd10      	pop	{r4, pc}
 800adae:	bf00      	nop
 800adb0:	0800afb9 	.word	0x0800afb9
 800adb4:	0800afdb 	.word	0x0800afdb
 800adb8:	0800b013 	.word	0x0800b013
 800adbc:	0800b037 	.word	0x0800b037
 800adc0:	200019c4 	.word	0x200019c4

0800adc4 <stdio_exit_handler>:
 800adc4:	4a02      	ldr	r2, [pc, #8]	; (800add0 <stdio_exit_handler+0xc>)
 800adc6:	4903      	ldr	r1, [pc, #12]	; (800add4 <stdio_exit_handler+0x10>)
 800adc8:	4803      	ldr	r0, [pc, #12]	; (800add8 <stdio_exit_handler+0x14>)
 800adca:	f000 b869 	b.w	800aea0 <_fwalk_sglue>
 800adce:	bf00      	nop
 800add0:	200004e0 	.word	0x200004e0
 800add4:	0800be29 	.word	0x0800be29
 800add8:	200004ec 	.word	0x200004ec

0800addc <cleanup_stdio>:
 800addc:	6841      	ldr	r1, [r0, #4]
 800adde:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <cleanup_stdio+0x34>)
 800ade0:	4299      	cmp	r1, r3
 800ade2:	b510      	push	{r4, lr}
 800ade4:	4604      	mov	r4, r0
 800ade6:	d001      	beq.n	800adec <cleanup_stdio+0x10>
 800ade8:	f001 f81e 	bl	800be28 <_fflush_r>
 800adec:	68a1      	ldr	r1, [r4, #8]
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <cleanup_stdio+0x38>)
 800adf0:	4299      	cmp	r1, r3
 800adf2:	d002      	beq.n	800adfa <cleanup_stdio+0x1e>
 800adf4:	4620      	mov	r0, r4
 800adf6:	f001 f817 	bl	800be28 <_fflush_r>
 800adfa:	68e1      	ldr	r1, [r4, #12]
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <cleanup_stdio+0x3c>)
 800adfe:	4299      	cmp	r1, r3
 800ae00:	d004      	beq.n	800ae0c <cleanup_stdio+0x30>
 800ae02:	4620      	mov	r0, r4
 800ae04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae08:	f001 b80e 	b.w	800be28 <_fflush_r>
 800ae0c:	bd10      	pop	{r4, pc}
 800ae0e:	bf00      	nop
 800ae10:	200019c4 	.word	0x200019c4
 800ae14:	20001a2c 	.word	0x20001a2c
 800ae18:	20001a94 	.word	0x20001a94

0800ae1c <global_stdio_init.part.0>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <global_stdio_init.part.0+0x30>)
 800ae20:	4c0b      	ldr	r4, [pc, #44]	; (800ae50 <global_stdio_init.part.0+0x34>)
 800ae22:	4a0c      	ldr	r2, [pc, #48]	; (800ae54 <global_stdio_init.part.0+0x38>)
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	4620      	mov	r0, r4
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2104      	movs	r1, #4
 800ae2c:	f7ff ff94 	bl	800ad58 <std>
 800ae30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ae34:	2201      	movs	r2, #1
 800ae36:	2109      	movs	r1, #9
 800ae38:	f7ff ff8e 	bl	800ad58 <std>
 800ae3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ae40:	2202      	movs	r2, #2
 800ae42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae46:	2112      	movs	r1, #18
 800ae48:	f7ff bf86 	b.w	800ad58 <std>
 800ae4c:	20001afc 	.word	0x20001afc
 800ae50:	200019c4 	.word	0x200019c4
 800ae54:	0800adc5 	.word	0x0800adc5

0800ae58 <__sfp_lock_acquire>:
 800ae58:	4801      	ldr	r0, [pc, #4]	; (800ae60 <__sfp_lock_acquire+0x8>)
 800ae5a:	f000 ba38 	b.w	800b2ce <__retarget_lock_acquire_recursive>
 800ae5e:	bf00      	nop
 800ae60:	20001b05 	.word	0x20001b05

0800ae64 <__sfp_lock_release>:
 800ae64:	4801      	ldr	r0, [pc, #4]	; (800ae6c <__sfp_lock_release+0x8>)
 800ae66:	f000 ba33 	b.w	800b2d0 <__retarget_lock_release_recursive>
 800ae6a:	bf00      	nop
 800ae6c:	20001b05 	.word	0x20001b05

0800ae70 <__sinit>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	4604      	mov	r4, r0
 800ae74:	f7ff fff0 	bl	800ae58 <__sfp_lock_acquire>
 800ae78:	6a23      	ldr	r3, [r4, #32]
 800ae7a:	b11b      	cbz	r3, 800ae84 <__sinit+0x14>
 800ae7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae80:	f7ff bff0 	b.w	800ae64 <__sfp_lock_release>
 800ae84:	4b04      	ldr	r3, [pc, #16]	; (800ae98 <__sinit+0x28>)
 800ae86:	6223      	str	r3, [r4, #32]
 800ae88:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <__sinit+0x2c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1f5      	bne.n	800ae7c <__sinit+0xc>
 800ae90:	f7ff ffc4 	bl	800ae1c <global_stdio_init.part.0>
 800ae94:	e7f2      	b.n	800ae7c <__sinit+0xc>
 800ae96:	bf00      	nop
 800ae98:	0800addd 	.word	0x0800addd
 800ae9c:	20001afc 	.word	0x20001afc

0800aea0 <_fwalk_sglue>:
 800aea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea4:	4607      	mov	r7, r0
 800aea6:	4688      	mov	r8, r1
 800aea8:	4614      	mov	r4, r2
 800aeaa:	2600      	movs	r6, #0
 800aeac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aeb0:	f1b9 0901 	subs.w	r9, r9, #1
 800aeb4:	d505      	bpl.n	800aec2 <_fwalk_sglue+0x22>
 800aeb6:	6824      	ldr	r4, [r4, #0]
 800aeb8:	2c00      	cmp	r4, #0
 800aeba:	d1f7      	bne.n	800aeac <_fwalk_sglue+0xc>
 800aebc:	4630      	mov	r0, r6
 800aebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec2:	89ab      	ldrh	r3, [r5, #12]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d907      	bls.n	800aed8 <_fwalk_sglue+0x38>
 800aec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aecc:	3301      	adds	r3, #1
 800aece:	d003      	beq.n	800aed8 <_fwalk_sglue+0x38>
 800aed0:	4629      	mov	r1, r5
 800aed2:	4638      	mov	r0, r7
 800aed4:	47c0      	blx	r8
 800aed6:	4306      	orrs	r6, r0
 800aed8:	3568      	adds	r5, #104	; 0x68
 800aeda:	e7e9      	b.n	800aeb0 <_fwalk_sglue+0x10>

0800aedc <iprintf>:
 800aedc:	b40f      	push	{r0, r1, r2, r3}
 800aede:	b507      	push	{r0, r1, r2, lr}
 800aee0:	4906      	ldr	r1, [pc, #24]	; (800aefc <iprintf+0x20>)
 800aee2:	ab04      	add	r3, sp, #16
 800aee4:	6808      	ldr	r0, [r1, #0]
 800aee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeea:	6881      	ldr	r1, [r0, #8]
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	f000 fc6b 	bl	800b7c8 <_vfiprintf_r>
 800aef2:	b003      	add	sp, #12
 800aef4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef8:	b004      	add	sp, #16
 800aefa:	4770      	bx	lr
 800aefc:	20000538 	.word	0x20000538

0800af00 <_puts_r>:
 800af00:	6a03      	ldr	r3, [r0, #32]
 800af02:	b570      	push	{r4, r5, r6, lr}
 800af04:	6884      	ldr	r4, [r0, #8]
 800af06:	4605      	mov	r5, r0
 800af08:	460e      	mov	r6, r1
 800af0a:	b90b      	cbnz	r3, 800af10 <_puts_r+0x10>
 800af0c:	f7ff ffb0 	bl	800ae70 <__sinit>
 800af10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d405      	bmi.n	800af22 <_puts_r+0x22>
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	0598      	lsls	r0, r3, #22
 800af1a:	d402      	bmi.n	800af22 <_puts_r+0x22>
 800af1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af1e:	f000 f9d6 	bl	800b2ce <__retarget_lock_acquire_recursive>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	0719      	lsls	r1, r3, #28
 800af26:	d513      	bpl.n	800af50 <_puts_r+0x50>
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	b18b      	cbz	r3, 800af50 <_puts_r+0x50>
 800af2c:	3e01      	subs	r6, #1
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af34:	3b01      	subs	r3, #1
 800af36:	60a3      	str	r3, [r4, #8]
 800af38:	b9e9      	cbnz	r1, 800af76 <_puts_r+0x76>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	da2e      	bge.n	800af9c <_puts_r+0x9c>
 800af3e:	4622      	mov	r2, r4
 800af40:	210a      	movs	r1, #10
 800af42:	4628      	mov	r0, r5
 800af44:	f000 f8b4 	bl	800b0b0 <__swbuf_r>
 800af48:	3001      	adds	r0, #1
 800af4a:	d007      	beq.n	800af5c <_puts_r+0x5c>
 800af4c:	250a      	movs	r5, #10
 800af4e:	e007      	b.n	800af60 <_puts_r+0x60>
 800af50:	4621      	mov	r1, r4
 800af52:	4628      	mov	r0, r5
 800af54:	f000 f8ea 	bl	800b12c <__swsetup_r>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d0e7      	beq.n	800af2c <_puts_r+0x2c>
 800af5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800af60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af62:	07da      	lsls	r2, r3, #31
 800af64:	d405      	bmi.n	800af72 <_puts_r+0x72>
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	059b      	lsls	r3, r3, #22
 800af6a:	d402      	bmi.n	800af72 <_puts_r+0x72>
 800af6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6e:	f000 f9af 	bl	800b2d0 <__retarget_lock_release_recursive>
 800af72:	4628      	mov	r0, r5
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	2b00      	cmp	r3, #0
 800af78:	da04      	bge.n	800af84 <_puts_r+0x84>
 800af7a:	69a2      	ldr	r2, [r4, #24]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	dc06      	bgt.n	800af8e <_puts_r+0x8e>
 800af80:	290a      	cmp	r1, #10
 800af82:	d004      	beq.n	800af8e <_puts_r+0x8e>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	6022      	str	r2, [r4, #0]
 800af8a:	7019      	strb	r1, [r3, #0]
 800af8c:	e7cf      	b.n	800af2e <_puts_r+0x2e>
 800af8e:	4622      	mov	r2, r4
 800af90:	4628      	mov	r0, r5
 800af92:	f000 f88d 	bl	800b0b0 <__swbuf_r>
 800af96:	3001      	adds	r0, #1
 800af98:	d1c9      	bne.n	800af2e <_puts_r+0x2e>
 800af9a:	e7df      	b.n	800af5c <_puts_r+0x5c>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	250a      	movs	r5, #10
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	701d      	strb	r5, [r3, #0]
 800afa6:	e7db      	b.n	800af60 <_puts_r+0x60>

0800afa8 <puts>:
 800afa8:	4b02      	ldr	r3, [pc, #8]	; (800afb4 <puts+0xc>)
 800afaa:	4601      	mov	r1, r0
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	f7ff bfa7 	b.w	800af00 <_puts_r>
 800afb2:	bf00      	nop
 800afb4:	20000538 	.word	0x20000538

0800afb8 <__sread>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	460c      	mov	r4, r1
 800afbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc0:	f000 f936 	bl	800b230 <_read_r>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	bfab      	itete	ge
 800afc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afca:	89a3      	ldrhlt	r3, [r4, #12]
 800afcc:	181b      	addge	r3, r3, r0
 800afce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afd2:	bfac      	ite	ge
 800afd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800afd6:	81a3      	strhlt	r3, [r4, #12]
 800afd8:	bd10      	pop	{r4, pc}

0800afda <__swrite>:
 800afda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	461f      	mov	r7, r3
 800afe0:	898b      	ldrh	r3, [r1, #12]
 800afe2:	05db      	lsls	r3, r3, #23
 800afe4:	4605      	mov	r5, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	4616      	mov	r6, r2
 800afea:	d505      	bpl.n	800aff8 <__swrite+0x1e>
 800afec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff0:	2302      	movs	r3, #2
 800aff2:	2200      	movs	r2, #0
 800aff4:	f000 f90a 	bl	800b20c <_lseek_r>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800affe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	4628      	mov	r0, r5
 800b00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	f000 b921 	b.w	800b254 <_write_r>

0800b012 <__sseek>:
 800b012:	b510      	push	{r4, lr}
 800b014:	460c      	mov	r4, r1
 800b016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01a:	f000 f8f7 	bl	800b20c <_lseek_r>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	bf15      	itete	ne
 800b024:	6560      	strne	r0, [r4, #84]	; 0x54
 800b026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b02e:	81a3      	strheq	r3, [r4, #12]
 800b030:	bf18      	it	ne
 800b032:	81a3      	strhne	r3, [r4, #12]
 800b034:	bd10      	pop	{r4, pc}

0800b036 <__sclose>:
 800b036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03a:	f000 b8d7 	b.w	800b1ec <_close_r>

0800b03e <_vsniprintf_r>:
 800b03e:	b530      	push	{r4, r5, lr}
 800b040:	4614      	mov	r4, r2
 800b042:	2c00      	cmp	r4, #0
 800b044:	b09b      	sub	sp, #108	; 0x6c
 800b046:	4605      	mov	r5, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	da05      	bge.n	800b058 <_vsniprintf_r+0x1a>
 800b04c:	238b      	movs	r3, #139	; 0x8b
 800b04e:	6003      	str	r3, [r0, #0]
 800b050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b054:	b01b      	add	sp, #108	; 0x6c
 800b056:	bd30      	pop	{r4, r5, pc}
 800b058:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b05c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b060:	bf14      	ite	ne
 800b062:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b066:	4623      	moveq	r3, r4
 800b068:	9302      	str	r3, [sp, #8]
 800b06a:	9305      	str	r3, [sp, #20]
 800b06c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b070:	9100      	str	r1, [sp, #0]
 800b072:	9104      	str	r1, [sp, #16]
 800b074:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b078:	4669      	mov	r1, sp
 800b07a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b07c:	f000 fa7c 	bl	800b578 <_svfiprintf_r>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	bfbc      	itt	lt
 800b084:	238b      	movlt	r3, #139	; 0x8b
 800b086:	602b      	strlt	r3, [r5, #0]
 800b088:	2c00      	cmp	r4, #0
 800b08a:	d0e3      	beq.n	800b054 <_vsniprintf_r+0x16>
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	701a      	strb	r2, [r3, #0]
 800b092:	e7df      	b.n	800b054 <_vsniprintf_r+0x16>

0800b094 <vsniprintf>:
 800b094:	b507      	push	{r0, r1, r2, lr}
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	4613      	mov	r3, r2
 800b09a:	460a      	mov	r2, r1
 800b09c:	4601      	mov	r1, r0
 800b09e:	4803      	ldr	r0, [pc, #12]	; (800b0ac <vsniprintf+0x18>)
 800b0a0:	6800      	ldr	r0, [r0, #0]
 800b0a2:	f7ff ffcc 	bl	800b03e <_vsniprintf_r>
 800b0a6:	b003      	add	sp, #12
 800b0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0ac:	20000538 	.word	0x20000538

0800b0b0 <__swbuf_r>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	460e      	mov	r6, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	b118      	cbz	r0, 800b0c2 <__swbuf_r+0x12>
 800b0ba:	6a03      	ldr	r3, [r0, #32]
 800b0bc:	b90b      	cbnz	r3, 800b0c2 <__swbuf_r+0x12>
 800b0be:	f7ff fed7 	bl	800ae70 <__sinit>
 800b0c2:	69a3      	ldr	r3, [r4, #24]
 800b0c4:	60a3      	str	r3, [r4, #8]
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	071a      	lsls	r2, r3, #28
 800b0ca:	d525      	bpl.n	800b118 <__swbuf_r+0x68>
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	b31b      	cbz	r3, 800b118 <__swbuf_r+0x68>
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	6922      	ldr	r2, [r4, #16]
 800b0d4:	1a98      	subs	r0, r3, r2
 800b0d6:	6963      	ldr	r3, [r4, #20]
 800b0d8:	b2f6      	uxtb	r6, r6
 800b0da:	4283      	cmp	r3, r0
 800b0dc:	4637      	mov	r7, r6
 800b0de:	dc04      	bgt.n	800b0ea <__swbuf_r+0x3a>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f000 fea0 	bl	800be28 <_fflush_r>
 800b0e8:	b9e0      	cbnz	r0, 800b124 <__swbuf_r+0x74>
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	60a3      	str	r3, [r4, #8]
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	6022      	str	r2, [r4, #0]
 800b0f6:	701e      	strb	r6, [r3, #0]
 800b0f8:	6962      	ldr	r2, [r4, #20]
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d004      	beq.n	800b10a <__swbuf_r+0x5a>
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	07db      	lsls	r3, r3, #31
 800b104:	d506      	bpl.n	800b114 <__swbuf_r+0x64>
 800b106:	2e0a      	cmp	r6, #10
 800b108:	d104      	bne.n	800b114 <__swbuf_r+0x64>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4628      	mov	r0, r5
 800b10e:	f000 fe8b 	bl	800be28 <_fflush_r>
 800b112:	b938      	cbnz	r0, 800b124 <__swbuf_r+0x74>
 800b114:	4638      	mov	r0, r7
 800b116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b118:	4621      	mov	r1, r4
 800b11a:	4628      	mov	r0, r5
 800b11c:	f000 f806 	bl	800b12c <__swsetup_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	d0d5      	beq.n	800b0d0 <__swbuf_r+0x20>
 800b124:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b128:	e7f4      	b.n	800b114 <__swbuf_r+0x64>
	...

0800b12c <__swsetup_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4b2a      	ldr	r3, [pc, #168]	; (800b1d8 <__swsetup_r+0xac>)
 800b130:	4605      	mov	r5, r0
 800b132:	6818      	ldr	r0, [r3, #0]
 800b134:	460c      	mov	r4, r1
 800b136:	b118      	cbz	r0, 800b140 <__swsetup_r+0x14>
 800b138:	6a03      	ldr	r3, [r0, #32]
 800b13a:	b90b      	cbnz	r3, 800b140 <__swsetup_r+0x14>
 800b13c:	f7ff fe98 	bl	800ae70 <__sinit>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b146:	0718      	lsls	r0, r3, #28
 800b148:	d422      	bmi.n	800b190 <__swsetup_r+0x64>
 800b14a:	06d9      	lsls	r1, r3, #27
 800b14c:	d407      	bmi.n	800b15e <__swsetup_r+0x32>
 800b14e:	2309      	movs	r3, #9
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b15c:	e034      	b.n	800b1c8 <__swsetup_r+0x9c>
 800b15e:	0758      	lsls	r0, r3, #29
 800b160:	d512      	bpl.n	800b188 <__swsetup_r+0x5c>
 800b162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b164:	b141      	cbz	r1, 800b178 <__swsetup_r+0x4c>
 800b166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b16a:	4299      	cmp	r1, r3
 800b16c:	d002      	beq.n	800b174 <__swsetup_r+0x48>
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f8b0 	bl	800b2d4 <_free_r>
 800b174:	2300      	movs	r3, #0
 800b176:	6363      	str	r3, [r4, #52]	; 0x34
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	2300      	movs	r3, #0
 800b182:	6063      	str	r3, [r4, #4]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f043 0308 	orr.w	r3, r3, #8
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	b94b      	cbnz	r3, 800b1a8 <__swsetup_r+0x7c>
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b19a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b19e:	d003      	beq.n	800b1a8 <__swsetup_r+0x7c>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 fe8e 	bl	800bec4 <__smakebuf_r>
 800b1a8:	89a0      	ldrh	r0, [r4, #12]
 800b1aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1ae:	f010 0301 	ands.w	r3, r0, #1
 800b1b2:	d00a      	beq.n	800b1ca <__swsetup_r+0x9e>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60a3      	str	r3, [r4, #8]
 800b1b8:	6963      	ldr	r3, [r4, #20]
 800b1ba:	425b      	negs	r3, r3
 800b1bc:	61a3      	str	r3, [r4, #24]
 800b1be:	6923      	ldr	r3, [r4, #16]
 800b1c0:	b943      	cbnz	r3, 800b1d4 <__swsetup_r+0xa8>
 800b1c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1c6:	d1c4      	bne.n	800b152 <__swsetup_r+0x26>
 800b1c8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ca:	0781      	lsls	r1, r0, #30
 800b1cc:	bf58      	it	pl
 800b1ce:	6963      	ldrpl	r3, [r4, #20]
 800b1d0:	60a3      	str	r3, [r4, #8]
 800b1d2:	e7f4      	b.n	800b1be <__swsetup_r+0x92>
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	e7f7      	b.n	800b1c8 <__swsetup_r+0x9c>
 800b1d8:	20000538 	.word	0x20000538

0800b1dc <memset>:
 800b1dc:	4402      	add	r2, r0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d100      	bne.n	800b1e6 <memset+0xa>
 800b1e4:	4770      	bx	lr
 800b1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ea:	e7f9      	b.n	800b1e0 <memset+0x4>

0800b1ec <_close_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	; (800b208 <_close_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f6 fa6b 	bl	80016d2 <_close>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_close_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_close_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20001b00 	.word	0x20001b00

0800b20c <_lseek_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	; (800b22c <_lseek_r+0x20>)
 800b210:	4604      	mov	r4, r0
 800b212:	4608      	mov	r0, r1
 800b214:	4611      	mov	r1, r2
 800b216:	2200      	movs	r2, #0
 800b218:	602a      	str	r2, [r5, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	f7f6 fa80 	bl	8001720 <_lseek>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_lseek_r+0x1e>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_lseek_r+0x1e>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	20001b00 	.word	0x20001b00

0800b230 <_read_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d07      	ldr	r5, [pc, #28]	; (800b250 <_read_r+0x20>)
 800b234:	4604      	mov	r4, r0
 800b236:	4608      	mov	r0, r1
 800b238:	4611      	mov	r1, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	602a      	str	r2, [r5, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f7f6 fa2a 	bl	8001698 <_read>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_read_r+0x1e>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_read_r+0x1e>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	20001b00 	.word	0x20001b00

0800b254 <_write_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	; (800b274 <_write_r+0x20>)
 800b258:	4604      	mov	r4, r0
 800b25a:	4608      	mov	r0, r1
 800b25c:	4611      	mov	r1, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	602a      	str	r2, [r5, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	f7f5 fe84 	bl	8000f70 <_write>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_write_r+0x1e>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_write_r+0x1e>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	20001b00 	.word	0x20001b00

0800b278 <__errno>:
 800b278:	4b01      	ldr	r3, [pc, #4]	; (800b280 <__errno+0x8>)
 800b27a:	6818      	ldr	r0, [r3, #0]
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000538 	.word	0x20000538

0800b284 <__libc_init_array>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	4d0d      	ldr	r5, [pc, #52]	; (800b2bc <__libc_init_array+0x38>)
 800b288:	4c0d      	ldr	r4, [pc, #52]	; (800b2c0 <__libc_init_array+0x3c>)
 800b28a:	1b64      	subs	r4, r4, r5
 800b28c:	10a4      	asrs	r4, r4, #2
 800b28e:	2600      	movs	r6, #0
 800b290:	42a6      	cmp	r6, r4
 800b292:	d109      	bne.n	800b2a8 <__libc_init_array+0x24>
 800b294:	4d0b      	ldr	r5, [pc, #44]	; (800b2c4 <__libc_init_array+0x40>)
 800b296:	4c0c      	ldr	r4, [pc, #48]	; (800b2c8 <__libc_init_array+0x44>)
 800b298:	f001 fac8 	bl	800c82c <_init>
 800b29c:	1b64      	subs	r4, r4, r5
 800b29e:	10a4      	asrs	r4, r4, #2
 800b2a0:	2600      	movs	r6, #0
 800b2a2:	42a6      	cmp	r6, r4
 800b2a4:	d105      	bne.n	800b2b2 <__libc_init_array+0x2e>
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ac:	4798      	blx	r3
 800b2ae:	3601      	adds	r6, #1
 800b2b0:	e7ee      	b.n	800b290 <__libc_init_array+0xc>
 800b2b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b6:	4798      	blx	r3
 800b2b8:	3601      	adds	r6, #1
 800b2ba:	e7f2      	b.n	800b2a2 <__libc_init_array+0x1e>
 800b2bc:	0800ccc4 	.word	0x0800ccc4
 800b2c0:	0800ccc4 	.word	0x0800ccc4
 800b2c4:	0800ccc4 	.word	0x0800ccc4
 800b2c8:	0800ccc8 	.word	0x0800ccc8

0800b2cc <__retarget_lock_init_recursive>:
 800b2cc:	4770      	bx	lr

0800b2ce <__retarget_lock_acquire_recursive>:
 800b2ce:	4770      	bx	lr

0800b2d0 <__retarget_lock_release_recursive>:
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <_free_r>:
 800b2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d044      	beq.n	800b364 <_free_r+0x90>
 800b2da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2de:	9001      	str	r0, [sp, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b2e6:	bfb8      	it	lt
 800b2e8:	18e4      	addlt	r4, r4, r3
 800b2ea:	f000 f8df 	bl	800b4ac <__malloc_lock>
 800b2ee:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <_free_r+0x94>)
 800b2f0:	9801      	ldr	r0, [sp, #4]
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x30>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	b003      	add	sp, #12
 800b2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b300:	f000 b8da 	b.w	800b4b8 <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x46>
 800b308:	6825      	ldr	r5, [r4, #0]
 800b30a:	1961      	adds	r1, r4, r5
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1949      	addeq	r1, r1, r5
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x22>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x50>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x46>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1855      	adds	r5, r2, r1
 800b328:	42a5      	cmp	r5, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x70>
 800b32c:	6824      	ldr	r4, [r4, #0]
 800b32e:	4421      	add	r1, r4
 800b330:	1854      	adds	r4, r2, r1
 800b332:	42a3      	cmp	r3, r4
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x26>
 800b338:	681c      	ldr	r4, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	6053      	str	r3, [r2, #4]
 800b33e:	440c      	add	r4, r1
 800b340:	6014      	str	r4, [r2, #0]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x26>
 800b344:	d902      	bls.n	800b34c <_free_r+0x78>
 800b346:	230c      	movs	r3, #12
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x26>
 800b34c:	6825      	ldr	r5, [r4, #0]
 800b34e:	1961      	adds	r1, r4, r5
 800b350:	428b      	cmp	r3, r1
 800b352:	bf04      	itt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	bf04      	itt	eq
 800b35c:	1949      	addeq	r1, r1, r5
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	6054      	str	r4, [r2, #4]
 800b362:	e7ca      	b.n	800b2fa <_free_r+0x26>
 800b364:	b003      	add	sp, #12
 800b366:	bd30      	pop	{r4, r5, pc}
 800b368:	20001b08 	.word	0x20001b08

0800b36c <sbrk_aligned>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	4e0e      	ldr	r6, [pc, #56]	; (800b3a8 <sbrk_aligned+0x3c>)
 800b370:	460c      	mov	r4, r1
 800b372:	6831      	ldr	r1, [r6, #0]
 800b374:	4605      	mov	r5, r0
 800b376:	b911      	cbnz	r1, 800b37e <sbrk_aligned+0x12>
 800b378:	f000 fe1c 	bl	800bfb4 <_sbrk_r>
 800b37c:	6030      	str	r0, [r6, #0]
 800b37e:	4621      	mov	r1, r4
 800b380:	4628      	mov	r0, r5
 800b382:	f000 fe17 	bl	800bfb4 <_sbrk_r>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d00a      	beq.n	800b3a0 <sbrk_aligned+0x34>
 800b38a:	1cc4      	adds	r4, r0, #3
 800b38c:	f024 0403 	bic.w	r4, r4, #3
 800b390:	42a0      	cmp	r0, r4
 800b392:	d007      	beq.n	800b3a4 <sbrk_aligned+0x38>
 800b394:	1a21      	subs	r1, r4, r0
 800b396:	4628      	mov	r0, r5
 800b398:	f000 fe0c 	bl	800bfb4 <_sbrk_r>
 800b39c:	3001      	adds	r0, #1
 800b39e:	d101      	bne.n	800b3a4 <sbrk_aligned+0x38>
 800b3a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	20001b0c 	.word	0x20001b0c

0800b3ac <_malloc_r>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	1ccd      	adds	r5, r1, #3
 800b3b2:	f025 0503 	bic.w	r5, r5, #3
 800b3b6:	3508      	adds	r5, #8
 800b3b8:	2d0c      	cmp	r5, #12
 800b3ba:	bf38      	it	cc
 800b3bc:	250c      	movcc	r5, #12
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	db01      	blt.n	800b3c8 <_malloc_r+0x1c>
 800b3c4:	42a9      	cmp	r1, r5
 800b3c6:	d905      	bls.n	800b3d4 <_malloc_r+0x28>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4a8 <_malloc_r+0xfc>
 800b3d8:	f000 f868 	bl	800b4ac <__malloc_lock>
 800b3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	bb5c      	cbnz	r4, 800b43c <_malloc_r+0x90>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ffc0 	bl	800b36c <sbrk_aligned>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	d155      	bne.n	800b49e <_malloc_r+0xf2>
 800b3f2:	f8d8 4000 	ldr.w	r4, [r8]
 800b3f6:	4626      	mov	r6, r4
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	d145      	bne.n	800b488 <_malloc_r+0xdc>
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d048      	beq.n	800b492 <_malloc_r+0xe6>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	4631      	mov	r1, r6
 800b404:	4638      	mov	r0, r7
 800b406:	eb04 0903 	add.w	r9, r4, r3
 800b40a:	f000 fdd3 	bl	800bfb4 <_sbrk_r>
 800b40e:	4581      	cmp	r9, r0
 800b410:	d13f      	bne.n	800b492 <_malloc_r+0xe6>
 800b412:	6821      	ldr	r1, [r4, #0]
 800b414:	1a6d      	subs	r5, r5, r1
 800b416:	4629      	mov	r1, r5
 800b418:	4638      	mov	r0, r7
 800b41a:	f7ff ffa7 	bl	800b36c <sbrk_aligned>
 800b41e:	3001      	adds	r0, #1
 800b420:	d037      	beq.n	800b492 <_malloc_r+0xe6>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	442b      	add	r3, r5
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	f8d8 3000 	ldr.w	r3, [r8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d038      	beq.n	800b4a2 <_malloc_r+0xf6>
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	42a2      	cmp	r2, r4
 800b434:	d12b      	bne.n	800b48e <_malloc_r+0xe2>
 800b436:	2200      	movs	r2, #0
 800b438:	605a      	str	r2, [r3, #4]
 800b43a:	e00f      	b.n	800b45c <_malloc_r+0xb0>
 800b43c:	6822      	ldr	r2, [r4, #0]
 800b43e:	1b52      	subs	r2, r2, r5
 800b440:	d41f      	bmi.n	800b482 <_malloc_r+0xd6>
 800b442:	2a0b      	cmp	r2, #11
 800b444:	d917      	bls.n	800b476 <_malloc_r+0xca>
 800b446:	1961      	adds	r1, r4, r5
 800b448:	42a3      	cmp	r3, r4
 800b44a:	6025      	str	r5, [r4, #0]
 800b44c:	bf18      	it	ne
 800b44e:	6059      	strne	r1, [r3, #4]
 800b450:	6863      	ldr	r3, [r4, #4]
 800b452:	bf08      	it	eq
 800b454:	f8c8 1000 	streq.w	r1, [r8]
 800b458:	5162      	str	r2, [r4, r5]
 800b45a:	604b      	str	r3, [r1, #4]
 800b45c:	4638      	mov	r0, r7
 800b45e:	f104 060b 	add.w	r6, r4, #11
 800b462:	f000 f829 	bl	800b4b8 <__malloc_unlock>
 800b466:	f026 0607 	bic.w	r6, r6, #7
 800b46a:	1d23      	adds	r3, r4, #4
 800b46c:	1af2      	subs	r2, r6, r3
 800b46e:	d0ae      	beq.n	800b3ce <_malloc_r+0x22>
 800b470:	1b9b      	subs	r3, r3, r6
 800b472:	50a3      	str	r3, [r4, r2]
 800b474:	e7ab      	b.n	800b3ce <_malloc_r+0x22>
 800b476:	42a3      	cmp	r3, r4
 800b478:	6862      	ldr	r2, [r4, #4]
 800b47a:	d1dd      	bne.n	800b438 <_malloc_r+0x8c>
 800b47c:	f8c8 2000 	str.w	r2, [r8]
 800b480:	e7ec      	b.n	800b45c <_malloc_r+0xb0>
 800b482:	4623      	mov	r3, r4
 800b484:	6864      	ldr	r4, [r4, #4]
 800b486:	e7ac      	b.n	800b3e2 <_malloc_r+0x36>
 800b488:	4634      	mov	r4, r6
 800b48a:	6876      	ldr	r6, [r6, #4]
 800b48c:	e7b4      	b.n	800b3f8 <_malloc_r+0x4c>
 800b48e:	4613      	mov	r3, r2
 800b490:	e7cc      	b.n	800b42c <_malloc_r+0x80>
 800b492:	230c      	movs	r3, #12
 800b494:	603b      	str	r3, [r7, #0]
 800b496:	4638      	mov	r0, r7
 800b498:	f000 f80e 	bl	800b4b8 <__malloc_unlock>
 800b49c:	e797      	b.n	800b3ce <_malloc_r+0x22>
 800b49e:	6025      	str	r5, [r4, #0]
 800b4a0:	e7dc      	b.n	800b45c <_malloc_r+0xb0>
 800b4a2:	605b      	str	r3, [r3, #4]
 800b4a4:	deff      	udf	#255	; 0xff
 800b4a6:	bf00      	nop
 800b4a8:	20001b08 	.word	0x20001b08

0800b4ac <__malloc_lock>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__malloc_lock+0x8>)
 800b4ae:	f7ff bf0e 	b.w	800b2ce <__retarget_lock_acquire_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20001b04 	.word	0x20001b04

0800b4b8 <__malloc_unlock>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <__malloc_unlock+0x8>)
 800b4ba:	f7ff bf09 	b.w	800b2d0 <__retarget_lock_release_recursive>
 800b4be:	bf00      	nop
 800b4c0:	20001b04 	.word	0x20001b04

0800b4c4 <__ssputs_r>:
 800b4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c8:	688e      	ldr	r6, [r1, #8]
 800b4ca:	461f      	mov	r7, r3
 800b4cc:	42be      	cmp	r6, r7
 800b4ce:	680b      	ldr	r3, [r1, #0]
 800b4d0:	4682      	mov	sl, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	4690      	mov	r8, r2
 800b4d6:	d82c      	bhi.n	800b532 <__ssputs_r+0x6e>
 800b4d8:	898a      	ldrh	r2, [r1, #12]
 800b4da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4de:	d026      	beq.n	800b52e <__ssputs_r+0x6a>
 800b4e0:	6965      	ldr	r5, [r4, #20]
 800b4e2:	6909      	ldr	r1, [r1, #16]
 800b4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e8:	eba3 0901 	sub.w	r9, r3, r1
 800b4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4f0:	1c7b      	adds	r3, r7, #1
 800b4f2:	444b      	add	r3, r9
 800b4f4:	106d      	asrs	r5, r5, #1
 800b4f6:	429d      	cmp	r5, r3
 800b4f8:	bf38      	it	cc
 800b4fa:	461d      	movcc	r5, r3
 800b4fc:	0553      	lsls	r3, r2, #21
 800b4fe:	d527      	bpl.n	800b550 <__ssputs_r+0x8c>
 800b500:	4629      	mov	r1, r5
 800b502:	f7ff ff53 	bl	800b3ac <_malloc_r>
 800b506:	4606      	mov	r6, r0
 800b508:	b360      	cbz	r0, 800b564 <__ssputs_r+0xa0>
 800b50a:	6921      	ldr	r1, [r4, #16]
 800b50c:	464a      	mov	r2, r9
 800b50e:	f000 fd61 	bl	800bfd4 <memcpy>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	6126      	str	r6, [r4, #16]
 800b520:	6165      	str	r5, [r4, #20]
 800b522:	444e      	add	r6, r9
 800b524:	eba5 0509 	sub.w	r5, r5, r9
 800b528:	6026      	str	r6, [r4, #0]
 800b52a:	60a5      	str	r5, [r4, #8]
 800b52c:	463e      	mov	r6, r7
 800b52e:	42be      	cmp	r6, r7
 800b530:	d900      	bls.n	800b534 <__ssputs_r+0x70>
 800b532:	463e      	mov	r6, r7
 800b534:	6820      	ldr	r0, [r4, #0]
 800b536:	4632      	mov	r2, r6
 800b538:	4641      	mov	r1, r8
 800b53a:	f000 fcff 	bl	800bf3c <memmove>
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	1b9b      	subs	r3, r3, r6
 800b542:	60a3      	str	r3, [r4, #8]
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	4433      	add	r3, r6
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	2000      	movs	r0, #0
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	462a      	mov	r2, r5
 800b552:	f000 fd4d 	bl	800bff0 <_realloc_r>
 800b556:	4606      	mov	r6, r0
 800b558:	2800      	cmp	r0, #0
 800b55a:	d1e0      	bne.n	800b51e <__ssputs_r+0x5a>
 800b55c:	6921      	ldr	r1, [r4, #16]
 800b55e:	4650      	mov	r0, sl
 800b560:	f7ff feb8 	bl	800b2d4 <_free_r>
 800b564:	230c      	movs	r3, #12
 800b566:	f8ca 3000 	str.w	r3, [sl]
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b576:	e7e9      	b.n	800b54c <__ssputs_r+0x88>

0800b578 <_svfiprintf_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	4698      	mov	r8, r3
 800b57e:	898b      	ldrh	r3, [r1, #12]
 800b580:	061b      	lsls	r3, r3, #24
 800b582:	b09d      	sub	sp, #116	; 0x74
 800b584:	4607      	mov	r7, r0
 800b586:	460d      	mov	r5, r1
 800b588:	4614      	mov	r4, r2
 800b58a:	d50e      	bpl.n	800b5aa <_svfiprintf_r+0x32>
 800b58c:	690b      	ldr	r3, [r1, #16]
 800b58e:	b963      	cbnz	r3, 800b5aa <_svfiprintf_r+0x32>
 800b590:	2140      	movs	r1, #64	; 0x40
 800b592:	f7ff ff0b 	bl	800b3ac <_malloc_r>
 800b596:	6028      	str	r0, [r5, #0]
 800b598:	6128      	str	r0, [r5, #16]
 800b59a:	b920      	cbnz	r0, 800b5a6 <_svfiprintf_r+0x2e>
 800b59c:	230c      	movs	r3, #12
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5a4:	e0d0      	b.n	800b748 <_svfiprintf_r+0x1d0>
 800b5a6:	2340      	movs	r3, #64	; 0x40
 800b5a8:	616b      	str	r3, [r5, #20]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b8:	2330      	movs	r3, #48	; 0x30
 800b5ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b760 <_svfiprintf_r+0x1e8>
 800b5be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5c2:	f04f 0901 	mov.w	r9, #1
 800b5c6:	4623      	mov	r3, r4
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ce:	b10a      	cbz	r2, 800b5d4 <_svfiprintf_r+0x5c>
 800b5d0:	2a25      	cmp	r2, #37	; 0x25
 800b5d2:	d1f9      	bne.n	800b5c8 <_svfiprintf_r+0x50>
 800b5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d8:	d00b      	beq.n	800b5f2 <_svfiprintf_r+0x7a>
 800b5da:	465b      	mov	r3, fp
 800b5dc:	4622      	mov	r2, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff ff6f 	bl	800b4c4 <__ssputs_r>
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f000 80a9 	beq.w	800b73e <_svfiprintf_r+0x1c6>
 800b5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ee:	445a      	add	r2, fp
 800b5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 80a1 	beq.w	800b73e <_svfiprintf_r+0x1c6>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b606:	f10a 0a01 	add.w	sl, sl, #1
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	9307      	str	r3, [sp, #28]
 800b60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b612:	931a      	str	r3, [sp, #104]	; 0x68
 800b614:	4654      	mov	r4, sl
 800b616:	2205      	movs	r2, #5
 800b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61c:	4850      	ldr	r0, [pc, #320]	; (800b760 <_svfiprintf_r+0x1e8>)
 800b61e:	f7f4 fde7 	bl	80001f0 <memchr>
 800b622:	9a04      	ldr	r2, [sp, #16]
 800b624:	b9d8      	cbnz	r0, 800b65e <_svfiprintf_r+0xe6>
 800b626:	06d0      	lsls	r0, r2, #27
 800b628:	bf44      	itt	mi
 800b62a:	2320      	movmi	r3, #32
 800b62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b630:	0711      	lsls	r1, r2, #28
 800b632:	bf44      	itt	mi
 800b634:	232b      	movmi	r3, #43	; 0x2b
 800b636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b2a      	cmp	r3, #42	; 0x2a
 800b640:	d015      	beq.n	800b66e <_svfiprintf_r+0xf6>
 800b642:	9a07      	ldr	r2, [sp, #28]
 800b644:	4654      	mov	r4, sl
 800b646:	2000      	movs	r0, #0
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4621      	mov	r1, r4
 800b64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b652:	3b30      	subs	r3, #48	; 0x30
 800b654:	2b09      	cmp	r3, #9
 800b656:	d94d      	bls.n	800b6f4 <_svfiprintf_r+0x17c>
 800b658:	b1b0      	cbz	r0, 800b688 <_svfiprintf_r+0x110>
 800b65a:	9207      	str	r2, [sp, #28]
 800b65c:	e014      	b.n	800b688 <_svfiprintf_r+0x110>
 800b65e:	eba0 0308 	sub.w	r3, r0, r8
 800b662:	fa09 f303 	lsl.w	r3, r9, r3
 800b666:	4313      	orrs	r3, r2
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	46a2      	mov	sl, r4
 800b66c:	e7d2      	b.n	800b614 <_svfiprintf_r+0x9c>
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	1d19      	adds	r1, r3, #4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	9103      	str	r1, [sp, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfbb      	ittet	lt
 800b67a:	425b      	neglt	r3, r3
 800b67c:	f042 0202 	orrlt.w	r2, r2, #2
 800b680:	9307      	strge	r3, [sp, #28]
 800b682:	9307      	strlt	r3, [sp, #28]
 800b684:	bfb8      	it	lt
 800b686:	9204      	strlt	r2, [sp, #16]
 800b688:	7823      	ldrb	r3, [r4, #0]
 800b68a:	2b2e      	cmp	r3, #46	; 0x2e
 800b68c:	d10c      	bne.n	800b6a8 <_svfiprintf_r+0x130>
 800b68e:	7863      	ldrb	r3, [r4, #1]
 800b690:	2b2a      	cmp	r3, #42	; 0x2a
 800b692:	d134      	bne.n	800b6fe <_svfiprintf_r+0x186>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	9203      	str	r2, [sp, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfb8      	it	lt
 800b6a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6a4:	3402      	adds	r4, #2
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b770 <_svfiprintf_r+0x1f8>
 800b6ac:	7821      	ldrb	r1, [r4, #0]
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	f7f4 fd9d 	bl	80001f0 <memchr>
 800b6b6:	b138      	cbz	r0, 800b6c8 <_svfiprintf_r+0x150>
 800b6b8:	9b04      	ldr	r3, [sp, #16]
 800b6ba:	eba0 000a 	sub.w	r0, r0, sl
 800b6be:	2240      	movs	r2, #64	; 0x40
 800b6c0:	4082      	lsls	r2, r0
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	3401      	adds	r4, #1
 800b6c6:	9304      	str	r3, [sp, #16]
 800b6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6cc:	4825      	ldr	r0, [pc, #148]	; (800b764 <_svfiprintf_r+0x1ec>)
 800b6ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6d2:	2206      	movs	r2, #6
 800b6d4:	f7f4 fd8c 	bl	80001f0 <memchr>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d038      	beq.n	800b74e <_svfiprintf_r+0x1d6>
 800b6dc:	4b22      	ldr	r3, [pc, #136]	; (800b768 <_svfiprintf_r+0x1f0>)
 800b6de:	bb1b      	cbnz	r3, 800b728 <_svfiprintf_r+0x1b0>
 800b6e0:	9b03      	ldr	r3, [sp, #12]
 800b6e2:	3307      	adds	r3, #7
 800b6e4:	f023 0307 	bic.w	r3, r3, #7
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	9303      	str	r3, [sp, #12]
 800b6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ee:	4433      	add	r3, r6
 800b6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f2:	e768      	b.n	800b5c6 <_svfiprintf_r+0x4e>
 800b6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	2001      	movs	r0, #1
 800b6fc:	e7a6      	b.n	800b64c <_svfiprintf_r+0xd4>
 800b6fe:	2300      	movs	r3, #0
 800b700:	3401      	adds	r4, #1
 800b702:	9305      	str	r3, [sp, #20]
 800b704:	4619      	mov	r1, r3
 800b706:	f04f 0c0a 	mov.w	ip, #10
 800b70a:	4620      	mov	r0, r4
 800b70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b710:	3a30      	subs	r2, #48	; 0x30
 800b712:	2a09      	cmp	r2, #9
 800b714:	d903      	bls.n	800b71e <_svfiprintf_r+0x1a6>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0c6      	beq.n	800b6a8 <_svfiprintf_r+0x130>
 800b71a:	9105      	str	r1, [sp, #20]
 800b71c:	e7c4      	b.n	800b6a8 <_svfiprintf_r+0x130>
 800b71e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b722:	4604      	mov	r4, r0
 800b724:	2301      	movs	r3, #1
 800b726:	e7f0      	b.n	800b70a <_svfiprintf_r+0x192>
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <_svfiprintf_r+0x1f4>)
 800b730:	a904      	add	r1, sp, #16
 800b732:	4638      	mov	r0, r7
 800b734:	f3af 8000 	nop.w
 800b738:	1c42      	adds	r2, r0, #1
 800b73a:	4606      	mov	r6, r0
 800b73c:	d1d6      	bne.n	800b6ec <_svfiprintf_r+0x174>
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	065b      	lsls	r3, r3, #25
 800b742:	f53f af2d 	bmi.w	800b5a0 <_svfiprintf_r+0x28>
 800b746:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b748:	b01d      	add	sp, #116	; 0x74
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74e:	ab03      	add	r3, sp, #12
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	462a      	mov	r2, r5
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <_svfiprintf_r+0x1f4>)
 800b756:	a904      	add	r1, sp, #16
 800b758:	4638      	mov	r0, r7
 800b75a:	f000 f9bd 	bl	800bad8 <_printf_i>
 800b75e:	e7eb      	b.n	800b738 <_svfiprintf_r+0x1c0>
 800b760:	0800cc70 	.word	0x0800cc70
 800b764:	0800cc7a 	.word	0x0800cc7a
 800b768:	00000000 	.word	0x00000000
 800b76c:	0800b4c5 	.word	0x0800b4c5
 800b770:	0800cc76 	.word	0x0800cc76

0800b774 <__sfputc_r>:
 800b774:	6893      	ldr	r3, [r2, #8]
 800b776:	3b01      	subs	r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	b410      	push	{r4}
 800b77c:	6093      	str	r3, [r2, #8]
 800b77e:	da08      	bge.n	800b792 <__sfputc_r+0x1e>
 800b780:	6994      	ldr	r4, [r2, #24]
 800b782:	42a3      	cmp	r3, r4
 800b784:	db01      	blt.n	800b78a <__sfputc_r+0x16>
 800b786:	290a      	cmp	r1, #10
 800b788:	d103      	bne.n	800b792 <__sfputc_r+0x1e>
 800b78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b78e:	f7ff bc8f 	b.w	800b0b0 <__swbuf_r>
 800b792:	6813      	ldr	r3, [r2, #0]
 800b794:	1c58      	adds	r0, r3, #1
 800b796:	6010      	str	r0, [r2, #0]
 800b798:	7019      	strb	r1, [r3, #0]
 800b79a:	4608      	mov	r0, r1
 800b79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <__sfputs_r>:
 800b7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	460f      	mov	r7, r1
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	18d5      	adds	r5, r2, r3
 800b7ac:	42ac      	cmp	r4, r5
 800b7ae:	d101      	bne.n	800b7b4 <__sfputs_r+0x12>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e007      	b.n	800b7c4 <__sfputs_r+0x22>
 800b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b8:	463a      	mov	r2, r7
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f7ff ffda 	bl	800b774 <__sfputc_r>
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	d1f3      	bne.n	800b7ac <__sfputs_r+0xa>
 800b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7c8 <_vfiprintf_r>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	b09d      	sub	sp, #116	; 0x74
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	4698      	mov	r8, r3
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	b118      	cbz	r0, 800b7e0 <_vfiprintf_r+0x18>
 800b7d8:	6a03      	ldr	r3, [r0, #32]
 800b7da:	b90b      	cbnz	r3, 800b7e0 <_vfiprintf_r+0x18>
 800b7dc:	f7ff fb48 	bl	800ae70 <__sinit>
 800b7e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e2:	07d9      	lsls	r1, r3, #31
 800b7e4:	d405      	bmi.n	800b7f2 <_vfiprintf_r+0x2a>
 800b7e6:	89ab      	ldrh	r3, [r5, #12]
 800b7e8:	059a      	lsls	r2, r3, #22
 800b7ea:	d402      	bmi.n	800b7f2 <_vfiprintf_r+0x2a>
 800b7ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ee:	f7ff fd6e 	bl	800b2ce <__retarget_lock_acquire_recursive>
 800b7f2:	89ab      	ldrh	r3, [r5, #12]
 800b7f4:	071b      	lsls	r3, r3, #28
 800b7f6:	d501      	bpl.n	800b7fc <_vfiprintf_r+0x34>
 800b7f8:	692b      	ldr	r3, [r5, #16]
 800b7fa:	b99b      	cbnz	r3, 800b824 <_vfiprintf_r+0x5c>
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff fc94 	bl	800b12c <__swsetup_r>
 800b804:	b170      	cbz	r0, 800b824 <_vfiprintf_r+0x5c>
 800b806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b808:	07dc      	lsls	r4, r3, #31
 800b80a:	d504      	bpl.n	800b816 <_vfiprintf_r+0x4e>
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b810:	b01d      	add	sp, #116	; 0x74
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b816:	89ab      	ldrh	r3, [r5, #12]
 800b818:	0598      	lsls	r0, r3, #22
 800b81a:	d4f7      	bmi.n	800b80c <_vfiprintf_r+0x44>
 800b81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b81e:	f7ff fd57 	bl	800b2d0 <__retarget_lock_release_recursive>
 800b822:	e7f3      	b.n	800b80c <_vfiprintf_r+0x44>
 800b824:	2300      	movs	r3, #0
 800b826:	9309      	str	r3, [sp, #36]	; 0x24
 800b828:	2320      	movs	r3, #32
 800b82a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b832:	2330      	movs	r3, #48	; 0x30
 800b834:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b9e8 <_vfiprintf_r+0x220>
 800b838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b83c:	f04f 0901 	mov.w	r9, #1
 800b840:	4623      	mov	r3, r4
 800b842:	469a      	mov	sl, r3
 800b844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b848:	b10a      	cbz	r2, 800b84e <_vfiprintf_r+0x86>
 800b84a:	2a25      	cmp	r2, #37	; 0x25
 800b84c:	d1f9      	bne.n	800b842 <_vfiprintf_r+0x7a>
 800b84e:	ebba 0b04 	subs.w	fp, sl, r4
 800b852:	d00b      	beq.n	800b86c <_vfiprintf_r+0xa4>
 800b854:	465b      	mov	r3, fp
 800b856:	4622      	mov	r2, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7ff ffa1 	bl	800b7a2 <__sfputs_r>
 800b860:	3001      	adds	r0, #1
 800b862:	f000 80a9 	beq.w	800b9b8 <_vfiprintf_r+0x1f0>
 800b866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b868:	445a      	add	r2, fp
 800b86a:	9209      	str	r2, [sp, #36]	; 0x24
 800b86c:	f89a 3000 	ldrb.w	r3, [sl]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 80a1 	beq.w	800b9b8 <_vfiprintf_r+0x1f0>
 800b876:	2300      	movs	r3, #0
 800b878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b880:	f10a 0a01 	add.w	sl, sl, #1
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	9307      	str	r3, [sp, #28]
 800b888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b88c:	931a      	str	r3, [sp, #104]	; 0x68
 800b88e:	4654      	mov	r4, sl
 800b890:	2205      	movs	r2, #5
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	4854      	ldr	r0, [pc, #336]	; (800b9e8 <_vfiprintf_r+0x220>)
 800b898:	f7f4 fcaa 	bl	80001f0 <memchr>
 800b89c:	9a04      	ldr	r2, [sp, #16]
 800b89e:	b9d8      	cbnz	r0, 800b8d8 <_vfiprintf_r+0x110>
 800b8a0:	06d1      	lsls	r1, r2, #27
 800b8a2:	bf44      	itt	mi
 800b8a4:	2320      	movmi	r3, #32
 800b8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8aa:	0713      	lsls	r3, r2, #28
 800b8ac:	bf44      	itt	mi
 800b8ae:	232b      	movmi	r3, #43	; 0x2b
 800b8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ba:	d015      	beq.n	800b8e8 <_vfiprintf_r+0x120>
 800b8bc:	9a07      	ldr	r2, [sp, #28]
 800b8be:	4654      	mov	r4, sl
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	f04f 0c0a 	mov.w	ip, #10
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8cc:	3b30      	subs	r3, #48	; 0x30
 800b8ce:	2b09      	cmp	r3, #9
 800b8d0:	d94d      	bls.n	800b96e <_vfiprintf_r+0x1a6>
 800b8d2:	b1b0      	cbz	r0, 800b902 <_vfiprintf_r+0x13a>
 800b8d4:	9207      	str	r2, [sp, #28]
 800b8d6:	e014      	b.n	800b902 <_vfiprintf_r+0x13a>
 800b8d8:	eba0 0308 	sub.w	r3, r0, r8
 800b8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	46a2      	mov	sl, r4
 800b8e6:	e7d2      	b.n	800b88e <_vfiprintf_r+0xc6>
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	1d19      	adds	r1, r3, #4
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	9103      	str	r1, [sp, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	bfbb      	ittet	lt
 800b8f4:	425b      	neglt	r3, r3
 800b8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8fa:	9307      	strge	r3, [sp, #28]
 800b8fc:	9307      	strlt	r3, [sp, #28]
 800b8fe:	bfb8      	it	lt
 800b900:	9204      	strlt	r2, [sp, #16]
 800b902:	7823      	ldrb	r3, [r4, #0]
 800b904:	2b2e      	cmp	r3, #46	; 0x2e
 800b906:	d10c      	bne.n	800b922 <_vfiprintf_r+0x15a>
 800b908:	7863      	ldrb	r3, [r4, #1]
 800b90a:	2b2a      	cmp	r3, #42	; 0x2a
 800b90c:	d134      	bne.n	800b978 <_vfiprintf_r+0x1b0>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	9203      	str	r2, [sp, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bfb8      	it	lt
 800b91a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b91e:	3402      	adds	r4, #2
 800b920:	9305      	str	r3, [sp, #20]
 800b922:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b9f8 <_vfiprintf_r+0x230>
 800b926:	7821      	ldrb	r1, [r4, #0]
 800b928:	2203      	movs	r2, #3
 800b92a:	4650      	mov	r0, sl
 800b92c:	f7f4 fc60 	bl	80001f0 <memchr>
 800b930:	b138      	cbz	r0, 800b942 <_vfiprintf_r+0x17a>
 800b932:	9b04      	ldr	r3, [sp, #16]
 800b934:	eba0 000a 	sub.w	r0, r0, sl
 800b938:	2240      	movs	r2, #64	; 0x40
 800b93a:	4082      	lsls	r2, r0
 800b93c:	4313      	orrs	r3, r2
 800b93e:	3401      	adds	r4, #1
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b946:	4829      	ldr	r0, [pc, #164]	; (800b9ec <_vfiprintf_r+0x224>)
 800b948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b94c:	2206      	movs	r2, #6
 800b94e:	f7f4 fc4f 	bl	80001f0 <memchr>
 800b952:	2800      	cmp	r0, #0
 800b954:	d03f      	beq.n	800b9d6 <_vfiprintf_r+0x20e>
 800b956:	4b26      	ldr	r3, [pc, #152]	; (800b9f0 <_vfiprintf_r+0x228>)
 800b958:	bb1b      	cbnz	r3, 800b9a2 <_vfiprintf_r+0x1da>
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	3307      	adds	r3, #7
 800b95e:	f023 0307 	bic.w	r3, r3, #7
 800b962:	3308      	adds	r3, #8
 800b964:	9303      	str	r3, [sp, #12]
 800b966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b968:	443b      	add	r3, r7
 800b96a:	9309      	str	r3, [sp, #36]	; 0x24
 800b96c:	e768      	b.n	800b840 <_vfiprintf_r+0x78>
 800b96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b972:	460c      	mov	r4, r1
 800b974:	2001      	movs	r0, #1
 800b976:	e7a6      	b.n	800b8c6 <_vfiprintf_r+0xfe>
 800b978:	2300      	movs	r3, #0
 800b97a:	3401      	adds	r4, #1
 800b97c:	9305      	str	r3, [sp, #20]
 800b97e:	4619      	mov	r1, r3
 800b980:	f04f 0c0a 	mov.w	ip, #10
 800b984:	4620      	mov	r0, r4
 800b986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b98a:	3a30      	subs	r2, #48	; 0x30
 800b98c:	2a09      	cmp	r2, #9
 800b98e:	d903      	bls.n	800b998 <_vfiprintf_r+0x1d0>
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0c6      	beq.n	800b922 <_vfiprintf_r+0x15a>
 800b994:	9105      	str	r1, [sp, #20]
 800b996:	e7c4      	b.n	800b922 <_vfiprintf_r+0x15a>
 800b998:	fb0c 2101 	mla	r1, ip, r1, r2
 800b99c:	4604      	mov	r4, r0
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e7f0      	b.n	800b984 <_vfiprintf_r+0x1bc>
 800b9a2:	ab03      	add	r3, sp, #12
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <_vfiprintf_r+0x22c>)
 800b9aa:	a904      	add	r1, sp, #16
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f3af 8000 	nop.w
 800b9b2:	4607      	mov	r7, r0
 800b9b4:	1c78      	adds	r0, r7, #1
 800b9b6:	d1d6      	bne.n	800b966 <_vfiprintf_r+0x19e>
 800b9b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ba:	07d9      	lsls	r1, r3, #31
 800b9bc:	d405      	bmi.n	800b9ca <_vfiprintf_r+0x202>
 800b9be:	89ab      	ldrh	r3, [r5, #12]
 800b9c0:	059a      	lsls	r2, r3, #22
 800b9c2:	d402      	bmi.n	800b9ca <_vfiprintf_r+0x202>
 800b9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9c6:	f7ff fc83 	bl	800b2d0 <__retarget_lock_release_recursive>
 800b9ca:	89ab      	ldrh	r3, [r5, #12]
 800b9cc:	065b      	lsls	r3, r3, #25
 800b9ce:	f53f af1d 	bmi.w	800b80c <_vfiprintf_r+0x44>
 800b9d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d4:	e71c      	b.n	800b810 <_vfiprintf_r+0x48>
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <_vfiprintf_r+0x22c>)
 800b9de:	a904      	add	r1, sp, #16
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f000 f879 	bl	800bad8 <_printf_i>
 800b9e6:	e7e4      	b.n	800b9b2 <_vfiprintf_r+0x1ea>
 800b9e8:	0800cc70 	.word	0x0800cc70
 800b9ec:	0800cc7a 	.word	0x0800cc7a
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	0800b7a3 	.word	0x0800b7a3
 800b9f8:	0800cc76 	.word	0x0800cc76

0800b9fc <_printf_common>:
 800b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba00:	4616      	mov	r6, r2
 800ba02:	4699      	mov	r9, r3
 800ba04:	688a      	ldr	r2, [r1, #8]
 800ba06:	690b      	ldr	r3, [r1, #16]
 800ba08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	bfb8      	it	lt
 800ba10:	4613      	movlt	r3, r2
 800ba12:	6033      	str	r3, [r6, #0]
 800ba14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba18:	4607      	mov	r7, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	b10a      	cbz	r2, 800ba22 <_printf_common+0x26>
 800ba1e:	3301      	adds	r3, #1
 800ba20:	6033      	str	r3, [r6, #0]
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	0699      	lsls	r1, r3, #26
 800ba26:	bf42      	ittt	mi
 800ba28:	6833      	ldrmi	r3, [r6, #0]
 800ba2a:	3302      	addmi	r3, #2
 800ba2c:	6033      	strmi	r3, [r6, #0]
 800ba2e:	6825      	ldr	r5, [r4, #0]
 800ba30:	f015 0506 	ands.w	r5, r5, #6
 800ba34:	d106      	bne.n	800ba44 <_printf_common+0x48>
 800ba36:	f104 0a19 	add.w	sl, r4, #25
 800ba3a:	68e3      	ldr	r3, [r4, #12]
 800ba3c:	6832      	ldr	r2, [r6, #0]
 800ba3e:	1a9b      	subs	r3, r3, r2
 800ba40:	42ab      	cmp	r3, r5
 800ba42:	dc26      	bgt.n	800ba92 <_printf_common+0x96>
 800ba44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba48:	1e13      	subs	r3, r2, #0
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	bf18      	it	ne
 800ba4e:	2301      	movne	r3, #1
 800ba50:	0692      	lsls	r2, r2, #26
 800ba52:	d42b      	bmi.n	800baac <_printf_common+0xb0>
 800ba54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba58:	4649      	mov	r1, r9
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	47c0      	blx	r8
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d01e      	beq.n	800baa0 <_printf_common+0xa4>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	6922      	ldr	r2, [r4, #16]
 800ba66:	f003 0306 	and.w	r3, r3, #6
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	bf02      	ittt	eq
 800ba6e:	68e5      	ldreq	r5, [r4, #12]
 800ba70:	6833      	ldreq	r3, [r6, #0]
 800ba72:	1aed      	subeq	r5, r5, r3
 800ba74:	68a3      	ldr	r3, [r4, #8]
 800ba76:	bf0c      	ite	eq
 800ba78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba7c:	2500      	movne	r5, #0
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	bfc4      	itt	gt
 800ba82:	1a9b      	subgt	r3, r3, r2
 800ba84:	18ed      	addgt	r5, r5, r3
 800ba86:	2600      	movs	r6, #0
 800ba88:	341a      	adds	r4, #26
 800ba8a:	42b5      	cmp	r5, r6
 800ba8c:	d11a      	bne.n	800bac4 <_printf_common+0xc8>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e008      	b.n	800baa4 <_printf_common+0xa8>
 800ba92:	2301      	movs	r3, #1
 800ba94:	4652      	mov	r2, sl
 800ba96:	4649      	mov	r1, r9
 800ba98:	4638      	mov	r0, r7
 800ba9a:	47c0      	blx	r8
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	d103      	bne.n	800baa8 <_printf_common+0xac>
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa8:	3501      	adds	r5, #1
 800baaa:	e7c6      	b.n	800ba3a <_printf_common+0x3e>
 800baac:	18e1      	adds	r1, r4, r3
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	2030      	movs	r0, #48	; 0x30
 800bab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bab6:	4422      	add	r2, r4
 800bab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800babc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bac0:	3302      	adds	r3, #2
 800bac2:	e7c7      	b.n	800ba54 <_printf_common+0x58>
 800bac4:	2301      	movs	r3, #1
 800bac6:	4622      	mov	r2, r4
 800bac8:	4649      	mov	r1, r9
 800baca:	4638      	mov	r0, r7
 800bacc:	47c0      	blx	r8
 800bace:	3001      	adds	r0, #1
 800bad0:	d0e6      	beq.n	800baa0 <_printf_common+0xa4>
 800bad2:	3601      	adds	r6, #1
 800bad4:	e7d9      	b.n	800ba8a <_printf_common+0x8e>
	...

0800bad8 <_printf_i>:
 800bad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	7e0f      	ldrb	r7, [r1, #24]
 800bade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bae0:	2f78      	cmp	r7, #120	; 0x78
 800bae2:	4691      	mov	r9, r2
 800bae4:	4680      	mov	r8, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	469a      	mov	sl, r3
 800baea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baee:	d807      	bhi.n	800bb00 <_printf_i+0x28>
 800baf0:	2f62      	cmp	r7, #98	; 0x62
 800baf2:	d80a      	bhi.n	800bb0a <_printf_i+0x32>
 800baf4:	2f00      	cmp	r7, #0
 800baf6:	f000 80d4 	beq.w	800bca2 <_printf_i+0x1ca>
 800bafa:	2f58      	cmp	r7, #88	; 0x58
 800bafc:	f000 80c0 	beq.w	800bc80 <_printf_i+0x1a8>
 800bb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb08:	e03a      	b.n	800bb80 <_printf_i+0xa8>
 800bb0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb0e:	2b15      	cmp	r3, #21
 800bb10:	d8f6      	bhi.n	800bb00 <_printf_i+0x28>
 800bb12:	a101      	add	r1, pc, #4	; (adr r1, 800bb18 <_printf_i+0x40>)
 800bb14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb18:	0800bb71 	.word	0x0800bb71
 800bb1c:	0800bb85 	.word	0x0800bb85
 800bb20:	0800bb01 	.word	0x0800bb01
 800bb24:	0800bb01 	.word	0x0800bb01
 800bb28:	0800bb01 	.word	0x0800bb01
 800bb2c:	0800bb01 	.word	0x0800bb01
 800bb30:	0800bb85 	.word	0x0800bb85
 800bb34:	0800bb01 	.word	0x0800bb01
 800bb38:	0800bb01 	.word	0x0800bb01
 800bb3c:	0800bb01 	.word	0x0800bb01
 800bb40:	0800bb01 	.word	0x0800bb01
 800bb44:	0800bc89 	.word	0x0800bc89
 800bb48:	0800bbb1 	.word	0x0800bbb1
 800bb4c:	0800bc43 	.word	0x0800bc43
 800bb50:	0800bb01 	.word	0x0800bb01
 800bb54:	0800bb01 	.word	0x0800bb01
 800bb58:	0800bcab 	.word	0x0800bcab
 800bb5c:	0800bb01 	.word	0x0800bb01
 800bb60:	0800bbb1 	.word	0x0800bbb1
 800bb64:	0800bb01 	.word	0x0800bb01
 800bb68:	0800bb01 	.word	0x0800bb01
 800bb6c:	0800bc4b 	.word	0x0800bc4b
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	1d1a      	adds	r2, r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	602a      	str	r2, [r5, #0]
 800bb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb80:	2301      	movs	r3, #1
 800bb82:	e09f      	b.n	800bcc4 <_printf_i+0x1ec>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	682b      	ldr	r3, [r5, #0]
 800bb88:	0607      	lsls	r7, r0, #24
 800bb8a:	f103 0104 	add.w	r1, r3, #4
 800bb8e:	6029      	str	r1, [r5, #0]
 800bb90:	d501      	bpl.n	800bb96 <_printf_i+0xbe>
 800bb92:	681e      	ldr	r6, [r3, #0]
 800bb94:	e003      	b.n	800bb9e <_printf_i+0xc6>
 800bb96:	0646      	lsls	r6, r0, #25
 800bb98:	d5fb      	bpl.n	800bb92 <_printf_i+0xba>
 800bb9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	da03      	bge.n	800bbaa <_printf_i+0xd2>
 800bba2:	232d      	movs	r3, #45	; 0x2d
 800bba4:	4276      	negs	r6, r6
 800bba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbaa:	485a      	ldr	r0, [pc, #360]	; (800bd14 <_printf_i+0x23c>)
 800bbac:	230a      	movs	r3, #10
 800bbae:	e012      	b.n	800bbd6 <_printf_i+0xfe>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	6820      	ldr	r0, [r4, #0]
 800bbb4:	1d19      	adds	r1, r3, #4
 800bbb6:	6029      	str	r1, [r5, #0]
 800bbb8:	0605      	lsls	r5, r0, #24
 800bbba:	d501      	bpl.n	800bbc0 <_printf_i+0xe8>
 800bbbc:	681e      	ldr	r6, [r3, #0]
 800bbbe:	e002      	b.n	800bbc6 <_printf_i+0xee>
 800bbc0:	0641      	lsls	r1, r0, #25
 800bbc2:	d5fb      	bpl.n	800bbbc <_printf_i+0xe4>
 800bbc4:	881e      	ldrh	r6, [r3, #0]
 800bbc6:	4853      	ldr	r0, [pc, #332]	; (800bd14 <_printf_i+0x23c>)
 800bbc8:	2f6f      	cmp	r7, #111	; 0x6f
 800bbca:	bf0c      	ite	eq
 800bbcc:	2308      	moveq	r3, #8
 800bbce:	230a      	movne	r3, #10
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbd6:	6865      	ldr	r5, [r4, #4]
 800bbd8:	60a5      	str	r5, [r4, #8]
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	bfa2      	ittt	ge
 800bbde:	6821      	ldrge	r1, [r4, #0]
 800bbe0:	f021 0104 	bicge.w	r1, r1, #4
 800bbe4:	6021      	strge	r1, [r4, #0]
 800bbe6:	b90e      	cbnz	r6, 800bbec <_printf_i+0x114>
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	d04b      	beq.n	800bc84 <_printf_i+0x1ac>
 800bbec:	4615      	mov	r5, r2
 800bbee:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbf2:	fb03 6711 	mls	r7, r3, r1, r6
 800bbf6:	5dc7      	ldrb	r7, [r0, r7]
 800bbf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbfc:	4637      	mov	r7, r6
 800bbfe:	42bb      	cmp	r3, r7
 800bc00:	460e      	mov	r6, r1
 800bc02:	d9f4      	bls.n	800bbee <_printf_i+0x116>
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d10b      	bne.n	800bc20 <_printf_i+0x148>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	07de      	lsls	r6, r3, #31
 800bc0c:	d508      	bpl.n	800bc20 <_printf_i+0x148>
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	6861      	ldr	r1, [r4, #4]
 800bc12:	4299      	cmp	r1, r3
 800bc14:	bfde      	ittt	le
 800bc16:	2330      	movle	r3, #48	; 0x30
 800bc18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc20:	1b52      	subs	r2, r2, r5
 800bc22:	6122      	str	r2, [r4, #16]
 800bc24:	f8cd a000 	str.w	sl, [sp]
 800bc28:	464b      	mov	r3, r9
 800bc2a:	aa03      	add	r2, sp, #12
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4640      	mov	r0, r8
 800bc30:	f7ff fee4 	bl	800b9fc <_printf_common>
 800bc34:	3001      	adds	r0, #1
 800bc36:	d14a      	bne.n	800bcce <_printf_i+0x1f6>
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc3c:	b004      	add	sp, #16
 800bc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	f043 0320 	orr.w	r3, r3, #32
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	4833      	ldr	r0, [pc, #204]	; (800bd18 <_printf_i+0x240>)
 800bc4c:	2778      	movs	r7, #120	; 0x78
 800bc4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	6829      	ldr	r1, [r5, #0]
 800bc56:	061f      	lsls	r7, r3, #24
 800bc58:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc5c:	d402      	bmi.n	800bc64 <_printf_i+0x18c>
 800bc5e:	065f      	lsls	r7, r3, #25
 800bc60:	bf48      	it	mi
 800bc62:	b2b6      	uxthmi	r6, r6
 800bc64:	07df      	lsls	r7, r3, #31
 800bc66:	bf48      	it	mi
 800bc68:	f043 0320 	orrmi.w	r3, r3, #32
 800bc6c:	6029      	str	r1, [r5, #0]
 800bc6e:	bf48      	it	mi
 800bc70:	6023      	strmi	r3, [r4, #0]
 800bc72:	b91e      	cbnz	r6, 800bc7c <_printf_i+0x1a4>
 800bc74:	6823      	ldr	r3, [r4, #0]
 800bc76:	f023 0320 	bic.w	r3, r3, #32
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	2310      	movs	r3, #16
 800bc7e:	e7a7      	b.n	800bbd0 <_printf_i+0xf8>
 800bc80:	4824      	ldr	r0, [pc, #144]	; (800bd14 <_printf_i+0x23c>)
 800bc82:	e7e4      	b.n	800bc4e <_printf_i+0x176>
 800bc84:	4615      	mov	r5, r2
 800bc86:	e7bd      	b.n	800bc04 <_printf_i+0x12c>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	6826      	ldr	r6, [r4, #0]
 800bc8c:	6961      	ldr	r1, [r4, #20]
 800bc8e:	1d18      	adds	r0, r3, #4
 800bc90:	6028      	str	r0, [r5, #0]
 800bc92:	0635      	lsls	r5, r6, #24
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	d501      	bpl.n	800bc9c <_printf_i+0x1c4>
 800bc98:	6019      	str	r1, [r3, #0]
 800bc9a:	e002      	b.n	800bca2 <_printf_i+0x1ca>
 800bc9c:	0670      	lsls	r0, r6, #25
 800bc9e:	d5fb      	bpl.n	800bc98 <_printf_i+0x1c0>
 800bca0:	8019      	strh	r1, [r3, #0]
 800bca2:	2300      	movs	r3, #0
 800bca4:	6123      	str	r3, [r4, #16]
 800bca6:	4615      	mov	r5, r2
 800bca8:	e7bc      	b.n	800bc24 <_printf_i+0x14c>
 800bcaa:	682b      	ldr	r3, [r5, #0]
 800bcac:	1d1a      	adds	r2, r3, #4
 800bcae:	602a      	str	r2, [r5, #0]
 800bcb0:	681d      	ldr	r5, [r3, #0]
 800bcb2:	6862      	ldr	r2, [r4, #4]
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f7f4 fa9a 	bl	80001f0 <memchr>
 800bcbc:	b108      	cbz	r0, 800bcc2 <_printf_i+0x1ea>
 800bcbe:	1b40      	subs	r0, r0, r5
 800bcc0:	6060      	str	r0, [r4, #4]
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bccc:	e7aa      	b.n	800bc24 <_printf_i+0x14c>
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	462a      	mov	r2, r5
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	47d0      	blx	sl
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d0ad      	beq.n	800bc38 <_printf_i+0x160>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	079b      	lsls	r3, r3, #30
 800bce0:	d413      	bmi.n	800bd0a <_printf_i+0x232>
 800bce2:	68e0      	ldr	r0, [r4, #12]
 800bce4:	9b03      	ldr	r3, [sp, #12]
 800bce6:	4298      	cmp	r0, r3
 800bce8:	bfb8      	it	lt
 800bcea:	4618      	movlt	r0, r3
 800bcec:	e7a6      	b.n	800bc3c <_printf_i+0x164>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	47d0      	blx	sl
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d09d      	beq.n	800bc38 <_printf_i+0x160>
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	68e3      	ldr	r3, [r4, #12]
 800bd00:	9903      	ldr	r1, [sp, #12]
 800bd02:	1a5b      	subs	r3, r3, r1
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	dcf2      	bgt.n	800bcee <_printf_i+0x216>
 800bd08:	e7eb      	b.n	800bce2 <_printf_i+0x20a>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	f104 0619 	add.w	r6, r4, #25
 800bd10:	e7f5      	b.n	800bcfe <_printf_i+0x226>
 800bd12:	bf00      	nop
 800bd14:	0800cc81 	.word	0x0800cc81
 800bd18:	0800cc92 	.word	0x0800cc92

0800bd1c <__sflush_r>:
 800bd1c:	898a      	ldrh	r2, [r1, #12]
 800bd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd22:	4605      	mov	r5, r0
 800bd24:	0710      	lsls	r0, r2, #28
 800bd26:	460c      	mov	r4, r1
 800bd28:	d458      	bmi.n	800bddc <__sflush_r+0xc0>
 800bd2a:	684b      	ldr	r3, [r1, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dc05      	bgt.n	800bd3c <__sflush_r+0x20>
 800bd30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	dc02      	bgt.n	800bd3c <__sflush_r+0x20>
 800bd36:	2000      	movs	r0, #0
 800bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd3e:	2e00      	cmp	r6, #0
 800bd40:	d0f9      	beq.n	800bd36 <__sflush_r+0x1a>
 800bd42:	2300      	movs	r3, #0
 800bd44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd48:	682f      	ldr	r7, [r5, #0]
 800bd4a:	6a21      	ldr	r1, [r4, #32]
 800bd4c:	602b      	str	r3, [r5, #0]
 800bd4e:	d032      	beq.n	800bdb6 <__sflush_r+0x9a>
 800bd50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	075a      	lsls	r2, r3, #29
 800bd56:	d505      	bpl.n	800bd64 <__sflush_r+0x48>
 800bd58:	6863      	ldr	r3, [r4, #4]
 800bd5a:	1ac0      	subs	r0, r0, r3
 800bd5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd5e:	b10b      	cbz	r3, 800bd64 <__sflush_r+0x48>
 800bd60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd62:	1ac0      	subs	r0, r0, r3
 800bd64:	2300      	movs	r3, #0
 800bd66:	4602      	mov	r2, r0
 800bd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6a:	6a21      	ldr	r1, [r4, #32]
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	47b0      	blx	r6
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	d106      	bne.n	800bd84 <__sflush_r+0x68>
 800bd76:	6829      	ldr	r1, [r5, #0]
 800bd78:	291d      	cmp	r1, #29
 800bd7a:	d82b      	bhi.n	800bdd4 <__sflush_r+0xb8>
 800bd7c:	4a29      	ldr	r2, [pc, #164]	; (800be24 <__sflush_r+0x108>)
 800bd7e:	410a      	asrs	r2, r1
 800bd80:	07d6      	lsls	r6, r2, #31
 800bd82:	d427      	bmi.n	800bdd4 <__sflush_r+0xb8>
 800bd84:	2200      	movs	r2, #0
 800bd86:	6062      	str	r2, [r4, #4]
 800bd88:	04d9      	lsls	r1, r3, #19
 800bd8a:	6922      	ldr	r2, [r4, #16]
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	d504      	bpl.n	800bd9a <__sflush_r+0x7e>
 800bd90:	1c42      	adds	r2, r0, #1
 800bd92:	d101      	bne.n	800bd98 <__sflush_r+0x7c>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b903      	cbnz	r3, 800bd9a <__sflush_r+0x7e>
 800bd98:	6560      	str	r0, [r4, #84]	; 0x54
 800bd9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd9c:	602f      	str	r7, [r5, #0]
 800bd9e:	2900      	cmp	r1, #0
 800bda0:	d0c9      	beq.n	800bd36 <__sflush_r+0x1a>
 800bda2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bda6:	4299      	cmp	r1, r3
 800bda8:	d002      	beq.n	800bdb0 <__sflush_r+0x94>
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f7ff fa92 	bl	800b2d4 <_free_r>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	6360      	str	r0, [r4, #52]	; 0x34
 800bdb4:	e7c0      	b.n	800bd38 <__sflush_r+0x1c>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b0      	blx	r6
 800bdbc:	1c41      	adds	r1, r0, #1
 800bdbe:	d1c8      	bne.n	800bd52 <__sflush_r+0x36>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0c5      	beq.n	800bd52 <__sflush_r+0x36>
 800bdc6:	2b1d      	cmp	r3, #29
 800bdc8:	d001      	beq.n	800bdce <__sflush_r+0xb2>
 800bdca:	2b16      	cmp	r3, #22
 800bdcc:	d101      	bne.n	800bdd2 <__sflush_r+0xb6>
 800bdce:	602f      	str	r7, [r5, #0]
 800bdd0:	e7b1      	b.n	800bd36 <__sflush_r+0x1a>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	e7ad      	b.n	800bd38 <__sflush_r+0x1c>
 800bddc:	690f      	ldr	r7, [r1, #16]
 800bdde:	2f00      	cmp	r7, #0
 800bde0:	d0a9      	beq.n	800bd36 <__sflush_r+0x1a>
 800bde2:	0793      	lsls	r3, r2, #30
 800bde4:	680e      	ldr	r6, [r1, #0]
 800bde6:	bf08      	it	eq
 800bde8:	694b      	ldreq	r3, [r1, #20]
 800bdea:	600f      	str	r7, [r1, #0]
 800bdec:	bf18      	it	ne
 800bdee:	2300      	movne	r3, #0
 800bdf0:	eba6 0807 	sub.w	r8, r6, r7
 800bdf4:	608b      	str	r3, [r1, #8]
 800bdf6:	f1b8 0f00 	cmp.w	r8, #0
 800bdfa:	dd9c      	ble.n	800bd36 <__sflush_r+0x1a>
 800bdfc:	6a21      	ldr	r1, [r4, #32]
 800bdfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be00:	4643      	mov	r3, r8
 800be02:	463a      	mov	r2, r7
 800be04:	4628      	mov	r0, r5
 800be06:	47b0      	blx	r6
 800be08:	2800      	cmp	r0, #0
 800be0a:	dc06      	bgt.n	800be1a <__sflush_r+0xfe>
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be18:	e78e      	b.n	800bd38 <__sflush_r+0x1c>
 800be1a:	4407      	add	r7, r0
 800be1c:	eba8 0800 	sub.w	r8, r8, r0
 800be20:	e7e9      	b.n	800bdf6 <__sflush_r+0xda>
 800be22:	bf00      	nop
 800be24:	dfbffffe 	.word	0xdfbffffe

0800be28 <_fflush_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	690b      	ldr	r3, [r1, #16]
 800be2c:	4605      	mov	r5, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	b913      	cbnz	r3, 800be38 <_fflush_r+0x10>
 800be32:	2500      	movs	r5, #0
 800be34:	4628      	mov	r0, r5
 800be36:	bd38      	pop	{r3, r4, r5, pc}
 800be38:	b118      	cbz	r0, 800be42 <_fflush_r+0x1a>
 800be3a:	6a03      	ldr	r3, [r0, #32]
 800be3c:	b90b      	cbnz	r3, 800be42 <_fflush_r+0x1a>
 800be3e:	f7ff f817 	bl	800ae70 <__sinit>
 800be42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0f3      	beq.n	800be32 <_fflush_r+0xa>
 800be4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be4c:	07d0      	lsls	r0, r2, #31
 800be4e:	d404      	bmi.n	800be5a <_fflush_r+0x32>
 800be50:	0599      	lsls	r1, r3, #22
 800be52:	d402      	bmi.n	800be5a <_fflush_r+0x32>
 800be54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be56:	f7ff fa3a 	bl	800b2ce <__retarget_lock_acquire_recursive>
 800be5a:	4628      	mov	r0, r5
 800be5c:	4621      	mov	r1, r4
 800be5e:	f7ff ff5d 	bl	800bd1c <__sflush_r>
 800be62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be64:	07da      	lsls	r2, r3, #31
 800be66:	4605      	mov	r5, r0
 800be68:	d4e4      	bmi.n	800be34 <_fflush_r+0xc>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	059b      	lsls	r3, r3, #22
 800be6e:	d4e1      	bmi.n	800be34 <_fflush_r+0xc>
 800be70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be72:	f7ff fa2d 	bl	800b2d0 <__retarget_lock_release_recursive>
 800be76:	e7dd      	b.n	800be34 <_fflush_r+0xc>

0800be78 <__swhatbuf_r>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	460c      	mov	r4, r1
 800be7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be80:	2900      	cmp	r1, #0
 800be82:	b096      	sub	sp, #88	; 0x58
 800be84:	4615      	mov	r5, r2
 800be86:	461e      	mov	r6, r3
 800be88:	da0d      	bge.n	800bea6 <__swhatbuf_r+0x2e>
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be90:	f04f 0100 	mov.w	r1, #0
 800be94:	bf0c      	ite	eq
 800be96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be9a:	2340      	movne	r3, #64	; 0x40
 800be9c:	2000      	movs	r0, #0
 800be9e:	6031      	str	r1, [r6, #0]
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	b016      	add	sp, #88	; 0x58
 800bea4:	bd70      	pop	{r4, r5, r6, pc}
 800bea6:	466a      	mov	r2, sp
 800bea8:	f000 f862 	bl	800bf70 <_fstat_r>
 800beac:	2800      	cmp	r0, #0
 800beae:	dbec      	blt.n	800be8a <__swhatbuf_r+0x12>
 800beb0:	9901      	ldr	r1, [sp, #4]
 800beb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800beb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800beba:	4259      	negs	r1, r3
 800bebc:	4159      	adcs	r1, r3
 800bebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec2:	e7eb      	b.n	800be9c <__swhatbuf_r+0x24>

0800bec4 <__smakebuf_r>:
 800bec4:	898b      	ldrh	r3, [r1, #12]
 800bec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bec8:	079d      	lsls	r5, r3, #30
 800beca:	4606      	mov	r6, r0
 800becc:	460c      	mov	r4, r1
 800bece:	d507      	bpl.n	800bee0 <__smakebuf_r+0x1c>
 800bed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	6123      	str	r3, [r4, #16]
 800bed8:	2301      	movs	r3, #1
 800beda:	6163      	str	r3, [r4, #20]
 800bedc:	b002      	add	sp, #8
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	ab01      	add	r3, sp, #4
 800bee2:	466a      	mov	r2, sp
 800bee4:	f7ff ffc8 	bl	800be78 <__swhatbuf_r>
 800bee8:	9900      	ldr	r1, [sp, #0]
 800beea:	4605      	mov	r5, r0
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff fa5d 	bl	800b3ac <_malloc_r>
 800bef2:	b948      	cbnz	r0, 800bf08 <__smakebuf_r+0x44>
 800bef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef8:	059a      	lsls	r2, r3, #22
 800befa:	d4ef      	bmi.n	800bedc <__smakebuf_r+0x18>
 800befc:	f023 0303 	bic.w	r3, r3, #3
 800bf00:	f043 0302 	orr.w	r3, r3, #2
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	e7e3      	b.n	800bed0 <__smakebuf_r+0xc>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	6020      	str	r0, [r4, #0]
 800bf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	9b00      	ldr	r3, [sp, #0]
 800bf14:	6163      	str	r3, [r4, #20]
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	6120      	str	r0, [r4, #16]
 800bf1a:	b15b      	cbz	r3, 800bf34 <__smakebuf_r+0x70>
 800bf1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf20:	4630      	mov	r0, r6
 800bf22:	f000 f837 	bl	800bf94 <_isatty_r>
 800bf26:	b128      	cbz	r0, 800bf34 <__smakebuf_r+0x70>
 800bf28:	89a3      	ldrh	r3, [r4, #12]
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	f043 0301 	orr.w	r3, r3, #1
 800bf32:	81a3      	strh	r3, [r4, #12]
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	431d      	orrs	r5, r3
 800bf38:	81a5      	strh	r5, [r4, #12]
 800bf3a:	e7cf      	b.n	800bedc <__smakebuf_r+0x18>

0800bf3c <memmove>:
 800bf3c:	4288      	cmp	r0, r1
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	eb01 0402 	add.w	r4, r1, r2
 800bf44:	d902      	bls.n	800bf4c <memmove+0x10>
 800bf46:	4284      	cmp	r4, r0
 800bf48:	4623      	mov	r3, r4
 800bf4a:	d807      	bhi.n	800bf5c <memmove+0x20>
 800bf4c:	1e43      	subs	r3, r0, #1
 800bf4e:	42a1      	cmp	r1, r4
 800bf50:	d008      	beq.n	800bf64 <memmove+0x28>
 800bf52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf5a:	e7f8      	b.n	800bf4e <memmove+0x12>
 800bf5c:	4402      	add	r2, r0
 800bf5e:	4601      	mov	r1, r0
 800bf60:	428a      	cmp	r2, r1
 800bf62:	d100      	bne.n	800bf66 <memmove+0x2a>
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf6e:	e7f7      	b.n	800bf60 <memmove+0x24>

0800bf70 <_fstat_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	; (800bf90 <_fstat_r+0x20>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	f7f5 fbb4 	bl	80016ea <_fstat>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d102      	bne.n	800bf8c <_fstat_r+0x1c>
 800bf86:	682b      	ldr	r3, [r5, #0]
 800bf88:	b103      	cbz	r3, 800bf8c <_fstat_r+0x1c>
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
 800bf8e:	bf00      	nop
 800bf90:	20001b00 	.word	0x20001b00

0800bf94 <_isatty_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d06      	ldr	r5, [pc, #24]	; (800bfb0 <_isatty_r+0x1c>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7f5 fbb3 	bl	800170a <_isatty>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_isatty_r+0x1a>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_isatty_r+0x1a>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	20001b00 	.word	0x20001b00

0800bfb4 <_sbrk_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d06      	ldr	r5, [pc, #24]	; (800bfd0 <_sbrk_r+0x1c>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f5 fbbc 	bl	800173c <_sbrk>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_sbrk_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_sbrk_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20001b00 	.word	0x20001b00

0800bfd4 <memcpy>:
 800bfd4:	440a      	add	r2, r1
 800bfd6:	4291      	cmp	r1, r2
 800bfd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bfdc:	d100      	bne.n	800bfe0 <memcpy+0xc>
 800bfde:	4770      	bx	lr
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfea:	4291      	cmp	r1, r2
 800bfec:	d1f9      	bne.n	800bfe2 <memcpy+0xe>
 800bfee:	bd10      	pop	{r4, pc}

0800bff0 <_realloc_r>:
 800bff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff4:	4680      	mov	r8, r0
 800bff6:	4614      	mov	r4, r2
 800bff8:	460e      	mov	r6, r1
 800bffa:	b921      	cbnz	r1, 800c006 <_realloc_r+0x16>
 800bffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c000:	4611      	mov	r1, r2
 800c002:	f7ff b9d3 	b.w	800b3ac <_malloc_r>
 800c006:	b92a      	cbnz	r2, 800c014 <_realloc_r+0x24>
 800c008:	f7ff f964 	bl	800b2d4 <_free_r>
 800c00c:	4625      	mov	r5, r4
 800c00e:	4628      	mov	r0, r5
 800c010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c014:	f000 f81b 	bl	800c04e <_malloc_usable_size_r>
 800c018:	4284      	cmp	r4, r0
 800c01a:	4607      	mov	r7, r0
 800c01c:	d802      	bhi.n	800c024 <_realloc_r+0x34>
 800c01e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c022:	d812      	bhi.n	800c04a <_realloc_r+0x5a>
 800c024:	4621      	mov	r1, r4
 800c026:	4640      	mov	r0, r8
 800c028:	f7ff f9c0 	bl	800b3ac <_malloc_r>
 800c02c:	4605      	mov	r5, r0
 800c02e:	2800      	cmp	r0, #0
 800c030:	d0ed      	beq.n	800c00e <_realloc_r+0x1e>
 800c032:	42bc      	cmp	r4, r7
 800c034:	4622      	mov	r2, r4
 800c036:	4631      	mov	r1, r6
 800c038:	bf28      	it	cs
 800c03a:	463a      	movcs	r2, r7
 800c03c:	f7ff ffca 	bl	800bfd4 <memcpy>
 800c040:	4631      	mov	r1, r6
 800c042:	4640      	mov	r0, r8
 800c044:	f7ff f946 	bl	800b2d4 <_free_r>
 800c048:	e7e1      	b.n	800c00e <_realloc_r+0x1e>
 800c04a:	4635      	mov	r5, r6
 800c04c:	e7df      	b.n	800c00e <_realloc_r+0x1e>

0800c04e <_malloc_usable_size_r>:
 800c04e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c052:	1f18      	subs	r0, r3, #4
 800c054:	2b00      	cmp	r3, #0
 800c056:	bfbc      	itt	lt
 800c058:	580b      	ldrlt	r3, [r1, r0]
 800c05a:	18c0      	addlt	r0, r0, r3
 800c05c:	4770      	bx	lr

0800c05e <powf>:
 800c05e:	b508      	push	{r3, lr}
 800c060:	ed2d 8b04 	vpush	{d8-d9}
 800c064:	eeb0 8a60 	vmov.f32	s16, s1
 800c068:	eeb0 9a40 	vmov.f32	s18, s0
 800c06c:	f000 f880 	bl	800c170 <__ieee754_powf>
 800c070:	eeb4 8a48 	vcmp.f32	s16, s16
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	eef0 8a40 	vmov.f32	s17, s0
 800c07c:	d63e      	bvs.n	800c0fc <powf+0x9e>
 800c07e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c086:	d112      	bne.n	800c0ae <powf+0x50>
 800c088:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c090:	d039      	beq.n	800c106 <powf+0xa8>
 800c092:	eeb0 0a48 	vmov.f32	s0, s16
 800c096:	f000 f839 	bl	800c10c <finitef>
 800c09a:	b378      	cbz	r0, 800c0fc <powf+0x9e>
 800c09c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a4:	d52a      	bpl.n	800c0fc <powf+0x9e>
 800c0a6:	f7ff f8e7 	bl	800b278 <__errno>
 800c0aa:	2322      	movs	r3, #34	; 0x22
 800c0ac:	e014      	b.n	800c0d8 <powf+0x7a>
 800c0ae:	f000 f82d 	bl	800c10c <finitef>
 800c0b2:	b998      	cbnz	r0, 800c0dc <powf+0x7e>
 800c0b4:	eeb0 0a49 	vmov.f32	s0, s18
 800c0b8:	f000 f828 	bl	800c10c <finitef>
 800c0bc:	b170      	cbz	r0, 800c0dc <powf+0x7e>
 800c0be:	eeb0 0a48 	vmov.f32	s0, s16
 800c0c2:	f000 f823 	bl	800c10c <finitef>
 800c0c6:	b148      	cbz	r0, 800c0dc <powf+0x7e>
 800c0c8:	eef4 8a68 	vcmp.f32	s17, s17
 800c0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d0:	d7e9      	bvc.n	800c0a6 <powf+0x48>
 800c0d2:	f7ff f8d1 	bl	800b278 <__errno>
 800c0d6:	2321      	movs	r3, #33	; 0x21
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	e00f      	b.n	800c0fc <powf+0x9e>
 800c0dc:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e4:	d10a      	bne.n	800c0fc <powf+0x9e>
 800c0e6:	eeb0 0a49 	vmov.f32	s0, s18
 800c0ea:	f000 f80f 	bl	800c10c <finitef>
 800c0ee:	b128      	cbz	r0, 800c0fc <powf+0x9e>
 800c0f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c0f4:	f000 f80a 	bl	800c10c <finitef>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d1d4      	bne.n	800c0a6 <powf+0x48>
 800c0fc:	eeb0 0a68 	vmov.f32	s0, s17
 800c100:	ecbd 8b04 	vpop	{d8-d9}
 800c104:	bd08      	pop	{r3, pc}
 800c106:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c10a:	e7f7      	b.n	800c0fc <powf+0x9e>

0800c10c <finitef>:
 800c10c:	b082      	sub	sp, #8
 800c10e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c112:	9801      	ldr	r0, [sp, #4]
 800c114:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c118:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c11c:	bfac      	ite	ge
 800c11e:	2000      	movge	r0, #0
 800c120:	2001      	movlt	r0, #1
 800c122:	b002      	add	sp, #8
 800c124:	4770      	bx	lr
	...

0800c128 <roundf>:
 800c128:	ee10 0a10 	vmov	r0, s0
 800c12c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c130:	3a7f      	subs	r2, #127	; 0x7f
 800c132:	2a16      	cmp	r2, #22
 800c134:	dc15      	bgt.n	800c162 <roundf+0x3a>
 800c136:	2a00      	cmp	r2, #0
 800c138:	da08      	bge.n	800c14c <roundf+0x24>
 800c13a:	3201      	adds	r2, #1
 800c13c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c140:	d101      	bne.n	800c146 <roundf+0x1e>
 800c142:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c146:	ee00 3a10 	vmov	s0, r3
 800c14a:	4770      	bx	lr
 800c14c:	4907      	ldr	r1, [pc, #28]	; (800c16c <roundf+0x44>)
 800c14e:	4111      	asrs	r1, r2
 800c150:	4208      	tst	r0, r1
 800c152:	d0fa      	beq.n	800c14a <roundf+0x22>
 800c154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c158:	4113      	asrs	r3, r2
 800c15a:	4403      	add	r3, r0
 800c15c:	ea23 0301 	bic.w	r3, r3, r1
 800c160:	e7f1      	b.n	800c146 <roundf+0x1e>
 800c162:	2a80      	cmp	r2, #128	; 0x80
 800c164:	d1f1      	bne.n	800c14a <roundf+0x22>
 800c166:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c16a:	4770      	bx	lr
 800c16c:	007fffff 	.word	0x007fffff

0800c170 <__ieee754_powf>:
 800c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	ee10 4a90 	vmov	r4, s1
 800c178:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c17c:	ed2d 8b02 	vpush	{d8}
 800c180:	ee10 7a10 	vmov	r7, s0
 800c184:	eeb0 8a40 	vmov.f32	s16, s0
 800c188:	eef0 8a60 	vmov.f32	s17, s1
 800c18c:	d10c      	bne.n	800c1a8 <__ieee754_powf+0x38>
 800c18e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800c192:	007f      	lsls	r7, r7, #1
 800c194:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800c198:	f240 8292 	bls.w	800c6c0 <__ieee754_powf+0x550>
 800c19c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c1a0:	ecbd 8b02 	vpop	{d8}
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800c1ac:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c1b0:	dcf4      	bgt.n	800c19c <__ieee754_powf+0x2c>
 800c1b2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c1b6:	dd08      	ble.n	800c1ca <__ieee754_powf+0x5a>
 800c1b8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c1bc:	d1ee      	bne.n	800c19c <__ieee754_powf+0x2c>
 800c1be:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c1c2:	0064      	lsls	r4, r4, #1
 800c1c4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c1c8:	e7e6      	b.n	800c198 <__ieee754_powf+0x28>
 800c1ca:	2f00      	cmp	r7, #0
 800c1cc:	da20      	bge.n	800c210 <__ieee754_powf+0xa0>
 800c1ce:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c1d2:	da2d      	bge.n	800c230 <__ieee754_powf+0xc0>
 800c1d4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c1d8:	f2c0 827b 	blt.w	800c6d2 <__ieee754_powf+0x562>
 800c1dc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c1e0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c1e4:	fa48 f603 	asr.w	r6, r8, r3
 800c1e8:	fa06 f303 	lsl.w	r3, r6, r3
 800c1ec:	4543      	cmp	r3, r8
 800c1ee:	f040 8270 	bne.w	800c6d2 <__ieee754_powf+0x562>
 800c1f2:	f006 0601 	and.w	r6, r6, #1
 800c1f6:	f1c6 0602 	rsb	r6, r6, #2
 800c1fa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c1fe:	d11f      	bne.n	800c240 <__ieee754_powf+0xd0>
 800c200:	2c00      	cmp	r4, #0
 800c202:	f280 8263 	bge.w	800c6cc <__ieee754_powf+0x55c>
 800c206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c20a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c20e:	e7c7      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c210:	2600      	movs	r6, #0
 800c212:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c216:	d1f0      	bne.n	800c1fa <__ieee754_powf+0x8a>
 800c218:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c21c:	f000 8250 	beq.w	800c6c0 <__ieee754_powf+0x550>
 800c220:	dd08      	ble.n	800c234 <__ieee754_powf+0xc4>
 800c222:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800c528 <__ieee754_powf+0x3b8>
 800c226:	2c00      	cmp	r4, #0
 800c228:	bfa8      	it	ge
 800c22a:	eeb0 0a68 	vmovge.f32	s0, s17
 800c22e:	e7b7      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c230:	2602      	movs	r6, #2
 800c232:	e7ee      	b.n	800c212 <__ieee754_powf+0xa2>
 800c234:	2c00      	cmp	r4, #0
 800c236:	f280 8246 	bge.w	800c6c6 <__ieee754_powf+0x556>
 800c23a:	eeb1 0a68 	vneg.f32	s0, s17
 800c23e:	e7af      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c240:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c244:	d102      	bne.n	800c24c <__ieee754_powf+0xdc>
 800c246:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c24a:	e7a9      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c24c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c250:	eeb0 0a48 	vmov.f32	s0, s16
 800c254:	d107      	bne.n	800c266 <__ieee754_powf+0xf6>
 800c256:	2f00      	cmp	r7, #0
 800c258:	db05      	blt.n	800c266 <__ieee754_powf+0xf6>
 800c25a:	ecbd 8b02 	vpop	{d8}
 800c25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c262:	f000 badf 	b.w	800c824 <__ieee754_sqrtf>
 800c266:	f000 fa4d 	bl	800c704 <fabsf>
 800c26a:	b125      	cbz	r5, 800c276 <__ieee754_powf+0x106>
 800c26c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800c270:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c274:	d115      	bne.n	800c2a2 <__ieee754_powf+0x132>
 800c276:	2c00      	cmp	r4, #0
 800c278:	bfbc      	itt	lt
 800c27a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c27e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c282:	2f00      	cmp	r7, #0
 800c284:	da8c      	bge.n	800c1a0 <__ieee754_powf+0x30>
 800c286:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c28a:	4335      	orrs	r5, r6
 800c28c:	d104      	bne.n	800c298 <__ieee754_powf+0x128>
 800c28e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c292:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c296:	e783      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c298:	2e01      	cmp	r6, #1
 800c29a:	d181      	bne.n	800c1a0 <__ieee754_powf+0x30>
 800c29c:	eeb1 0a40 	vneg.f32	s0, s0
 800c2a0:	e77e      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c2a2:	0ff8      	lsrs	r0, r7, #31
 800c2a4:	3801      	subs	r0, #1
 800c2a6:	ea56 0300 	orrs.w	r3, r6, r0
 800c2aa:	d104      	bne.n	800c2b6 <__ieee754_powf+0x146>
 800c2ac:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c2b0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c2b4:	e774      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c2b6:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c2ba:	dd73      	ble.n	800c3a4 <__ieee754_powf+0x234>
 800c2bc:	4b9b      	ldr	r3, [pc, #620]	; (800c52c <__ieee754_powf+0x3bc>)
 800c2be:	429d      	cmp	r5, r3
 800c2c0:	dc08      	bgt.n	800c2d4 <__ieee754_powf+0x164>
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	da0b      	bge.n	800c2de <__ieee754_powf+0x16e>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	ecbd 8b02 	vpop	{d8}
 800c2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	f000 baa2 	b.w	800c818 <__math_oflowf>
 800c2d4:	4b96      	ldr	r3, [pc, #600]	; (800c530 <__ieee754_powf+0x3c0>)
 800c2d6:	429d      	cmp	r5, r3
 800c2d8:	dd08      	ble.n	800c2ec <__ieee754_powf+0x17c>
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	dcf3      	bgt.n	800c2c6 <__ieee754_powf+0x156>
 800c2de:	2000      	movs	r0, #0
 800c2e0:	ecbd 8b02 	vpop	{d8}
 800c2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	f000 ba90 	b.w	800c80c <__math_uflowf>
 800c2ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c2f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c2f4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800c534 <__ieee754_powf+0x3c4>
 800c2f8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c2fc:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c300:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c304:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c308:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c30c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c310:	eddf 7a89 	vldr	s15, [pc, #548]	; 800c538 <__ieee754_powf+0x3c8>
 800c314:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c318:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c53c <__ieee754_powf+0x3cc>
 800c31c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c320:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800c540 <__ieee754_powf+0x3d0>
 800c324:	eef0 6a67 	vmov.f32	s13, s15
 800c328:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c32c:	ee16 3a90 	vmov	r3, s13
 800c330:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c334:	f023 030f 	bic.w	r3, r3, #15
 800c338:	ee06 3a90 	vmov	s13, r3
 800c33c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c340:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c344:	3e01      	subs	r6, #1
 800c346:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c34a:	4306      	orrs	r6, r0
 800c34c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c350:	f024 040f 	bic.w	r4, r4, #15
 800c354:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c358:	bf08      	it	eq
 800c35a:	eeb0 8a47 	vmoveq.f32	s16, s14
 800c35e:	ee07 4a10 	vmov	s14, r4
 800c362:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c366:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c36a:	ee07 3a90 	vmov	s15, r3
 800c36e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c372:	ee07 4a10 	vmov	s14, r4
 800c376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c37a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c37e:	ee17 1a10 	vmov	r1, s14
 800c382:	2900      	cmp	r1, #0
 800c384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c388:	f340 817c 	ble.w	800c684 <__ieee754_powf+0x514>
 800c38c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c390:	f340 80f8 	ble.w	800c584 <__ieee754_powf+0x414>
 800c394:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39c:	bf4c      	ite	mi
 800c39e:	2001      	movmi	r0, #1
 800c3a0:	2000      	movpl	r0, #0
 800c3a2:	e791      	b.n	800c2c8 <__ieee754_powf+0x158>
 800c3a4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800c3a8:	bf01      	itttt	eq
 800c3aa:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c544 <__ieee754_powf+0x3d4>
 800c3ae:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c3b2:	f06f 0317 	mvneq.w	r3, #23
 800c3b6:	ee17 5a90 	vmoveq	r5, s15
 800c3ba:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800c3be:	bf18      	it	ne
 800c3c0:	2300      	movne	r3, #0
 800c3c2:	3a7f      	subs	r2, #127	; 0x7f
 800c3c4:	441a      	add	r2, r3
 800c3c6:	4b60      	ldr	r3, [pc, #384]	; (800c548 <__ieee754_powf+0x3d8>)
 800c3c8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c3cc:	429d      	cmp	r5, r3
 800c3ce:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c3d2:	dd06      	ble.n	800c3e2 <__ieee754_powf+0x272>
 800c3d4:	4b5d      	ldr	r3, [pc, #372]	; (800c54c <__ieee754_powf+0x3dc>)
 800c3d6:	429d      	cmp	r5, r3
 800c3d8:	f340 80a4 	ble.w	800c524 <__ieee754_powf+0x3b4>
 800c3dc:	3201      	adds	r2, #1
 800c3de:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c3e2:	2500      	movs	r5, #0
 800c3e4:	4b5a      	ldr	r3, [pc, #360]	; (800c550 <__ieee754_powf+0x3e0>)
 800c3e6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c3ea:	ee07 1a10 	vmov	s14, r1
 800c3ee:	edd3 5a00 	vldr	s11, [r3]
 800c3f2:	4b58      	ldr	r3, [pc, #352]	; (800c554 <__ieee754_powf+0x3e4>)
 800c3f4:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c3f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3fc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c400:	1049      	asrs	r1, r1, #1
 800c402:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c406:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c40a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c40e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c412:	ee07 1a90 	vmov	s15, r1
 800c416:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c41a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c41e:	ee15 7a10 	vmov	r7, s10
 800c422:	401f      	ands	r7, r3
 800c424:	ee06 7a90 	vmov	s13, r7
 800c428:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c42c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c430:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c434:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c438:	eddf 5a47 	vldr	s11, [pc, #284]	; 800c558 <__ieee754_powf+0x3e8>
 800c43c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800c55c <__ieee754_powf+0x3ec>
 800c440:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c444:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c560 <__ieee754_powf+0x3f0>
 800c448:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c44c:	eddf 5a39 	vldr	s11, [pc, #228]	; 800c534 <__ieee754_powf+0x3c4>
 800c450:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c454:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800c564 <__ieee754_powf+0x3f4>
 800c458:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c45c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c568 <__ieee754_powf+0x3f8>
 800c460:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c464:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c468:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c46c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c470:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c474:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c478:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c47c:	eef0 5a67 	vmov.f32	s11, s15
 800c480:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c484:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c488:	ee15 1a90 	vmov	r1, s11
 800c48c:	4019      	ands	r1, r3
 800c48e:	ee05 1a90 	vmov	s11, r1
 800c492:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c496:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c49a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c49e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c4a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c4a6:	eeb0 6a67 	vmov.f32	s12, s15
 800c4aa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c4ae:	ee16 1a10 	vmov	r1, s12
 800c4b2:	4019      	ands	r1, r3
 800c4b4:	ee07 1a10 	vmov	s14, r1
 800c4b8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c4bc:	ee06 1a10 	vmov	s12, r1
 800c4c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4c4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c56c <__ieee754_powf+0x3fc>
 800c4c8:	4929      	ldr	r1, [pc, #164]	; (800c570 <__ieee754_powf+0x400>)
 800c4ca:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800c574 <__ieee754_powf+0x404>
 800c4ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4d2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c578 <__ieee754_powf+0x408>
 800c4d6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c4da:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c4de:	ed91 7a00 	vldr	s14, [r1]
 800c4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4e6:	ee07 2a10 	vmov	s14, r2
 800c4ea:	eef0 6a67 	vmov.f32	s13, s15
 800c4ee:	4a23      	ldr	r2, [pc, #140]	; (800c57c <__ieee754_powf+0x40c>)
 800c4f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c4f4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c4f8:	ed92 5a00 	vldr	s10, [r2]
 800c4fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c500:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c504:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c508:	ee16 2a90 	vmov	r2, s13
 800c50c:	4013      	ands	r3, r2
 800c50e:	ee06 3a90 	vmov	s13, r3
 800c512:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c516:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c51a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c51e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c522:	e70f      	b.n	800c344 <__ieee754_powf+0x1d4>
 800c524:	2501      	movs	r5, #1
 800c526:	e75d      	b.n	800c3e4 <__ieee754_powf+0x274>
 800c528:	00000000 	.word	0x00000000
 800c52c:	3f7ffff3 	.word	0x3f7ffff3
 800c530:	3f800007 	.word	0x3f800007
 800c534:	3eaaaaab 	.word	0x3eaaaaab
 800c538:	3fb8aa3b 	.word	0x3fb8aa3b
 800c53c:	36eca570 	.word	0x36eca570
 800c540:	3fb8aa00 	.word	0x3fb8aa00
 800c544:	4b800000 	.word	0x4b800000
 800c548:	001cc471 	.word	0x001cc471
 800c54c:	005db3d6 	.word	0x005db3d6
 800c550:	0800cca4 	.word	0x0800cca4
 800c554:	fffff000 	.word	0xfffff000
 800c558:	3e6c3255 	.word	0x3e6c3255
 800c55c:	3e53f142 	.word	0x3e53f142
 800c560:	3e8ba305 	.word	0x3e8ba305
 800c564:	3edb6db7 	.word	0x3edb6db7
 800c568:	3f19999a 	.word	0x3f19999a
 800c56c:	3f76384f 	.word	0x3f76384f
 800c570:	0800ccb4 	.word	0x0800ccb4
 800c574:	3f763800 	.word	0x3f763800
 800c578:	369dc3a0 	.word	0x369dc3a0
 800c57c:	0800ccac 	.word	0x0800ccac
 800c580:	3338aa3c 	.word	0x3338aa3c
 800c584:	f040 8093 	bne.w	800c6ae <__ieee754_powf+0x53e>
 800c588:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c580 <__ieee754_powf+0x410>
 800c58c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c590:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c594:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59c:	f73f aefa 	bgt.w	800c394 <__ieee754_powf+0x224>
 800c5a0:	15db      	asrs	r3, r3, #23
 800c5a2:	3b7e      	subs	r3, #126	; 0x7e
 800c5a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800c5a8:	4118      	asrs	r0, r3
 800c5aa:	4408      	add	r0, r1
 800c5ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c5b0:	4a49      	ldr	r2, [pc, #292]	; (800c6d8 <__ieee754_powf+0x568>)
 800c5b2:	3b7f      	subs	r3, #127	; 0x7f
 800c5b4:	411a      	asrs	r2, r3
 800c5b6:	4002      	ands	r2, r0
 800c5b8:	ee07 2a10 	vmov	s14, r2
 800c5bc:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c5c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c5c4:	f1c3 0317 	rsb	r3, r3, #23
 800c5c8:	4118      	asrs	r0, r3
 800c5ca:	2900      	cmp	r1, #0
 800c5cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5d0:	bfb8      	it	lt
 800c5d2:	4240      	neglt	r0, r0
 800c5d4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c5d8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c6dc <__ieee754_powf+0x56c>
 800c5dc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800c6e0 <__ieee754_powf+0x570>
 800c5e0:	ee17 3a10 	vmov	r3, s14
 800c5e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c5e8:	f023 030f 	bic.w	r3, r3, #15
 800c5ec:	ee07 3a10 	vmov	s14, r3
 800c5f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c5f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c5fc:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c6e4 <__ieee754_powf+0x574>
 800c600:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c604:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c608:	eef0 6a67 	vmov.f32	s13, s15
 800c60c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c610:	eef0 5a66 	vmov.f32	s11, s13
 800c614:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c618:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c61c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c620:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c6e8 <__ieee754_powf+0x578>
 800c624:	eddf 5a31 	vldr	s11, [pc, #196]	; 800c6ec <__ieee754_powf+0x57c>
 800c628:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c62c:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c6f0 <__ieee754_powf+0x580>
 800c630:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c634:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c6f4 <__ieee754_powf+0x584>
 800c638:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c63c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c6f8 <__ieee754_powf+0x588>
 800c640:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c644:	eeb0 6a66 	vmov.f32	s12, s13
 800c648:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c64c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c650:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c654:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c658:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c65c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c660:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c668:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c66c:	ee10 3a10 	vmov	r3, s0
 800c670:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c678:	da1f      	bge.n	800c6ba <__ieee754_powf+0x54a>
 800c67a:	f000 f84b 	bl	800c714 <scalbnf>
 800c67e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c682:	e58d      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c684:	4a1d      	ldr	r2, [pc, #116]	; (800c6fc <__ieee754_powf+0x58c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	dd07      	ble.n	800c69a <__ieee754_powf+0x52a>
 800c68a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c692:	bf4c      	ite	mi
 800c694:	2001      	movmi	r0, #1
 800c696:	2000      	movpl	r0, #0
 800c698:	e622      	b.n	800c2e0 <__ieee754_powf+0x170>
 800c69a:	d108      	bne.n	800c6ae <__ieee754_powf+0x53e>
 800c69c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6a0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a8:	f6ff af7a 	blt.w	800c5a0 <__ieee754_powf+0x430>
 800c6ac:	e7ed      	b.n	800c68a <__ieee754_powf+0x51a>
 800c6ae:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c6b2:	f73f af75 	bgt.w	800c5a0 <__ieee754_powf+0x430>
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	e78c      	b.n	800c5d4 <__ieee754_powf+0x464>
 800c6ba:	ee00 3a10 	vmov	s0, r3
 800c6be:	e7de      	b.n	800c67e <__ieee754_powf+0x50e>
 800c6c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c6c4:	e56c      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c6c6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c700 <__ieee754_powf+0x590>
 800c6ca:	e569      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c6cc:	eeb0 0a48 	vmov.f32	s0, s16
 800c6d0:	e566      	b.n	800c1a0 <__ieee754_powf+0x30>
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	e591      	b.n	800c1fa <__ieee754_powf+0x8a>
 800c6d6:	bf00      	nop
 800c6d8:	ff800000 	.word	0xff800000
 800c6dc:	3f317218 	.word	0x3f317218
 800c6e0:	3f317200 	.word	0x3f317200
 800c6e4:	35bfbe8c 	.word	0x35bfbe8c
 800c6e8:	b5ddea0e 	.word	0xb5ddea0e
 800c6ec:	3331bb4c 	.word	0x3331bb4c
 800c6f0:	388ab355 	.word	0x388ab355
 800c6f4:	bb360b61 	.word	0xbb360b61
 800c6f8:	3e2aaaab 	.word	0x3e2aaaab
 800c6fc:	43160000 	.word	0x43160000
 800c700:	00000000 	.word	0x00000000

0800c704 <fabsf>:
 800c704:	ee10 3a10 	vmov	r3, s0
 800c708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c70c:	ee00 3a10 	vmov	s0, r3
 800c710:	4770      	bx	lr
	...

0800c714 <scalbnf>:
 800c714:	ee10 3a10 	vmov	r3, s0
 800c718:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c71c:	d02b      	beq.n	800c776 <scalbnf+0x62>
 800c71e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c722:	d302      	bcc.n	800c72a <scalbnf+0x16>
 800c724:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c728:	4770      	bx	lr
 800c72a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c72e:	d123      	bne.n	800c778 <scalbnf+0x64>
 800c730:	4b24      	ldr	r3, [pc, #144]	; (800c7c4 <scalbnf+0xb0>)
 800c732:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c7c8 <scalbnf+0xb4>
 800c736:	4298      	cmp	r0, r3
 800c738:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c73c:	db17      	blt.n	800c76e <scalbnf+0x5a>
 800c73e:	ee10 3a10 	vmov	r3, s0
 800c742:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c746:	3a19      	subs	r2, #25
 800c748:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c74c:	4288      	cmp	r0, r1
 800c74e:	dd15      	ble.n	800c77c <scalbnf+0x68>
 800c750:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c7cc <scalbnf+0xb8>
 800c754:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c7d0 <scalbnf+0xbc>
 800c758:	ee10 3a10 	vmov	r3, s0
 800c75c:	eeb0 7a67 	vmov.f32	s14, s15
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfb8      	it	lt
 800c764:	eef0 7a66 	vmovlt.f32	s15, s13
 800c768:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c76c:	4770      	bx	lr
 800c76e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c7d4 <scalbnf+0xc0>
 800c772:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c776:	4770      	bx	lr
 800c778:	0dd2      	lsrs	r2, r2, #23
 800c77a:	e7e5      	b.n	800c748 <scalbnf+0x34>
 800c77c:	4410      	add	r0, r2
 800c77e:	28fe      	cmp	r0, #254	; 0xfe
 800c780:	dce6      	bgt.n	800c750 <scalbnf+0x3c>
 800c782:	2800      	cmp	r0, #0
 800c784:	dd06      	ble.n	800c794 <scalbnf+0x80>
 800c786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c78a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c78e:	ee00 3a10 	vmov	s0, r3
 800c792:	4770      	bx	lr
 800c794:	f110 0f16 	cmn.w	r0, #22
 800c798:	da09      	bge.n	800c7ae <scalbnf+0x9a>
 800c79a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c7d4 <scalbnf+0xc0>
 800c79e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c7d8 <scalbnf+0xc4>
 800c7a2:	ee10 3a10 	vmov	r3, s0
 800c7a6:	eeb0 7a67 	vmov.f32	s14, s15
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	e7d9      	b.n	800c762 <scalbnf+0x4e>
 800c7ae:	3019      	adds	r0, #25
 800c7b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7b4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c7b8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c7dc <scalbnf+0xc8>
 800c7bc:	ee07 3a90 	vmov	s15, r3
 800c7c0:	e7d7      	b.n	800c772 <scalbnf+0x5e>
 800c7c2:	bf00      	nop
 800c7c4:	ffff3cb0 	.word	0xffff3cb0
 800c7c8:	4c000000 	.word	0x4c000000
 800c7cc:	7149f2ca 	.word	0x7149f2ca
 800c7d0:	f149f2ca 	.word	0xf149f2ca
 800c7d4:	0da24260 	.word	0x0da24260
 800c7d8:	8da24260 	.word	0x8da24260
 800c7dc:	33000000 	.word	0x33000000

0800c7e0 <with_errnof>:
 800c7e0:	b513      	push	{r0, r1, r4, lr}
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c7e8:	f7fe fd46 	bl	800b278 <__errno>
 800c7ec:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c7f0:	6004      	str	r4, [r0, #0]
 800c7f2:	b002      	add	sp, #8
 800c7f4:	bd10      	pop	{r4, pc}

0800c7f6 <xflowf>:
 800c7f6:	b130      	cbz	r0, 800c806 <xflowf+0x10>
 800c7f8:	eef1 7a40 	vneg.f32	s15, s0
 800c7fc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c800:	2022      	movs	r0, #34	; 0x22
 800c802:	f7ff bfed 	b.w	800c7e0 <with_errnof>
 800c806:	eef0 7a40 	vmov.f32	s15, s0
 800c80a:	e7f7      	b.n	800c7fc <xflowf+0x6>

0800c80c <__math_uflowf>:
 800c80c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c814 <__math_uflowf+0x8>
 800c810:	f7ff bff1 	b.w	800c7f6 <xflowf>
 800c814:	10000000 	.word	0x10000000

0800c818 <__math_oflowf>:
 800c818:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c820 <__math_oflowf+0x8>
 800c81c:	f7ff bfeb 	b.w	800c7f6 <xflowf>
 800c820:	70000000 	.word	0x70000000

0800c824 <__ieee754_sqrtf>:
 800c824:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c828:	4770      	bx	lr
	...

0800c82c <_init>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	bf00      	nop
 800c830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c832:	bc08      	pop	{r3}
 800c834:	469e      	mov	lr, r3
 800c836:	4770      	bx	lr

0800c838 <_fini>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	bf00      	nop
 800c83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83e:	bc08      	pop	{r3}
 800c840:	469e      	mov	lr, r3
 800c842:	4770      	bx	lr
