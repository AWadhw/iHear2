
N-Channel-Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006804  08006804  00020468  2**0
                  CONTENTS
  4 .ARM          00000008  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800680c  0800680c  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  08006814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000468  08006c7c  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08006c7c  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .comment      000000c2  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b7b4  00000000  00000000  0002055a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002306  00000000  00000000  0002bd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079d  00000000  00000000  0002ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171dc  00000000  00000000  0002f1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4a2  00000000  00000000  000463a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089adf  00000000  00000000  00053843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fbc  00000000  00000000  000dd324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e02e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000468 	.word	0x20000468
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800676c 	.word	0x0800676c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000046c 	.word	0x2000046c
 80001d4:	0800676c 	.word	0x0800676c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fc12 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f820 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f91a 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f8f8 	bl	8000728 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f8cc 	bl	80006d4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 800053c:	f000 f89c 	bl	8000678 <MX_I2S2_Init>
  MX_CRC_Init();
 8000540:	f000 f87e 	bl	8000640 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000544:	f003 f930 	bl	80037a8 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, &data_i2s[0], 64); //size in bytes so we divide by 2
 8000548:	2240      	movs	r2, #64	; 0x40
 800054a:	4906      	ldr	r1, [pc, #24]	; (8000564 <main+0x40>)
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <main+0x44>)
 800054e:	f001 fc11 	bl	8001d74 <HAL_I2S_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World \n");
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <main+0x48>)
 8000554:	f005 f98e 	bl	8005874 <puts>
	  HAL_Delay(1000);
 8000558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055c:	f000 fc6a 	bl	8000e34 <HAL_Delay>
	  printf("Hello World \n");
 8000560:	e7f7      	b.n	8000552 <main+0x2e>
 8000562:	bf00      	nop
 8000564:	2000057c 	.word	0x2000057c
 8000568:	20000490 	.word	0x20000490
 800056c:	08006784 	.word	0x08006784

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fa58 	bl	8005a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <SystemClock_Config+0xc8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <SystemClock_Config+0xcc>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e4:	2360      	movs	r3, #96	; 0x60
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f82d 	bl	8002654 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 f95c 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2103      	movs	r1, #3
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fa8f 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800062c:	f000 f946 	bl	80008bc <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_CRC_Init+0x30>)
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <MX_CRC_Init+0x34>)
 8000648:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <MX_CRC_Init+0x30>)
 800064c:	f000 fd27 	bl	800109e <HAL_CRC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000656:	f000 f931 	bl	80008bc <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MX_CRC_Init+0x30>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <MX_CRC_Init+0x30>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f042 0201 	orr.w	r2, r2, #1
 8000668:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000488 	.word	0x20000488
 8000674:	40023000 	.word	0x40023000

08000678 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2S2_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_I2S2_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S2_Init+0x54>)
 8000684:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000688:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2S2_Init+0x54>)
 800068c:	2210      	movs	r2, #16
 800068e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2S2_Init+0x54>)
 8000692:	2201      	movs	r2, #1
 8000694:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S2_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_I2S2_Init+0x54>)
 800069e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006a2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S2_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_I2S2_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S2_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2S2_Init+0x54>)
 80006b8:	f001 fa1c 	bl	8001af4 <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f000 f8fb 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000490 	.word	0x20000490
 80006d0:	40003800 	.word	0x40003800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f002 fd8a 	bl	8003224 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8d1 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000538 	.word	0x20000538
 8000724:	40004400 	.word	0x40004400

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_DMA_Init+0x3c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <MX_DMA_Init+0x3c>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_DMA_Init+0x3c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200e      	movs	r0, #14
 8000750:	f000 fc6f 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000754:	200e      	movs	r0, #14
 8000756:	f000 fc88 	bl	800106a <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_GPIO_Init+0xd4>)
 80007f4:	f001 f964 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_GPIO_Init+0xd8>)
 8000810:	f000 ffd2 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000814:	2320      	movs	r3, #32
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xd4>)
 800082c:	f000 ffc4 	bl	80017b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800

08000844 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e009      	b.n	800086a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	60ba      	str	r2, [r7, #8]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe38 	bl	80004d4 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3301      	adds	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	dbf1      	blt.n	8000856 <_write+0x12>
	}
	return len;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_I2S_RxCpltCallback+0x2c>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_I2S_RxCpltCallback+0x30>)
 800088a:	801a      	strh	r2, [r3, #0]
	PDM_Filter(&data_i2s[0], &processedData[0], &PDM1_filter_handler);
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_I2S_RxCpltCallback+0x34>)
 800088e:	4909      	ldr	r1, [pc, #36]	; (80008b4 <HAL_I2S_RxCpltCallback+0x38>)
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <HAL_I2S_RxCpltCallback+0x2c>)
 8000892:	f004 fe7f 	bl	8005594 <PDM_Filter>
	//MX_PDM2PCM_Process(&data_i2s[0], &processedData[0]);
	myData = processedData[0];
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_I2S_RxCpltCallback+0x38>)
 8000898:	881a      	ldrh	r2, [r3, #0]
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_I2S_RxCpltCallback+0x3c>)
 800089c:	801a      	strh	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000057c 	.word	0x2000057c
 80008ac:	2000067c 	.word	0x2000067c
 80008b0:	20000788 	.word	0x20000788
 80008b4:	20000680 	.word	0x20000680
 80008b8:	2000067e 	.word	0x2000067e

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	2007      	movs	r0, #7
 8000908:	f000 fb88 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <HAL_CRC_MspInit+0x3c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10d      	bne.n	8000946 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_CRC_MspInit+0x40>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <HAL_CRC_MspInit+0x40>)
 8000934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_CRC_MspInit+0x40>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023000 	.word	0x40023000
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b090      	sub	sp, #64	; 0x40
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a4b      	ldr	r2, [pc, #300]	; (8000ab8 <HAL_I2S_MspInit+0x15c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	f040 808f 	bne.w	8000ab0 <HAL_I2S_MspInit+0x154>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8000996:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800099a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 800099c:	2307      	movs	r3, #7
 800099e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 faeb 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 80009b4:	f7ff ff82 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	4a3e      	ldr	r2, [pc, #248]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
 80009c8:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b38      	ldr	r3, [pc, #224]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a37      	ldr	r2, [pc, #220]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a30      	ldr	r2, [pc, #192]	; (8000abc <HAL_I2S_MspInit+0x160>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <HAL_I2S_MspInit+0x160>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a24:	4619      	mov	r1, r3
 8000a26:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <HAL_I2S_MspInit+0x164>)
 8000a28:	f000 fec6 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <HAL_I2S_MspInit+0x168>)
 8000a4a:	f000 feb5 	bl	80017b8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_I2S_MspInit+0x170>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000a96:	f000 fb1f 	bl	80010d8 <HAL_DMA_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8000aa0:	f7ff ff0c 	bl	80008bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000aa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_I2S_MspInit+0x16c>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3740      	adds	r7, #64	; 0x40
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40003800 	.word	0x40003800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	200004d8 	.word	0x200004d8
 8000acc:	40026058 	.word	0x40026058

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12b      	bne.n	8000b4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_UART_MspInit+0x8c>)
 8000b46:	f000 fe37 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f922 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <DMA1_Stream3_IRQHandler+0x10>)
 8000bba:	f000 fb93 	bl	80012e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200004d8 	.word	0x200004d8

08000bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f004 ff18 	bl	8005ad0 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000780 	.word	0x20000780
 8000cd4:	20000928 	.word	0x20000928

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f004 fed7 	bl	8005adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fbf9 	bl	8000524 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8000d40:	08006814 	.word	0x08006814
  ldr r2, =_sbss
 8000d44:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8000d48:	20000928 	.word	0x20000928

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f94f 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fda0 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f967 	bl	8001086 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f000 f92f 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000400 	.word	0x20000400
 8000dec:	20000408 	.word	0x20000408
 8000df0:	20000404 	.word	0x20000404

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000408 	.word	0x20000408
 8000e18:	20000784 	.word	0x20000784

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000784 	.word	0x20000784

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000408 	.word	0x20000408

08000e7c <__NVIC_SetPriorityGrouping>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff29 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff3e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff31 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e00e      	b.n	80010ce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	795b      	ldrb	r3, [r3, #5]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d105      	bne.n	80010c6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fc29 	bl	8000918 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff fe9a 	bl	8000e1c <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e099      	b.n	8001228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001114:	e00f      	b.n	8001136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001116:	f7ff fe81 	bl	8000e1c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b05      	cmp	r3, #5
 8001122:	d908      	bls.n	8001136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2220      	movs	r2, #32
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e078      	b.n	8001228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e8      	bne.n	8001116 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_DMA_Init+0x158>)
 8001150:	4013      	ands	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	2b04      	cmp	r3, #4
 800118e:	d107      	bne.n	80011a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4313      	orrs	r3, r2
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4313      	orrs	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d117      	bne.n	80011fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00e      	beq.n	80011fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fa6f 	bl	80016c0 <DMA_CheckFifoParam>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2240      	movs	r2, #64	; 0x40
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011f6:	2301      	movs	r3, #1
 80011f8:	e016      	b.n	8001228 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fa26 	bl	8001654 <DMA_CalcBaseAndBitshift>
 8001208:	4603      	mov	r3, r0
 800120a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	223f      	movs	r2, #63	; 0x3f
 8001212:	409a      	lsls	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	f010803f 	.word	0xf010803f

08001234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_DMA_Start_IT+0x26>
 8001256:	2302      	movs	r3, #2
 8001258:	e040      	b.n	80012dc <HAL_DMA_Start_IT+0xa8>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d12f      	bne.n	80012ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2202      	movs	r2, #2
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 f9b8 	bl	80015f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	223f      	movs	r2, #63	; 0x3f
 800128e:	409a      	lsls	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0216 	orr.w	r2, r2, #22
 80012a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0208 	orr.w	r2, r2, #8
 80012ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e005      	b.n	80012da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012d6:	2302      	movs	r3, #2
 80012d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012f0:	4b8e      	ldr	r3, [pc, #568]	; (800152c <HAL_DMA_IRQHandler+0x248>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a8e      	ldr	r2, [pc, #568]	; (8001530 <HAL_DMA_IRQHandler+0x24c>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0a9b      	lsrs	r3, r3, #10
 80012fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2208      	movs	r2, #8
 8001310:	409a      	lsls	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01a      	beq.n	8001350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	2208      	movs	r2, #8
 800133e:	409a      	lsls	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	f043 0201 	orr.w	r2, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	2201      	movs	r2, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d012      	beq.n	8001386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	2201      	movs	r2, #1
 8001374:	409a      	lsls	r2, r3
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f043 0202 	orr.w	r2, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2204      	movs	r2, #4
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d012      	beq.n	80013bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2204      	movs	r2, #4
 80013aa:	409a      	lsls	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b4:	f043 0204 	orr.w	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2210      	movs	r2, #16
 80013c2:	409a      	lsls	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d043      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03c      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2210      	movs	r2, #16
 80013e0:	409a      	lsls	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d018      	beq.n	8001426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d108      	bne.n	8001414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d024      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
 8001412:	e01f      	b.n	8001454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01b      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
 8001424:	e016      	b.n	8001454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0208 	bic.w	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2220      	movs	r2, #32
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 808f 	beq.w	8001584 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8087 	beq.w	8001584 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147a:	2220      	movs	r2, #32
 800147c:	409a      	lsls	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b05      	cmp	r3, #5
 800148c:	d136      	bne.n	80014fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0216 	bic.w	r2, r2, #22
 800149c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <HAL_DMA_IRQHandler+0x1da>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0208 	bic.w	r2, r2, #8
 80014cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	223f      	movs	r2, #63	; 0x3f
 80014d4:	409a      	lsls	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d07e      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
        }
        return;
 80014fa:	e079      	b.n	80015f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01d      	beq.n	8001546 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10d      	bne.n	8001534 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	2b00      	cmp	r3, #0
 800151e:	d031      	beq.n	8001584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
 8001528:	e02c      	b.n	8001584 <HAL_DMA_IRQHandler+0x2a0>
 800152a:	bf00      	nop
 800152c:	20000400 	.word	0x20000400
 8001530:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
 8001544:	e01e      	b.n	8001584 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0210 	bic.w	r2, r2, #16
 8001562:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001588:	2b00      	cmp	r3, #0
 800158a:	d032      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d022      	beq.n	80015de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2205      	movs	r2, #5
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d307      	bcc.n	80015cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f2      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x2cc>
 80015ca:	e000      	b.n	80015ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
 80015ee:	e000      	b.n	80015f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015f0:	bf00      	nop
    }
  }
}
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001614:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b40      	cmp	r3, #64	; 0x40
 8001624:	d108      	bne.n	8001638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001636:	e007      	b.n	8001648 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	3b10      	subs	r3, #16
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <DMA_CalcBaseAndBitshift+0x68>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d909      	bls.n	8001696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58
 8001694:	e007      	b.n	80016a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	aaaaaaab 	.word	0xaaaaaaab
 80016bc:	080067e4 	.word	0x080067e4

080016c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11f      	bne.n	800171a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d856      	bhi.n	800178e <DMA_CheckFifoParam+0xce>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <DMA_CheckFifoParam+0x28>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	0800170b 	.word	0x0800170b
 80016f0:	080016f9 	.word	0x080016f9
 80016f4:	0800178f 	.word	0x0800178f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d046      	beq.n	8001792 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001708:	e043      	b.n	8001792 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001712:	d140      	bne.n	8001796 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001718:	e03d      	b.n	8001796 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001722:	d121      	bne.n	8001768 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d837      	bhi.n	800179a <DMA_CheckFifoParam+0xda>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <DMA_CheckFifoParam+0x70>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001741 	.word	0x08001741
 8001734:	08001747 	.word	0x08001747
 8001738:	08001741 	.word	0x08001741
 800173c:	08001759 	.word	0x08001759
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      break;
 8001744:	e030      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d025      	beq.n	800179e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001756:	e022      	b.n	800179e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001760:	d11f      	bne.n	80017a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001766:	e01c      	b.n	80017a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d903      	bls.n	8001776 <DMA_CheckFifoParam+0xb6>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d003      	beq.n	800177c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001774:	e018      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
      break;
 800177a:	e015      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00e      	beq.n	80017a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
      break;
 800178c:	e00b      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 800178e:	bf00      	nop
 8001790:	e00a      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e008      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e006      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 800179a:	bf00      	nop
 800179c:	e004      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
 80017a0:	e002      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 80017a6:	bf00      	nop
    }
  } 
  
  return status; 
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e159      	b.n	8001a88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d4:	2201      	movs	r2, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 8148 	bne.w	8001a82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d005      	beq.n	800180a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	2b02      	cmp	r3, #2
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b03      	cmp	r3, #3
 8001876:	d017      	beq.n	80018a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d123      	bne.n	80018fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a2 	beq.w	8001a82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_GPIO_Init+0x2e8>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a56      	ldr	r2, [pc, #344]	; (8001aa0 <HAL_GPIO_Init+0x2e8>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <HAL_GPIO_Init+0x2e8>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195a:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_GPIO_Init+0x2ec>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x202>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x1fe>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <HAL_GPIO_Init+0x2f8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x1fa>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <HAL_GPIO_Init+0x2fc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x1f6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a45      	ldr	r2, [pc, #276]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x1f2>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_Init+0x204>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x204>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_Init+0x204>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_Init+0x204>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x204>
 80019ba:	2300      	movs	r3, #0
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019cc:	4935      	ldr	r1, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x2ec>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_GPIO_Init+0x304>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fe:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a28:	4a24      	ldr	r2, [pc, #144]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	f67f aea2 	bls.w	80017d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e128      	b.n	8001d58 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a90      	ldr	r2, [pc, #576]	; (8001d60 <HAL_I2S_Init+0x26c>)
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe ff1b 	bl	800095c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b3c:	f023 030f 	bic.w	r3, r3, #15
 8001b40:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d060      	beq.n	8001c14 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e001      	b.n	8001b64 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d802      	bhi.n	8001b72 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f001 faf6 	bl	8003164 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b78:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b82:	d125      	bne.n	8001bd0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	3305      	adds	r3, #5
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	e01f      	b.n	8001bee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	3305      	adds	r3, #5
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	e00e      	b.n	8001bee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	3305      	adds	r3, #5
 8001bec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4a5c      	ldr	r2, [pc, #368]	; (8001d64 <HAL_I2S_Init+0x270>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	08db      	lsrs	r3, r3, #3
 8001bf8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e003      	b.n	8001c1c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d902      	bls.n	8001c28 <HAL_I2S_Init+0x134>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2bff      	cmp	r3, #255	; 0xff
 8001c26:	d907      	bls.n	8001c38 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f043 0210 	orr.w	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e08f      	b.n	8001d58 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c56:	f023 030f 	bic.w	r3, r3, #15
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6851      	ldr	r1, [r2, #4]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6892      	ldr	r2, [r2, #8]
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68d2      	ldr	r2, [r2, #12]
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6992      	ldr	r2, [r2, #24]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c7a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d161      	bne.n	8001d48 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_I2S_Init+0x274>)
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <HAL_I2S_Init+0x278>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_I2S_Init+0x1a4>
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_I2S_Init+0x27c>)
 8001c96:	e001      	b.n	8001c9c <HAL_I2S_Init+0x1a8>
 8001c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4932      	ldr	r1, [pc, #200]	; (8001d6c <HAL_I2S_Init+0x278>)
 8001ca4:	428a      	cmp	r2, r1
 8001ca6:	d101      	bne.n	8001cac <HAL_I2S_Init+0x1b8>
 8001ca8:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <HAL_I2S_Init+0x27c>)
 8001caa:	e001      	b.n	8001cb0 <HAL_I2S_Init+0x1bc>
 8001cac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cb4:	f023 030f 	bic.w	r3, r3, #15
 8001cb8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <HAL_I2S_Init+0x278>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2S_Init+0x1d4>
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_I2S_Init+0x27c>)
 8001cc6:	e001      	b.n	8001ccc <HAL_I2S_Init+0x1d8>
 8001cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ccc:	2202      	movs	r2, #2
 8001cce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <HAL_I2S_Init+0x278>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_I2S_Init+0x1ea>
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_I2S_Init+0x27c>)
 8001cdc:	e001      	b.n	8001ce2 <HAL_I2S_Init+0x1ee>
 8001cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cee:	d003      	beq.n	8001cf8 <HAL_I2S_Init+0x204>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d103      	bne.n	8001d00 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e001      	b.n	8001d04 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d30:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_I2S_Init+0x278>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2S_Init+0x24c>
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_I2S_Init+0x27c>)
 8001d3e:	e001      	b.n	8001d44 <HAL_I2S_Init+0x250>
 8001d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d44:	897a      	ldrh	r2, [r7, #10]
 8001d46:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0800208d 	.word	0x0800208d
 8001d64:	cccccccd 	.word	0xcccccccd
 8001d68:	080021a1 	.word	0x080021a1
 8001d6c:	40003800 	.word	0x40003800
 8001d70:	40003400 	.word	0x40003400

08001d74 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_I2S_Receive_DMA+0x1a>
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0a1      	b.n	8001ed6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2S_Receive_DMA+0x2e>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e099      	b.n	8001ed6 <HAL_I2S_Receive_DMA+0x162>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d005      	beq.n	8001dc2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e089      	b.n	8001ed6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d002      	beq.n	8001dee <HAL_I2S_Receive_DMA+0x7a>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d10a      	bne.n	8001e04 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	865a      	strh	r2, [r3, #50]	; 0x32
 8001e02:	e005      	b.n	8001e10 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_I2S_Receive_DMA+0x16c>)
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	4a31      	ldr	r2, [pc, #196]	; (8001ee4 <HAL_I2S_Receive_DMA+0x170>)
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	4a30      	ldr	r2, [pc, #192]	; (8001ee8 <HAL_I2S_Receive_DMA+0x174>)
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e36:	d10a      	bne.n	8001e4e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001e64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001e66:	f7ff f9e5 	bl	8001234 <HAL_DMA_Start_IT>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00f      	beq.n	8001e90 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f043 0208 	orr.w	r2, r3, #8
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e022      	b.n	8001ed6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eac:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08001f6b 	.word	0x08001f6b
 8001ee4:	08001f29 	.word	0x08001f29
 8001ee8:	08001f87 	.word	0x08001f87

08001eec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10e      	bne.n	8001f5c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7fe fc8d 	bl	800087c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff ffc1 	bl	8001f00 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0203 	bic.w	r2, r2, #3
 8001fa2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f043 0208 	orr.w	r2, r3, #8
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff ffa5 	bl	8001f14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	881a      	ldrh	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	1c9a      	adds	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10e      	bne.n	8002026 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002016:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff63 	bl	8001eec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	b292      	uxth	r2, r2
 8002042:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002074:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fbfc 	bl	800087c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d13a      	bne.n	800211e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d109      	bne.n	80020c6 <I2S_IRQHandler+0x3a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d102      	bne.n	80020c6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ffb4 	bl	800202e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d126      	bne.n	800211e <I2S_IRQHandler+0x92>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d11f      	bne.n	800211e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ec:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fefb 	bl	8001f14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b03      	cmp	r3, #3
 8002128:	d136      	bne.n	8002198 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d109      	bne.n	8002148 <I2S_IRQHandler+0xbc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d102      	bne.n	8002148 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff45 	bl	8001fd2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d122      	bne.n	8002198 <I2S_IRQHandler+0x10c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b20      	cmp	r3, #32
 800215e:	d11b      	bne.n	8002198 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800216e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff febe 	bl	8001f14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a92      	ldr	r2, [pc, #584]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80021ba:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021bc:	e001      	b.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80021be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a8b      	ldr	r2, [pc, #556]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d101      	bne.n	80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80021d8:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021da:	e001      	b.n	80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80021dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ec:	d004      	beq.n	80021f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8099 	bne.w	800232a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f925 	bl	800245c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9c8 	bl	80025bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b40      	cmp	r3, #64	; 0x40
 8002234:	d13a      	bne.n	80022ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d035      	beq.n	80022ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800224c:	e001      	b.n	8002252 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800224e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4969      	ldr	r1, [pc, #420]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800225a:	428b      	cmp	r3, r1
 800225c:	d101      	bne.n	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800225e:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002260:	e001      	b.n	8002266 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002262:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002266:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800226a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800227a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fe34 	bl	8001f14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	f040 80c3 	bne.w	800243e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80bd 	beq.w	800243e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a49      	ldr	r2, [pc, #292]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022e0:	e001      	b.n	80022e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80022e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4944      	ldr	r1, [pc, #272]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022ee:	428b      	cmp	r3, r1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80022f2:	4b44      	ldr	r3, [pc, #272]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022f4:	e001      	b.n	80022fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f043 0204 	orr.w	r2, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fdf6 	bl	8001f14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002328:	e089      	b.n	800243e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d107      	bne.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8be 	bl	80024c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8fd 	bl	8002558 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d12f      	bne.n	80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d02a      	beq.n	80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002380:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800238e:	e001      	b.n	8002394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4919      	ldr	r1, [pc, #100]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d101      	bne.n	80023a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023a2:	e001      	b.n	80023a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80023a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fda6 	bl	8001f14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d136      	bne.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d031      	beq.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023e8:	e001      	b.n	80023ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80023ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4902      	ldr	r1, [pc, #8]	; (8002400 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023f6:	428b      	cmp	r3, r1
 80023f8:	d106      	bne.n	8002408 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80023fa:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023fc:	e006      	b.n	800240c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80023fe:	bf00      	nop
 8002400:	40003800 	.word	0x40003800
 8002404:	40003400 	.word	0x40003400
 8002408:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800240c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002410:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002420:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fd6c 	bl	8001f14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800243c:	e000      	b.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800243e:	bf00      	nop
}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c99      	adds	r1, r3, #2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6251      	str	r1, [r2, #36]	; 0x24
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d113      	bne.n	80024b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800249c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffc9 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c99      	adds	r1, r3, #2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6251      	str	r1, [r2, #36]	; 0x24
 80024d2:	8819      	ldrh	r1, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <I2SEx_TxISR_I2SExt+0x90>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <I2SEx_TxISR_I2SExt+0x22>
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <I2SEx_TxISR_I2SExt+0x94>)
 80024e0:	e001      	b.n	80024e6 <I2SEx_TxISR_I2SExt+0x26>
 80024e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e6:	460a      	mov	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d121      	bne.n	8002546 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <I2SEx_TxISR_I2SExt+0x90>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <I2SEx_TxISR_I2SExt+0x50>
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <I2SEx_TxISR_I2SExt+0x94>)
 800250e:	e001      	b.n	8002514 <I2SEx_TxISR_I2SExt+0x54>
 8002510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	490d      	ldr	r1, [pc, #52]	; (8002550 <I2SEx_TxISR_I2SExt+0x90>)
 800251c:	428b      	cmp	r3, r1
 800251e:	d101      	bne.n	8002524 <I2SEx_TxISR_I2SExt+0x64>
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <I2SEx_TxISR_I2SExt+0x94>)
 8002522:	e001      	b.n	8002528 <I2SEx_TxISR_I2SExt+0x68>
 8002524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800252c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff81 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40003800 	.word	0x40003800
 8002554:	40003400 	.word	0x40003400

08002558 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68d8      	ldr	r0, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	1c99      	adds	r1, r3, #2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002570:	b282      	uxth	r2, r0
 8002572:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d113      	bne.n	80025b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800259a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff4a 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a20      	ldr	r2, [pc, #128]	; (800264c <I2SEx_RxISR_I2SExt+0x90>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <I2SEx_RxISR_I2SExt+0x16>
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <I2SEx_RxISR_I2SExt+0x94>)
 80025d0:	e001      	b.n	80025d6 <I2SEx_RxISR_I2SExt+0x1a>
 80025d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d6:	68d8      	ldr	r0, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	1c99      	adds	r1, r3, #2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025e2:	b282      	uxth	r2, r0
 80025e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d121      	bne.n	8002642 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <I2SEx_RxISR_I2SExt+0x90>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <I2SEx_RxISR_I2SExt+0x50>
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <I2SEx_RxISR_I2SExt+0x94>)
 800260a:	e001      	b.n	8002610 <I2SEx_RxISR_I2SExt+0x54>
 800260c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	490d      	ldr	r1, [pc, #52]	; (800264c <I2SEx_RxISR_I2SExt+0x90>)
 8002618:	428b      	cmp	r3, r1
 800261a:	d101      	bne.n	8002620 <I2SEx_RxISR_I2SExt+0x64>
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <I2SEx_RxISR_I2SExt+0x94>)
 800261e:	e001      	b.n	8002624 <I2SEx_RxISR_I2SExt+0x68>
 8002620:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002624:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002628:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff03 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40003800 	.word	0x40003800
 8002650:	40003400 	.word	0x40003400

08002654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e267      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d075      	beq.n	800275e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002672:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00c      	beq.n	8002698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b85      	ldr	r3, [pc, #532]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002686:	2b08      	cmp	r3, #8
 8002688:	d112      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b82      	ldr	r3, [pc, #520]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002696:	d10b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05b      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d157      	bne.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e242      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x74>
 80026ba:	4b76      	ldr	r3, [pc, #472]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a75      	ldr	r2, [pc, #468]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01d      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x98>
 80026d2:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6f      	ldr	r2, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6c      	ldr	r2, [pc, #432]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026ec:	4b69      	ldr	r3, [pc, #420]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a68      	ldr	r2, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fb86 	bl	8000e1c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fb82 	bl	8000e1c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e207      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0xc0>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fb72 	bl	8000e1c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fb6e 	bl	8000e1c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1f3      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	4b51      	ldr	r3, [pc, #324]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d063      	beq.n	8002832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276a:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d11c      	bne.n	80027bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d116      	bne.n	80027bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_RCC_OscConfig+0x152>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e1c7      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4937      	ldr	r1, [pc, #220]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	e03a      	b.n	8002832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x244>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fb27 	bl	8000e1c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d2:	f7fe fb23 	bl	8000e1c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1a8      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4925      	ldr	r1, [pc, #148]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
 8002804:	e015      	b.n	8002832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x244>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fb06 	bl	8000e1c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002814:	f7fe fb02 	bl	8000e1c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e187      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d036      	beq.n	80028ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x248>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fae6 	bl	8000e1c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002854:	f7fe fae2 	bl	8000e1c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e167      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x240>)
 8002868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x200>
 8002872:	e01b      	b.n	80028ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_OscConfig+0x248>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe facf 	bl	8000e1c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	e00e      	b.n	80028a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe facb 	bl	8000e1c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d907      	bls.n	80028a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e150      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
 8002894:	40023800 	.word	0x40023800
 8002898:	42470000 	.word	0x42470000
 800289c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ea      	bne.n	8002882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8097 	beq.w	80029e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b81      	ldr	r3, [pc, #516]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b7d      	ldr	r3, [pc, #500]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a7c      	ldr	r2, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b7a      	ldr	r3, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f6:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a73      	ldr	r2, [pc, #460]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002902:	f7fe fa8b 	bl	8000e1c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290a:	f7fe fa87 	bl	8000e1c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e10c      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x474>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x2ea>
 8002930:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	e01c      	b.n	8002978 <HAL_RCC_OscConfig+0x324>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b05      	cmp	r3, #5
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x30c>
 8002946:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5e      	ldr	r2, [pc, #376]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a5b      	ldr	r2, [pc, #364]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0x324>
 8002960:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	4b55      	ldr	r3, [pc, #340]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002972:	f023 0304 	bic.w	r3, r3, #4
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fa4c 	bl	8000e1c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fa48 	bl	8000e1c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0cb      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	4b49      	ldr	r3, [pc, #292]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ee      	beq.n	8002988 <HAL_RCC_OscConfig+0x334>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7fe fa36 	bl	8000e1c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe fa32 	bl	8000e1c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0b5      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ee      	bne.n	80029b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	4a38      	ldr	r2, [pc, #224]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a1 	beq.w	8002b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d05c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d141      	bne.n	8002a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_RCC_OscConfig+0x478>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fa06 	bl	8000e1c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fa02 	bl	8000e1c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e087      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	491b      	ldr	r1, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x478>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe f9db 	bl	8000e1c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe f9d7 	bl	8000e1c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e05c      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x416>
 8002a88:	e054      	b.n	8002b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_RCC_OscConfig+0x478>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe f9c4 	bl	8000e1c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe f9c0 	bl	8000e1c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e045      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x444>
 8002ab6:	e03d      	b.n	8002b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e038      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4ec>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d028      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d121      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d11a      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d111      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0cc      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d90c      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d044      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d119      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e06f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e067      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4934      	ldr	r1, [pc, #208]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c34:	f7fe f8f2 	bl	8000e1c <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe f8ee 	bl	8000e1c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d20c      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f821 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	490a      	ldr	r1, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f852 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	40023800 	.word	0x40023800
 8002d04:	080067cc 	.word	0x080067cc
 8002d08:	20000400 	.word	0x20000400
 8002d0c:	20000404 	.word	0x20000404

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b094      	sub	sp, #80	; 0x50
 8002d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d20:	2300      	movs	r3, #0
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d28:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d00d      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x40>
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	f200 80e1 	bhi.w	8002efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d42:	e0db      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d48:	e0db      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4e:	e0d8      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d50:	4b6f      	ldr	r3, [pc, #444]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d063      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d66:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d82:	4622      	mov	r2, r4
 8002d84:	462b      	mov	r3, r5
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	0159      	lsls	r1, r3, #5
 8002d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d94:	0150      	lsls	r0, r2, #5
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	1a51      	subs	r1, r2, r1
 8002d9e:	6139      	str	r1, [r7, #16]
 8002da0:	4629      	mov	r1, r5
 8002da2:	eb63 0301 	sbc.w	r3, r3, r1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db4:	4659      	mov	r1, fp
 8002db6:	018b      	lsls	r3, r1, #6
 8002db8:	4651      	mov	r1, sl
 8002dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	018a      	lsls	r2, r1, #6
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002dc8:	4659      	mov	r1, fp
 8002dca:	eb63 0901 	sbc.w	r9, r3, r1
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de2:	4690      	mov	r8, r2
 8002de4:	4699      	mov	r9, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	eb18 0303 	adds.w	r3, r8, r3
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	462b      	mov	r3, r5
 8002df0:	eb49 0303 	adc.w	r3, r9, r3
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e02:	4629      	mov	r1, r5
 8002e04:	024b      	lsls	r3, r1, #9
 8002e06:	4621      	mov	r1, r4
 8002e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	024a      	lsls	r2, r1, #9
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e20:	f7fd f9da 	bl	80001d8 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e2c:	e058      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	2200      	movs	r2, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	4611      	mov	r1, r2
 8002e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	0159      	lsls	r1, r3, #5
 8002e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5a:	0150      	lsls	r0, r2, #5
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4641      	mov	r1, r8
 8002e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e66:	4649      	mov	r1, r9
 8002e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e80:	ebb2 040a 	subs.w	r4, r2, sl
 8002e84:	eb63 050b 	sbc.w	r5, r3, fp
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	00eb      	lsls	r3, r5, #3
 8002e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e96:	00e2      	lsls	r2, r4, #3
 8002e98:	4614      	mov	r4, r2
 8002e9a:	461d      	mov	r5, r3
 8002e9c:	4643      	mov	r3, r8
 8002e9e:	18e3      	adds	r3, r4, r3
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	eb45 0303 	adc.w	r3, r5, r3
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	028b      	lsls	r3, r1, #10
 8002eba:	4621      	mov	r1, r4
 8002ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	028a      	lsls	r2, r1, #10
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	61fa      	str	r2, [r7, #28]
 8002ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed4:	f7fd f980 	bl	80001d8 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	3301      	adds	r3, #1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3750      	adds	r7, #80	; 0x50
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000400 	.word	0x20000400

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	080067dc 	.word	0x080067dc

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffdc 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	080067dc 	.word	0x080067dc

08002f84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d038      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd ff33 	bl	8000e1c <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fba:	f7fd ff2f 	bl	8000e1c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0bd      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	495a      	ldr	r1, [pc, #360]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ff2:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fd ff10 	bl	8000e1c <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003000:	f7fd ff0c 	bl	8000e1c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e09a      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8083 	beq.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a47      	ldr	r2, [pc, #284]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
 800303c:	4b45      	ldr	r3, [pc, #276]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a42      	ldr	r2, [pc, #264]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800304e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003052:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003054:	f7fd fee2 	bl	8000e1c <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800305c:	f7fd fede 	bl	8000e1c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e06c      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800306e:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02f      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	429a      	cmp	r2, r3
 8003096:	d028      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003098:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030a2:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030ae:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd feac 	bl	8000e1c <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fd fea8 	bl	8000e1c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e034      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f6:	d10d      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	4911      	ldr	r1, [pc, #68]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
 8003112:	e005      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	4313      	orrs	r3, r2
 8003130:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7d1a      	ldrb	r2, [r3, #20]
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003144:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	42470068 	.word	0x42470068
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000
 800315c:	42470e40 	.word	0x42470e40
 8003160:	424711e0 	.word	0x424711e0

08003164 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d140      	bne.n	8003204 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d131      	bne.n	80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800319a:	617b      	str	r3, [r7, #20]
          break;
 800319c:	e031      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031aa:	d109      	bne.n	80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ec:	0f1b      	lsrs	r3, r3, #28
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
          break;
 80031fa:	e002      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
          break;
 8003200:	bf00      	nop
        }
      }
      break;
 8003202:	bf00      	nop
    }
  }
  return frequency;
 8003204:	697b      	ldr	r3, [r7, #20]
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00bb8000 	.word	0x00bb8000
 800321c:	007a1200 	.word	0x007a1200
 8003220:	00f42400 	.word	0x00f42400

08003224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e03f      	b.n	80032b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fc40 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f829 	bl	80032c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800327c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800328c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800329c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c4:	b0c0      	sub	sp, #256	; 0x100
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	68d9      	ldr	r1, [r3, #12]
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	ea40 0301 	orr.w	r3, r0, r1
 80032e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	431a      	orrs	r2, r3
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003318:	f021 010c 	bic.w	r1, r1, #12
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003326:	430b      	orrs	r3, r1
 8003328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333a:	6999      	ldr	r1, [r3, #24]
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	ea40 0301 	orr.w	r3, r0, r1
 8003346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b8f      	ldr	r3, [pc, #572]	; (800358c <UART_SetConfig+0x2cc>)
 8003350:	429a      	cmp	r2, r3
 8003352:	d005      	beq.n	8003360 <UART_SetConfig+0xa0>
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b8d      	ldr	r3, [pc, #564]	; (8003590 <UART_SetConfig+0x2d0>)
 800335c:	429a      	cmp	r2, r3
 800335e:	d104      	bne.n	800336a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003360:	f7ff fdfc 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 8003364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003368:	e003      	b.n	8003372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800336a:	f7ff fde3 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 800336e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	f040 810c 	bne.w	8003598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800338a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800338e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003392:	4622      	mov	r2, r4
 8003394:	462b      	mov	r3, r5
 8003396:	1891      	adds	r1, r2, r2
 8003398:	65b9      	str	r1, [r7, #88]	; 0x58
 800339a:	415b      	adcs	r3, r3
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800339e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033a2:	4621      	mov	r1, r4
 80033a4:	eb12 0801 	adds.w	r8, r2, r1
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb43 0901 	adc.w	r9, r3, r1
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c2:	4690      	mov	r8, r2
 80033c4:	4699      	mov	r9, r3
 80033c6:	4623      	mov	r3, r4
 80033c8:	eb18 0303 	adds.w	r3, r8, r3
 80033cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033d0:	462b      	mov	r3, r5
 80033d2:	eb49 0303 	adc.w	r3, r9, r3
 80033d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033ee:	460b      	mov	r3, r1
 80033f0:	18db      	adds	r3, r3, r3
 80033f2:	653b      	str	r3, [r7, #80]	; 0x50
 80033f4:	4613      	mov	r3, r2
 80033f6:	eb42 0303 	adc.w	r3, r2, r3
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
 80033fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003404:	f7fc fee8 	bl	80001d8 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <UART_SetConfig+0x2d4>)
 800340e:	fba3 2302 	umull	r2, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	011c      	lsls	r4, r3, #4
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003430:	415b      	adcs	r3, r3
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003438:	4641      	mov	r1, r8
 800343a:	eb12 0a01 	adds.w	sl, r2, r1
 800343e:	4649      	mov	r1, r9
 8003440:	eb43 0b01 	adc.w	fp, r3, r1
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003458:	4692      	mov	sl, r2
 800345a:	469b      	mov	fp, r3
 800345c:	4643      	mov	r3, r8
 800345e:	eb1a 0303 	adds.w	r3, sl, r3
 8003462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003466:	464b      	mov	r3, r9
 8003468:	eb4b 0303 	adc.w	r3, fp, r3
 800346c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800347c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003484:	460b      	mov	r3, r1
 8003486:	18db      	adds	r3, r3, r3
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
 800348a:	4613      	mov	r3, r2
 800348c:	eb42 0303 	adc.w	r3, r2, r3
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
 8003492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800349a:	f7fc fe9d 	bl	80001d8 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <UART_SetConfig+0x2d4>)
 80034a6:	fba3 2301 	umull	r2, r3, r3, r1
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2264      	movs	r2, #100	; 0x64
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	1acb      	subs	r3, r1, r3
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034ba:	4b36      	ldr	r3, [pc, #216]	; (8003594 <UART_SetConfig+0x2d4>)
 80034bc:	fba3 2302 	umull	r2, r3, r3, r2
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034c8:	441c      	add	r4, r3
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034e4:	415b      	adcs	r3, r3
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6339      	str	r1, [r7, #48]	; 0x30
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003520:	464b      	mov	r3, r9
 8003522:	460a      	mov	r2, r1
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800353c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003540:	460b      	mov	r3, r1
 8003542:	18db      	adds	r3, r3, r3
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
 8003546:	4613      	mov	r3, r2
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003556:	f7fc fe3f 	bl	80001d8 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <UART_SetConfig+0x2d4>)
 8003560:	fba3 1302 	umull	r1, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	2164      	movs	r1, #100	; 0x64
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	3332      	adds	r3, #50	; 0x32
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <UART_SetConfig+0x2d4>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	f003 0207 	and.w	r2, r3, #7
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4422      	add	r2, r4
 8003586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003588:	e106      	b.n	8003798 <UART_SetConfig+0x4d8>
 800358a:	bf00      	nop
 800358c:	40011000 	.word	0x40011000
 8003590:	40011400 	.word	0x40011400
 8003594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035aa:	4642      	mov	r2, r8
 80035ac:	464b      	mov	r3, r9
 80035ae:	1891      	adds	r1, r2, r2
 80035b0:	6239      	str	r1, [r7, #32]
 80035b2:	415b      	adcs	r3, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ba:	4641      	mov	r1, r8
 80035bc:	1854      	adds	r4, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb43 0501 	adc.w	r5, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	00eb      	lsls	r3, r5, #3
 80035ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d2:	00e2      	lsls	r2, r4, #3
 80035d4:	4614      	mov	r4, r2
 80035d6:	461d      	mov	r5, r3
 80035d8:	4643      	mov	r3, r8
 80035da:	18e3      	adds	r3, r4, r3
 80035dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e0:	464b      	mov	r3, r9
 80035e2:	eb45 0303 	adc.w	r3, r5, r3
 80035e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003606:	4629      	mov	r1, r5
 8003608:	008b      	lsls	r3, r1, #2
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003610:	4621      	mov	r1, r4
 8003612:	008a      	lsls	r2, r1, #2
 8003614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003618:	f7fc fdde 	bl	80001d8 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4b60      	ldr	r3, [pc, #384]	; (80037a4 <UART_SetConfig+0x4e4>)
 8003622:	fba3 2302 	umull	r2, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	011c      	lsls	r4, r3, #4
 800362a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	1891      	adds	r1, r2, r2
 8003642:	61b9      	str	r1, [r7, #24]
 8003644:	415b      	adcs	r3, r3
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364c:	4641      	mov	r1, r8
 800364e:	1851      	adds	r1, r2, r1
 8003650:	6139      	str	r1, [r7, #16]
 8003652:	4649      	mov	r1, r9
 8003654:	414b      	adcs	r3, r1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003664:	4659      	mov	r1, fp
 8003666:	00cb      	lsls	r3, r1, #3
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366e:	4651      	mov	r1, sl
 8003670:	00ca      	lsls	r2, r1, #3
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	4603      	mov	r3, r0
 8003678:	4642      	mov	r2, r8
 800367a:	189b      	adds	r3, r3, r2
 800367c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003680:	464b      	mov	r3, r9
 8003682:	460a      	mov	r2, r1
 8003684:	eb42 0303 	adc.w	r3, r2, r3
 8003688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	67bb      	str	r3, [r7, #120]	; 0x78
 8003696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036a4:	4649      	mov	r1, r9
 80036a6:	008b      	lsls	r3, r1, #2
 80036a8:	4641      	mov	r1, r8
 80036aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ae:	4641      	mov	r1, r8
 80036b0:	008a      	lsls	r2, r1, #2
 80036b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036b6:	f7fc fd8f 	bl	80001d8 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4611      	mov	r1, r2
 80036c0:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <UART_SetConfig+0x4e4>)
 80036c2:	fba3 2301 	umull	r2, r3, r3, r1
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2264      	movs	r2, #100	; 0x64
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	1acb      	subs	r3, r1, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a33      	ldr	r2, [pc, #204]	; (80037a4 <UART_SetConfig+0x4e4>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	441c      	add	r4, r3
 80036e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e6:	2200      	movs	r2, #0
 80036e8:	673b      	str	r3, [r7, #112]	; 0x70
 80036ea:	677a      	str	r2, [r7, #116]	; 0x74
 80036ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	1891      	adds	r1, r2, r2
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	415b      	adcs	r3, r3
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003700:	4641      	mov	r1, r8
 8003702:	1851      	adds	r1, r2, r1
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	4649      	mov	r1, r9
 8003708:	414b      	adcs	r3, r1
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003718:	4659      	mov	r1, fp
 800371a:	00cb      	lsls	r3, r1, #3
 800371c:	4651      	mov	r1, sl
 800371e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003722:	4651      	mov	r1, sl
 8003724:	00ca      	lsls	r2, r1, #3
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	4603      	mov	r3, r0
 800372c:	4642      	mov	r2, r8
 800372e:	189b      	adds	r3, r3, r2
 8003730:	66bb      	str	r3, [r7, #104]	; 0x68
 8003732:	464b      	mov	r3, r9
 8003734:	460a      	mov	r2, r1
 8003736:	eb42 0303 	adc.w	r3, r2, r3
 800373a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	663b      	str	r3, [r7, #96]	; 0x60
 8003746:	667a      	str	r2, [r7, #100]	; 0x64
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003754:	4649      	mov	r1, r9
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	4641      	mov	r1, r8
 800375a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375e:	4641      	mov	r1, r8
 8003760:	008a      	lsls	r2, r1, #2
 8003762:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003766:	f7fc fd37 	bl	80001d8 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <UART_SetConfig+0x4e4>)
 8003770:	fba3 1302 	umull	r1, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2164      	movs	r1, #100	; 0x64
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <UART_SetConfig+0x4e4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4422      	add	r2, r4
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800379e:	46bd      	mov	sp, r7
 80037a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a4:	51eb851f 	.word	0x51eb851f

080037a8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <MX_PDM2PCM_Init+0x4c>)
 80037bc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037c0:	2202      	movs	r2, #2
 80037c2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037c6:	2202      	movs	r2, #2
 80037c8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80037ca:	4809      	ldr	r0, [pc, #36]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037cc:	f001 fd66 	bl	800529c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <MX_PDM2PCM_Init+0x50>)
 80037d2:	2202      	movs	r2, #2
 80037d4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <MX_PDM2PCM_Init+0x50>)
 80037d8:	2210      	movs	r2, #16
 80037da:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <MX_PDM2PCM_Init+0x50>)
 80037de:	2200      	movs	r2, #0
 80037e0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80037e2:	4905      	ldr	r1, [pc, #20]	; (80037f8 <MX_PDM2PCM_Init+0x50>)
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <MX_PDM2PCM_Init+0x48>)
 80037e6:	f001 fde3 	bl	80053b0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000788 	.word	0x20000788
 80037f4:	7d70a3d6 	.word	0x7d70a3d6
 80037f8:	200007d4 	.word	0x200007d4

080037fc <D16_GENERIC>:
 80037fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003800:	b089      	sub	sp, #36	; 0x24
 8003802:	68d4      	ldr	r4, [r2, #12]
 8003804:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003806:	6993      	ldr	r3, [r2, #24]
 8003808:	9407      	str	r4, [sp, #28]
 800380a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800380c:	9306      	str	r3, [sp, #24]
 800380e:	9402      	str	r4, [sp, #8]
 8003810:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003814:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8003818:	69d3      	ldr	r3, [r2, #28]
 800381a:	6896      	ldr	r6, [r2, #8]
 800381c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800381e:	9103      	str	r1, [sp, #12]
 8003820:	2d00      	cmp	r5, #0
 8003822:	d066      	beq.n	80038f2 <D16_GENERIC+0xf6>
 8003824:	f004 0510 	and.w	r5, r4, #16
 8003828:	f004 0420 	and.w	r4, r4, #32
 800382c:	9504      	str	r5, [sp, #16]
 800382e:	4938      	ldr	r1, [pc, #224]	; (8003910 <D16_GENERIC+0x114>)
 8003830:	9405      	str	r4, [sp, #20]
 8003832:	f04f 0e00 	mov.w	lr, #0
 8003836:	4635      	mov	r5, r6
 8003838:	e04f      	b.n	80038da <D16_GENERIC+0xde>
 800383a:	5d87      	ldrb	r7, [r0, r6]
 800383c:	7804      	ldrb	r4, [r0, #0]
 800383e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003842:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8003846:	b2e6      	uxtb	r6, r4
 8003848:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800384c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003850:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003854:	4433      	add	r3, r6
 8003856:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800385a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800385e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003862:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8003866:	0aa3      	lsrs	r3, r4, #10
 8003868:	4c2a      	ldr	r4, [pc, #168]	; (8003914 <D16_GENERIC+0x118>)
 800386a:	fb26 5404 	smlad	r4, r6, r4, r5
 800386e:	4d2a      	ldr	r5, [pc, #168]	; (8003918 <D16_GENERIC+0x11c>)
 8003870:	fb26 f505 	smuad	r5, r6, r5
 8003874:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8003878:	eb04 080a 	add.w	r8, r4, sl
 800387c:	eba8 080b 	sub.w	r8, r8, fp
 8003880:	4646      	mov	r6, r8
 8003882:	17f7      	asrs	r7, r6, #31
 8003884:	e9cd 6700 	strd	r6, r7, [sp]
 8003888:	9e04      	ldr	r6, [sp, #16]
 800388a:	f10e 0c01 	add.w	ip, lr, #1
 800388e:	b16e      	cbz	r6, 80038ac <D16_GENERIC+0xb0>
 8003890:	6a16      	ldr	r6, [r2, #32]
 8003892:	9f01      	ldr	r7, [sp, #4]
 8003894:	fba8 8906 	umull	r8, r9, r8, r6
 8003898:	fb06 9907 	mla	r9, r6, r7, r9
 800389c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80038a0:	f149 0900 	adc.w	r9, r9, #0
 80038a4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80038a8:	46a3      	mov	fp, r4
 80038aa:	4654      	mov	r4, sl
 80038ac:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80038ae:	9f02      	ldr	r7, [sp, #8]
 80038b0:	0424      	lsls	r4, r4, #16
 80038b2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80038b6:	f04f 0900 	mov.w	r9, #0
 80038ba:	fb0e fe06 	mul.w	lr, lr, r6
 80038be:	fbc7 8904 	smlal	r8, r9, r7, r4
 80038c2:	9e03      	ldr	r6, [sp, #12]
 80038c4:	464f      	mov	r7, r9
 80038c6:	10bc      	asrs	r4, r7, #2
 80038c8:	f304 040f 	ssat	r4, #16, r4
 80038cc:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 80038d0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80038d2:	fa1f fe8c 	uxth.w	lr, ip
 80038d6:	4574      	cmp	r4, lr
 80038d8:	d90a      	bls.n	80038f0 <D16_GENERIC+0xf4>
 80038da:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80038dc:	2c01      	cmp	r4, #1
 80038de:	b2e6      	uxtb	r6, r4
 80038e0:	d1ab      	bne.n	800383a <D16_GENERIC+0x3e>
 80038e2:	9e05      	ldr	r6, [sp, #20]
 80038e4:	f850 4b02 	ldr.w	r4, [r0], #2
 80038e8:	2e00      	cmp	r6, #0
 80038ea:	d0ac      	beq.n	8003846 <D16_GENERIC+0x4a>
 80038ec:	ba64      	rev16	r4, r4
 80038ee:	e7aa      	b.n	8003846 <D16_GENERIC+0x4a>
 80038f0:	462e      	mov	r6, r5
 80038f2:	9907      	ldr	r1, [sp, #28]
 80038f4:	61d3      	str	r3, [r2, #28]
 80038f6:	9b06      	ldr	r3, [sp, #24]
 80038f8:	6096      	str	r6, [r2, #8]
 80038fa:	2000      	movs	r0, #0
 80038fc:	60d1      	str	r1, [r2, #12]
 80038fe:	f8c2 a010 	str.w	sl, [r2, #16]
 8003902:	f8c2 b014 	str.w	fp, [r2, #20]
 8003906:	6193      	str	r3, [r2, #24]
 8003908:	b009      	add	sp, #36	; 0x24
 800390a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390e:	bf00      	nop
 8003910:	20000000 	.word	0x20000000
 8003914:	00030001 	.word	0x00030001
 8003918:	00010003 	.word	0x00010003

0800391c <D24_GENERIC>:
 800391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003920:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8003922:	6993      	ldr	r3, [r2, #24]
 8003924:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003926:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800392a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800392e:	6894      	ldr	r4, [r2, #8]
 8003930:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003934:	b089      	sub	sp, #36	; 0x24
 8003936:	9307      	str	r3, [sp, #28]
 8003938:	9503      	str	r5, [sp, #12]
 800393a:	69d3      	ldr	r3, [r2, #28]
 800393c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800393e:	9104      	str	r1, [sp, #16]
 8003940:	2e00      	cmp	r6, #0
 8003942:	f000 8096 	beq.w	8003a72 <D24_GENERIC+0x156>
 8003946:	f005 0610 	and.w	r6, r5, #16
 800394a:	f005 0520 	and.w	r5, r5, #32
 800394e:	4954      	ldr	r1, [pc, #336]	; (8003aa0 <D24_GENERIC+0x184>)
 8003950:	9605      	str	r6, [sp, #20]
 8003952:	9506      	str	r5, [sp, #24]
 8003954:	f04f 0e00 	mov.w	lr, #0
 8003958:	f8cd 9008 	str.w	r9, [sp, #8]
 800395c:	e06a      	b.n	8003a34 <D24_GENERIC+0x118>
 800395e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8003962:	f810 8007 	ldrb.w	r8, [r0, r7]
 8003966:	f890 c000 	ldrb.w	ip, [r0]
 800396a:	042d      	lsls	r5, r5, #16
 800396c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003970:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8003974:	44ac      	add	ip, r5
 8003976:	4438      	add	r0, r7
 8003978:	fa5f f68c 	uxtb.w	r6, ip
 800397c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8003980:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003984:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8003988:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800398c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8003990:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003994:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8003998:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800399c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80039a0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80039a4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80039a8:	4d3e      	ldr	r5, [pc, #248]	; (8003aa4 <D24_GENERIC+0x188>)
 80039aa:	fb26 b705 	smlad	r7, r6, r5, fp
 80039ae:	4d3e      	ldr	r5, [pc, #248]	; (8003aa8 <D24_GENERIC+0x18c>)
 80039b0:	fb26 4b05 	smlad	fp, r6, r5, r4
 80039b4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80039b8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80039bc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80039c0:	2401      	movs	r4, #1
 80039c2:	fb26 f604 	smuad	r6, r6, r4
 80039c6:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80039ca:	9f02      	ldr	r7, [sp, #8]
 80039cc:	eb0e 0c04 	add.w	ip, lr, r4
 80039d0:	eb08 0406 	add.w	r4, r8, r6
 80039d4:	eb05 060a 	add.w	r6, r5, sl
 80039d8:	1bf6      	subs	r6, r6, r7
 80039da:	4637      	mov	r7, r6
 80039dc:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80039e0:	e9cd 7800 	strd	r7, r8, [sp]
 80039e4:	9f05      	ldr	r7, [sp, #20]
 80039e6:	b177      	cbz	r7, 8003a06 <D24_GENERIC+0xea>
 80039e8:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80039ec:	9502      	str	r5, [sp, #8]
 80039ee:	fba6 9a08 	umull	r9, sl, r6, r8
 80039f2:	9e01      	ldr	r6, [sp, #4]
 80039f4:	fb08 aa06 	mla	sl, r8, r6, sl
 80039f8:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80039fc:	f14a 0700 	adc.w	r7, sl, #0
 8003a00:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8003a04:	4655      	mov	r5, sl
 8003a06:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8003a08:	9f03      	ldr	r7, [sp, #12]
 8003a0a:	03ad      	lsls	r5, r5, #14
 8003a0c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003a10:	f04f 0900 	mov.w	r9, #0
 8003a14:	fb0e fe06 	mul.w	lr, lr, r6
 8003a18:	fbc7 8905 	smlal	r8, r9, r7, r5
 8003a1c:	9e04      	ldr	r6, [sp, #16]
 8003a1e:	464f      	mov	r7, r9
 8003a20:	10bd      	asrs	r5, r7, #2
 8003a22:	f305 050f 	ssat	r5, #16, r5
 8003a26:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8003a2a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003a2c:	fa1f fe8c 	uxth.w	lr, ip
 8003a30:	4575      	cmp	r5, lr
 8003a32:	d91c      	bls.n	8003a6e <D24_GENERIC+0x152>
 8003a34:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8003a36:	b2ef      	uxtb	r7, r5
 8003a38:	2d01      	cmp	r5, #1
 8003a3a:	b23e      	sxth	r6, r7
 8003a3c:	d18f      	bne.n	800395e <D24_GENERIC+0x42>
 8003a3e:	9d06      	ldr	r5, [sp, #24]
 8003a40:	b15d      	cbz	r5, 8003a5a <D24_GENERIC+0x13e>
 8003a42:	f01e 0f01 	tst.w	lr, #1
 8003a46:	d122      	bne.n	8003a8e <D24_GENERIC+0x172>
 8003a48:	7805      	ldrb	r5, [r0, #0]
 8003a4a:	78c7      	ldrb	r7, [r0, #3]
 8003a4c:	7846      	ldrb	r6, [r0, #1]
 8003a4e:	022d      	lsls	r5, r5, #8
 8003a50:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003a54:	44b4      	add	ip, r6
 8003a56:	3002      	adds	r0, #2
 8003a58:	e78e      	b.n	8003978 <D24_GENERIC+0x5c>
 8003a5a:	7846      	ldrb	r6, [r0, #1]
 8003a5c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8003a60:	f810 5b03 	ldrb.w	r5, [r0], #3
 8003a64:	0236      	lsls	r6, r6, #8
 8003a66:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8003a6a:	44ac      	add	ip, r5
 8003a6c:	e784      	b.n	8003978 <D24_GENERIC+0x5c>
 8003a6e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003a72:	61d3      	str	r3, [r2, #28]
 8003a74:	9b07      	ldr	r3, [sp, #28]
 8003a76:	6094      	str	r4, [r2, #8]
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003a7e:	f8c2 a010 	str.w	sl, [r2, #16]
 8003a82:	f8c2 9014 	str.w	r9, [r2, #20]
 8003a86:	6193      	str	r3, [r2, #24]
 8003a88:	b009      	add	sp, #36	; 0x24
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	78c5      	ldrb	r5, [r0, #3]
 8003a90:	7887      	ldrb	r7, [r0, #2]
 8003a92:	f810 6b04 	ldrb.w	r6, [r0], #4
 8003a96:	022d      	lsls	r5, r5, #8
 8003a98:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003a9c:	44b4      	add	ip, r6
 8003a9e:	e76b      	b.n	8003978 <D24_GENERIC+0x5c>
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	00030001 	.word	0x00030001
 8003aa8:	00060007 	.word	0x00060007

08003aac <D32_GENERIC>:
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003ab2:	6993      	ldr	r3, [r2, #24]
 8003ab4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003ab6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003aba:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003abe:	69d6      	ldr	r6, [r2, #28]
 8003ac0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003ac4:	b089      	sub	sp, #36	; 0x24
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	9403      	str	r4, [sp, #12]
 8003aca:	6893      	ldr	r3, [r2, #8]
 8003acc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003ace:	9104      	str	r1, [sp, #16]
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	f000 809f 	beq.w	8003c14 <D32_GENERIC+0x168>
 8003ad6:	f004 0510 	and.w	r5, r4, #16
 8003ada:	f004 0420 	and.w	r4, r4, #32
 8003ade:	9505      	str	r5, [sp, #20]
 8003ae0:	4953      	ldr	r1, [pc, #332]	; (8003c30 <D32_GENERIC+0x184>)
 8003ae2:	9406      	str	r4, [sp, #24]
 8003ae4:	f04f 0c00 	mov.w	ip, #0
 8003ae8:	f8cd 9008 	str.w	r9, [sp, #8]
 8003aec:	461d      	mov	r5, r3
 8003aee:	4617      	mov	r7, r2
 8003af0:	e077      	b.n	8003be2 <D32_GENERIC+0x136>
 8003af2:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003af6:	f810 800e 	ldrb.w	r8, [r0, lr]
 8003afa:	f810 e002 	ldrb.w	lr, [r0, r2]
 8003afe:	7800      	ldrb	r0, [r0, #0]
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003b06:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003b0a:	4403      	add	r3, r0
 8003b0c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8003b10:	b2dc      	uxtb	r4, r3
 8003b12:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003b16:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8003b1a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003b1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b22:	0e1b      	lsrs	r3, r3, #24
 8003b24:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8003b28:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8003b2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b30:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8003b34:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8003b38:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8003b3c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8003b40:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003b44:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b48:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003b4c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8003b50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003b54:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <D32_GENERIC+0x188>)
 8003b56:	fb22 b403 	smlad	r4, r2, r3, fp
 8003b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b5e:	fb2e 4803 	smlad	r8, lr, r3, r4
 8003b62:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <D32_GENERIC+0x18c>)
 8003b64:	fb22 5503 	smlad	r5, r2, r3, r5
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <D32_GENERIC+0x190>)
 8003b6a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8003b6e:	2301      	movs	r3, #1
 8003b70:	fb22 f203 	smuad	r2, r2, r3
 8003b74:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <D32_GENERIC+0x194>)
 8003b76:	fb2e 2503 	smlad	r5, lr, r3, r2
 8003b7a:	9b02      	ldr	r3, [sp, #8]
 8003b7c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8003b80:	eb04 080a 	add.w	r8, r4, sl
 8003b84:	eba8 0803 	sub.w	r8, r8, r3
 8003b88:	4642      	mov	r2, r8
 8003b8a:	17d3      	asrs	r3, r2, #31
 8003b8c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b90:	9b05      	ldr	r3, [sp, #20]
 8003b92:	f10c 0e01 	add.w	lr, ip, #1
 8003b96:	b16b      	cbz	r3, 8003bb4 <D32_GENERIC+0x108>
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	9b01      	ldr	r3, [sp, #4]
 8003b9c:	9402      	str	r4, [sp, #8]
 8003b9e:	fba8 8902 	umull	r8, r9, r8, r2
 8003ba2:	fb02 9903 	mla	r9, r2, r3, r9
 8003ba6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003baa:	f149 0900 	adc.w	r9, r9, #0
 8003bae:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003bb2:	4654      	mov	r4, sl
 8003bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bb6:	9a04      	ldr	r2, [sp, #16]
 8003bb8:	fb0c fc03 	mul.w	ip, ip, r3
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	0364      	lsls	r4, r4, #13
 8003bc0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003bc4:	f04f 0900 	mov.w	r9, #0
 8003bc8:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003bcc:	464b      	mov	r3, r9
 8003bce:	109b      	asrs	r3, r3, #2
 8003bd0:	f303 030f 	ssat	r3, #16, r3
 8003bd4:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8003bd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bda:	fa1f fc8e 	uxth.w	ip, lr
 8003bde:	4563      	cmp	r3, ip
 8003be0:	d914      	bls.n	8003c0c <D32_GENERIC+0x160>
 8003be2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8003be4:	b2e2      	uxtb	r2, r4
 8003be6:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8003bea:	eb00 080e 	add.w	r8, r0, lr
 8003bee:	4253      	negs	r3, r2
 8003bf0:	2c01      	cmp	r4, #1
 8003bf2:	eb08 0403 	add.w	r4, r8, r3
 8003bf6:	f47f af7c 	bne.w	8003af2 <D32_GENERIC+0x46>
 8003bfa:	1d02      	adds	r2, r0, #4
 8003bfc:	6803      	ldr	r3, [r0, #0]
 8003bfe:	9806      	ldr	r0, [sp, #24]
 8003c00:	b110      	cbz	r0, 8003c08 <D32_GENERIC+0x15c>
 8003c02:	ba5b      	rev16	r3, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	e783      	b.n	8003b10 <D32_GENERIC+0x64>
 8003c08:	4610      	mov	r0, r2
 8003c0a:	e781      	b.n	8003b10 <D32_GENERIC+0x64>
 8003c0c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003c10:	462b      	mov	r3, r5
 8003c12:	463a      	mov	r2, r7
 8003c14:	6093      	str	r3, [r2, #8]
 8003c16:	9b07      	ldr	r3, [sp, #28]
 8003c18:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	61d6      	str	r6, [r2, #28]
 8003c20:	f8c2 a010 	str.w	sl, [r2, #16]
 8003c24:	f8c2 9014 	str.w	r9, [r2, #20]
 8003c28:	6193      	str	r3, [r2, #24]
 8003c2a:	b009      	add	sp, #36	; 0x24
 8003c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c30:	20000000 	.word	0x20000000
 8003c34:	00060003 	.word	0x00060003
 8003c38:	000a000c 	.word	0x000a000c
 8003c3c:	000c000a 	.word	0x000c000a
 8003c40:	00030006 	.word	0x00030006

08003c44 <D48_GENERIC>:
 8003c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c48:	b089      	sub	sp, #36	; 0x24
 8003c4a:	6953      	ldr	r3, [r2, #20]
 8003c4c:	68d4      	ldr	r4, [r2, #12]
 8003c4e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003c50:	9302      	str	r3, [sp, #8]
 8003c52:	9400      	str	r4, [sp, #0]
 8003c54:	6993      	ldr	r3, [r2, #24]
 8003c56:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003c58:	9307      	str	r3, [sp, #28]
 8003c5a:	9403      	str	r4, [sp, #12]
 8003c5c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003c60:	69d6      	ldr	r6, [r2, #28]
 8003c62:	6893      	ldr	r3, [r2, #8]
 8003c64:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003c66:	9104      	str	r1, [sp, #16]
 8003c68:	2d00      	cmp	r5, #0
 8003c6a:	f000 80c5 	beq.w	8003df8 <D48_GENERIC+0x1b4>
 8003c6e:	f004 0510 	and.w	r5, r4, #16
 8003c72:	f004 0420 	and.w	r4, r4, #32
 8003c76:	4967      	ldr	r1, [pc, #412]	; (8003e14 <D48_GENERIC+0x1d0>)
 8003c78:	9505      	str	r5, [sp, #20]
 8003c7a:	9406      	str	r4, [sp, #24]
 8003c7c:	f04f 0c00 	mov.w	ip, #0
 8003c80:	4657      	mov	r7, sl
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	e09c      	b.n	8003dc0 <D48_GENERIC+0x17c>
 8003c86:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8003c8a:	f810 b009 	ldrb.w	fp, [r0, r9]
 8003c8e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8003c92:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8003c96:	7800      	ldrb	r0, [r0, #0]
 8003c98:	0424      	lsls	r4, r4, #16
 8003c9a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8003c9e:	f818 4005 	ldrb.w	r4, [r8, r5]
 8003ca2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8003ca6:	44a8      	add	r8, r5
 8003ca8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8003cac:	eb0b 0500 	add.w	r5, fp, r0
 8003cb0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8003cb4:	fa5f f885 	uxtb.w	r8, r5
 8003cb8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8003cbc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8003cc0:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003cc4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8003cc8:	0e2d      	lsrs	r5, r5, #24
 8003cca:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8003cce:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8003cd2:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8003cd6:	b2e6      	uxtb	r6, r4
 8003cd8:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003cdc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003ce0:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003ce4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003ce8:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003cec:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8003cf0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003cf4:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8003cf8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003cfc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003d00:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003d04:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003d08:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003d0c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003d10:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003d14:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8003d18:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003d1c:	4c3e      	ldr	r4, [pc, #248]	; (8003e18 <D48_GENERIC+0x1d4>)
 8003d1e:	9d00      	ldr	r5, [sp, #0]
 8003d20:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003d24:	4d3d      	ldr	r5, [pc, #244]	; (8003e1c <D48_GENERIC+0x1d8>)
 8003d26:	fb28 4405 	smlad	r4, r8, r5, r4
 8003d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8003d32:	4c3b      	ldr	r4, [pc, #236]	; (8003e20 <D48_GENERIC+0x1dc>)
 8003d34:	9b01      	ldr	r3, [sp, #4]
 8003d36:	fb2a 3304 	smlad	r3, sl, r4, r3
 8003d3a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8003d3e:	fb28 3304 	smlad	r3, r8, r4, r3
 8003d42:	4c38      	ldr	r4, [pc, #224]	; (8003e24 <D48_GENERIC+0x1e0>)
 8003d44:	fb2e 3304 	smlad	r3, lr, r4, r3
 8003d48:	2501      	movs	r5, #1
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	fb2a fa05 	smuad	sl, sl, r5
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <D48_GENERIC+0x1e4>)
 8003d52:	fb28 a803 	smlad	r8, r8, r3, sl
 8003d56:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <D48_GENERIC+0x1e8>)
 8003d58:	fb2e 8303 	smlad	r3, lr, r3, r8
 8003d5c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	9b02      	ldr	r3, [sp, #8]
 8003d64:	eb04 0807 	add.w	r8, r4, r7
 8003d68:	eba8 0803 	sub.w	r8, r8, r3
 8003d6c:	9b05      	ldr	r3, [sp, #20]
 8003d6e:	4465      	add	r5, ip
 8003d70:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8003d74:	b163      	cbz	r3, 8003d90 <D48_GENERIC+0x14c>
 8003d76:	6a17      	ldr	r7, [r2, #32]
 8003d78:	9402      	str	r4, [sp, #8]
 8003d7a:	fba8 8907 	umull	r8, r9, r8, r7
 8003d7e:	fb07 990b 	mla	r9, r7, fp, r9
 8003d82:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003d86:	f149 0900 	adc.w	r9, r9, #0
 8003d8a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8003d8e:	463c      	mov	r4, r7
 8003d90:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	02e4      	lsls	r4, r4, #11
 8003d98:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003d9c:	f04f 0900 	mov.w	r9, #0
 8003da0:	fb0c fc0e 	mul.w	ip, ip, lr
 8003da4:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003da8:	9b04      	ldr	r3, [sp, #16]
 8003daa:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8003dae:	f304 040f 	ssat	r4, #16, r4
 8003db2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8003db6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003db8:	fa1f fc85 	uxth.w	ip, r5
 8003dbc:	4564      	cmp	r4, ip
 8003dbe:	d919      	bls.n	8003df4 <D48_GENERIC+0x1b0>
 8003dc0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003dc2:	fa5f fe84 	uxtb.w	lr, r4
 8003dc6:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8003dca:	f1ce 0500 	rsb	r5, lr, #0
 8003dce:	eb00 0b09 	add.w	fp, r0, r9
 8003dd2:	eb0b 0a05 	add.w	sl, fp, r5
 8003dd6:	2c01      	cmp	r4, #1
 8003dd8:	eb0a 0809 	add.w	r8, sl, r9
 8003ddc:	f47f af53 	bne.w	8003c86 <D48_GENERIC+0x42>
 8003de0:	9b06      	ldr	r3, [sp, #24]
 8003de2:	6805      	ldr	r5, [r0, #0]
 8003de4:	6844      	ldr	r4, [r0, #4]
 8003de6:	3006      	adds	r0, #6
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f43f af63 	beq.w	8003cb4 <D48_GENERIC+0x70>
 8003dee:	ba6d      	rev16	r5, r5
 8003df0:	ba64      	rev16	r4, r4
 8003df2:	e75f      	b.n	8003cb4 <D48_GENERIC+0x70>
 8003df4:	9b01      	ldr	r3, [sp, #4]
 8003df6:	46ba      	mov	sl, r7
 8003df8:	6093      	str	r3, [r2, #8]
 8003dfa:	9b00      	ldr	r3, [sp, #0]
 8003dfc:	60d3      	str	r3, [r2, #12]
 8003dfe:	9b02      	ldr	r3, [sp, #8]
 8003e00:	6153      	str	r3, [r2, #20]
 8003e02:	9b07      	ldr	r3, [sp, #28]
 8003e04:	61d6      	str	r6, [r2, #28]
 8003e06:	2000      	movs	r0, #0
 8003e08:	f8c2 a010 	str.w	sl, [r2, #16]
 8003e0c:	6193      	str	r3, [r2, #24]
 8003e0e:	b009      	add	sp, #36	; 0x24
 8003e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e14:	20000000 	.word	0x20000000
 8003e18:	000f000a 	.word	0x000f000a
 8003e1c:	00060003 	.word	0x00060003
 8003e20:	00150019 	.word	0x00150019
 8003e24:	00190015 	.word	0x00190015
 8003e28:	00030006 	.word	0x00030006
 8003e2c:	000a000f 	.word	0x000a000f

08003e30 <D64_GENERIC>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	b089      	sub	sp, #36	; 0x24
 8003e36:	6913      	ldr	r3, [r2, #16]
 8003e38:	6895      	ldr	r5, [r2, #8]
 8003e3a:	9303      	str	r3, [sp, #12]
 8003e3c:	9501      	str	r5, [sp, #4]
 8003e3e:	6953      	ldr	r3, [r2, #20]
 8003e40:	68d5      	ldr	r5, [r2, #12]
 8003e42:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	9500      	str	r5, [sp, #0]
 8003e48:	6993      	ldr	r3, [r2, #24]
 8003e4a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003e4c:	9307      	str	r3, [sp, #28]
 8003e4e:	9505      	str	r5, [sp, #20]
 8003e50:	69d3      	ldr	r3, [r2, #28]
 8003e52:	9106      	str	r1, [sp, #24]
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	f000 80d9 	beq.w	800400c <D64_GENERIC+0x1dc>
 8003e5a:	6a11      	ldr	r1, [r2, #32]
 8003e5c:	9102      	str	r1, [sp, #8]
 8003e5e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800404c <D64_GENERIC+0x21c>
 8003e62:	f04f 0c00 	mov.w	ip, #0
 8003e66:	4681      	mov	r9, r0
 8003e68:	e0c1      	b.n	8003fee <D64_GENERIC+0x1be>
 8003e6a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8003e6e:	4274      	negs	r4, r6
 8003e70:	eb09 0708 	add.w	r7, r9, r8
 8003e74:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8003e78:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8003e7c:	5d38      	ldrb	r0, [r7, r4]
 8003e7e:	5d29      	ldrb	r1, [r5, r4]
 8003e80:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8003e84:	f819 a008 	ldrb.w	sl, [r9, r8]
 8003e88:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8003e8c:	f899 7000 	ldrb.w	r7, [r9]
 8003e90:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8003e94:	4425      	add	r5, r4
 8003e96:	0409      	lsls	r1, r1, #16
 8003e98:	0400      	lsls	r0, r0, #16
 8003e9a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8003e9e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8003ea2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8003ea6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8003eaa:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8003eae:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8003eb2:	4459      	add	r1, fp
 8003eb4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8003eb8:	4438      	add	r0, r7
 8003eba:	b2c5      	uxtb	r5, r0
 8003ebc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003ec0:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8003ec4:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8003ec8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003ecc:	0e00      	lsrs	r0, r0, #24
 8003ece:	eb03 0806 	add.w	r8, r3, r6
 8003ed2:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8003ed6:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8003eda:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003ede:	b2c8      	uxtb	r0, r1
 8003ee0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003ee4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003ee8:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8003eec:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8003ef0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003ef4:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8003ef8:	0e09      	lsrs	r1, r1, #24
 8003efa:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8003efe:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003f02:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003f06:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8003f0a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8003f0e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8003f12:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8003f16:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003f1a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003f1e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003f22:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8003f26:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003f2a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003f2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003f32:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8003f36:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8003f3a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8003f3e:	0a8b      	lsrs	r3, r1, #10
 8003f40:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003f44:	4939      	ldr	r1, [pc, #228]	; (800402c <D64_GENERIC+0x1fc>)
 8003f46:	9c00      	ldr	r4, [sp, #0]
 8003f48:	fb28 4101 	smlad	r1, r8, r1, r4
 8003f4c:	4c38      	ldr	r4, [pc, #224]	; (8004030 <D64_GENERIC+0x200>)
 8003f4e:	fb27 1104 	smlad	r1, r7, r4, r1
 8003f52:	4c38      	ldr	r4, [pc, #224]	; (8004034 <D64_GENERIC+0x204>)
 8003f54:	fb20 1104 	smlad	r1, r0, r4, r1
 8003f58:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003f5c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8003f60:	4c35      	ldr	r4, [pc, #212]	; (8004038 <D64_GENERIC+0x208>)
 8003f62:	9d01      	ldr	r5, [sp, #4]
 8003f64:	fb28 5404 	smlad	r4, r8, r4, r5
 8003f68:	4d33      	ldr	r5, [pc, #204]	; (8004038 <D64_GENERIC+0x208>)
 8003f6a:	fb2a 4415 	smladx	r4, sl, r5, r4
 8003f6e:	4d33      	ldr	r5, [pc, #204]	; (800403c <D64_GENERIC+0x20c>)
 8003f70:	fb27 4405 	smlad	r4, r7, r5, r4
 8003f74:	fb20 4415 	smladx	r4, r0, r5, r4
 8003f78:	2501      	movs	r5, #1
 8003f7a:	9400      	str	r4, [sp, #0]
 8003f7c:	fb28 f805 	smuad	r8, r8, r5
 8003f80:	4c2f      	ldr	r4, [pc, #188]	; (8004040 <D64_GENERIC+0x210>)
 8003f82:	fb27 8704 	smlad	r7, r7, r4, r8
 8003f86:	4c2f      	ldr	r4, [pc, #188]	; (8004044 <D64_GENERIC+0x214>)
 8003f88:	fb20 7004 	smlad	r0, r0, r4, r7
 8003f8c:	4c2e      	ldr	r4, [pc, #184]	; (8004048 <D64_GENERIC+0x218>)
 8003f8e:	fb2a 0004 	smlad	r0, sl, r4, r0
 8003f92:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8003f96:	9902      	ldr	r1, [sp, #8]
 8003f98:	9001      	str	r0, [sp, #4]
 8003f9a:	b189      	cbz	r1, 8003fc0 <D64_GENERIC+0x190>
 8003f9c:	9803      	ldr	r0, [sp, #12]
 8003f9e:	9c04      	ldr	r4, [sp, #16]
 8003fa0:	9604      	str	r6, [sp, #16]
 8003fa2:	4430      	add	r0, r6
 8003fa4:	1b00      	subs	r0, r0, r4
 8003fa6:	17c5      	asrs	r5, r0, #31
 8003fa8:	460f      	mov	r7, r1
 8003faa:	fba0 0101 	umull	r0, r1, r0, r1
 8003fae:	fb07 1105 	mla	r1, r7, r5, r1
 8003fb2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003fb6:	f141 0100 	adc.w	r1, r1, #0
 8003fba:	0049      	lsls	r1, r1, #1
 8003fbc:	9103      	str	r1, [sp, #12]
 8003fbe:	460e      	mov	r6, r1
 8003fc0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8003fc2:	9905      	ldr	r1, [sp, #20]
 8003fc4:	9806      	ldr	r0, [sp, #24]
 8003fc6:	02b6      	lsls	r6, r6, #10
 8003fc8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003fcc:	f04f 0800 	mov.w	r8, #0
 8003fd0:	fb0c f404 	mul.w	r4, ip, r4
 8003fd4:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003fd8:	4641      	mov	r1, r8
 8003fda:	1089      	asrs	r1, r1, #2
 8003fdc:	f301 010f 	ssat	r1, #16, r1
 8003fe0:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003fe4:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8003fe6:	f10c 0c01 	add.w	ip, ip, #1
 8003fea:	4561      	cmp	r1, ip
 8003fec:	dd0e      	ble.n	800400c <D64_GENERIC+0x1dc>
 8003fee:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8003ff0:	2e01      	cmp	r6, #1
 8003ff2:	f47f af3a 	bne.w	8003e6a <D64_GENERIC+0x3a>
 8003ff6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003ff8:	06b4      	lsls	r4, r6, #26
 8003ffa:	e899 0003 	ldmia.w	r9, {r0, r1}
 8003ffe:	f109 0908 	add.w	r9, r9, #8
 8004002:	f57f af5a 	bpl.w	8003eba <D64_GENERIC+0x8a>
 8004006:	ba40      	rev16	r0, r0
 8004008:	ba49      	rev16	r1, r1
 800400a:	e756      	b.n	8003eba <D64_GENERIC+0x8a>
 800400c:	61d3      	str	r3, [r2, #28]
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	9901      	ldr	r1, [sp, #4]
 8004012:	6113      	str	r3, [r2, #16]
 8004014:	9b04      	ldr	r3, [sp, #16]
 8004016:	6091      	str	r1, [r2, #8]
 8004018:	6153      	str	r3, [r2, #20]
 800401a:	9900      	ldr	r1, [sp, #0]
 800401c:	9b07      	ldr	r3, [sp, #28]
 800401e:	60d1      	str	r1, [r2, #12]
 8004020:	2000      	movs	r0, #0
 8004022:	6193      	str	r3, [r2, #24]
 8004024:	b009      	add	sp, #36	; 0x24
 8004026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402a:	bf00      	nop
 800402c:	001c0015 	.word	0x001c0015
 8004030:	000f000a 	.word	0x000f000a
 8004034:	00060003 	.word	0x00060003
 8004038:	0024002a 	.word	0x0024002a
 800403c:	002e0030 	.word	0x002e0030
 8004040:	00030006 	.word	0x00030006
 8004044:	000a000f 	.word	0x000a000f
 8004048:	0015001c 	.word	0x0015001c
 800404c:	20000000 	.word	0x20000000

08004050 <D80_GENERIC>:
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	b08b      	sub	sp, #44	; 0x2c
 8004056:	6914      	ldr	r4, [r2, #16]
 8004058:	9404      	str	r4, [sp, #16]
 800405a:	6954      	ldr	r4, [r2, #20]
 800405c:	9405      	str	r4, [sp, #20]
 800405e:	6994      	ldr	r4, [r2, #24]
 8004060:	9409      	str	r4, [sp, #36]	; 0x24
 8004062:	6894      	ldr	r4, [r2, #8]
 8004064:	9402      	str	r4, [sp, #8]
 8004066:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004068:	68d4      	ldr	r4, [r2, #12]
 800406a:	9401      	str	r4, [sp, #4]
 800406c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800406e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8004072:	9406      	str	r4, [sp, #24]
 8004074:	9107      	str	r1, [sp, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 810f 	beq.w	800429a <D80_GENERIC+0x24a>
 800407c:	6a13      	ldr	r3, [r2, #32]
 800407e:	9308      	str	r3, [sp, #32]
 8004080:	2300      	movs	r3, #0
 8004082:	9200      	str	r2, [sp, #0]
 8004084:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80042ec <D80_GENERIC+0x29c>
 8004088:	f8cd b00c 	str.w	fp, [sp, #12]
 800408c:	461a      	mov	r2, r3
 800408e:	e0ed      	b.n	800426c <D80_GENERIC+0x21c>
 8004090:	fa5f fc8c 	uxtb.w	ip, ip
 8004094:	fa0f f48c 	sxth.w	r4, ip
 8004098:	0066      	lsls	r6, r4, #1
 800409a:	eb06 0804 	add.w	r8, r6, r4
 800409e:	f1cc 0500 	rsb	r5, ip, #0
 80040a2:	eb00 0108 	add.w	r1, r0, r8
 80040a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80040aa:	194b      	adds	r3, r1, r5
 80040ac:	5d49      	ldrb	r1, [r1, r5]
 80040ae:	f810 a008 	ldrb.w	sl, [r0, r8]
 80040b2:	f813 b004 	ldrb.w	fp, [r3, r4]
 80040b6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80040ba:	f890 8000 	ldrb.w	r8, [r0]
 80040be:	eb03 0e04 	add.w	lr, r3, r4
 80040c2:	eb0e 0705 	add.w	r7, lr, r5
 80040c6:	0409      	lsls	r1, r1, #16
 80040c8:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80040cc:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80040d0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80040d4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80040d8:	eb0a 0004 	add.w	r0, sl, r4
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	f81a a004 	ldrb.w	sl, [sl, r4]
 80040e2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80040e6:	5d44      	ldrb	r4, [r0, r5]
 80040e8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80040ec:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80040f0:	4428      	add	r0, r5
 80040f2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80040f6:	4441      	add	r1, r8
 80040f8:	4430      	add	r0, r6
 80040fa:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80040fe:	441f      	add	r7, r3
 8004100:	b2cd      	uxtb	r5, r1
 8004102:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004106:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800410a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004114:	0e09      	lsrs	r1, r1, #24
 8004116:	4433      	add	r3, r6
 8004118:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800411c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004120:	b2fd      	uxtb	r5, r7
 8004122:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8004126:	469b      	mov	fp, r3
 8004128:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800412c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8004130:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8004134:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004138:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800413c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004140:	0e3b      	lsrs	r3, r7, #24
 8004142:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8004146:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800414a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800414e:	fa5f fe84 	uxtb.w	lr, r4
 8004152:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8004156:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800415a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800415e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8004162:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004166:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800416a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800416e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004172:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800417a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800417e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004182:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004186:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800418a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800418e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8004192:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8004196:	0aa3      	lsrs	r3, r4, #10
 8004198:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800419c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80041a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80041a4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80041a8:	9303      	str	r3, [sp, #12]
 80041aa:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80041ae:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 80041b2:	4b42      	ldr	r3, [pc, #264]	; (80042bc <D80_GENERIC+0x26c>)
 80041b4:	9901      	ldr	r1, [sp, #4]
 80041b6:	fb2b 1303 	smlad	r3, fp, r3, r1
 80041ba:	4941      	ldr	r1, [pc, #260]	; (80042c0 <D80_GENERIC+0x270>)
 80041bc:	fb28 3301 	smlad	r3, r8, r1, r3
 80041c0:	4940      	ldr	r1, [pc, #256]	; (80042c4 <D80_GENERIC+0x274>)
 80041c2:	fb2c 3301 	smlad	r3, ip, r1, r3
 80041c6:	4940      	ldr	r1, [pc, #256]	; (80042c8 <D80_GENERIC+0x278>)
 80041c8:	fb27 3301 	smlad	r3, r7, r1, r3
 80041cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80041d0:	fb2e 3301 	smlad	r3, lr, r1, r3
 80041d4:	493d      	ldr	r1, [pc, #244]	; (80042cc <D80_GENERIC+0x27c>)
 80041d6:	9c02      	ldr	r4, [sp, #8]
 80041d8:	fb2b 4401 	smlad	r4, fp, r1, r4
 80041dc:	493c      	ldr	r1, [pc, #240]	; (80042d0 <D80_GENERIC+0x280>)
 80041de:	fb28 4401 	smlad	r4, r8, r1, r4
 80041e2:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 80041e6:	fb2c 4101 	smlad	r1, ip, r1, r4
 80041ea:	4c3a      	ldr	r4, [pc, #232]	; (80042d4 <D80_GENERIC+0x284>)
 80041ec:	fb27 1104 	smlad	r1, r7, r4, r1
 80041f0:	4c39      	ldr	r4, [pc, #228]	; (80042d8 <D80_GENERIC+0x288>)
 80041f2:	fb2e 1104 	smlad	r1, lr, r4, r1
 80041f6:	9101      	str	r1, [sp, #4]
 80041f8:	2101      	movs	r1, #1
 80041fa:	fb2b fb01 	smuad	fp, fp, r1
 80041fe:	4937      	ldr	r1, [pc, #220]	; (80042dc <D80_GENERIC+0x28c>)
 8004200:	fb28 b801 	smlad	r8, r8, r1, fp
 8004204:	4d36      	ldr	r5, [pc, #216]	; (80042e0 <D80_GENERIC+0x290>)
 8004206:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800420a:	4d36      	ldr	r5, [pc, #216]	; (80042e4 <D80_GENERIC+0x294>)
 800420c:	fb27 c705 	smlad	r7, r7, r5, ip
 8004210:	4d35      	ldr	r5, [pc, #212]	; (80042e8 <D80_GENERIC+0x298>)
 8004212:	fb2e 7105 	smlad	r1, lr, r5, r7
 8004216:	9102      	str	r1, [sp, #8]
 8004218:	9908      	ldr	r1, [sp, #32]
 800421a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800421e:	b181      	cbz	r1, 8004242 <D80_GENERIC+0x1f2>
 8004220:	9c04      	ldr	r4, [sp, #16]
 8004222:	9d05      	ldr	r5, [sp, #20]
 8004224:	9305      	str	r3, [sp, #20]
 8004226:	441c      	add	r4, r3
 8004228:	1b64      	subs	r4, r4, r5
 800422a:	17e7      	asrs	r7, r4, #31
 800422c:	fba4 4501 	umull	r4, r5, r4, r1
 8004230:	fb01 5507 	mla	r5, r1, r7, r5
 8004234:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004238:	f145 0500 	adc.w	r5, r5, #0
 800423c:	0069      	lsls	r1, r5, #1
 800423e:	9104      	str	r1, [sp, #16]
 8004240:	460b      	mov	r3, r1
 8004242:	9e00      	ldr	r6, [sp, #0]
 8004244:	9f06      	ldr	r7, [sp, #24]
 8004246:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004248:	025b      	lsls	r3, r3, #9
 800424a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800424e:	2500      	movs	r5, #0
 8004250:	fb02 f101 	mul.w	r1, r2, r1
 8004254:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004258:	9c07      	ldr	r4, [sp, #28]
 800425a:	10ab      	asrs	r3, r5, #2
 800425c:	f303 030f 	ssat	r3, #16, r3
 8004260:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004264:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8004266:	3201      	adds	r2, #1
 8004268:	4293      	cmp	r3, r2
 800426a:	dd13      	ble.n	8004294 <D80_GENERIC+0x244>
 800426c:	9b00      	ldr	r3, [sp, #0]
 800426e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8004272:	f1bc 0f01 	cmp.w	ip, #1
 8004276:	f47f af0b 	bne.w	8004090 <D80_GENERIC+0x40>
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	6884      	ldr	r4, [r0, #8]
 800427e:	069b      	lsls	r3, r3, #26
 8004280:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004284:	f100 000a 	add.w	r0, r0, #10
 8004288:	f57f af3a 	bpl.w	8004100 <D80_GENERIC+0xb0>
 800428c:	ba49      	rev16	r1, r1
 800428e:	ba7f      	rev16	r7, r7
 8004290:	ba64      	rev16	r4, r4
 8004292:	e735      	b.n	8004100 <D80_GENERIC+0xb0>
 8004294:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004298:	4632      	mov	r2, r6
 800429a:	9b02      	ldr	r3, [sp, #8]
 800429c:	6093      	str	r3, [r2, #8]
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	60d3      	str	r3, [r2, #12]
 80042a2:	9b04      	ldr	r3, [sp, #16]
 80042a4:	6113      	str	r3, [r2, #16]
 80042a6:	9b05      	ldr	r3, [sp, #20]
 80042a8:	6153      	str	r3, [r2, #20]
 80042aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ac:	f8c2 b01c 	str.w	fp, [r2, #28]
 80042b0:	2000      	movs	r0, #0
 80042b2:	6193      	str	r3, [r2, #24]
 80042b4:	b00b      	add	sp, #44	; 0x2c
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	002d0024 	.word	0x002d0024
 80042c0:	001c0015 	.word	0x001c0015
 80042c4:	000f000a 	.word	0x000f000a
 80042c8:	00060003 	.word	0x00060003
 80042cc:	0037003f 	.word	0x0037003f
 80042d0:	00450049 	.word	0x00450049
 80042d4:	00490045 	.word	0x00490045
 80042d8:	003f0037 	.word	0x003f0037
 80042dc:	00030006 	.word	0x00030006
 80042e0:	000a000f 	.word	0x000a000f
 80042e4:	0015001c 	.word	0x0015001c
 80042e8:	0024002d 	.word	0x0024002d
 80042ec:	20000000 	.word	0x20000000

080042f0 <D128_GENERIC>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	b093      	sub	sp, #76	; 0x4c
 80042f6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80042f8:	9005      	str	r0, [sp, #20]
 80042fa:	4610      	mov	r0, r2
 80042fc:	9201      	str	r2, [sp, #4]
 80042fe:	6912      	ldr	r2, [r2, #16]
 8004300:	920c      	str	r2, [sp, #48]	; 0x30
 8004302:	4602      	mov	r2, r0
 8004304:	6940      	ldr	r0, [r0, #20]
 8004306:	900d      	str	r0, [sp, #52]	; 0x34
 8004308:	4610      	mov	r0, r2
 800430a:	4614      	mov	r4, r2
 800430c:	6992      	ldr	r2, [r2, #24]
 800430e:	9211      	str	r2, [sp, #68]	; 0x44
 8004310:	69c2      	ldr	r2, [r0, #28]
 8004312:	9202      	str	r2, [sp, #8]
 8004314:	68e2      	ldr	r2, [r4, #12]
 8004316:	6880      	ldr	r0, [r0, #8]
 8004318:	9203      	str	r2, [sp, #12]
 800431a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800431c:	9004      	str	r0, [sp, #16]
 800431e:	920e      	str	r2, [sp, #56]	; 0x38
 8004320:	910f      	str	r1, [sp, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 819b 	beq.w	800465e <D128_GENERIC+0x36e>
 8004328:	6a23      	ldr	r3, [r4, #32]
 800432a:	9310      	str	r3, [sp, #64]	; 0x40
 800432c:	2300      	movs	r3, #0
 800432e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 80046d8 <D128_GENERIC+0x3e8>
 8004332:	9306      	str	r3, [sp, #24]
 8004334:	e17a      	b.n	800462c <D128_GENERIC+0x33c>
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	9d05      	ldr	r5, [sp, #20]
 800433a:	b214      	sxth	r4, r2
 800433c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004340:	4250      	negs	r0, r2
 8004342:	eb05 010a 	add.w	r1, r5, sl
 8004346:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800434a:	eb01 0800 	add.w	r8, r1, r0
 800434e:	eb0b 0c04 	add.w	ip, fp, r4
 8004352:	eb08 070c 	add.w	r7, r8, ip
 8004356:	183b      	adds	r3, r7, r0
 8004358:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800435c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004360:	eb0e 0604 	add.w	r6, lr, r4
 8004364:	9307      	str	r3, [sp, #28]
 8004366:	1833      	adds	r3, r6, r0
 8004368:	9305      	str	r3, [sp, #20]
 800436a:	462b      	mov	r3, r5
 800436c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004370:	f8cd a020 	str.w	sl, [sp, #32]
 8004374:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004378:	f813 c002 	ldrb.w	ip, [r3, r2]
 800437c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004380:	5c3a      	ldrb	r2, [r7, r0]
 8004382:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8004386:	781f      	ldrb	r7, [r3, #0]
 8004388:	9b07      	ldr	r3, [sp, #28]
 800438a:	9d05      	ldr	r5, [sp, #20]
 800438c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004390:	5c09      	ldrb	r1, [r1, r0]
 8004392:	9709      	str	r7, [sp, #36]	; 0x24
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800439a:	5c33      	ldrb	r3, [r6, r0]
 800439c:	0412      	lsls	r2, r2, #16
 800439e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 80043a2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 80043a6:	9d08      	ldr	r5, [sp, #32]
 80043a8:	eb06 0a04 	add.w	sl, r6, r4
 80043ac:	0409      	lsls	r1, r1, #16
 80043ae:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 80043b2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80043b6:	5d36      	ldrb	r6, [r6, r4]
 80043b8:	9c05      	ldr	r4, [sp, #20]
 80043ba:	042d      	lsls	r5, r5, #16
 80043bc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80043c0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80043c4:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80043c8:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 80043cc:	eb0a 0c00 	add.w	ip, sl, r0
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80043d6:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80043da:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 80043de:	9d07      	ldr	r5, [sp, #28]
 80043e0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80043e4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80043e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80043ea:	4458      	add	r0, fp
 80043ec:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80043f0:	9005      	str	r0, [sp, #20]
 80043f2:	4439      	add	r1, r7
 80043f4:	442a      	add	r2, r5
 80043f6:	44b2      	add	sl, r6
 80043f8:	1918      	adds	r0, r3, r4
 80043fa:	b2cb      	uxtb	r3, r1
 80043fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004400:	9e02      	ldr	r6, [sp, #8]
 8004402:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004406:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800440a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800440e:	441e      	add	r6, r3
 8004410:	0e09      	lsrs	r1, r1, #24
 8004412:	4633      	mov	r3, r6
 8004414:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004418:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800441c:	b2d4      	uxtb	r4, r2
 800441e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004422:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004426:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800442a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800442e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004432:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004436:	0e12      	lsrs	r2, r2, #24
 8004438:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800443c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8004440:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004444:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004448:	9702      	str	r7, [sp, #8]
 800444a:	b2c2      	uxtb	r2, r0
 800444c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8004450:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004454:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004458:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800445c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004460:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004464:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004468:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800446c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004470:	0e00      	lsrs	r0, r0, #24
 8004472:	fa5f f68a 	uxtb.w	r6, sl
 8004476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447a:	9309      	str	r3, [sp, #36]	; 0x24
 800447c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004480:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004484:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004488:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800448c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004490:	950a      	str	r5, [sp, #40]	; 0x28
 8004492:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004496:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800449a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800449e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80044a2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80044a6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80044aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80044ac:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80044b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80044b6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80044ba:	9307      	str	r3, [sp, #28]
 80044bc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80044c0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80044c4:	9b02      	ldr	r3, [sp, #8]
 80044c6:	f8cd c008 	str.w	ip, [sp, #8]
 80044ca:	4694      	mov	ip, r2
 80044cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ce:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 80044d2:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80044d6:	9a02      	ldr	r2, [sp, #8]
 80044d8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80044dc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80044e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80044e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044e6:	f8cd a020 	str.w	sl, [sp, #32]
 80044ea:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80044ee:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80044f2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80044f6:	9b07      	ldr	r3, [sp, #28]
 80044f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80044fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004500:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8004504:	9a08      	ldr	r2, [sp, #32]
 8004506:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800450a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004512:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004516:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800451a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800451e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004522:	0a96      	lsrs	r6, r2, #10
 8004524:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004528:	9602      	str	r6, [sp, #8]
 800452a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800452e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004532:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8004536:	4e53      	ldr	r6, [pc, #332]	; (8004684 <D128_GENERIC+0x394>)
 8004538:	9f03      	ldr	r7, [sp, #12]
 800453a:	fb2c 7606 	smlad	r6, ip, r6, r7
 800453e:	4f52      	ldr	r7, [pc, #328]	; (8004688 <D128_GENERIC+0x398>)
 8004540:	fb2a 6607 	smlad	r6, sl, r7, r6
 8004544:	4f51      	ldr	r7, [pc, #324]	; (800468c <D128_GENERIC+0x39c>)
 8004546:	fb21 6607 	smlad	r6, r1, r7, r6
 800454a:	4f51      	ldr	r7, [pc, #324]	; (8004690 <D128_GENERIC+0x3a0>)
 800454c:	fb24 6607 	smlad	r6, r4, r7, r6
 8004550:	4f50      	ldr	r7, [pc, #320]	; (8004694 <D128_GENERIC+0x3a4>)
 8004552:	fb28 6607 	smlad	r6, r8, r7, r6
 8004556:	4f50      	ldr	r7, [pc, #320]	; (8004698 <D128_GENERIC+0x3a8>)
 8004558:	fb20 6607 	smlad	r6, r0, r7, r6
 800455c:	4f4f      	ldr	r7, [pc, #316]	; (800469c <D128_GENERIC+0x3ac>)
 800455e:	fb23 6607 	smlad	r6, r3, r7, r6
 8004562:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8004566:	fb25 6607 	smlad	r6, r5, r7, r6
 800456a:	4f4d      	ldr	r7, [pc, #308]	; (80046a0 <D128_GENERIC+0x3b0>)
 800456c:	9a04      	ldr	r2, [sp, #16]
 800456e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8004572:	4a4c      	ldr	r2, [pc, #304]	; (80046a4 <D128_GENERIC+0x3b4>)
 8004574:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004578:	4f4b      	ldr	r7, [pc, #300]	; (80046a8 <D128_GENERIC+0x3b8>)
 800457a:	fb21 ee07 	smlad	lr, r1, r7, lr
 800457e:	4f4b      	ldr	r7, [pc, #300]	; (80046ac <D128_GENERIC+0x3bc>)
 8004580:	fb24 ee07 	smlad	lr, r4, r7, lr
 8004584:	4f4a      	ldr	r7, [pc, #296]	; (80046b0 <D128_GENERIC+0x3c0>)
 8004586:	fb28 ee07 	smlad	lr, r8, r7, lr
 800458a:	4f4a      	ldr	r7, [pc, #296]	; (80046b4 <D128_GENERIC+0x3c4>)
 800458c:	fb20 ee07 	smlad	lr, r0, r7, lr
 8004590:	4f49      	ldr	r7, [pc, #292]	; (80046b8 <D128_GENERIC+0x3c8>)
 8004592:	fb23 e707 	smlad	r7, r3, r7, lr
 8004596:	f8df e144 	ldr.w	lr, [pc, #324]	; 80046dc <D128_GENERIC+0x3ec>
 800459a:	fb25 720e 	smlad	r2, r5, lr, r7
 800459e:	f04f 0b01 	mov.w	fp, #1
 80045a2:	9203      	str	r2, [sp, #12]
 80045a4:	fb2c fb0b 	smuad	fp, ip, fp
 80045a8:	4f44      	ldr	r7, [pc, #272]	; (80046bc <D128_GENERIC+0x3cc>)
 80045aa:	fb2a ba07 	smlad	sl, sl, r7, fp
 80045ae:	4f44      	ldr	r7, [pc, #272]	; (80046c0 <D128_GENERIC+0x3d0>)
 80045b0:	fb21 aa07 	smlad	sl, r1, r7, sl
 80045b4:	4f43      	ldr	r7, [pc, #268]	; (80046c4 <D128_GENERIC+0x3d4>)
 80045b6:	fb24 aa07 	smlad	sl, r4, r7, sl
 80045ba:	4f43      	ldr	r7, [pc, #268]	; (80046c8 <D128_GENERIC+0x3d8>)
 80045bc:	fb28 a707 	smlad	r7, r8, r7, sl
 80045c0:	4a42      	ldr	r2, [pc, #264]	; (80046cc <D128_GENERIC+0x3dc>)
 80045c2:	fb20 7702 	smlad	r7, r0, r2, r7
 80045c6:	4a42      	ldr	r2, [pc, #264]	; (80046d0 <D128_GENERIC+0x3e0>)
 80045c8:	fb23 7702 	smlad	r7, r3, r2, r7
 80045cc:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <D128_GENERIC+0x3e4>)
 80045ce:	fb25 7303 	smlad	r3, r5, r3, r7
 80045d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80045da:	b185      	cbz	r5, 80045fe <D128_GENERIC+0x30e>
 80045dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045e0:	960d      	str	r6, [sp, #52]	; 0x34
 80045e2:	4432      	add	r2, r6
 80045e4:	1a52      	subs	r2, r2, r1
 80045e6:	17d1      	asrs	r1, r2, #31
 80045e8:	fba2 2305 	umull	r2, r3, r2, r5
 80045ec:	fb05 3301 	mla	r3, r5, r1, r3
 80045f0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80045f4:	f143 0300 	adc.w	r3, r3, #0
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	930c      	str	r3, [sp, #48]	; 0x30
 80045fc:	461e      	mov	r6, r3
 80045fe:	9801      	ldr	r0, [sp, #4]
 8004600:	9c06      	ldr	r4, [sp, #24]
 8004602:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8004604:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004606:	01f6      	lsls	r6, r6, #7
 8004608:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800460c:	2300      	movs	r3, #0
 800460e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8004612:	fb04 f101 	mul.w	r1, r4, r1
 8004616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004618:	109b      	asrs	r3, r3, #2
 800461a:	f303 030f 	ssat	r3, #16, r3
 800461e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8004622:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004624:	1c62      	adds	r2, r4, #1
 8004626:	4293      	cmp	r3, r2
 8004628:	9206      	str	r2, [sp, #24]
 800462a:	dd18      	ble.n	800465e <D128_GENERIC+0x36e>
 800462c:	9b01      	ldr	r3, [sp, #4]
 800462e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8004630:	2a01      	cmp	r2, #1
 8004632:	f47f ae80 	bne.w	8004336 <D128_GENERIC+0x46>
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	9d05      	ldr	r5, [sp, #20]
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	6829      	ldr	r1, [r5, #0]
 800463e:	686a      	ldr	r2, [r5, #4]
 8004640:	68a8      	ldr	r0, [r5, #8]
 8004642:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8004646:	f105 0410 	add.w	r4, r5, #16
 800464a:	d506      	bpl.n	800465a <D128_GENERIC+0x36a>
 800464c:	ba49      	rev16	r1, r1
 800464e:	ba52      	rev16	r2, r2
 8004650:	ba40      	rev16	r0, r0
 8004652:	fa9a fa9a 	rev16.w	sl, sl
 8004656:	9405      	str	r4, [sp, #20]
 8004658:	e6cf      	b.n	80043fa <D128_GENERIC+0x10a>
 800465a:	9405      	str	r4, [sp, #20]
 800465c:	e6cd      	b.n	80043fa <D128_GENERIC+0x10a>
 800465e:	9a01      	ldr	r2, [sp, #4]
 8004660:	9904      	ldr	r1, [sp, #16]
 8004662:	6091      	str	r1, [r2, #8]
 8004664:	9903      	ldr	r1, [sp, #12]
 8004666:	60d1      	str	r1, [r2, #12]
 8004668:	9b02      	ldr	r3, [sp, #8]
 800466a:	61d3      	str	r3, [r2, #28]
 800466c:	4611      	mov	r1, r2
 800466e:	4613      	mov	r3, r2
 8004670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004672:	610a      	str	r2, [r1, #16]
 8004674:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004676:	6159      	str	r1, [r3, #20]
 8004678:	9911      	ldr	r1, [sp, #68]	; 0x44
 800467a:	6199      	str	r1, [r3, #24]
 800467c:	2000      	movs	r0, #0
 800467e:	b013      	add	sp, #76	; 0x4c
 8004680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004684:	00780069 	.word	0x00780069
 8004688:	005b004e 	.word	0x005b004e
 800468c:	00420037 	.word	0x00420037
 8004690:	002d0024 	.word	0x002d0024
 8004694:	001c0015 	.word	0x001c0015
 8004698:	000f000a 	.word	0x000f000a
 800469c:	00060003 	.word	0x00060003
 80046a0:	00880096 	.word	0x00880096
 80046a4:	00a200ac 	.word	0x00a200ac
 80046a8:	00b400ba 	.word	0x00b400ba
 80046ac:	00be00c0 	.word	0x00be00c0
 80046b0:	00c000be 	.word	0x00c000be
 80046b4:	00ba00b4 	.word	0x00ba00b4
 80046b8:	00ac00a2 	.word	0x00ac00a2
 80046bc:	00030006 	.word	0x00030006
 80046c0:	000a000f 	.word	0x000a000f
 80046c4:	0015001c 	.word	0x0015001c
 80046c8:	0024002d 	.word	0x0024002d
 80046cc:	00370042 	.word	0x00370042
 80046d0:	004e005b 	.word	0x004e005b
 80046d4:	00690078 	.word	0x00690078
 80046d8:	20000000 	.word	0x20000000
 80046dc:	00960088 	.word	0x00960088

080046e0 <D16_1CH_HTONS_VOL_HP>:
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	4691      	mov	r9, r2
 80046e6:	b083      	sub	sp, #12
 80046e8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80046ea:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80046ee:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4680      	mov	r8, r0
 80046f6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80046fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80046fe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004702:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004706:	9401      	str	r4, [sp, #4]
 8004708:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800470c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8004710:	2a00      	cmp	r2, #0
 8004712:	d04e      	beq.n	80047b2 <D16_1CH_HTONS_VOL_HP+0xd2>
 8004714:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80047c0 <D16_1CH_HTONS_VOL_HP+0xe0>
 8004718:	1e8c      	subs	r4, r1, #2
 800471a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800471e:	f858 2b02 	ldr.w	r2, [r8], #2
 8004722:	ba52      	rev16	r2, r2
 8004724:	b2d6      	uxtb	r6, r2
 8004726:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800472a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800472e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8004732:	4413      	add	r3, r2
 8004734:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8004738:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800473c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004744:	0a93      	lsrs	r3, r2, #10
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8004748:	fb21 5202 	smlad	r2, r1, r2, r5
 800474c:	4d1b      	ldr	r5, [pc, #108]	; (80047bc <D16_1CH_HTONS_VOL_HP+0xdc>)
 800474e:	fb21 f505 	smuad	r5, r1, r5
 8004752:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8004756:	4410      	add	r0, r2
 8004758:	1bc0      	subs	r0, r0, r7
 800475a:	17c7      	asrs	r7, r0, #31
 800475c:	fba0 010e 	umull	r0, r1, r0, lr
 8004760:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004764:	fb0e 1107 	mla	r1, lr, r7, r1
 8004768:	f141 0100 	adc.w	r1, r1, #0
 800476c:	0448      	lsls	r0, r1, #17
 800476e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004772:	2700      	movs	r7, #0
 8004774:	fbc0 670a 	smlal	r6, r7, r0, sl
 8004778:	45d8      	cmp	r8, fp
 800477a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800477e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8004782:	4617      	mov	r7, r2
 8004784:	f301 010f 	ssat	r1, #16, r1
 8004788:	f824 1f02 	strh.w	r1, [r4, #2]!
 800478c:	d1c7      	bne.n	800471e <D16_1CH_HTONS_VOL_HP+0x3e>
 800478e:	9901      	ldr	r1, [sp, #4]
 8004790:	f8c9 301c 	str.w	r3, [r9, #28]
 8004794:	9b00      	ldr	r3, [sp, #0]
 8004796:	f8c9 0010 	str.w	r0, [r9, #16]
 800479a:	2000      	movs	r0, #0
 800479c:	f8c9 5008 	str.w	r5, [r9, #8]
 80047a0:	f8c9 100c 	str.w	r1, [r9, #12]
 80047a4:	f8c9 2014 	str.w	r2, [r9, #20]
 80047a8:	f8c9 3018 	str.w	r3, [r9, #24]
 80047ac:	b003      	add	sp, #12
 80047ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b2:	463a      	mov	r2, r7
 80047b4:	4621      	mov	r1, r4
 80047b6:	e7eb      	b.n	8004790 <D16_1CH_HTONS_VOL_HP+0xb0>
 80047b8:	00030001 	.word	0x00030001
 80047bc:	00010003 	.word	0x00010003
 80047c0:	20000000 	.word	0x20000000

080047c4 <D24_1CH_HTONS_VOL_HP>:
 80047c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c8:	b089      	sub	sp, #36	; 0x24
 80047ca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80047cc:	6996      	ldr	r6, [r2, #24]
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80047d2:	9207      	str	r2, [sp, #28]
 80047d4:	6915      	ldr	r5, [r2, #16]
 80047d6:	6954      	ldr	r4, [r2, #20]
 80047d8:	9606      	str	r6, [sp, #24]
 80047da:	6893      	ldr	r3, [r2, #8]
 80047dc:	69d6      	ldr	r6, [r2, #28]
 80047de:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80047e2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80047e6:	9a04      	ldr	r2, [sp, #16]
 80047e8:	9705      	str	r7, [sp, #20]
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	d07e      	beq.n	80048ec <D24_1CH_HTONS_VOL_HP+0x128>
 80047ee:	f1a1 0b02 	sub.w	fp, r1, #2
 80047f2:	2700      	movs	r7, #0
 80047f4:	46a8      	mov	r8, r5
 80047f6:	f8cd b004 	str.w	fp, [sp, #4]
 80047fa:	4655      	mov	r5, sl
 80047fc:	46e3      	mov	fp, ip
 80047fe:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80048f8 <D24_1CH_HTONS_VOL_HP+0x134>
 8004802:	46ba      	mov	sl, r7
 8004804:	469c      	mov	ip, r3
 8004806:	e055      	b.n	80048b4 <D24_1CH_HTONS_VOL_HP+0xf0>
 8004808:	7802      	ldrb	r2, [r0, #0]
 800480a:	78c3      	ldrb	r3, [r0, #3]
 800480c:	7841      	ldrb	r1, [r0, #1]
 800480e:	0212      	lsls	r2, r2, #8
 8004810:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004814:	440b      	add	r3, r1
 8004816:	3002      	adds	r0, #2
 8004818:	b2d9      	uxtb	r1, r3
 800481a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800481e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8004822:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800482c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004830:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8004834:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8004838:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800483c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004840:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8004846:	fb23 b102 	smlad	r1, r3, r2, fp
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800484c:	fb23 cb02 	smlad	fp, r3, r2, ip
 8004850:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8004854:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004858:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800485c:	2201      	movs	r2, #1
 800485e:	fb23 f702 	smuad	r7, r3, r2
 8004862:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8004866:	eb01 0208 	add.w	r2, r1, r8
 800486a:	1b12      	subs	r2, r2, r4
 800486c:	17d4      	asrs	r4, r2, #31
 800486e:	fba2 2305 	umull	r2, r3, r2, r5
 8004872:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004876:	fb05 3304 	mla	r3, r5, r4, r3
 800487a:	f143 0300 	adc.w	r3, r3, #0
 800487e:	9c05      	ldr	r4, [sp, #20]
 8004880:	03da      	lsls	r2, r3, #15
 8004882:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004886:	f04f 0900 	mov.w	r9, #0
 800488a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800488e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004892:	9a01      	ldr	r2, [sp, #4]
 8004894:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	109b      	asrs	r3, r3, #2
 800489c:	f303 030f 	ssat	r3, #16, r3
 80048a0:	f822 3f02 	strh.w	r3, [r2, #2]!
 80048a4:	9b04      	ldr	r3, [sp, #16]
 80048a6:	9201      	str	r2, [sp, #4]
 80048a8:	f10a 0a01 	add.w	sl, sl, #1
 80048ac:	459a      	cmp	sl, r3
 80048ae:	44bc      	add	ip, r7
 80048b0:	460c      	mov	r4, r1
 80048b2:	d00b      	beq.n	80048cc <D24_1CH_HTONS_VOL_HP+0x108>
 80048b4:	f01a 0f01 	tst.w	sl, #1
 80048b8:	d0a6      	beq.n	8004808 <D24_1CH_HTONS_VOL_HP+0x44>
 80048ba:	78c2      	ldrb	r2, [r0, #3]
 80048bc:	7883      	ldrb	r3, [r0, #2]
 80048be:	f810 1b04 	ldrb.w	r1, [r0], #4
 80048c2:	0212      	lsls	r2, r2, #8
 80048c4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80048c8:	440b      	add	r3, r1
 80048ca:	e7a5      	b.n	8004818 <D24_1CH_HTONS_VOL_HP+0x54>
 80048cc:	4663      	mov	r3, ip
 80048ce:	4645      	mov	r5, r8
 80048d0:	46dc      	mov	ip, fp
 80048d2:	9807      	ldr	r0, [sp, #28]
 80048d4:	6141      	str	r1, [r0, #20]
 80048d6:	9906      	ldr	r1, [sp, #24]
 80048d8:	6083      	str	r3, [r0, #8]
 80048da:	f8c0 c00c 	str.w	ip, [r0, #12]
 80048de:	61c6      	str	r6, [r0, #28]
 80048e0:	6105      	str	r5, [r0, #16]
 80048e2:	6181      	str	r1, [r0, #24]
 80048e4:	2000      	movs	r0, #0
 80048e6:	b009      	add	sp, #36	; 0x24
 80048e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ec:	4621      	mov	r1, r4
 80048ee:	e7f0      	b.n	80048d2 <D24_1CH_HTONS_VOL_HP+0x10e>
 80048f0:	00030001 	.word	0x00030001
 80048f4:	00060007 	.word	0x00060007
 80048f8:	20000000 	.word	0x20000000

080048fc <D32_1CH_HTONS_VOL_HP>:
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	4692      	mov	sl, r2
 8004902:	b087      	sub	sp, #28
 8004904:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004906:	f8da 3018 	ldr.w	r3, [sl, #24]
 800490a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	f8da 4010 	ldr.w	r4, [sl, #16]
 8004914:	f8da 8014 	ldr.w	r8, [sl, #20]
 8004918:	f8da 601c 	ldr.w	r6, [sl, #28]
 800491c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004920:	f8da e00c 	ldr.w	lr, [sl, #12]
 8004924:	9501      	str	r5, [sp, #4]
 8004926:	f8da c020 	ldr.w	ip, [sl, #32]
 800492a:	2a00      	cmp	r2, #0
 800492c:	d07b      	beq.n	8004a26 <D32_1CH_HTONS_VOL_HP+0x12a>
 800492e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004932:	4f3e      	ldr	r7, [pc, #248]	; (8004a2c <D32_1CH_HTONS_VOL_HP+0x130>)
 8004934:	f8cd c00c 	str.w	ip, [sp, #12]
 8004938:	9202      	str	r2, [sp, #8]
 800493a:	460d      	mov	r5, r1
 800493c:	46a1      	mov	r9, r4
 800493e:	4684      	mov	ip, r0
 8004940:	f8cd a014 	str.w	sl, [sp, #20]
 8004944:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004948:	ba49      	rev16	r1, r1
 800494a:	b2c8      	uxtb	r0, r1
 800494c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004950:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8004954:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8004958:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800495c:	0e09      	lsrs	r1, r1, #24
 800495e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004962:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8004966:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800496a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800496e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8004972:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8004976:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800497a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800497e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004982:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004986:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800498a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800498e:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <D32_1CH_HTONS_VOL_HP+0x134>)
 8004990:	fb20 e202 	smlad	r2, r0, r2, lr
 8004994:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004998:	fb2a 2101 	smlad	r1, sl, r1, r2
 800499c:	4a25      	ldr	r2, [pc, #148]	; (8004a34 <D32_1CH_HTONS_VOL_HP+0x138>)
 800499e:	fb20 3302 	smlad	r3, r0, r2, r3
 80049a2:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80049a4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80049a8:	2301      	movs	r3, #1
 80049aa:	fb20 f003 	smuad	r0, r0, r3
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <D32_1CH_HTONS_VOL_HP+0x140>)
 80049b0:	fb2a 0303 	smlad	r3, sl, r3, r0
 80049b4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80049b8:	9c03      	ldr	r4, [sp, #12]
 80049ba:	eb02 0009 	add.w	r0, r2, r9
 80049be:	eba0 0008 	sub.w	r0, r0, r8
 80049c2:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80049c6:	fba0 0104 	umull	r0, r1, r0, r4
 80049ca:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80049ce:	fb04 110b 	mla	r1, r4, fp, r1
 80049d2:	f141 0100 	adc.w	r1, r1, #0
 80049d6:	9c01      	ldr	r4, [sp, #4]
 80049d8:	0388      	lsls	r0, r1, #14
 80049da:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80049de:	f04f 0900 	mov.w	r9, #0
 80049e2:	fbc0 8904 	smlal	r8, r9, r0, r4
 80049e6:	ea4f 00a9 	mov.w	r0, r9, asr #2
 80049ea:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80049ee:	f300 000f 	ssat	r0, #16, r0
 80049f2:	9902      	ldr	r1, [sp, #8]
 80049f4:	f825 0b02 	strh.w	r0, [r5], #2
 80049f8:	428d      	cmp	r5, r1
 80049fa:	4690      	mov	r8, r2
 80049fc:	d1a2      	bne.n	8004944 <D32_1CH_HTONS_VOL_HP+0x48>
 80049fe:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004a02:	464c      	mov	r4, r9
 8004a04:	f8ca 3008 	str.w	r3, [sl, #8]
 8004a08:	9b04      	ldr	r3, [sp, #16]
 8004a0a:	f8ca e00c 	str.w	lr, [sl, #12]
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f8ca 601c 	str.w	r6, [sl, #28]
 8004a14:	f8ca 4010 	str.w	r4, [sl, #16]
 8004a18:	f8ca 2014 	str.w	r2, [sl, #20]
 8004a1c:	f8ca 3018 	str.w	r3, [sl, #24]
 8004a20:	b007      	add	sp, #28
 8004a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a26:	4642      	mov	r2, r8
 8004a28:	e7ec      	b.n	8004a04 <D32_1CH_HTONS_VOL_HP+0x108>
 8004a2a:	bf00      	nop
 8004a2c:	20000000 	.word	0x20000000
 8004a30:	00060003 	.word	0x00060003
 8004a34:	000a000c 	.word	0x000a000c
 8004a38:	000c000a 	.word	0x000c000a
 8004a3c:	00030006 	.word	0x00030006

08004a40 <D48_1CH_HTONS_VOL_HP>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	4613      	mov	r3, r2
 8004a46:	461c      	mov	r4, r3
 8004a48:	b087      	sub	sp, #28
 8004a4a:	4625      	mov	r5, r4
 8004a4c:	4626      	mov	r6, r4
 8004a4e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004a50:	9205      	str	r2, [sp, #20]
 8004a52:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004a54:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8004a58:	9501      	str	r5, [sp, #4]
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	6a35      	ldr	r5, [r6, #32]
 8004a5e:	6918      	ldr	r0, [r3, #16]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8004a68:	68a3      	ldr	r3, [r4, #8]
 8004a6a:	9502      	str	r5, [sp, #8]
 8004a6c:	68e4      	ldr	r4, [r4, #12]
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	f000 808c 	beq.w	8004b8c <D48_1CH_HTONS_VOL_HP+0x14c>
 8004a74:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004a78:	4d45      	ldr	r5, [pc, #276]	; (8004b90 <D48_1CH_HTONS_VOL_HP+0x150>)
 8004a7a:	9203      	str	r2, [sp, #12]
 8004a7c:	468c      	mov	ip, r1
 8004a7e:	e898 0044 	ldmia.w	r8, {r2, r6}
 8004a82:	f108 0806 	add.w	r8, r8, #6
 8004a86:	ba52      	rev16	r2, r2
 8004a88:	ba76      	rev16	r6, r6
 8004a8a:	b2d7      	uxtb	r7, r2
 8004a8c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004a90:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8004a94:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8004a98:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8004a9c:	0e12      	lsrs	r2, r2, #24
 8004a9e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8004aa2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8004aa6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004aaa:	fa5f fb86 	uxtb.w	fp, r6
 8004aae:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004ab2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8004ab6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8004aba:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8004abe:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8004ac2:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004ac6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004aca:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004ace:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004ad2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ad6:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8004ada:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004ade:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004ae2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004ae6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8004aea:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004aee:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <D48_1CH_HTONS_VOL_HP+0x154>)
 8004af4:	fb2a 4202 	smlad	r2, sl, r2, r4
 8004af8:	4927      	ldr	r1, [pc, #156]	; (8004b98 <D48_1CH_HTONS_VOL_HP+0x158>)
 8004afa:	fb27 2201 	smlad	r2, r7, r1, r2
 8004afe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b02:	fb26 2201 	smlad	r2, r6, r1, r2
 8004b06:	4925      	ldr	r1, [pc, #148]	; (8004b9c <D48_1CH_HTONS_VOL_HP+0x15c>)
 8004b08:	fb2a 3401 	smlad	r4, sl, r1, r3
 8004b0c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8004b10:	fb27 4403 	smlad	r4, r7, r3, r4
 8004b14:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8004b16:	fb26 4403 	smlad	r4, r6, r3, r4
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fb2a fa01 	smuad	sl, sl, r1
 8004b20:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <D48_1CH_HTONS_VOL_HP+0x164>)
 8004b22:	fb27 a703 	smlad	r7, r7, r3, sl
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8004b28:	fb26 7303 	smlad	r3, r6, r3, r7
 8004b2c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8004b30:	9e02      	ldr	r6, [sp, #8]
 8004b32:	9f01      	ldr	r7, [sp, #4]
 8004b34:	4410      	add	r0, r2
 8004b36:	eba0 0009 	sub.w	r0, r0, r9
 8004b3a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8004b3e:	fba0 0106 	umull	r0, r1, r0, r6
 8004b42:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004b46:	fb06 110a 	mla	r1, r6, sl, r1
 8004b4a:	f141 0100 	adc.w	r1, r1, #0
 8004b4e:	0308      	lsls	r0, r1, #12
 8004b50:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8004b54:	f04f 0a00 	mov.w	sl, #0
 8004b58:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8004b5c:	4657      	mov	r7, sl
 8004b5e:	10b8      	asrs	r0, r7, #2
 8004b60:	f300 000f 	ssat	r0, #16, r0
 8004b64:	f82c 0b02 	strh.w	r0, [ip], #2
 8004b68:	0048      	lsls	r0, r1, #1
 8004b6a:	9903      	ldr	r1, [sp, #12]
 8004b6c:	458c      	cmp	ip, r1
 8004b6e:	4691      	mov	r9, r2
 8004b70:	d185      	bne.n	8004a7e <D48_1CH_HTONS_VOL_HP+0x3e>
 8004b72:	9d05      	ldr	r5, [sp, #20]
 8004b74:	616a      	str	r2, [r5, #20]
 8004b76:	9a04      	ldr	r2, [sp, #16]
 8004b78:	6128      	str	r0, [r5, #16]
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	60ab      	str	r3, [r5, #8]
 8004b7e:	60ec      	str	r4, [r5, #12]
 8004b80:	f8c5 e01c 	str.w	lr, [r5, #28]
 8004b84:	61aa      	str	r2, [r5, #24]
 8004b86:	b007      	add	sp, #28
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8c:	464a      	mov	r2, r9
 8004b8e:	e7f0      	b.n	8004b72 <D48_1CH_HTONS_VOL_HP+0x132>
 8004b90:	20000000 	.word	0x20000000
 8004b94:	000f000a 	.word	0x000f000a
 8004b98:	00060003 	.word	0x00060003
 8004b9c:	00150019 	.word	0x00150019
 8004ba0:	00190015 	.word	0x00190015
 8004ba4:	00030006 	.word	0x00030006
 8004ba8:	000a000f 	.word	0x000a000f

08004bac <D64_1CH_HTONS_VOL_HP>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	b089      	sub	sp, #36	; 0x24
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	9207      	str	r2, [sp, #28]
 8004bb6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004bb8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8004bbc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8004bc0:	6992      	ldr	r2, [r2, #24]
 8004bc2:	9206      	str	r2, [sp, #24]
 8004bc4:	68e2      	ldr	r2, [r4, #12]
 8004bc6:	9201      	str	r2, [sp, #4]
 8004bc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004bca:	9203      	str	r2, [sp, #12]
 8004bcc:	6a22      	ldr	r2, [r4, #32]
 8004bce:	69e5      	ldr	r5, [r4, #28]
 8004bd0:	68a6      	ldr	r6, [r4, #8]
 8004bd2:	9204      	str	r2, [sp, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80b0 	beq.w	8004d3a <D64_1CH_HTONS_VOL_HP+0x18e>
 8004bda:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004bde:	4f58      	ldr	r7, [pc, #352]	; (8004d40 <D64_1CH_HTONS_VOL_HP+0x194>)
 8004be0:	9305      	str	r3, [sp, #20]
 8004be2:	9102      	str	r1, [sp, #8]
 8004be4:	f850 2b08 	ldr.w	r2, [r0], #8
 8004be8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004bec:	ba52      	rev16	r2, r2
 8004bee:	fa93 f993 	rev16.w	r9, r3
 8004bf2:	b2d4      	uxtb	r4, r2
 8004bf4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004bf8:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8004bfc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004c00:	9901      	ldr	r1, [sp, #4]
 8004c02:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004c06:	0e12      	lsrs	r2, r2, #24
 8004c08:	44ab      	add	fp, r5
 8004c0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c0e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8004c12:	fa5f f289 	uxtb.w	r2, r9
 8004c16:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8004c1a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8004c1e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8004c22:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004c26:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004c2a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8004c2e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8004c32:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8004c36:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004c3a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8004c3e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8004c42:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8004c46:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004c4a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8004c4e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004c52:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004c56:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004c62:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8004c66:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004c6a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8004c6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8004c76:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8004c7a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004c7e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <D64_1CH_HTONS_VOL_HP+0x198>)
 8004c84:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004c88:	492f      	ldr	r1, [pc, #188]	; (8004d48 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8004c8a:	fb24 3301 	smlad	r3, r4, r1, r3
 8004c8e:	492f      	ldr	r1, [pc, #188]	; (8004d4c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8004c90:	fb22 3301 	smlad	r3, r2, r1, r3
 8004c94:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004c98:	fb2e 390a 	smlad	r9, lr, sl, r3
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8004c9e:	fb2b 6603 	smlad	r6, fp, r3, r6
 8004ca2:	fb2e 6613 	smladx	r6, lr, r3, r6
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8004ca8:	fb24 6603 	smlad	r6, r4, r3, r6
 8004cac:	fb22 6313 	smladx	r3, r2, r3, r6
 8004cb0:	f04f 0a01 	mov.w	sl, #1
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	fb2b fb0a 	smuad	fp, fp, sl
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8004cbc:	fb24 ba03 	smlad	sl, r4, r3, fp
 8004cc0:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8004cc2:	fb22 a203 	smlad	r2, r2, r3, sl
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8004cc8:	fb2e 2603 	smlad	r6, lr, r3, r2
 8004ccc:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8004cd0:	eb0a 020c 	add.w	r2, sl, ip
 8004cd4:	9c04      	ldr	r4, [sp, #16]
 8004cd6:	9903      	ldr	r1, [sp, #12]
 8004cd8:	eba2 0208 	sub.w	r2, r2, r8
 8004cdc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8004ce0:	fba2 2304 	umull	r2, r3, r2, r4
 8004ce4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004ce8:	fb04 3309 	mla	r3, r4, r9, r3
 8004cec:	f143 0300 	adc.w	r3, r3, #0
 8004cf0:	02da      	lsls	r2, r3, #11
 8004cf2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004cf6:	f04f 0900 	mov.w	r9, #0
 8004cfa:	fbc1 8902 	smlal	r8, r9, r1, r2
 8004cfe:	9902      	ldr	r1, [sp, #8]
 8004d00:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004d04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004d08:	f302 020f 	ssat	r2, #16, r2
 8004d0c:	9b05      	ldr	r3, [sp, #20]
 8004d0e:	f821 2b02 	strh.w	r2, [r1], #2
 8004d12:	4299      	cmp	r1, r3
 8004d14:	9102      	str	r1, [sp, #8]
 8004d16:	46d0      	mov	r8, sl
 8004d18:	f47f af64 	bne.w	8004be4 <D64_1CH_HTONS_VOL_HP+0x38>
 8004d1c:	9a07      	ldr	r2, [sp, #28]
 8004d1e:	9901      	ldr	r1, [sp, #4]
 8004d20:	60d1      	str	r1, [r2, #12]
 8004d22:	9906      	ldr	r1, [sp, #24]
 8004d24:	6096      	str	r6, [r2, #8]
 8004d26:	2000      	movs	r0, #0
 8004d28:	61d5      	str	r5, [r2, #28]
 8004d2a:	f8c2 c010 	str.w	ip, [r2, #16]
 8004d2e:	f8c2 a014 	str.w	sl, [r2, #20]
 8004d32:	6191      	str	r1, [r2, #24]
 8004d34:	b009      	add	sp, #36	; 0x24
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3a:	46c2      	mov	sl, r8
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	e7ee      	b.n	8004d1e <D64_1CH_HTONS_VOL_HP+0x172>
 8004d40:	20000000 	.word	0x20000000
 8004d44:	001c0015 	.word	0x001c0015
 8004d48:	000f000a 	.word	0x000f000a
 8004d4c:	00060003 	.word	0x00060003
 8004d50:	0024002a 	.word	0x0024002a
 8004d54:	002e0030 	.word	0x002e0030
 8004d58:	00030006 	.word	0x00030006
 8004d5c:	000a000f 	.word	0x000a000f
 8004d60:	0015001c 	.word	0x0015001c

08004d64 <D80_1CH_HTONS_VOL_HP>:
 8004d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	4613      	mov	r3, r2
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	4686      	mov	lr, r0
 8004d6e:	6918      	ldr	r0, [r3, #16]
 8004d70:	9000      	str	r0, [sp, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	461c      	mov	r4, r3
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	6983      	ldr	r3, [r0, #24]
 8004d7c:	9306      	str	r3, [sp, #24]
 8004d7e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8004d82:	69c3      	ldr	r3, [r0, #28]
 8004d84:	68c0      	ldr	r0, [r0, #12]
 8004d86:	9207      	str	r2, [sp, #28]
 8004d88:	9001      	str	r0, [sp, #4]
 8004d8a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004d8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004d8e:	9003      	str	r0, [sp, #12]
 8004d90:	6a20      	ldr	r0, [r4, #32]
 8004d92:	9004      	str	r0, [sp, #16]
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	f000 80d2 	beq.w	8004f3e <D80_1CH_HTONS_VOL_HP+0x1da>
 8004d9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004d9e:	4869      	ldr	r0, [pc, #420]	; (8004f44 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8004da0:	9205      	str	r2, [sp, #20]
 8004da2:	461c      	mov	r4, r3
 8004da4:	f8de 5000 	ldr.w	r5, [lr]
 8004da8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004dac:	f8de 3008 	ldr.w	r3, [lr, #8]
 8004db0:	f10e 0e0a 	add.w	lr, lr, #10
 8004db4:	ba6d      	rev16	r5, r5
 8004db6:	ba52      	rev16	r2, r2
 8004db8:	fa93 fb93 	rev16.w	fp, r3
 8004dbc:	b2ee      	uxtb	r6, r5
 8004dbe:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004dc2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004dc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004dca:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004dce:	eb04 0a07 	add.w	sl, r4, r7
 8004dd2:	0e2d      	lsrs	r5, r5, #24
 8004dd4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8004dd8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8004ddc:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8004de0:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8004de4:	b2d5      	uxtb	r5, r2
 8004de6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004dea:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004dee:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004df2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004df6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8004dfa:	0e12      	lsrs	r2, r2, #24
 8004dfc:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8004e00:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8004e04:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004e08:	fa5f f48b 	uxtb.w	r4, fp
 8004e0c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004e10:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004e14:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004e18:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8004e1c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8004e20:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004e24:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8004e28:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8004e2c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004e30:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004e34:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004e38:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e3c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004e40:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004e44:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8004e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8004e50:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004e54:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e58:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004e5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004e60:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8004e64:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004e68:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8004e6c:	4d36      	ldr	r5, [pc, #216]	; (8004f48 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8004e6e:	9f01      	ldr	r7, [sp, #4]
 8004e70:	fb23 7505 	smlad	r5, r3, r5, r7
 8004e74:	4f35      	ldr	r7, [pc, #212]	; (8004f4c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8004e76:	fb29 5507 	smlad	r5, r9, r7, r5
 8004e7a:	4f35      	ldr	r7, [pc, #212]	; (8004f50 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8004e7c:	fb28 5507 	smlad	r5, r8, r7, r5
 8004e80:	4f34      	ldr	r7, [pc, #208]	; (8004f54 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8004e82:	fb22 5507 	smlad	r5, r2, r7, r5
 8004e86:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004e8a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8004e8e:	4d32      	ldr	r5, [pc, #200]	; (8004f58 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8004e90:	fb23 cc05 	smlad	ip, r3, r5, ip
 8004e94:	4d31      	ldr	r5, [pc, #196]	; (8004f5c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8004e96:	fb29 cc05 	smlad	ip, r9, r5, ip
 8004e9a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8004e9e:	fb28 c505 	smlad	r5, r8, r5, ip
 8004ea2:	4f2f      	ldr	r7, [pc, #188]	; (8004f60 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8004ea4:	fb22 5507 	smlad	r5, r2, r7, r5
 8004ea8:	4f2e      	ldr	r7, [pc, #184]	; (8004f64 <D80_1CH_HTONS_VOL_HP+0x200>)
 8004eaa:	fb26 5507 	smlad	r5, r6, r7, r5
 8004eae:	f04f 0a01 	mov.w	sl, #1
 8004eb2:	9501      	str	r5, [sp, #4]
 8004eb4:	fb23 fa0a 	smuad	sl, r3, sl
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <D80_1CH_HTONS_VOL_HP+0x204>)
 8004eba:	fb29 a903 	smlad	r9, r9, r3, sl
 8004ebe:	4d2b      	ldr	r5, [pc, #172]	; (8004f6c <D80_1CH_HTONS_VOL_HP+0x208>)
 8004ec0:	fb28 9805 	smlad	r8, r8, r5, r9
 8004ec4:	4d2a      	ldr	r5, [pc, #168]	; (8004f70 <D80_1CH_HTONS_VOL_HP+0x20c>)
 8004ec6:	fb22 8205 	smlad	r2, r2, r5, r8
 8004eca:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <D80_1CH_HTONS_VOL_HP+0x210>)
 8004ecc:	fb26 2c03 	smlad	ip, r6, r3, r2
 8004ed0:	9b00      	ldr	r3, [sp, #0]
 8004ed2:	9d04      	ldr	r5, [sp, #16]
 8004ed4:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8004ed8:	4453      	add	r3, sl
 8004eda:	461a      	mov	r2, r3
 8004edc:	9b02      	ldr	r3, [sp, #8]
 8004ede:	f8cd a008 	str.w	sl, [sp, #8]
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	17d7      	asrs	r7, r2, #31
 8004ee6:	fba2 2305 	umull	r2, r3, r2, r5
 8004eea:	fb05 3307 	mla	r3, r5, r7, r3
 8004eee:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004ef2:	f143 0300 	adc.w	r3, r3, #0
 8004ef6:	9d03      	ldr	r5, [sp, #12]
 8004ef8:	029a      	lsls	r2, r3, #10
 8004efa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004efe:	2700      	movs	r7, #0
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	fbc5 6702 	smlal	r6, r7, r5, r2
 8004f06:	10ba      	asrs	r2, r7, #2
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	f302 020f 	ssat	r2, #16, r2
 8004f0e:	9b05      	ldr	r3, [sp, #20]
 8004f10:	f821 2b02 	strh.w	r2, [r1], #2
 8004f14:	4299      	cmp	r1, r3
 8004f16:	f47f af45 	bne.w	8004da4 <D80_1CH_HTONS_VOL_HP+0x40>
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	9907      	ldr	r1, [sp, #28]
 8004f1e:	9801      	ldr	r0, [sp, #4]
 8004f20:	60c8      	str	r0, [r1, #12]
 8004f22:	9a00      	ldr	r2, [sp, #0]
 8004f24:	f8c1 c008 	str.w	ip, [r1, #8]
 8004f28:	4608      	mov	r0, r1
 8004f2a:	61cb      	str	r3, [r1, #28]
 8004f2c:	610a      	str	r2, [r1, #16]
 8004f2e:	f8c1 a014 	str.w	sl, [r1, #20]
 8004f32:	9906      	ldr	r1, [sp, #24]
 8004f34:	6181      	str	r1, [r0, #24]
 8004f36:	2000      	movs	r0, #0
 8004f38:	b009      	add	sp, #36	; 0x24
 8004f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004f42:	e7eb      	b.n	8004f1c <D80_1CH_HTONS_VOL_HP+0x1b8>
 8004f44:	20000000 	.word	0x20000000
 8004f48:	002d0024 	.word	0x002d0024
 8004f4c:	001c0015 	.word	0x001c0015
 8004f50:	000f000a 	.word	0x000f000a
 8004f54:	00060003 	.word	0x00060003
 8004f58:	0037003f 	.word	0x0037003f
 8004f5c:	00450049 	.word	0x00450049
 8004f60:	00490045 	.word	0x00490045
 8004f64:	003f0037 	.word	0x003f0037
 8004f68:	00030006 	.word	0x00030006
 8004f6c:	000a000f 	.word	0x000a000f
 8004f70:	0015001c 	.word	0x0015001c
 8004f74:	0024002d 	.word	0x0024002d

08004f78 <D128_1CH_HTONS_VOL_HP>:
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	b093      	sub	sp, #76	; 0x4c
 8004f7e:	4614      	mov	r4, r2
 8004f80:	9211      	str	r2, [sp, #68]	; 0x44
 8004f82:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004f84:	6912      	ldr	r2, [r2, #16]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	4622      	mov	r2, r4
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	6964      	ldr	r4, [r4, #20]
 8004f8e:	9406      	str	r4, [sp, #24]
 8004f90:	4614      	mov	r4, r2
 8004f92:	6992      	ldr	r2, [r2, #24]
 8004f94:	9210      	str	r2, [sp, #64]	; 0x40
 8004f96:	68ea      	ldr	r2, [r5, #12]
 8004f98:	9204      	str	r2, [sp, #16]
 8004f9a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004f9c:	69e6      	ldr	r6, [r4, #28]
 8004f9e:	920d      	str	r2, [sp, #52]	; 0x34
 8004fa0:	68a4      	ldr	r4, [r4, #8]
 8004fa2:	6a2a      	ldr	r2, [r5, #32]
 8004fa4:	9405      	str	r4, [sp, #20]
 8004fa6:	920e      	str	r2, [sp, #56]	; 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8145 	beq.w	8005238 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8004fae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fb4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8005294 <D128_1CH_HTONS_VOL_HP+0x31c>
 8004fb8:	9107      	str	r1, [sp, #28]
 8004fba:	f100 0310 	add.w	r3, r0, #16
 8004fbe:	4699      	mov	r9, r3
 8004fc0:	f1a9 0110 	sub.w	r1, r9, #16
 8004fc4:	c90e      	ldmia	r1, {r1, r2, r3}
 8004fc6:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8004fca:	ba49      	rev16	r1, r1
 8004fcc:	ba52      	rev16	r2, r2
 8004fce:	ba5b      	rev16	r3, r3
 8004fd0:	fa90 fa90 	rev16.w	sl, r0
 8004fd4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004fd8:	b2cc      	uxtb	r4, r1
 8004fda:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8004fde:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004fe2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004fe6:	0e09      	lsrs	r1, r1, #24
 8004fe8:	4426      	add	r6, r4
 8004fea:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004fee:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8004ff2:	b2d0      	uxtb	r0, r2
 8004ff4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8004ff8:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8004ffc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005000:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005004:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005008:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800500c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8005010:	0e12      	lsrs	r2, r2, #24
 8005012:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005016:	9701      	str	r7, [sp, #4]
 8005018:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800501c:	4627      	mov	r7, r4
 800501e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8005022:	9702      	str	r7, [sp, #8]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800502a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800502e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8005032:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005036:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800503a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800503e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005042:	0e1b      	lsrs	r3, r3, #24
 8005044:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005048:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800504c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005050:	fa5f f38a 	uxtb.w	r3, sl
 8005054:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005058:	960a      	str	r6, [sp, #40]	; 0x28
 800505a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800505e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8005062:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005066:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800506a:	950b      	str	r5, [sp, #44]	; 0x2c
 800506c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005070:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005074:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005078:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800507c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005080:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005084:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005088:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800508c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8005090:	9308      	str	r3, [sp, #32]
 8005092:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800509c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80050a0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80050a4:	9b02      	ldr	r3, [sp, #8]
 80050a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	9b08      	ldr	r3, [sp, #32]
 80050ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b2:	9308      	str	r3, [sp, #32]
 80050b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80050ba:	950c      	str	r5, [sp, #48]	; 0x30
 80050bc:	461d      	mov	r5, r3
 80050be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80050c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80050c8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80050cc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	9202      	str	r2, [sp, #8]
 80050d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050da:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80050de:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80050e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80050e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80050ea:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80050ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80050f2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80050f6:	9b08      	ldr	r3, [sp, #32]
 80050f8:	9f01      	ldr	r7, [sp, #4]
 80050fa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80050fe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005102:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005106:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800510a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800510e:	46be      	mov	lr, r7
 8005110:	0a96      	lsrs	r6, r2, #10
 8005112:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005116:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800511a:	4f49      	ldr	r7, [pc, #292]	; (8005240 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800511c:	9a04      	ldr	r2, [sp, #16]
 800511e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8005122:	4a48      	ldr	r2, [pc, #288]	; (8005244 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005124:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005128:	4a47      	ldr	r2, [pc, #284]	; (8005248 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800512a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800512e:	4a47      	ldr	r2, [pc, #284]	; (800524c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005130:	fb24 ee02 	smlad	lr, r4, r2, lr
 8005134:	4a46      	ldr	r2, [pc, #280]	; (8005250 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005136:	9f02      	ldr	r7, [sp, #8]
 8005138:	fb27 ee02 	smlad	lr, r7, r2, lr
 800513c:	4a45      	ldr	r2, [pc, #276]	; (8005254 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800513e:	fb20 ee02 	smlad	lr, r0, r2, lr
 8005142:	4a45      	ldr	r2, [pc, #276]	; (8005258 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005144:	fb23 e702 	smlad	r7, r3, r2, lr
 8005148:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800514c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8005150:	9f01      	ldr	r7, [sp, #4]
 8005152:	4a42      	ldr	r2, [pc, #264]	; (800525c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005154:	46bc      	mov	ip, r7
 8005156:	9f05      	ldr	r7, [sp, #20]
 8005158:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800515c:	4a40      	ldr	r2, [pc, #256]	; (8005260 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800515e:	fb2a cc02 	smlad	ip, sl, r2, ip
 8005162:	4f40      	ldr	r7, [pc, #256]	; (8005264 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005164:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005168:	4f3f      	ldr	r7, [pc, #252]	; (8005268 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800516a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800516e:	4f3f      	ldr	r7, [pc, #252]	; (800526c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005170:	9a02      	ldr	r2, [sp, #8]
 8005172:	fb22 cc07 	smlad	ip, r2, r7, ip
 8005176:	4f3e      	ldr	r7, [pc, #248]	; (8005270 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005178:	fb20 cc07 	smlad	ip, r0, r7, ip
 800517c:	4f3d      	ldr	r7, [pc, #244]	; (8005274 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800517e:	fb23 c707 	smlad	r7, r3, r7, ip
 8005182:	f8df c114 	ldr.w	ip, [pc, #276]	; 8005298 <D128_1CH_HTONS_VOL_HP+0x320>
 8005186:	fb25 720c 	smlad	r2, r5, ip, r7
 800518a:	f04f 0b01 	mov.w	fp, #1
 800518e:	9204      	str	r2, [sp, #16]
 8005190:	9f01      	ldr	r7, [sp, #4]
 8005192:	fb27 fb0b 	smuad	fp, r7, fp
 8005196:	4f38      	ldr	r7, [pc, #224]	; (8005278 <D128_1CH_HTONS_VOL_HP+0x300>)
 8005198:	fb2a ba07 	smlad	sl, sl, r7, fp
 800519c:	4f37      	ldr	r7, [pc, #220]	; (800527c <D128_1CH_HTONS_VOL_HP+0x304>)
 800519e:	fb21 aa07 	smlad	sl, r1, r7, sl
 80051a2:	4f37      	ldr	r7, [pc, #220]	; (8005280 <D128_1CH_HTONS_VOL_HP+0x308>)
 80051a4:	fb24 aa07 	smlad	sl, r4, r7, sl
 80051a8:	4f36      	ldr	r7, [pc, #216]	; (8005284 <D128_1CH_HTONS_VOL_HP+0x30c>)
 80051aa:	9a02      	ldr	r2, [sp, #8]
 80051ac:	fb22 a707 	smlad	r7, r2, r7, sl
 80051b0:	4a35      	ldr	r2, [pc, #212]	; (8005288 <D128_1CH_HTONS_VOL_HP+0x310>)
 80051b2:	fb20 7702 	smlad	r7, r0, r2, r7
 80051b6:	4a35      	ldr	r2, [pc, #212]	; (800528c <D128_1CH_HTONS_VOL_HP+0x314>)
 80051b8:	fb23 7702 	smlad	r7, r3, r2, r7
 80051bc:	4b34      	ldr	r3, [pc, #208]	; (8005290 <D128_1CH_HTONS_VOL_HP+0x318>)
 80051be:	fb25 7303 	smlad	r3, r5, r3, r7
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	9b03      	ldr	r3, [sp, #12]
 80051c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80051c8:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80051cc:	4473      	add	r3, lr
 80051ce:	461a      	mov	r2, r3
 80051d0:	9b06      	ldr	r3, [sp, #24]
 80051d2:	f8cd e018 	str.w	lr, [sp, #24]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	17d1      	asrs	r1, r2, #31
 80051da:	fba2 2304 	umull	r2, r3, r2, r4
 80051de:	fb04 3301 	mla	r3, r4, r1, r3
 80051e2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80051e6:	f143 0300 	adc.w	r3, r3, #0
 80051ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051f2:	2100      	movs	r1, #0
 80051f4:	fbc4 0102 	smlal	r0, r1, r4, r2
 80051f8:	108a      	asrs	r2, r1, #2
 80051fa:	9907      	ldr	r1, [sp, #28]
 80051fc:	f302 020f 	ssat	r2, #16, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	f821 2b02 	strh.w	r2, [r1], #2
 8005206:	9303      	str	r3, [sp, #12]
 8005208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800520a:	9107      	str	r1, [sp, #28]
 800520c:	4299      	cmp	r1, r3
 800520e:	f109 0910 	add.w	r9, r9, #16
 8005212:	f47f aed5 	bne.w	8004fc0 <D128_1CH_HTONS_VOL_HP+0x48>
 8005216:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005218:	9905      	ldr	r1, [sp, #20]
 800521a:	6091      	str	r1, [r2, #8]
 800521c:	9904      	ldr	r1, [sp, #16]
 800521e:	60d1      	str	r1, [r2, #12]
 8005220:	4613      	mov	r3, r2
 8005222:	61d6      	str	r6, [r2, #28]
 8005224:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005226:	9a03      	ldr	r2, [sp, #12]
 8005228:	611a      	str	r2, [r3, #16]
 800522a:	2000      	movs	r0, #0
 800522c:	f8c3 e014 	str.w	lr, [r3, #20]
 8005230:	6199      	str	r1, [r3, #24]
 8005232:	b013      	add	sp, #76	; 0x4c
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005238:	f8dd e018 	ldr.w	lr, [sp, #24]
 800523c:	e7eb      	b.n	8005216 <D128_1CH_HTONS_VOL_HP+0x29e>
 800523e:	bf00      	nop
 8005240:	00780069 	.word	0x00780069
 8005244:	005b004e 	.word	0x005b004e
 8005248:	00420037 	.word	0x00420037
 800524c:	002d0024 	.word	0x002d0024
 8005250:	001c0015 	.word	0x001c0015
 8005254:	000f000a 	.word	0x000f000a
 8005258:	00060003 	.word	0x00060003
 800525c:	00880096 	.word	0x00880096
 8005260:	00a200ac 	.word	0x00a200ac
 8005264:	00b400ba 	.word	0x00b400ba
 8005268:	00be00c0 	.word	0x00be00c0
 800526c:	00c000be 	.word	0x00c000be
 8005270:	00ba00b4 	.word	0x00ba00b4
 8005274:	00ac00a2 	.word	0x00ac00a2
 8005278:	00030006 	.word	0x00030006
 800527c:	000a000f 	.word	0x000a000f
 8005280:	0015001c 	.word	0x0015001c
 8005284:	0024002d 	.word	0x0024002d
 8005288:	00370042 	.word	0x00370042
 800528c:	004e005b 	.word	0x004e005b
 8005290:	00690078 	.word	0x00690078
 8005294:	20000000 	.word	0x20000000
 8005298:	00960088 	.word	0x00960088

0800529c <PDM_Filter_Init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	2240      	movs	r2, #64	; 0x40
 80052a0:	4604      	mov	r4, r0
 80052a2:	2100      	movs	r1, #0
 80052a4:	300c      	adds	r0, #12
 80052a6:	f000 fbc5 	bl	8005a34 <memset>
 80052aa:	493b      	ldr	r1, [pc, #236]	; (8005398 <PDM_Filter_Init+0xfc>)
 80052ac:	483b      	ldr	r0, [pc, #236]	; (800539c <PDM_Filter_Init+0x100>)
 80052ae:	f000 f98d 	bl	80055cc <CRC_Lock>
 80052b2:	8822      	ldrh	r2, [r4, #0]
 80052b4:	8963      	ldrh	r3, [r4, #10]
 80052b6:	4938      	ldr	r1, [pc, #224]	; (8005398 <PDM_Filter_Init+0xfc>)
 80052b8:	8925      	ldrh	r5, [r4, #8]
 80052ba:	86a3      	strh	r3, [r4, #52]	; 0x34
 80052bc:	2801      	cmp	r0, #1
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	bf18      	it	ne
 80052c4:	2100      	movne	r1, #0
 80052c6:	2a01      	cmp	r2, #1
 80052c8:	6461      	str	r1, [r4, #68]	; 0x44
 80052ca:	86e5      	strh	r5, [r4, #54]	; 0x36
 80052cc:	61a3      	str	r3, [r4, #24]
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	6163      	str	r3, [r4, #20]
 80052d2:	60e3      	str	r3, [r4, #12]
 80052d4:	6263      	str	r3, [r4, #36]	; 0x24
 80052d6:	61e3      	str	r3, [r4, #28]
 80052d8:	6223      	str	r3, [r4, #32]
 80052da:	6423      	str	r3, [r4, #64]	; 0x40
 80052dc:	d918      	bls.n	8005310 <PDM_Filter_Init+0x74>
 80052de:	2003      	movs	r0, #3
 80052e0:	2302      	movs	r3, #2
 80052e2:	8862      	ldrh	r2, [r4, #2]
 80052e4:	2a01      	cmp	r2, #1
 80052e6:	d91d      	bls.n	8005324 <PDM_Filter_Init+0x88>
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	2300      	movs	r3, #0
 80052ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80052ee:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	bf04      	itt	eq
 80052f6:	6421      	streq	r1, [r4, #64]	; 0x40
 80052f8:	460b      	moveq	r3, r1
 80052fa:	b11a      	cbz	r2, 8005304 <PDM_Filter_Init+0x68>
 80052fc:	f043 0310 	orr.w	r3, r3, #16
 8005300:	6423      	str	r3, [r4, #64]	; 0x40
 8005302:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005304:	2200      	movs	r2, #0
 8005306:	8722      	strh	r2, [r4, #56]	; 0x38
 8005308:	b908      	cbnz	r0, 800530e <PDM_Filter_Init+0x72>
 800530a:	3380      	adds	r3, #128	; 0x80
 800530c:	6423      	str	r3, [r4, #64]	; 0x40
 800530e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005310:	4d23      	ldr	r5, [pc, #140]	; (80053a0 <PDM_Filter_Init+0x104>)
 8005312:	d010      	beq.n	8005336 <PDM_Filter_Init+0x9a>
 8005314:	782a      	ldrb	r2, [r5, #0]
 8005316:	2a01      	cmp	r2, #1
 8005318:	d027      	beq.n	800536a <PDM_Filter_Init+0xce>
 800531a:	8862      	ldrh	r2, [r4, #2]
 800531c:	2a01      	cmp	r2, #1
 800531e:	f04f 0001 	mov.w	r0, #1
 8005322:	d8e1      	bhi.n	80052e8 <PDM_Filter_Init+0x4c>
 8005324:	d001      	beq.n	800532a <PDM_Filter_Init+0x8e>
 8005326:	4618      	mov	r0, r3
 8005328:	e7de      	b.n	80052e8 <PDM_Filter_Init+0x4c>
 800532a:	2220      	movs	r2, #32
 800532c:	4618      	mov	r0, r3
 800532e:	6422      	str	r2, [r4, #64]	; 0x40
 8005330:	4613      	mov	r3, r2
 8005332:	2160      	movs	r1, #96	; 0x60
 8005334:	e7da      	b.n	80052ec <PDM_Filter_Init+0x50>
 8005336:	7829      	ldrb	r1, [r5, #0]
 8005338:	2900      	cmp	r1, #0
 800533a:	d1ee      	bne.n	800531a <PDM_Filter_Init+0x7e>
 800533c:	4919      	ldr	r1, [pc, #100]	; (80053a4 <PDM_Filter_Init+0x108>)
 800533e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80053ac <PDM_Filter_Init+0x110>
 8005342:	4f19      	ldr	r7, [pc, #100]	; (80053a8 <PDM_Filter_Init+0x10c>)
 8005344:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005348:	684a      	ldr	r2, [r1, #4]
 800534a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800534e:	ea02 0007 	and.w	r0, r2, r7
 8005352:	4303      	orrs	r3, r0
 8005354:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005358:	4413      	add	r3, r2
 800535a:	f841 3f04 	str.w	r3, [r1, #4]!
 800535e:	428e      	cmp	r6, r1
 8005360:	d1f2      	bne.n	8005348 <PDM_Filter_Init+0xac>
 8005362:	2001      	movs	r0, #1
 8005364:	7028      	strb	r0, [r5, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	e7bb      	b.n	80052e2 <PDM_Filter_Init+0x46>
 800536a:	490e      	ldr	r1, [pc, #56]	; (80053a4 <PDM_Filter_Init+0x108>)
 800536c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80053ac <PDM_Filter_Init+0x110>
 8005370:	4f0d      	ldr	r7, [pc, #52]	; (80053a8 <PDM_Filter_Init+0x10c>)
 8005372:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005376:	684a      	ldr	r2, [r1, #4]
 8005378:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800537c:	ea02 0007 	and.w	r0, r2, r7
 8005380:	4303      	orrs	r3, r0
 8005382:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005386:	4413      	add	r3, r2
 8005388:	f841 3f04 	str.w	r3, [r1, #4]!
 800538c:	428e      	cmp	r6, r1
 800538e:	d1f2      	bne.n	8005376 <PDM_Filter_Init+0xda>
 8005390:	2300      	movs	r3, #0
 8005392:	702b      	strb	r3, [r5, #0]
 8005394:	e7c1      	b.n	800531a <PDM_Filter_Init+0x7e>
 8005396:	bf00      	nop
 8005398:	b5e8b5cd 	.word	0xb5e8b5cd
 800539c:	f407a5c2 	.word	0xf407a5c2
 80053a0:	20000484 	.word	0x20000484
 80053a4:	1ffffffc 	.word	0x1ffffffc
 80053a8:	000ffc00 	.word	0x000ffc00
 80053ac:	3ff00000 	.word	0x3ff00000

080053b0 <PDM_Filter_setConfig>:
 80053b0:	4b66      	ldr	r3, [pc, #408]	; (800554c <PDM_Filter_setConfig+0x19c>)
 80053b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <PDM_Filter_setConfig+0xc>
 80053b8:	2004      	movs	r0, #4
 80053ba:	4770      	bx	lr
 80053bc:	b530      	push	{r4, r5, lr}
 80053be:	880a      	ldrh	r2, [r1, #0]
 80053c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053c2:	ed2d 8b04 	vpush	{d8-d9}
 80053c6:	4604      	mov	r4, r0
 80053c8:	460d      	mov	r5, r1
 80053ca:	1e51      	subs	r1, r2, #1
 80053cc:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 80053d0:	2906      	cmp	r1, #6
 80053d2:	b083      	sub	sp, #12
 80053d4:	6420      	str	r0, [r4, #64]	; 0x40
 80053d6:	d91a      	bls.n	800540e <PDM_Filter_setConfig+0x5e>
 80053d8:	2008      	movs	r0, #8
 80053da:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80053de:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80053e2:	4299      	cmp	r1, r3
 80053e4:	d07e      	beq.n	80054e4 <PDM_Filter_setConfig+0x134>
 80053e6:	f113 0f0c 	cmn.w	r3, #12
 80053ea:	da2a      	bge.n	8005442 <PDM_Filter_setConfig+0x92>
 80053ec:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80053f0:	3040      	adds	r0, #64	; 0x40
 80053f2:	80ab      	strh	r3, [r5, #4]
 80053f4:	8622      	strh	r2, [r4, #48]	; 0x30
 80053f6:	886b      	ldrh	r3, [r5, #2]
 80053f8:	8663      	strh	r3, [r4, #50]	; 0x32
 80053fa:	b920      	cbnz	r0, 8005406 <PDM_Filter_setConfig+0x56>
 80053fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005402:	6423      	str	r3, [r4, #64]	; 0x40
 8005404:	2000      	movs	r0, #0
 8005406:	b003      	add	sp, #12
 8005408:	ecbd 8b04 	vpop	{d8-d9}
 800540c:	bd30      	pop	{r4, r5, pc}
 800540e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005410:	4291      	cmp	r1, r2
 8005412:	d06c      	beq.n	80054ee <PDM_Filter_setConfig+0x13e>
 8005414:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	4313      	orrs	r3, r2
 800541e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8005422:	6423      	str	r3, [r4, #64]	; 0x40
 8005424:	2970      	cmp	r1, #112	; 0x70
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800542e:	d066      	beq.n	80054fe <PDM_Filter_setConfig+0x14e>
 8005430:	2b06      	cmp	r3, #6
 8005432:	f200 8089 	bhi.w	8005548 <PDM_Filter_setConfig+0x198>
 8005436:	e8df f003 	tbb	[pc, r3]
 800543a:	4f52      	.short	0x4f52
 800543c:	3d43494c 	.word	0x3d43494c
 8005440:	46          	.byte	0x46
 8005441:	00          	.byte	0x00
 8005442:	2b33      	cmp	r3, #51	; 0x33
 8005444:	dc32      	bgt.n	80054ac <PDM_Filter_setConfig+0xfc>
 8005446:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005448:	f002 020f 	and.w	r2, r2, #15
 800544c:	3a01      	subs	r2, #1
 800544e:	2a06      	cmp	r2, #6
 8005450:	d872      	bhi.n	8005538 <PDM_Filter_setConfig+0x188>
 8005452:	493f      	ldr	r1, [pc, #252]	; (8005550 <PDM_Filter_setConfig+0x1a0>)
 8005454:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005458:	ed92 9a00 	vldr	s18, [r2]
 800545c:	ed92 8a07 	vldr	s16, [r2, #28]
 8005460:	9001      	str	r0, [sp, #4]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800546a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800546e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005472:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005476:	f000 fd93 	bl	8005fa0 <powf>
 800547a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8005554 <PDM_Filter_setConfig+0x1a4>
 800547e:	eef0 8a40 	vmov.f32	s17, s0
 8005482:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005486:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800548a:	f000 fd89 	bl	8005fa0 <powf>
 800548e:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005492:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005496:	f000 fde7 	bl	8006068 <roundf>
 800549a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800549e:	88ab      	ldrh	r3, [r5, #4]
 80054a0:	882a      	ldrh	r2, [r5, #0]
 80054a2:	9801      	ldr	r0, [sp, #4]
 80054a4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 80054a8:	8723      	strh	r3, [r4, #56]	; 0x38
 80054aa:	e7a3      	b.n	80053f4 <PDM_Filter_setConfig+0x44>
 80054ac:	2333      	movs	r3, #51	; 0x33
 80054ae:	3040      	adds	r0, #64	; 0x40
 80054b0:	80ab      	strh	r3, [r5, #4]
 80054b2:	e79f      	b.n	80053f4 <PDM_Filter_setConfig+0x44>
 80054b4:	4b28      	ldr	r3, [pc, #160]	; (8005558 <PDM_Filter_setConfig+0x1a8>)
 80054b6:	64a3      	str	r3, [r4, #72]	; 0x48
 80054b8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80054bc:	2000      	movs	r0, #0
 80054be:	e792      	b.n	80053e6 <PDM_Filter_setConfig+0x36>
 80054c0:	4b26      	ldr	r3, [pc, #152]	; (800555c <PDM_Filter_setConfig+0x1ac>)
 80054c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80054c4:	e7f8      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 80054c6:	4b26      	ldr	r3, [pc, #152]	; (8005560 <PDM_Filter_setConfig+0x1b0>)
 80054c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80054ca:	e7f5      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <PDM_Filter_setConfig+0x1b4>)
 80054ce:	64a3      	str	r3, [r4, #72]	; 0x48
 80054d0:	e7f2      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 80054d2:	4b25      	ldr	r3, [pc, #148]	; (8005568 <PDM_Filter_setConfig+0x1b8>)
 80054d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80054d6:	e7ef      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 80054d8:	4b24      	ldr	r3, [pc, #144]	; (800556c <PDM_Filter_setConfig+0x1bc>)
 80054da:	64a3      	str	r3, [r4, #72]	; 0x48
 80054dc:	e7ec      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <PDM_Filter_setConfig+0x1c0>)
 80054e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80054e2:	e7e9      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 80054e4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80054e6:	4291      	cmp	r1, r2
 80054e8:	f47f af7d 	bne.w	80053e6 <PDM_Filter_setConfig+0x36>
 80054ec:	e783      	b.n	80053f6 <PDM_Filter_setConfig+0x46>
 80054ee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80054f2:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d023      	beq.n	8005542 <PDM_Filter_setConfig+0x192>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e773      	b.n	80053e6 <PDM_Filter_setConfig+0x36>
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d822      	bhi.n	8005548 <PDM_Filter_setConfig+0x198>
 8005502:	e8df f003 	tbb	[pc, r3]
 8005506:	1316      	.short	0x1316
 8005508:	070a0d10 	.word	0x070a0d10
 800550c:	04          	.byte	0x04
 800550d:	00          	.byte	0x00
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <PDM_Filter_setConfig+0x1c4>)
 8005510:	64a3      	str	r3, [r4, #72]	; 0x48
 8005512:	e7d1      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 8005514:	4b18      	ldr	r3, [pc, #96]	; (8005578 <PDM_Filter_setConfig+0x1c8>)
 8005516:	64a3      	str	r3, [r4, #72]	; 0x48
 8005518:	e7ce      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <PDM_Filter_setConfig+0x1cc>)
 800551c:	64a3      	str	r3, [r4, #72]	; 0x48
 800551e:	e7cb      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <PDM_Filter_setConfig+0x1d0>)
 8005522:	64a3      	str	r3, [r4, #72]	; 0x48
 8005524:	e7c8      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 8005526:	4b17      	ldr	r3, [pc, #92]	; (8005584 <PDM_Filter_setConfig+0x1d4>)
 8005528:	64a3      	str	r3, [r4, #72]	; 0x48
 800552a:	e7c5      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 800552c:	4b16      	ldr	r3, [pc, #88]	; (8005588 <PDM_Filter_setConfig+0x1d8>)
 800552e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005530:	e7c2      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 8005532:	4b16      	ldr	r3, [pc, #88]	; (800558c <PDM_Filter_setConfig+0x1dc>)
 8005534:	64a3      	str	r3, [r4, #72]	; 0x48
 8005536:	e7bf      	b.n	80054b8 <PDM_Filter_setConfig+0x108>
 8005538:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005590 <PDM_Filter_setConfig+0x1e0>
 800553c:	eeb0 9a48 	vmov.f32	s18, s16
 8005540:	e78e      	b.n	8005460 <PDM_Filter_setConfig+0xb0>
 8005542:	886b      	ldrh	r3, [r5, #2]
 8005544:	8663      	strh	r3, [r4, #50]	; 0x32
 8005546:	e759      	b.n	80053fc <PDM_Filter_setConfig+0x4c>
 8005548:	2000      	movs	r0, #0
 800554a:	e746      	b.n	80053da <PDM_Filter_setConfig+0x2a>
 800554c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005550:	08006794 	.word	0x08006794
 8005554:	42000000 	.word	0x42000000
 8005558:	0800391d 	.word	0x0800391d
 800555c:	080037fd 	.word	0x080037fd
 8005560:	08003aad 	.word	0x08003aad
 8005564:	080042f1 	.word	0x080042f1
 8005568:	08004051 	.word	0x08004051
 800556c:	08003e31 	.word	0x08003e31
 8005570:	08003c45 	.word	0x08003c45
 8005574:	080048fd 	.word	0x080048fd
 8005578:	080047c5 	.word	0x080047c5
 800557c:	080046e1 	.word	0x080046e1
 8005580:	08004f79 	.word	0x08004f79
 8005584:	08004d65 	.word	0x08004d65
 8005588:	08004bad 	.word	0x08004bad
 800558c:	08004a41 	.word	0x08004a41
 8005590:	00000000 	.word	0x00000000

08005594 <PDM_Filter>:
 8005594:	b410      	push	{r4}
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <PDM_Filter+0x34>)
 8005598:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800559a:	429c      	cmp	r4, r3
 800559c:	d003      	beq.n	80055a6 <PDM_Filter+0x12>
 800559e:	2004      	movs	r0, #4
 80055a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80055a8:	05dc      	lsls	r4, r3, #23
 80055aa:	d407      	bmi.n	80055bc <PDM_Filter+0x28>
 80055ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055b0:	bf14      	ite	ne
 80055b2:	2020      	movne	r0, #32
 80055b4:	2030      	moveq	r0, #48	; 0x30
 80055b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80055be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c2:	320c      	adds	r2, #12
 80055c4:	4718      	bx	r3
 80055c6:	bf00      	nop
 80055c8:	b5e8b5cd 	.word	0xb5e8b5cd

080055cc <CRC_Lock>:
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <CRC_Lock+0x60>)
 80055ce:	6813      	ldr	r3, [r2, #0]
 80055d0:	b410      	push	{r4}
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	4c16      	ldr	r4, [pc, #88]	; (8005630 <CRC_Lock+0x64>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	b933      	cbnz	r3, 80055ec <CRC_Lock+0x20>
 80055de:	4b15      	ldr	r3, [pc, #84]	; (8005634 <CRC_Lock+0x68>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80055ea:	d00f      	beq.n	800560c <CRC_Lock+0x40>
 80055ec:	4a12      	ldr	r2, [pc, #72]	; (8005638 <CRC_Lock+0x6c>)
 80055ee:	2301      	movs	r3, #1
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1fc      	bne.n	80055f2 <CRC_Lock+0x26>
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <CRC_Lock+0x70>)
 80055fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055fe:	6018      	str	r0, [r3, #0]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	1a08      	subs	r0, r1, r0
 8005604:	fab0 f080 	clz	r0, r0
 8005608:	0940      	lsrs	r0, r0, #5
 800560a:	4770      	bx	lr
 800560c:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <CRC_Lock+0x74>)
 800560e:	2301      	movs	r3, #1
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1fc      	bne.n	8005612 <CRC_Lock+0x46>
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <CRC_Lock+0x78>)
 800561a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800561e:	6018      	str	r0, [r3, #0]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	1a40      	subs	r0, r0, r1
 8005624:	fab0 f080 	clz	r0, r0
 8005628:	0940      	lsrs	r0, r0, #5
 800562a:	4770      	bx	lr
 800562c:	e0002000 	.word	0xe0002000
 8005630:	e0042000 	.word	0xe0042000
 8005634:	5c001000 	.word	0x5c001000
 8005638:	40023008 	.word	0x40023008
 800563c:	40023000 	.word	0x40023000
 8005640:	58024c08 	.word	0x58024c08
 8005644:	58024c00 	.word	0x58024c00

08005648 <std>:
 8005648:	2300      	movs	r3, #0
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	e9c0 3300 	strd	r3, r3, [r0]
 8005652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005656:	6083      	str	r3, [r0, #8]
 8005658:	8181      	strh	r1, [r0, #12]
 800565a:	6643      	str	r3, [r0, #100]	; 0x64
 800565c:	81c2      	strh	r2, [r0, #14]
 800565e:	6183      	str	r3, [r0, #24]
 8005660:	4619      	mov	r1, r3
 8005662:	2208      	movs	r2, #8
 8005664:	305c      	adds	r0, #92	; 0x5c
 8005666:	f000 f9e5 	bl	8005a34 <memset>
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <std+0x58>)
 800566c:	6263      	str	r3, [r4, #36]	; 0x24
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <std+0x5c>)
 8005670:	62a3      	str	r3, [r4, #40]	; 0x28
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <std+0x60>)
 8005674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <std+0x64>)
 8005678:	6323      	str	r3, [r4, #48]	; 0x30
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <std+0x68>)
 800567c:	6224      	str	r4, [r4, #32]
 800567e:	429c      	cmp	r4, r3
 8005680:	d006      	beq.n	8005690 <std+0x48>
 8005682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005686:	4294      	cmp	r4, r2
 8005688:	d002      	beq.n	8005690 <std+0x48>
 800568a:	33d0      	adds	r3, #208	; 0xd0
 800568c:	429c      	cmp	r4, r3
 800568e:	d105      	bne.n	800569c <std+0x54>
 8005690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f000 ba44 	b.w	8005b24 <__retarget_lock_init_recursive>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	08005885 	.word	0x08005885
 80056a4:	080058a7 	.word	0x080058a7
 80056a8:	080058df 	.word	0x080058df
 80056ac:	08005903 	.word	0x08005903
 80056b0:	200007dc 	.word	0x200007dc

080056b4 <stdio_exit_handler>:
 80056b4:	4a02      	ldr	r2, [pc, #8]	; (80056c0 <stdio_exit_handler+0xc>)
 80056b6:	4903      	ldr	r1, [pc, #12]	; (80056c4 <stdio_exit_handler+0x10>)
 80056b8:	4803      	ldr	r0, [pc, #12]	; (80056c8 <stdio_exit_handler+0x14>)
 80056ba:	f000 b869 	b.w	8005790 <_fwalk_sglue>
 80056be:	bf00      	nop
 80056c0:	2000040c 	.word	0x2000040c
 80056c4:	08005e29 	.word	0x08005e29
 80056c8:	20000418 	.word	0x20000418

080056cc <cleanup_stdio>:
 80056cc:	6841      	ldr	r1, [r0, #4]
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <cleanup_stdio+0x34>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	b510      	push	{r4, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	d001      	beq.n	80056dc <cleanup_stdio+0x10>
 80056d8:	f000 fba6 	bl	8005e28 <_fflush_r>
 80056dc:	68a1      	ldr	r1, [r4, #8]
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <cleanup_stdio+0x38>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	d002      	beq.n	80056ea <cleanup_stdio+0x1e>
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 fb9f 	bl	8005e28 <_fflush_r>
 80056ea:	68e1      	ldr	r1, [r4, #12]
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <cleanup_stdio+0x3c>)
 80056ee:	4299      	cmp	r1, r3
 80056f0:	d004      	beq.n	80056fc <cleanup_stdio+0x30>
 80056f2:	4620      	mov	r0, r4
 80056f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f8:	f000 bb96 	b.w	8005e28 <_fflush_r>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	200007dc 	.word	0x200007dc
 8005704:	20000844 	.word	0x20000844
 8005708:	200008ac 	.word	0x200008ac

0800570c <global_stdio_init.part.0>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <global_stdio_init.part.0+0x30>)
 8005710:	4c0b      	ldr	r4, [pc, #44]	; (8005740 <global_stdio_init.part.0+0x34>)
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <global_stdio_init.part.0+0x38>)
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	4620      	mov	r0, r4
 8005718:	2200      	movs	r2, #0
 800571a:	2104      	movs	r1, #4
 800571c:	f7ff ff94 	bl	8005648 <std>
 8005720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005724:	2201      	movs	r2, #1
 8005726:	2109      	movs	r1, #9
 8005728:	f7ff ff8e 	bl	8005648 <std>
 800572c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005730:	2202      	movs	r2, #2
 8005732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005736:	2112      	movs	r1, #18
 8005738:	f7ff bf86 	b.w	8005648 <std>
 800573c:	20000914 	.word	0x20000914
 8005740:	200007dc 	.word	0x200007dc
 8005744:	080056b5 	.word	0x080056b5

08005748 <__sfp_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sfp_lock_acquire+0x8>)
 800574a:	f000 b9ec 	b.w	8005b26 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	2000091d 	.word	0x2000091d

08005754 <__sfp_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__sfp_lock_release+0x8>)
 8005756:	f000 b9e7 	b.w	8005b28 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	2000091d 	.word	0x2000091d

08005760 <__sinit>:
 8005760:	b510      	push	{r4, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	f7ff fff0 	bl	8005748 <__sfp_lock_acquire>
 8005768:	6a23      	ldr	r3, [r4, #32]
 800576a:	b11b      	cbz	r3, 8005774 <__sinit+0x14>
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	f7ff bff0 	b.w	8005754 <__sfp_lock_release>
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <__sinit+0x28>)
 8005776:	6223      	str	r3, [r4, #32]
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <__sinit+0x2c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f5      	bne.n	800576c <__sinit+0xc>
 8005780:	f7ff ffc4 	bl	800570c <global_stdio_init.part.0>
 8005784:	e7f2      	b.n	800576c <__sinit+0xc>
 8005786:	bf00      	nop
 8005788:	080056cd 	.word	0x080056cd
 800578c:	20000914 	.word	0x20000914

08005790 <_fwalk_sglue>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	4607      	mov	r7, r0
 8005796:	4688      	mov	r8, r1
 8005798:	4614      	mov	r4, r2
 800579a:	2600      	movs	r6, #0
 800579c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a0:	f1b9 0901 	subs.w	r9, r9, #1
 80057a4:	d505      	bpl.n	80057b2 <_fwalk_sglue+0x22>
 80057a6:	6824      	ldr	r4, [r4, #0]
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	d1f7      	bne.n	800579c <_fwalk_sglue+0xc>
 80057ac:	4630      	mov	r0, r6
 80057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d907      	bls.n	80057c8 <_fwalk_sglue+0x38>
 80057b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057bc:	3301      	adds	r3, #1
 80057be:	d003      	beq.n	80057c8 <_fwalk_sglue+0x38>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	47c0      	blx	r8
 80057c6:	4306      	orrs	r6, r0
 80057c8:	3568      	adds	r5, #104	; 0x68
 80057ca:	e7e9      	b.n	80057a0 <_fwalk_sglue+0x10>

080057cc <_puts_r>:
 80057cc:	6a03      	ldr	r3, [r0, #32]
 80057ce:	b570      	push	{r4, r5, r6, lr}
 80057d0:	6884      	ldr	r4, [r0, #8]
 80057d2:	4605      	mov	r5, r0
 80057d4:	460e      	mov	r6, r1
 80057d6:	b90b      	cbnz	r3, 80057dc <_puts_r+0x10>
 80057d8:	f7ff ffc2 	bl	8005760 <__sinit>
 80057dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057de:	07db      	lsls	r3, r3, #31
 80057e0:	d405      	bmi.n	80057ee <_puts_r+0x22>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	0598      	lsls	r0, r3, #22
 80057e6:	d402      	bmi.n	80057ee <_puts_r+0x22>
 80057e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ea:	f000 f99c 	bl	8005b26 <__retarget_lock_acquire_recursive>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	0719      	lsls	r1, r3, #28
 80057f2:	d513      	bpl.n	800581c <_puts_r+0x50>
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	b18b      	cbz	r3, 800581c <_puts_r+0x50>
 80057f8:	3e01      	subs	r6, #1
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005800:	3b01      	subs	r3, #1
 8005802:	60a3      	str	r3, [r4, #8]
 8005804:	b9e9      	cbnz	r1, 8005842 <_puts_r+0x76>
 8005806:	2b00      	cmp	r3, #0
 8005808:	da2e      	bge.n	8005868 <_puts_r+0x9c>
 800580a:	4622      	mov	r2, r4
 800580c:	210a      	movs	r1, #10
 800580e:	4628      	mov	r0, r5
 8005810:	f000 f87b 	bl	800590a <__swbuf_r>
 8005814:	3001      	adds	r0, #1
 8005816:	d007      	beq.n	8005828 <_puts_r+0x5c>
 8005818:	250a      	movs	r5, #10
 800581a:	e007      	b.n	800582c <_puts_r+0x60>
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 f8b0 	bl	8005984 <__swsetup_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0e7      	beq.n	80057f8 <_puts_r+0x2c>
 8005828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800582c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800582e:	07da      	lsls	r2, r3, #31
 8005830:	d405      	bmi.n	800583e <_puts_r+0x72>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	d402      	bmi.n	800583e <_puts_r+0x72>
 8005838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800583a:	f000 f975 	bl	8005b28 <__retarget_lock_release_recursive>
 800583e:	4628      	mov	r0, r5
 8005840:	bd70      	pop	{r4, r5, r6, pc}
 8005842:	2b00      	cmp	r3, #0
 8005844:	da04      	bge.n	8005850 <_puts_r+0x84>
 8005846:	69a2      	ldr	r2, [r4, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	dc06      	bgt.n	800585a <_puts_r+0x8e>
 800584c:	290a      	cmp	r1, #10
 800584e:	d004      	beq.n	800585a <_puts_r+0x8e>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	7019      	strb	r1, [r3, #0]
 8005858:	e7cf      	b.n	80057fa <_puts_r+0x2e>
 800585a:	4622      	mov	r2, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f854 	bl	800590a <__swbuf_r>
 8005862:	3001      	adds	r0, #1
 8005864:	d1c9      	bne.n	80057fa <_puts_r+0x2e>
 8005866:	e7df      	b.n	8005828 <_puts_r+0x5c>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	250a      	movs	r5, #10
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	701d      	strb	r5, [r3, #0]
 8005872:	e7db      	b.n	800582c <_puts_r+0x60>

08005874 <puts>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <puts+0xc>)
 8005876:	4601      	mov	r1, r0
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f7ff bfa7 	b.w	80057cc <_puts_r>
 800587e:	bf00      	nop
 8005880:	20000464 	.word	0x20000464

08005884 <__sread>:
 8005884:	b510      	push	{r4, lr}
 8005886:	460c      	mov	r4, r1
 8005888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588c:	f000 f8fc 	bl	8005a88 <_read_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	bfab      	itete	ge
 8005894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005896:	89a3      	ldrhlt	r3, [r4, #12]
 8005898:	181b      	addge	r3, r3, r0
 800589a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800589e:	bfac      	ite	ge
 80058a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058a2:	81a3      	strhlt	r3, [r4, #12]
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <__swrite>:
 80058a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058aa:	461f      	mov	r7, r3
 80058ac:	898b      	ldrh	r3, [r1, #12]
 80058ae:	05db      	lsls	r3, r3, #23
 80058b0:	4605      	mov	r5, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	4616      	mov	r6, r2
 80058b6:	d505      	bpl.n	80058c4 <__swrite+0x1e>
 80058b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058bc:	2302      	movs	r3, #2
 80058be:	2200      	movs	r2, #0
 80058c0:	f000 f8d0 	bl	8005a64 <_lseek_r>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	4632      	mov	r2, r6
 80058d2:	463b      	mov	r3, r7
 80058d4:	4628      	mov	r0, r5
 80058d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058da:	f000 b8e7 	b.w	8005aac <_write_r>

080058de <__sseek>:
 80058de:	b510      	push	{r4, lr}
 80058e0:	460c      	mov	r4, r1
 80058e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e6:	f000 f8bd 	bl	8005a64 <_lseek_r>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	bf15      	itete	ne
 80058f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80058f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058fa:	81a3      	strheq	r3, [r4, #12]
 80058fc:	bf18      	it	ne
 80058fe:	81a3      	strhne	r3, [r4, #12]
 8005900:	bd10      	pop	{r4, pc}

08005902 <__sclose>:
 8005902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005906:	f000 b89d 	b.w	8005a44 <_close_r>

0800590a <__swbuf_r>:
 800590a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590c:	460e      	mov	r6, r1
 800590e:	4614      	mov	r4, r2
 8005910:	4605      	mov	r5, r0
 8005912:	b118      	cbz	r0, 800591c <__swbuf_r+0x12>
 8005914:	6a03      	ldr	r3, [r0, #32]
 8005916:	b90b      	cbnz	r3, 800591c <__swbuf_r+0x12>
 8005918:	f7ff ff22 	bl	8005760 <__sinit>
 800591c:	69a3      	ldr	r3, [r4, #24]
 800591e:	60a3      	str	r3, [r4, #8]
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	071a      	lsls	r2, r3, #28
 8005924:	d525      	bpl.n	8005972 <__swbuf_r+0x68>
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	b31b      	cbz	r3, 8005972 <__swbuf_r+0x68>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	6922      	ldr	r2, [r4, #16]
 800592e:	1a98      	subs	r0, r3, r2
 8005930:	6963      	ldr	r3, [r4, #20]
 8005932:	b2f6      	uxtb	r6, r6
 8005934:	4283      	cmp	r3, r0
 8005936:	4637      	mov	r7, r6
 8005938:	dc04      	bgt.n	8005944 <__swbuf_r+0x3a>
 800593a:	4621      	mov	r1, r4
 800593c:	4628      	mov	r0, r5
 800593e:	f000 fa73 	bl	8005e28 <_fflush_r>
 8005942:	b9e0      	cbnz	r0, 800597e <__swbuf_r+0x74>
 8005944:	68a3      	ldr	r3, [r4, #8]
 8005946:	3b01      	subs	r3, #1
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	6022      	str	r2, [r4, #0]
 8005950:	701e      	strb	r6, [r3, #0]
 8005952:	6962      	ldr	r2, [r4, #20]
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	429a      	cmp	r2, r3
 8005958:	d004      	beq.n	8005964 <__swbuf_r+0x5a>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	07db      	lsls	r3, r3, #31
 800595e:	d506      	bpl.n	800596e <__swbuf_r+0x64>
 8005960:	2e0a      	cmp	r6, #10
 8005962:	d104      	bne.n	800596e <__swbuf_r+0x64>
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fa5e 	bl	8005e28 <_fflush_r>
 800596c:	b938      	cbnz	r0, 800597e <__swbuf_r+0x74>
 800596e:	4638      	mov	r0, r7
 8005970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	f000 f805 	bl	8005984 <__swsetup_r>
 800597a:	2800      	cmp	r0, #0
 800597c:	d0d5      	beq.n	800592a <__swbuf_r+0x20>
 800597e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005982:	e7f4      	b.n	800596e <__swbuf_r+0x64>

08005984 <__swsetup_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <__swsetup_r+0xac>)
 8005988:	4605      	mov	r5, r0
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	460c      	mov	r4, r1
 800598e:	b118      	cbz	r0, 8005998 <__swsetup_r+0x14>
 8005990:	6a03      	ldr	r3, [r0, #32]
 8005992:	b90b      	cbnz	r3, 8005998 <__swsetup_r+0x14>
 8005994:	f7ff fee4 	bl	8005760 <__sinit>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800599e:	0718      	lsls	r0, r3, #28
 80059a0:	d422      	bmi.n	80059e8 <__swsetup_r+0x64>
 80059a2:	06d9      	lsls	r1, r3, #27
 80059a4:	d407      	bmi.n	80059b6 <__swsetup_r+0x32>
 80059a6:	2309      	movs	r3, #9
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059ae:	81a3      	strh	r3, [r4, #12]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059b4:	e034      	b.n	8005a20 <__swsetup_r+0x9c>
 80059b6:	0758      	lsls	r0, r3, #29
 80059b8:	d512      	bpl.n	80059e0 <__swsetup_r+0x5c>
 80059ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059bc:	b141      	cbz	r1, 80059d0 <__swsetup_r+0x4c>
 80059be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059c2:	4299      	cmp	r1, r3
 80059c4:	d002      	beq.n	80059cc <__swsetup_r+0x48>
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f8b0 	bl	8005b2c <_free_r>
 80059cc:	2300      	movs	r3, #0
 80059ce:	6363      	str	r3, [r4, #52]	; 0x34
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059d6:	81a3      	strh	r3, [r4, #12]
 80059d8:	2300      	movs	r3, #0
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f043 0308 	orr.w	r3, r3, #8
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	b94b      	cbnz	r3, 8005a00 <__swsetup_r+0x7c>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f6:	d003      	beq.n	8005a00 <__swsetup_r+0x7c>
 80059f8:	4621      	mov	r1, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 fa62 	bl	8005ec4 <__smakebuf_r>
 8005a00:	89a0      	ldrh	r0, [r4, #12]
 8005a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a06:	f010 0301 	ands.w	r3, r0, #1
 8005a0a:	d00a      	beq.n	8005a22 <__swsetup_r+0x9e>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60a3      	str	r3, [r4, #8]
 8005a10:	6963      	ldr	r3, [r4, #20]
 8005a12:	425b      	negs	r3, r3
 8005a14:	61a3      	str	r3, [r4, #24]
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	b943      	cbnz	r3, 8005a2c <__swsetup_r+0xa8>
 8005a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a1e:	d1c4      	bne.n	80059aa <__swsetup_r+0x26>
 8005a20:	bd38      	pop	{r3, r4, r5, pc}
 8005a22:	0781      	lsls	r1, r0, #30
 8005a24:	bf58      	it	pl
 8005a26:	6963      	ldrpl	r3, [r4, #20]
 8005a28:	60a3      	str	r3, [r4, #8]
 8005a2a:	e7f4      	b.n	8005a16 <__swsetup_r+0x92>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e7f7      	b.n	8005a20 <__swsetup_r+0x9c>
 8005a30:	20000464 	.word	0x20000464

08005a34 <memset>:
 8005a34:	4402      	add	r2, r0
 8005a36:	4603      	mov	r3, r0
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d100      	bne.n	8005a3e <memset+0xa>
 8005a3c:	4770      	bx	lr
 8005a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a42:	e7f9      	b.n	8005a38 <memset+0x4>

08005a44 <_close_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d06      	ldr	r5, [pc, #24]	; (8005a60 <_close_r+0x1c>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fb f8d7 	bl	8000c02 <_close>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_close_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_close_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20000918 	.word	0x20000918

08005a64 <_lseek_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	; (8005a84 <_lseek_r+0x20>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fb f8ec 	bl	8000c50 <_lseek>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_lseek_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_lseek_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	20000918 	.word	0x20000918

08005a88 <_read_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d07      	ldr	r5, [pc, #28]	; (8005aa8 <_read_r+0x20>)
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	4608      	mov	r0, r1
 8005a90:	4611      	mov	r1, r2
 8005a92:	2200      	movs	r2, #0
 8005a94:	602a      	str	r2, [r5, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f7fb f896 	bl	8000bc8 <_read>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_read_r+0x1e>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_read_r+0x1e>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000918 	.word	0x20000918

08005aac <_write_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	; (8005acc <_write_r+0x20>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fa fec2 	bl	8000844 <_write>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_write_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_write_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000918 	.word	0x20000918

08005ad0 <__errno>:
 8005ad0:	4b01      	ldr	r3, [pc, #4]	; (8005ad8 <__errno+0x8>)
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000464 	.word	0x20000464

08005adc <__libc_init_array>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	4d0d      	ldr	r5, [pc, #52]	; (8005b14 <__libc_init_array+0x38>)
 8005ae0:	4c0d      	ldr	r4, [pc, #52]	; (8005b18 <__libc_init_array+0x3c>)
 8005ae2:	1b64      	subs	r4, r4, r5
 8005ae4:	10a4      	asrs	r4, r4, #2
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	42a6      	cmp	r6, r4
 8005aea:	d109      	bne.n	8005b00 <__libc_init_array+0x24>
 8005aec:	4d0b      	ldr	r5, [pc, #44]	; (8005b1c <__libc_init_array+0x40>)
 8005aee:	4c0c      	ldr	r4, [pc, #48]	; (8005b20 <__libc_init_array+0x44>)
 8005af0:	f000 fe3c 	bl	800676c <_init>
 8005af4:	1b64      	subs	r4, r4, r5
 8005af6:	10a4      	asrs	r4, r4, #2
 8005af8:	2600      	movs	r6, #0
 8005afa:	42a6      	cmp	r6, r4
 8005afc:	d105      	bne.n	8005b0a <__libc_init_array+0x2e>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b04:	4798      	blx	r3
 8005b06:	3601      	adds	r6, #1
 8005b08:	e7ee      	b.n	8005ae8 <__libc_init_array+0xc>
 8005b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0e:	4798      	blx	r3
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7f2      	b.n	8005afa <__libc_init_array+0x1e>
 8005b14:	0800680c 	.word	0x0800680c
 8005b18:	0800680c 	.word	0x0800680c
 8005b1c:	0800680c 	.word	0x0800680c
 8005b20:	08006810 	.word	0x08006810

08005b24 <__retarget_lock_init_recursive>:
 8005b24:	4770      	bx	lr

08005b26 <__retarget_lock_acquire_recursive>:
 8005b26:	4770      	bx	lr

08005b28 <__retarget_lock_release_recursive>:
 8005b28:	4770      	bx	lr
	...

08005b2c <_free_r>:
 8005b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b2e:	2900      	cmp	r1, #0
 8005b30:	d044      	beq.n	8005bbc <_free_r+0x90>
 8005b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b36:	9001      	str	r0, [sp, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b3e:	bfb8      	it	lt
 8005b40:	18e4      	addlt	r4, r4, r3
 8005b42:	f000 f8df 	bl	8005d04 <__malloc_lock>
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <_free_r+0x94>)
 8005b48:	9801      	ldr	r0, [sp, #4]
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b933      	cbnz	r3, 8005b5c <_free_r+0x30>
 8005b4e:	6063      	str	r3, [r4, #4]
 8005b50:	6014      	str	r4, [r2, #0]
 8005b52:	b003      	add	sp, #12
 8005b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b58:	f000 b8da 	b.w	8005d10 <__malloc_unlock>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d908      	bls.n	8005b72 <_free_r+0x46>
 8005b60:	6825      	ldr	r5, [r4, #0]
 8005b62:	1961      	adds	r1, r4, r5
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf01      	itttt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	1949      	addeq	r1, r1, r5
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	e7ed      	b.n	8005b4e <_free_r+0x22>
 8005b72:	461a      	mov	r2, r3
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b10b      	cbz	r3, 8005b7c <_free_r+0x50>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d9fa      	bls.n	8005b72 <_free_r+0x46>
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	1855      	adds	r5, r2, r1
 8005b80:	42a5      	cmp	r5, r4
 8005b82:	d10b      	bne.n	8005b9c <_free_r+0x70>
 8005b84:	6824      	ldr	r4, [r4, #0]
 8005b86:	4421      	add	r1, r4
 8005b88:	1854      	adds	r4, r2, r1
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	d1e0      	bne.n	8005b52 <_free_r+0x26>
 8005b90:	681c      	ldr	r4, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	440c      	add	r4, r1
 8005b98:	6014      	str	r4, [r2, #0]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x26>
 8005b9c:	d902      	bls.n	8005ba4 <_free_r+0x78>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6003      	str	r3, [r0, #0]
 8005ba2:	e7d6      	b.n	8005b52 <_free_r+0x26>
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf04      	itt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	bf04      	itt	eq
 8005bb4:	1949      	addeq	r1, r1, r5
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	6054      	str	r4, [r2, #4]
 8005bba:	e7ca      	b.n	8005b52 <_free_r+0x26>
 8005bbc:	b003      	add	sp, #12
 8005bbe:	bd30      	pop	{r4, r5, pc}
 8005bc0:	20000920 	.word	0x20000920

08005bc4 <sbrk_aligned>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	4e0e      	ldr	r6, [pc, #56]	; (8005c00 <sbrk_aligned+0x3c>)
 8005bc8:	460c      	mov	r4, r1
 8005bca:	6831      	ldr	r1, [r6, #0]
 8005bcc:	4605      	mov	r5, r0
 8005bce:	b911      	cbnz	r1, 8005bd6 <sbrk_aligned+0x12>
 8005bd0:	f000 f9d6 	bl	8005f80 <_sbrk_r>
 8005bd4:	6030      	str	r0, [r6, #0]
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 f9d1 	bl	8005f80 <_sbrk_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d00a      	beq.n	8005bf8 <sbrk_aligned+0x34>
 8005be2:	1cc4      	adds	r4, r0, #3
 8005be4:	f024 0403 	bic.w	r4, r4, #3
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d007      	beq.n	8005bfc <sbrk_aligned+0x38>
 8005bec:	1a21      	subs	r1, r4, r0
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f9c6 	bl	8005f80 <_sbrk_r>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d101      	bne.n	8005bfc <sbrk_aligned+0x38>
 8005bf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	20000924 	.word	0x20000924

08005c04 <_malloc_r>:
 8005c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c08:	1ccd      	adds	r5, r1, #3
 8005c0a:	f025 0503 	bic.w	r5, r5, #3
 8005c0e:	3508      	adds	r5, #8
 8005c10:	2d0c      	cmp	r5, #12
 8005c12:	bf38      	it	cc
 8005c14:	250c      	movcc	r5, #12
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	4607      	mov	r7, r0
 8005c1a:	db01      	blt.n	8005c20 <_malloc_r+0x1c>
 8005c1c:	42a9      	cmp	r1, r5
 8005c1e:	d905      	bls.n	8005c2c <_malloc_r+0x28>
 8005c20:	230c      	movs	r3, #12
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	2600      	movs	r6, #0
 8005c26:	4630      	mov	r0, r6
 8005c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d00 <_malloc_r+0xfc>
 8005c30:	f000 f868 	bl	8005d04 <__malloc_lock>
 8005c34:	f8d8 3000 	ldr.w	r3, [r8]
 8005c38:	461c      	mov	r4, r3
 8005c3a:	bb5c      	cbnz	r4, 8005c94 <_malloc_r+0x90>
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f7ff ffc0 	bl	8005bc4 <sbrk_aligned>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	4604      	mov	r4, r0
 8005c48:	d155      	bne.n	8005cf6 <_malloc_r+0xf2>
 8005c4a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c4e:	4626      	mov	r6, r4
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	d145      	bne.n	8005ce0 <_malloc_r+0xdc>
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	d048      	beq.n	8005cea <_malloc_r+0xe6>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	eb04 0903 	add.w	r9, r4, r3
 8005c62:	f000 f98d 	bl	8005f80 <_sbrk_r>
 8005c66:	4581      	cmp	r9, r0
 8005c68:	d13f      	bne.n	8005cea <_malloc_r+0xe6>
 8005c6a:	6821      	ldr	r1, [r4, #0]
 8005c6c:	1a6d      	subs	r5, r5, r1
 8005c6e:	4629      	mov	r1, r5
 8005c70:	4638      	mov	r0, r7
 8005c72:	f7ff ffa7 	bl	8005bc4 <sbrk_aligned>
 8005c76:	3001      	adds	r0, #1
 8005c78:	d037      	beq.n	8005cea <_malloc_r+0xe6>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	442b      	add	r3, r5
 8005c7e:	6023      	str	r3, [r4, #0]
 8005c80:	f8d8 3000 	ldr.w	r3, [r8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d038      	beq.n	8005cfa <_malloc_r+0xf6>
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	42a2      	cmp	r2, r4
 8005c8c:	d12b      	bne.n	8005ce6 <_malloc_r+0xe2>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	e00f      	b.n	8005cb4 <_malloc_r+0xb0>
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	1b52      	subs	r2, r2, r5
 8005c98:	d41f      	bmi.n	8005cda <_malloc_r+0xd6>
 8005c9a:	2a0b      	cmp	r2, #11
 8005c9c:	d917      	bls.n	8005cce <_malloc_r+0xca>
 8005c9e:	1961      	adds	r1, r4, r5
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	6025      	str	r5, [r4, #0]
 8005ca4:	bf18      	it	ne
 8005ca6:	6059      	strne	r1, [r3, #4]
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	bf08      	it	eq
 8005cac:	f8c8 1000 	streq.w	r1, [r8]
 8005cb0:	5162      	str	r2, [r4, r5]
 8005cb2:	604b      	str	r3, [r1, #4]
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f104 060b 	add.w	r6, r4, #11
 8005cba:	f000 f829 	bl	8005d10 <__malloc_unlock>
 8005cbe:	f026 0607 	bic.w	r6, r6, #7
 8005cc2:	1d23      	adds	r3, r4, #4
 8005cc4:	1af2      	subs	r2, r6, r3
 8005cc6:	d0ae      	beq.n	8005c26 <_malloc_r+0x22>
 8005cc8:	1b9b      	subs	r3, r3, r6
 8005cca:	50a3      	str	r3, [r4, r2]
 8005ccc:	e7ab      	b.n	8005c26 <_malloc_r+0x22>
 8005cce:	42a3      	cmp	r3, r4
 8005cd0:	6862      	ldr	r2, [r4, #4]
 8005cd2:	d1dd      	bne.n	8005c90 <_malloc_r+0x8c>
 8005cd4:	f8c8 2000 	str.w	r2, [r8]
 8005cd8:	e7ec      	b.n	8005cb4 <_malloc_r+0xb0>
 8005cda:	4623      	mov	r3, r4
 8005cdc:	6864      	ldr	r4, [r4, #4]
 8005cde:	e7ac      	b.n	8005c3a <_malloc_r+0x36>
 8005ce0:	4634      	mov	r4, r6
 8005ce2:	6876      	ldr	r6, [r6, #4]
 8005ce4:	e7b4      	b.n	8005c50 <_malloc_r+0x4c>
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	e7cc      	b.n	8005c84 <_malloc_r+0x80>
 8005cea:	230c      	movs	r3, #12
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f000 f80e 	bl	8005d10 <__malloc_unlock>
 8005cf4:	e797      	b.n	8005c26 <_malloc_r+0x22>
 8005cf6:	6025      	str	r5, [r4, #0]
 8005cf8:	e7dc      	b.n	8005cb4 <_malloc_r+0xb0>
 8005cfa:	605b      	str	r3, [r3, #4]
 8005cfc:	deff      	udf	#255	; 0xff
 8005cfe:	bf00      	nop
 8005d00:	20000920 	.word	0x20000920

08005d04 <__malloc_lock>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__malloc_lock+0x8>)
 8005d06:	f7ff bf0e 	b.w	8005b26 <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	2000091c 	.word	0x2000091c

08005d10 <__malloc_unlock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__malloc_unlock+0x8>)
 8005d12:	f7ff bf09 	b.w	8005b28 <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	2000091c 	.word	0x2000091c

08005d1c <__sflush_r>:
 8005d1c:	898a      	ldrh	r2, [r1, #12]
 8005d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	0710      	lsls	r0, r2, #28
 8005d26:	460c      	mov	r4, r1
 8005d28:	d458      	bmi.n	8005ddc <__sflush_r+0xc0>
 8005d2a:	684b      	ldr	r3, [r1, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dc05      	bgt.n	8005d3c <__sflush_r+0x20>
 8005d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dc02      	bgt.n	8005d3c <__sflush_r+0x20>
 8005d36:	2000      	movs	r0, #0
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d0f9      	beq.n	8005d36 <__sflush_r+0x1a>
 8005d42:	2300      	movs	r3, #0
 8005d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d48:	682f      	ldr	r7, [r5, #0]
 8005d4a:	6a21      	ldr	r1, [r4, #32]
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	d032      	beq.n	8005db6 <__sflush_r+0x9a>
 8005d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	075a      	lsls	r2, r3, #29
 8005d56:	d505      	bpl.n	8005d64 <__sflush_r+0x48>
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	1ac0      	subs	r0, r0, r3
 8005d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d5e:	b10b      	cbz	r3, 8005d64 <__sflush_r+0x48>
 8005d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d62:	1ac0      	subs	r0, r0, r3
 8005d64:	2300      	movs	r3, #0
 8005d66:	4602      	mov	r2, r0
 8005d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d6a:	6a21      	ldr	r1, [r4, #32]
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b0      	blx	r6
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	d106      	bne.n	8005d84 <__sflush_r+0x68>
 8005d76:	6829      	ldr	r1, [r5, #0]
 8005d78:	291d      	cmp	r1, #29
 8005d7a:	d82b      	bhi.n	8005dd4 <__sflush_r+0xb8>
 8005d7c:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <__sflush_r+0x108>)
 8005d7e:	410a      	asrs	r2, r1
 8005d80:	07d6      	lsls	r6, r2, #31
 8005d82:	d427      	bmi.n	8005dd4 <__sflush_r+0xb8>
 8005d84:	2200      	movs	r2, #0
 8005d86:	6062      	str	r2, [r4, #4]
 8005d88:	04d9      	lsls	r1, r3, #19
 8005d8a:	6922      	ldr	r2, [r4, #16]
 8005d8c:	6022      	str	r2, [r4, #0]
 8005d8e:	d504      	bpl.n	8005d9a <__sflush_r+0x7e>
 8005d90:	1c42      	adds	r2, r0, #1
 8005d92:	d101      	bne.n	8005d98 <__sflush_r+0x7c>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	b903      	cbnz	r3, 8005d9a <__sflush_r+0x7e>
 8005d98:	6560      	str	r0, [r4, #84]	; 0x54
 8005d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d9c:	602f      	str	r7, [r5, #0]
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	d0c9      	beq.n	8005d36 <__sflush_r+0x1a>
 8005da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005da6:	4299      	cmp	r1, r3
 8005da8:	d002      	beq.n	8005db0 <__sflush_r+0x94>
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7ff febe 	bl	8005b2c <_free_r>
 8005db0:	2000      	movs	r0, #0
 8005db2:	6360      	str	r0, [r4, #52]	; 0x34
 8005db4:	e7c0      	b.n	8005d38 <__sflush_r+0x1c>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b0      	blx	r6
 8005dbc:	1c41      	adds	r1, r0, #1
 8005dbe:	d1c8      	bne.n	8005d52 <__sflush_r+0x36>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0c5      	beq.n	8005d52 <__sflush_r+0x36>
 8005dc6:	2b1d      	cmp	r3, #29
 8005dc8:	d001      	beq.n	8005dce <__sflush_r+0xb2>
 8005dca:	2b16      	cmp	r3, #22
 8005dcc:	d101      	bne.n	8005dd2 <__sflush_r+0xb6>
 8005dce:	602f      	str	r7, [r5, #0]
 8005dd0:	e7b1      	b.n	8005d36 <__sflush_r+0x1a>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	e7ad      	b.n	8005d38 <__sflush_r+0x1c>
 8005ddc:	690f      	ldr	r7, [r1, #16]
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d0a9      	beq.n	8005d36 <__sflush_r+0x1a>
 8005de2:	0793      	lsls	r3, r2, #30
 8005de4:	680e      	ldr	r6, [r1, #0]
 8005de6:	bf08      	it	eq
 8005de8:	694b      	ldreq	r3, [r1, #20]
 8005dea:	600f      	str	r7, [r1, #0]
 8005dec:	bf18      	it	ne
 8005dee:	2300      	movne	r3, #0
 8005df0:	eba6 0807 	sub.w	r8, r6, r7
 8005df4:	608b      	str	r3, [r1, #8]
 8005df6:	f1b8 0f00 	cmp.w	r8, #0
 8005dfa:	dd9c      	ble.n	8005d36 <__sflush_r+0x1a>
 8005dfc:	6a21      	ldr	r1, [r4, #32]
 8005dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e00:	4643      	mov	r3, r8
 8005e02:	463a      	mov	r2, r7
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b0      	blx	r6
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dc06      	bgt.n	8005e1a <__sflush_r+0xfe>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e18:	e78e      	b.n	8005d38 <__sflush_r+0x1c>
 8005e1a:	4407      	add	r7, r0
 8005e1c:	eba8 0800 	sub.w	r8, r8, r0
 8005e20:	e7e9      	b.n	8005df6 <__sflush_r+0xda>
 8005e22:	bf00      	nop
 8005e24:	dfbffffe 	.word	0xdfbffffe

08005e28 <_fflush_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	b913      	cbnz	r3, 8005e38 <_fflush_r+0x10>
 8005e32:	2500      	movs	r5, #0
 8005e34:	4628      	mov	r0, r5
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	b118      	cbz	r0, 8005e42 <_fflush_r+0x1a>
 8005e3a:	6a03      	ldr	r3, [r0, #32]
 8005e3c:	b90b      	cbnz	r3, 8005e42 <_fflush_r+0x1a>
 8005e3e:	f7ff fc8f 	bl	8005760 <__sinit>
 8005e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f3      	beq.n	8005e32 <_fflush_r+0xa>
 8005e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e4c:	07d0      	lsls	r0, r2, #31
 8005e4e:	d404      	bmi.n	8005e5a <_fflush_r+0x32>
 8005e50:	0599      	lsls	r1, r3, #22
 8005e52:	d402      	bmi.n	8005e5a <_fflush_r+0x32>
 8005e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e56:	f7ff fe66 	bl	8005b26 <__retarget_lock_acquire_recursive>
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	f7ff ff5d 	bl	8005d1c <__sflush_r>
 8005e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e64:	07da      	lsls	r2, r3, #31
 8005e66:	4605      	mov	r5, r0
 8005e68:	d4e4      	bmi.n	8005e34 <_fflush_r+0xc>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	059b      	lsls	r3, r3, #22
 8005e6e:	d4e1      	bmi.n	8005e34 <_fflush_r+0xc>
 8005e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e72:	f7ff fe59 	bl	8005b28 <__retarget_lock_release_recursive>
 8005e76:	e7dd      	b.n	8005e34 <_fflush_r+0xc>

08005e78 <__swhatbuf_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	b096      	sub	sp, #88	; 0x58
 8005e84:	4615      	mov	r5, r2
 8005e86:	461e      	mov	r6, r3
 8005e88:	da0d      	bge.n	8005ea6 <__swhatbuf_r+0x2e>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e9a:	2340      	movne	r3, #64	; 0x40
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	6031      	str	r1, [r6, #0]
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	b016      	add	sp, #88	; 0x58
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	466a      	mov	r2, sp
 8005ea8:	f000 f848 	bl	8005f3c <_fstat_r>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dbec      	blt.n	8005e8a <__swhatbuf_r+0x12>
 8005eb0:	9901      	ldr	r1, [sp, #4]
 8005eb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005eb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eba:	4259      	negs	r1, r3
 8005ebc:	4159      	adcs	r1, r3
 8005ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec2:	e7eb      	b.n	8005e9c <__swhatbuf_r+0x24>

08005ec4 <__smakebuf_r>:
 8005ec4:	898b      	ldrh	r3, [r1, #12]
 8005ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec8:	079d      	lsls	r5, r3, #30
 8005eca:	4606      	mov	r6, r0
 8005ecc:	460c      	mov	r4, r1
 8005ece:	d507      	bpl.n	8005ee0 <__smakebuf_r+0x1c>
 8005ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	6163      	str	r3, [r4, #20]
 8005edc:	b002      	add	sp, #8
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	ab01      	add	r3, sp, #4
 8005ee2:	466a      	mov	r2, sp
 8005ee4:	f7ff ffc8 	bl	8005e78 <__swhatbuf_r>
 8005ee8:	9900      	ldr	r1, [sp, #0]
 8005eea:	4605      	mov	r5, r0
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff fe89 	bl	8005c04 <_malloc_r>
 8005ef2:	b948      	cbnz	r0, 8005f08 <__smakebuf_r+0x44>
 8005ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef8:	059a      	lsls	r2, r3, #22
 8005efa:	d4ef      	bmi.n	8005edc <__smakebuf_r+0x18>
 8005efc:	f023 0303 	bic.w	r3, r3, #3
 8005f00:	f043 0302 	orr.w	r3, r3, #2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	e7e3      	b.n	8005ed0 <__smakebuf_r+0xc>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	6163      	str	r3, [r4, #20]
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	6120      	str	r0, [r4, #16]
 8005f1a:	b15b      	cbz	r3, 8005f34 <__smakebuf_r+0x70>
 8005f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f81d 	bl	8005f60 <_isatty_r>
 8005f26:	b128      	cbz	r0, 8005f34 <__smakebuf_r+0x70>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	431d      	orrs	r5, r3
 8005f38:	81a5      	strh	r5, [r4, #12]
 8005f3a:	e7cf      	b.n	8005edc <__smakebuf_r+0x18>

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fa fe66 	bl	8000c1a <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000918 	.word	0x20000918

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	; (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fa fe65 	bl	8000c3a <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000918 	.word	0x20000918

08005f80 <_sbrk_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d06      	ldr	r5, [pc, #24]	; (8005f9c <_sbrk_r+0x1c>)
 8005f84:	2300      	movs	r3, #0
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	f7fa fe6e 	bl	8000c6c <_sbrk>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_sbrk_r+0x1a>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_sbrk_r+0x1a>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	20000918 	.word	0x20000918

08005fa0 <powf>:
 8005fa0:	b508      	push	{r3, lr}
 8005fa2:	ed2d 8b04 	vpush	{d8-d9}
 8005fa6:	eeb0 8a60 	vmov.f32	s16, s1
 8005faa:	eeb0 9a40 	vmov.f32	s18, s0
 8005fae:	f000 f87f 	bl	80060b0 <__ieee754_powf>
 8005fb2:	eeb4 8a48 	vcmp.f32	s16, s16
 8005fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fba:	eef0 8a40 	vmov.f32	s17, s0
 8005fbe:	d63e      	bvs.n	800603e <powf+0x9e>
 8005fc0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc8:	d112      	bne.n	8005ff0 <powf+0x50>
 8005fca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd2:	d039      	beq.n	8006048 <powf+0xa8>
 8005fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd8:	f000 f839 	bl	800604e <finitef>
 8005fdc:	b378      	cbz	r0, 800603e <powf+0x9e>
 8005fde:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe6:	d52a      	bpl.n	800603e <powf+0x9e>
 8005fe8:	f7ff fd72 	bl	8005ad0 <__errno>
 8005fec:	2322      	movs	r3, #34	; 0x22
 8005fee:	e014      	b.n	800601a <powf+0x7a>
 8005ff0:	f000 f82d 	bl	800604e <finitef>
 8005ff4:	b998      	cbnz	r0, 800601e <powf+0x7e>
 8005ff6:	eeb0 0a49 	vmov.f32	s0, s18
 8005ffa:	f000 f828 	bl	800604e <finitef>
 8005ffe:	b170      	cbz	r0, 800601e <powf+0x7e>
 8006000:	eeb0 0a48 	vmov.f32	s0, s16
 8006004:	f000 f823 	bl	800604e <finitef>
 8006008:	b148      	cbz	r0, 800601e <powf+0x7e>
 800600a:	eef4 8a68 	vcmp.f32	s17, s17
 800600e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006012:	d7e9      	bvc.n	8005fe8 <powf+0x48>
 8006014:	f7ff fd5c 	bl	8005ad0 <__errno>
 8006018:	2321      	movs	r3, #33	; 0x21
 800601a:	6003      	str	r3, [r0, #0]
 800601c:	e00f      	b.n	800603e <powf+0x9e>
 800601e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006026:	d10a      	bne.n	800603e <powf+0x9e>
 8006028:	eeb0 0a49 	vmov.f32	s0, s18
 800602c:	f000 f80f 	bl	800604e <finitef>
 8006030:	b128      	cbz	r0, 800603e <powf+0x9e>
 8006032:	eeb0 0a48 	vmov.f32	s0, s16
 8006036:	f000 f80a 	bl	800604e <finitef>
 800603a:	2800      	cmp	r0, #0
 800603c:	d1d4      	bne.n	8005fe8 <powf+0x48>
 800603e:	eeb0 0a68 	vmov.f32	s0, s17
 8006042:	ecbd 8b04 	vpop	{d8-d9}
 8006046:	bd08      	pop	{r3, pc}
 8006048:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800604c:	e7f7      	b.n	800603e <powf+0x9e>

0800604e <finitef>:
 800604e:	b082      	sub	sp, #8
 8006050:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006054:	9801      	ldr	r0, [sp, #4]
 8006056:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800605a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800605e:	bfac      	ite	ge
 8006060:	2000      	movge	r0, #0
 8006062:	2001      	movlt	r0, #1
 8006064:	b002      	add	sp, #8
 8006066:	4770      	bx	lr

08006068 <roundf>:
 8006068:	ee10 0a10 	vmov	r0, s0
 800606c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006070:	3a7f      	subs	r2, #127	; 0x7f
 8006072:	2a16      	cmp	r2, #22
 8006074:	dc15      	bgt.n	80060a2 <roundf+0x3a>
 8006076:	2a00      	cmp	r2, #0
 8006078:	da08      	bge.n	800608c <roundf+0x24>
 800607a:	3201      	adds	r2, #1
 800607c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006080:	d101      	bne.n	8006086 <roundf+0x1e>
 8006082:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006086:	ee00 3a10 	vmov	s0, r3
 800608a:	4770      	bx	lr
 800608c:	4907      	ldr	r1, [pc, #28]	; (80060ac <roundf+0x44>)
 800608e:	4111      	asrs	r1, r2
 8006090:	4208      	tst	r0, r1
 8006092:	d0fa      	beq.n	800608a <roundf+0x22>
 8006094:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006098:	4113      	asrs	r3, r2
 800609a:	4403      	add	r3, r0
 800609c:	ea23 0301 	bic.w	r3, r3, r1
 80060a0:	e7f1      	b.n	8006086 <roundf+0x1e>
 80060a2:	2a80      	cmp	r2, #128	; 0x80
 80060a4:	d1f1      	bne.n	800608a <roundf+0x22>
 80060a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80060aa:	4770      	bx	lr
 80060ac:	007fffff 	.word	0x007fffff

080060b0 <__ieee754_powf>:
 80060b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b4:	ee10 4a90 	vmov	r4, s1
 80060b8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80060bc:	ed2d 8b02 	vpush	{d8}
 80060c0:	ee10 7a10 	vmov	r7, s0
 80060c4:	eeb0 8a40 	vmov.f32	s16, s0
 80060c8:	eef0 8a60 	vmov.f32	s17, s1
 80060cc:	d10c      	bne.n	80060e8 <__ieee754_powf+0x38>
 80060ce:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80060d2:	007f      	lsls	r7, r7, #1
 80060d4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80060d8:	f240 8292 	bls.w	8006600 <__ieee754_powf+0x550>
 80060dc:	ee38 0a28 	vadd.f32	s0, s16, s17
 80060e0:	ecbd 8b02 	vpop	{d8}
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e8:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 80060ec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80060f0:	dcf4      	bgt.n	80060dc <__ieee754_powf+0x2c>
 80060f2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80060f6:	dd08      	ble.n	800610a <__ieee754_powf+0x5a>
 80060f8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80060fc:	d1ee      	bne.n	80060dc <__ieee754_powf+0x2c>
 80060fe:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8006102:	0064      	lsls	r4, r4, #1
 8006104:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006108:	e7e6      	b.n	80060d8 <__ieee754_powf+0x28>
 800610a:	2f00      	cmp	r7, #0
 800610c:	da20      	bge.n	8006150 <__ieee754_powf+0xa0>
 800610e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8006112:	da2d      	bge.n	8006170 <__ieee754_powf+0xc0>
 8006114:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006118:	f2c0 827b 	blt.w	8006612 <__ieee754_powf+0x562>
 800611c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006120:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006124:	fa48 f603 	asr.w	r6, r8, r3
 8006128:	fa06 f303 	lsl.w	r3, r6, r3
 800612c:	4543      	cmp	r3, r8
 800612e:	f040 8270 	bne.w	8006612 <__ieee754_powf+0x562>
 8006132:	f006 0601 	and.w	r6, r6, #1
 8006136:	f1c6 0602 	rsb	r6, r6, #2
 800613a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800613e:	d11f      	bne.n	8006180 <__ieee754_powf+0xd0>
 8006140:	2c00      	cmp	r4, #0
 8006142:	f280 8263 	bge.w	800660c <__ieee754_powf+0x55c>
 8006146:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800614a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800614e:	e7c7      	b.n	80060e0 <__ieee754_powf+0x30>
 8006150:	2600      	movs	r6, #0
 8006152:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8006156:	d1f0      	bne.n	800613a <__ieee754_powf+0x8a>
 8006158:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800615c:	f000 8250 	beq.w	8006600 <__ieee754_powf+0x550>
 8006160:	dd08      	ble.n	8006174 <__ieee754_powf+0xc4>
 8006162:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006468 <__ieee754_powf+0x3b8>
 8006166:	2c00      	cmp	r4, #0
 8006168:	bfa8      	it	ge
 800616a:	eeb0 0a68 	vmovge.f32	s0, s17
 800616e:	e7b7      	b.n	80060e0 <__ieee754_powf+0x30>
 8006170:	2602      	movs	r6, #2
 8006172:	e7ee      	b.n	8006152 <__ieee754_powf+0xa2>
 8006174:	2c00      	cmp	r4, #0
 8006176:	f280 8246 	bge.w	8006606 <__ieee754_powf+0x556>
 800617a:	eeb1 0a68 	vneg.f32	s0, s17
 800617e:	e7af      	b.n	80060e0 <__ieee754_powf+0x30>
 8006180:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006184:	d102      	bne.n	800618c <__ieee754_powf+0xdc>
 8006186:	ee28 0a08 	vmul.f32	s0, s16, s16
 800618a:	e7a9      	b.n	80060e0 <__ieee754_powf+0x30>
 800618c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006190:	eeb0 0a48 	vmov.f32	s0, s16
 8006194:	d107      	bne.n	80061a6 <__ieee754_powf+0xf6>
 8006196:	2f00      	cmp	r7, #0
 8006198:	db05      	blt.n	80061a6 <__ieee754_powf+0xf6>
 800619a:	ecbd 8b02 	vpop	{d8}
 800619e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	f000 badf 	b.w	8006764 <__ieee754_sqrtf>
 80061a6:	f000 fa4d 	bl	8006644 <fabsf>
 80061aa:	b125      	cbz	r5, 80061b6 <__ieee754_powf+0x106>
 80061ac:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 80061b0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80061b4:	d115      	bne.n	80061e2 <__ieee754_powf+0x132>
 80061b6:	2c00      	cmp	r4, #0
 80061b8:	bfbc      	itt	lt
 80061ba:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80061be:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80061c2:	2f00      	cmp	r7, #0
 80061c4:	da8c      	bge.n	80060e0 <__ieee754_powf+0x30>
 80061c6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80061ca:	4335      	orrs	r5, r6
 80061cc:	d104      	bne.n	80061d8 <__ieee754_powf+0x128>
 80061ce:	ee70 7a40 	vsub.f32	s15, s0, s0
 80061d2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80061d6:	e783      	b.n	80060e0 <__ieee754_powf+0x30>
 80061d8:	2e01      	cmp	r6, #1
 80061da:	d181      	bne.n	80060e0 <__ieee754_powf+0x30>
 80061dc:	eeb1 0a40 	vneg.f32	s0, s0
 80061e0:	e77e      	b.n	80060e0 <__ieee754_powf+0x30>
 80061e2:	0ff8      	lsrs	r0, r7, #31
 80061e4:	3801      	subs	r0, #1
 80061e6:	ea56 0300 	orrs.w	r3, r6, r0
 80061ea:	d104      	bne.n	80061f6 <__ieee754_powf+0x146>
 80061ec:	ee38 8a48 	vsub.f32	s16, s16, s16
 80061f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80061f4:	e774      	b.n	80060e0 <__ieee754_powf+0x30>
 80061f6:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80061fa:	dd73      	ble.n	80062e4 <__ieee754_powf+0x234>
 80061fc:	4b9b      	ldr	r3, [pc, #620]	; (800646c <__ieee754_powf+0x3bc>)
 80061fe:	429d      	cmp	r5, r3
 8006200:	dc08      	bgt.n	8006214 <__ieee754_powf+0x164>
 8006202:	2c00      	cmp	r4, #0
 8006204:	da0b      	bge.n	800621e <__ieee754_powf+0x16e>
 8006206:	2000      	movs	r0, #0
 8006208:	ecbd 8b02 	vpop	{d8}
 800620c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	f000 baa2 	b.w	8006758 <__math_oflowf>
 8006214:	4b96      	ldr	r3, [pc, #600]	; (8006470 <__ieee754_powf+0x3c0>)
 8006216:	429d      	cmp	r5, r3
 8006218:	dd08      	ble.n	800622c <__ieee754_powf+0x17c>
 800621a:	2c00      	cmp	r4, #0
 800621c:	dcf3      	bgt.n	8006206 <__ieee754_powf+0x156>
 800621e:	2000      	movs	r0, #0
 8006220:	ecbd 8b02 	vpop	{d8}
 8006224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	f000 ba90 	b.w	800674c <__math_uflowf>
 800622c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006230:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006234:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8006474 <__ieee754_powf+0x3c4>
 8006238:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800623c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006240:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006244:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006248:	ee20 7a00 	vmul.f32	s14, s0, s0
 800624c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006250:	eddf 7a89 	vldr	s15, [pc, #548]	; 8006478 <__ieee754_powf+0x3c8>
 8006254:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006258:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800647c <__ieee754_powf+0x3cc>
 800625c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006260:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8006480 <__ieee754_powf+0x3d0>
 8006264:	eef0 6a67 	vmov.f32	s13, s15
 8006268:	eee0 6a07 	vfma.f32	s13, s0, s14
 800626c:	ee16 3a90 	vmov	r3, s13
 8006270:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006274:	f023 030f 	bic.w	r3, r3, #15
 8006278:	ee06 3a90 	vmov	s13, r3
 800627c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8006280:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006284:	3e01      	subs	r6, #1
 8006286:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800628a:	4306      	orrs	r6, r0
 800628c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006290:	f024 040f 	bic.w	r4, r4, #15
 8006294:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006298:	bf08      	it	eq
 800629a:	eeb0 8a47 	vmoveq.f32	s16, s14
 800629e:	ee07 4a10 	vmov	s14, r4
 80062a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80062a6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eee7 0a27 	vfma.f32	s1, s14, s15
 80062b2:	ee07 4a10 	vmov	s14, r4
 80062b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ba:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80062be:	ee17 1a10 	vmov	r1, s14
 80062c2:	2900      	cmp	r1, #0
 80062c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80062c8:	f340 817c 	ble.w	80065c4 <__ieee754_powf+0x514>
 80062cc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80062d0:	f340 80f8 	ble.w	80064c4 <__ieee754_powf+0x414>
 80062d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80062d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062dc:	bf4c      	ite	mi
 80062de:	2001      	movmi	r0, #1
 80062e0:	2000      	movpl	r0, #0
 80062e2:	e791      	b.n	8006208 <__ieee754_powf+0x158>
 80062e4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80062e8:	bf01      	itttt	eq
 80062ea:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8006484 <__ieee754_powf+0x3d4>
 80062ee:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80062f2:	f06f 0317 	mvneq.w	r3, #23
 80062f6:	ee17 5a90 	vmoveq	r5, s15
 80062fa:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80062fe:	bf18      	it	ne
 8006300:	2300      	movne	r3, #0
 8006302:	3a7f      	subs	r2, #127	; 0x7f
 8006304:	441a      	add	r2, r3
 8006306:	4b60      	ldr	r3, [pc, #384]	; (8006488 <__ieee754_powf+0x3d8>)
 8006308:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800630c:	429d      	cmp	r5, r3
 800630e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8006312:	dd06      	ble.n	8006322 <__ieee754_powf+0x272>
 8006314:	4b5d      	ldr	r3, [pc, #372]	; (800648c <__ieee754_powf+0x3dc>)
 8006316:	429d      	cmp	r5, r3
 8006318:	f340 80a4 	ble.w	8006464 <__ieee754_powf+0x3b4>
 800631c:	3201      	adds	r2, #1
 800631e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006322:	2500      	movs	r5, #0
 8006324:	4b5a      	ldr	r3, [pc, #360]	; (8006490 <__ieee754_powf+0x3e0>)
 8006326:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800632a:	ee07 1a10 	vmov	s14, r1
 800632e:	edd3 5a00 	vldr	s11, [r3]
 8006332:	4b58      	ldr	r3, [pc, #352]	; (8006494 <__ieee754_powf+0x3e4>)
 8006334:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006340:	1049      	asrs	r1, r1, #1
 8006342:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006346:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800634a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800634e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8006352:	ee07 1a90 	vmov	s15, r1
 8006356:	ee26 5a24 	vmul.f32	s10, s12, s9
 800635a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800635e:	ee15 7a10 	vmov	r7, s10
 8006362:	401f      	ands	r7, r3
 8006364:	ee06 7a90 	vmov	s13, r7
 8006368:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800636c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006370:	ee65 7a05 	vmul.f32	s15, s10, s10
 8006374:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006378:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006498 <__ieee754_powf+0x3e8>
 800637c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800649c <__ieee754_powf+0x3ec>
 8006380:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006384:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80064a0 <__ieee754_powf+0x3f0>
 8006388:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800638c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8006474 <__ieee754_powf+0x3c4>
 8006390:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006394:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80064a4 <__ieee754_powf+0x3f4>
 8006398:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800639c:	eddf 5a42 	vldr	s11, [pc, #264]	; 80064a8 <__ieee754_powf+0x3f8>
 80063a0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80063a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80063a8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80063ac:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80063b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80063b4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80063b8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80063bc:	eef0 5a67 	vmov.f32	s11, s15
 80063c0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80063c4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80063c8:	ee15 1a90 	vmov	r1, s11
 80063cc:	4019      	ands	r1, r3
 80063ce:	ee05 1a90 	vmov	s11, r1
 80063d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80063d6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80063da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063de:	ee67 7a85 	vmul.f32	s15, s15, s10
 80063e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80063e6:	eeb0 6a67 	vmov.f32	s12, s15
 80063ea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80063ee:	ee16 1a10 	vmov	r1, s12
 80063f2:	4019      	ands	r1, r3
 80063f4:	ee07 1a10 	vmov	s14, r1
 80063f8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80063fc:	ee06 1a10 	vmov	s12, r1
 8006400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006404:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80064ac <__ieee754_powf+0x3fc>
 8006408:	4929      	ldr	r1, [pc, #164]	; (80064b0 <__ieee754_powf+0x400>)
 800640a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80064b4 <__ieee754_powf+0x404>
 800640e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006412:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80064b8 <__ieee754_powf+0x408>
 8006416:	eee6 7a07 	vfma.f32	s15, s12, s14
 800641a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800641e:	ed91 7a00 	vldr	s14, [r1]
 8006422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006426:	ee07 2a10 	vmov	s14, r2
 800642a:	eef0 6a67 	vmov.f32	s13, s15
 800642e:	4a23      	ldr	r2, [pc, #140]	; (80064bc <__ieee754_powf+0x40c>)
 8006430:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006434:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006438:	ed92 5a00 	vldr	s10, [r2]
 800643c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006440:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006444:	ee76 6a87 	vadd.f32	s13, s13, s14
 8006448:	ee16 2a90 	vmov	r2, s13
 800644c:	4013      	ands	r3, r2
 800644e:	ee06 3a90 	vmov	s13, r3
 8006452:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006456:	ee37 7a45 	vsub.f32	s14, s14, s10
 800645a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800645e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006462:	e70f      	b.n	8006284 <__ieee754_powf+0x1d4>
 8006464:	2501      	movs	r5, #1
 8006466:	e75d      	b.n	8006324 <__ieee754_powf+0x274>
 8006468:	00000000 	.word	0x00000000
 800646c:	3f7ffff3 	.word	0x3f7ffff3
 8006470:	3f800007 	.word	0x3f800007
 8006474:	3eaaaaab 	.word	0x3eaaaaab
 8006478:	3fb8aa3b 	.word	0x3fb8aa3b
 800647c:	36eca570 	.word	0x36eca570
 8006480:	3fb8aa00 	.word	0x3fb8aa00
 8006484:	4b800000 	.word	0x4b800000
 8006488:	001cc471 	.word	0x001cc471
 800648c:	005db3d6 	.word	0x005db3d6
 8006490:	080067ec 	.word	0x080067ec
 8006494:	fffff000 	.word	0xfffff000
 8006498:	3e6c3255 	.word	0x3e6c3255
 800649c:	3e53f142 	.word	0x3e53f142
 80064a0:	3e8ba305 	.word	0x3e8ba305
 80064a4:	3edb6db7 	.word	0x3edb6db7
 80064a8:	3f19999a 	.word	0x3f19999a
 80064ac:	3f76384f 	.word	0x3f76384f
 80064b0:	080067fc 	.word	0x080067fc
 80064b4:	3f763800 	.word	0x3f763800
 80064b8:	369dc3a0 	.word	0x369dc3a0
 80064bc:	080067f4 	.word	0x080067f4
 80064c0:	3338aa3c 	.word	0x3338aa3c
 80064c4:	f040 8093 	bne.w	80065ee <__ieee754_powf+0x53e>
 80064c8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80064c0 <__ieee754_powf+0x410>
 80064cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064d0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80064d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	f73f aefa 	bgt.w	80062d4 <__ieee754_powf+0x224>
 80064e0:	15db      	asrs	r3, r3, #23
 80064e2:	3b7e      	subs	r3, #126	; 0x7e
 80064e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80064e8:	4118      	asrs	r0, r3
 80064ea:	4408      	add	r0, r1
 80064ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80064f0:	4a49      	ldr	r2, [pc, #292]	; (8006618 <__ieee754_powf+0x568>)
 80064f2:	3b7f      	subs	r3, #127	; 0x7f
 80064f4:	411a      	asrs	r2, r3
 80064f6:	4002      	ands	r2, r0
 80064f8:	ee07 2a10 	vmov	s14, r2
 80064fc:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006504:	f1c3 0317 	rsb	r3, r3, #23
 8006508:	4118      	asrs	r0, r3
 800650a:	2900      	cmp	r1, #0
 800650c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006510:	bfb8      	it	lt
 8006512:	4240      	neglt	r0, r0
 8006514:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006518:	eddf 6a40 	vldr	s13, [pc, #256]	; 800661c <__ieee754_powf+0x56c>
 800651c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006620 <__ieee754_powf+0x570>
 8006520:	ee17 3a10 	vmov	r3, s14
 8006524:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006528:	f023 030f 	bic.w	r3, r3, #15
 800652c:	ee07 3a10 	vmov	s14, r3
 8006530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006534:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006538:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800653c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006624 <__ieee754_powf+0x574>
 8006540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006544:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006548:	eef0 6a67 	vmov.f32	s13, s15
 800654c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006550:	eef0 5a66 	vmov.f32	s11, s13
 8006554:	eee7 5a46 	vfms.f32	s11, s14, s12
 8006558:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800655c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006560:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006628 <__ieee754_powf+0x578>
 8006564:	eddf 5a31 	vldr	s11, [pc, #196]	; 800662c <__ieee754_powf+0x57c>
 8006568:	eea7 6a25 	vfma.f32	s12, s14, s11
 800656c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8006630 <__ieee754_powf+0x580>
 8006570:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006574:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006634 <__ieee754_powf+0x584>
 8006578:	eea5 6a87 	vfma.f32	s12, s11, s14
 800657c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006638 <__ieee754_powf+0x588>
 8006580:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006584:	eeb0 6a66 	vmov.f32	s12, s13
 8006588:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800658c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006590:	ee66 5a86 	vmul.f32	s11, s13, s12
 8006594:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006598:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800659c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80065a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80065ac:	ee10 3a10 	vmov	r3, s0
 80065b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80065b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065b8:	da1f      	bge.n	80065fa <__ieee754_powf+0x54a>
 80065ba:	f000 f84b 	bl	8006654 <scalbnf>
 80065be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80065c2:	e58d      	b.n	80060e0 <__ieee754_powf+0x30>
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <__ieee754_powf+0x58c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	dd07      	ble.n	80065da <__ieee754_powf+0x52a>
 80065ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80065ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d2:	bf4c      	ite	mi
 80065d4:	2001      	movmi	r0, #1
 80065d6:	2000      	movpl	r0, #0
 80065d8:	e622      	b.n	8006220 <__ieee754_powf+0x170>
 80065da:	d108      	bne.n	80065ee <__ieee754_powf+0x53e>
 80065dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065e0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	f6ff af7a 	blt.w	80064e0 <__ieee754_powf+0x430>
 80065ec:	e7ed      	b.n	80065ca <__ieee754_powf+0x51a>
 80065ee:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80065f2:	f73f af75 	bgt.w	80064e0 <__ieee754_powf+0x430>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e78c      	b.n	8006514 <__ieee754_powf+0x464>
 80065fa:	ee00 3a10 	vmov	s0, r3
 80065fe:	e7de      	b.n	80065be <__ieee754_powf+0x50e>
 8006600:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006604:	e56c      	b.n	80060e0 <__ieee754_powf+0x30>
 8006606:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006640 <__ieee754_powf+0x590>
 800660a:	e569      	b.n	80060e0 <__ieee754_powf+0x30>
 800660c:	eeb0 0a48 	vmov.f32	s0, s16
 8006610:	e566      	b.n	80060e0 <__ieee754_powf+0x30>
 8006612:	2600      	movs	r6, #0
 8006614:	e591      	b.n	800613a <__ieee754_powf+0x8a>
 8006616:	bf00      	nop
 8006618:	ff800000 	.word	0xff800000
 800661c:	3f317218 	.word	0x3f317218
 8006620:	3f317200 	.word	0x3f317200
 8006624:	35bfbe8c 	.word	0x35bfbe8c
 8006628:	b5ddea0e 	.word	0xb5ddea0e
 800662c:	3331bb4c 	.word	0x3331bb4c
 8006630:	388ab355 	.word	0x388ab355
 8006634:	bb360b61 	.word	0xbb360b61
 8006638:	3e2aaaab 	.word	0x3e2aaaab
 800663c:	43160000 	.word	0x43160000
 8006640:	00000000 	.word	0x00000000

08006644 <fabsf>:
 8006644:	ee10 3a10 	vmov	r3, s0
 8006648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800664c:	ee00 3a10 	vmov	s0, r3
 8006650:	4770      	bx	lr
	...

08006654 <scalbnf>:
 8006654:	ee10 3a10 	vmov	r3, s0
 8006658:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800665c:	d02b      	beq.n	80066b6 <scalbnf+0x62>
 800665e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006662:	d302      	bcc.n	800666a <scalbnf+0x16>
 8006664:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006668:	4770      	bx	lr
 800666a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800666e:	d123      	bne.n	80066b8 <scalbnf+0x64>
 8006670:	4b24      	ldr	r3, [pc, #144]	; (8006704 <scalbnf+0xb0>)
 8006672:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006708 <scalbnf+0xb4>
 8006676:	4298      	cmp	r0, r3
 8006678:	ee20 0a27 	vmul.f32	s0, s0, s15
 800667c:	db17      	blt.n	80066ae <scalbnf+0x5a>
 800667e:	ee10 3a10 	vmov	r3, s0
 8006682:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006686:	3a19      	subs	r2, #25
 8006688:	f24c 3150 	movw	r1, #50000	; 0xc350
 800668c:	4288      	cmp	r0, r1
 800668e:	dd15      	ble.n	80066bc <scalbnf+0x68>
 8006690:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800670c <scalbnf+0xb8>
 8006694:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006710 <scalbnf+0xbc>
 8006698:	ee10 3a10 	vmov	r3, s0
 800669c:	eeb0 7a67 	vmov.f32	s14, s15
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfb8      	it	lt
 80066a4:	eef0 7a66 	vmovlt.f32	s15, s13
 80066a8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80066ac:	4770      	bx	lr
 80066ae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006714 <scalbnf+0xc0>
 80066b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80066b6:	4770      	bx	lr
 80066b8:	0dd2      	lsrs	r2, r2, #23
 80066ba:	e7e5      	b.n	8006688 <scalbnf+0x34>
 80066bc:	4410      	add	r0, r2
 80066be:	28fe      	cmp	r0, #254	; 0xfe
 80066c0:	dce6      	bgt.n	8006690 <scalbnf+0x3c>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	dd06      	ble.n	80066d4 <scalbnf+0x80>
 80066c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80066ce:	ee00 3a10 	vmov	s0, r3
 80066d2:	4770      	bx	lr
 80066d4:	f110 0f16 	cmn.w	r0, #22
 80066d8:	da09      	bge.n	80066ee <scalbnf+0x9a>
 80066da:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006714 <scalbnf+0xc0>
 80066de:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006718 <scalbnf+0xc4>
 80066e2:	ee10 3a10 	vmov	r3, s0
 80066e6:	eeb0 7a67 	vmov.f32	s14, s15
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	e7d9      	b.n	80066a2 <scalbnf+0x4e>
 80066ee:	3019      	adds	r0, #25
 80066f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066f4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80066f8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800671c <scalbnf+0xc8>
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	e7d7      	b.n	80066b2 <scalbnf+0x5e>
 8006702:	bf00      	nop
 8006704:	ffff3cb0 	.word	0xffff3cb0
 8006708:	4c000000 	.word	0x4c000000
 800670c:	7149f2ca 	.word	0x7149f2ca
 8006710:	f149f2ca 	.word	0xf149f2ca
 8006714:	0da24260 	.word	0x0da24260
 8006718:	8da24260 	.word	0x8da24260
 800671c:	33000000 	.word	0x33000000

08006720 <with_errnof>:
 8006720:	b513      	push	{r0, r1, r4, lr}
 8006722:	4604      	mov	r4, r0
 8006724:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006728:	f7ff f9d2 	bl	8005ad0 <__errno>
 800672c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006730:	6004      	str	r4, [r0, #0]
 8006732:	b002      	add	sp, #8
 8006734:	bd10      	pop	{r4, pc}

08006736 <xflowf>:
 8006736:	b130      	cbz	r0, 8006746 <xflowf+0x10>
 8006738:	eef1 7a40 	vneg.f32	s15, s0
 800673c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006740:	2022      	movs	r0, #34	; 0x22
 8006742:	f7ff bfed 	b.w	8006720 <with_errnof>
 8006746:	eef0 7a40 	vmov.f32	s15, s0
 800674a:	e7f7      	b.n	800673c <xflowf+0x6>

0800674c <__math_uflowf>:
 800674c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006754 <__math_uflowf+0x8>
 8006750:	f7ff bff1 	b.w	8006736 <xflowf>
 8006754:	10000000 	.word	0x10000000

08006758 <__math_oflowf>:
 8006758:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006760 <__math_oflowf+0x8>
 800675c:	f7ff bfeb 	b.w	8006736 <xflowf>
 8006760:	70000000 	.word	0x70000000

08006764 <__ieee754_sqrtf>:
 8006764:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006768:	4770      	bx	lr
	...

0800676c <_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr

08006778 <_fini>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr
